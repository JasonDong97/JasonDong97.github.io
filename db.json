{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":0},{"_id":"source/img/image.png","path":"img/image.png","modified":0,"renderable":0},{"_id":"source/img/default_cover/geomeric1.jpg","path":"img/default_cover/geomeric1.jpg","modified":0,"renderable":0},{"_id":"source/img/default_cover/geomeric10.png","path":"img/default_cover/geomeric10.png","modified":0,"renderable":0},{"_id":"source/img/default_cover/geomeric3.png","path":"img/default_cover/geomeric3.png","modified":0,"renderable":0},{"_id":"source/img/default_cover/geomeric2.png","path":"img/default_cover/geomeric2.png","modified":0,"renderable":0},{"_id":"source/img/default_cover/geomeric4.jpg","path":"img/default_cover/geomeric4.jpg","modified":0,"renderable":0},{"_id":"source/img/default_cover/geomeric5.png","path":"img/default_cover/geomeric5.png","modified":0,"renderable":0},{"_id":"source/img/default_cover/geomeric6.png","path":"img/default_cover/geomeric6.png","modified":0,"renderable":0},{"_id":"source/img/default_cover/geomeric7.jpg","path":"img/default_cover/geomeric7.jpg","modified":0,"renderable":0},{"_id":"source/img/default_cover/geomeric8.png","path":"img/default_cover/geomeric8.png","modified":0,"renderable":0},{"_id":"source/img/default_cover/geomeric9.png","path":"img/default_cover/geomeric9.png","modified":0,"renderable":0},{"_id":"source/img/posts/java/interview/1.png","path":"img/posts/java/interview/1.png","modified":0,"renderable":0},{"_id":"source/img/posts/java/interview/10.png","path":"img/posts/java/interview/10.png","modified":0,"renderable":0},{"_id":"source/img/posts/java/interview/2.png","path":"img/posts/java/interview/2.png","modified":0,"renderable":0},{"_id":"source/img/posts/java/interview/4.png","path":"img/posts/java/interview/4.png","modified":0,"renderable":0},{"_id":"source/img/posts/java/interview/5.png","path":"img/posts/java/interview/5.png","modified":0,"renderable":0},{"_id":"source/img/posts/java/interview/3.png","path":"img/posts/java/interview/3.png","modified":0,"renderable":0},{"_id":"source/img/posts/java/interview/6.png","path":"img/posts/java/interview/6.png","modified":0,"renderable":0},{"_id":"source/img/posts/java/interview/7.png","path":"img/posts/java/interview/7.png","modified":0,"renderable":0},{"_id":"source/img/posts/java/interview/8.png","path":"img/posts/java/interview/8.png","modified":0,"renderable":0},{"_id":"source/img/posts/java/interview/9.png","path":"img/posts/java/interview/9.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_data/link.yml","hash":"bd3be0627c327f2cb2f02a2682f6c1d164525558","modified":1758693608729},{"_id":"source/categories/index.md","hash":"e2324bf4dd0f7d710ad2716fcf7c21798424da17","modified":1758695123745},{"_id":"source/link/index.md","hash":"651e1b8a041e1bd292af33358d669d37a99f17cf","modified":1758693608782},{"_id":"source/img/image.png","hash":"7705d4388668f460dcedbdb137dd8865953f4cd0","modified":1758693608776},{"_id":"source/img/favicon.png","hash":"0a89c027b57958499837f186dea4ec9e8e790213","modified":1758693608775},{"_id":"source/self/Kimbiedark.css","hash":"99b997bf64e3ab437253a45cbda32cd45bd7717c","modified":1758693608783},{"_id":"source/tags/index.md","hash":"033bc310687cabe98d4403ec9f8bf7b8c8202d3b","modified":1758695138833},{"_id":"source/_posts/ceph/Ceph 安装记录.md","hash":"6434cce1ee2aa490532a0eb30794650f81984484","modified":1758694805895},{"_id":"source/_posts/ceph/Ceph 集群部署.md","hash":"ab0492881571e72093462b48ae8102fddf7986ce","modified":1758694811862},{"_id":"source/_posts/docker/用 Dockerfile 文件构建带 systemd 的ubuntu 22.04.md","hash":"4204312e5fe8789f21a682dd1ace6a24cfde790f","modified":1758694825696},{"_id":"source/_posts/java/技术文章梳理.md","hash":"abe3541a8d3caaadd01dee1798ae9212e6179958","modified":1758694887777},{"_id":"source/_posts/life/重塑生活的八个步骤.md","hash":"0adc03ab20b702d2ec66016f0b87d0a3d0bc1ffa","modified":1758694958352},{"_id":"source/_posts/k8s/MetaLib 安装.md","hash":"654bea4937d1ff6f7c840a324b566242964bbfb5","modified":1758694948501},{"_id":"source/_posts/k8s/安装 longhorn 出现的坑.md","hash":"219ccab8d2bfe93253834c9e2e5dc8135c12532a","modified":1758694920179},{"_id":"source/_posts/k8s/k8s 创建单节点 mysql 并持久化存储.md","hash":"134fc27d8d2b8400ec93780f419cdb1bbf31214b","modified":1758694925177},{"_id":"source/_posts/linux/Linux 根目录扩容操作.md","hash":"0e8671d11110933dd27bc830a75e6385d6e5b0a1","modified":1758694970329},{"_id":"source/_posts/k8s/k8s创建ubuntu22.04并暴露22端口.md","hash":"b7a98a4b4d47da15daf52f87067b1c58ad4eafc0","modified":1758694933598},{"_id":"source/_posts/linux/vi 常用命令.md","hash":"84cb086adb81517e0c5f12f85f58dc663e99489b","modified":1758693608740},{"_id":"source/_posts/mysql/mysql 创建用户并赋予管理员权限.md","hash":"6c10681317fd5808de7fc7893e0cfd104720d0ad","modified":1758694994152},{"_id":"source/_posts/mysql/mysql 查看表字段注释.md","hash":"4690103ea4888ec383bd20d79290a8af91054e22","modified":1758694985083},{"_id":"source/css/pace/flash.css","hash":"1429efd930b6fcf2fb435e224ca00e218179d7cf","modified":1758693608752},{"_id":"source/_posts/mysql/20250924.md","hash":"2fc8ab4cad4ecded4865d212dfbed435457956da","modified":1758694780469},{"_id":"source/img/default_cover/geomeric1.jpg","hash":"6ba7958abd428a49adc2dfba728d3c38786e49c3","modified":1758693608764},{"_id":"source/img/default_cover/geomeric10.png","hash":"b2508e510986db497afd39f91bded81c3f8d4e7b","modified":1758693608764},{"_id":"source/img/default_cover/geomeric2.png","hash":"9afbfe90fc2a0f97524dd8f3b2171d488e3ce6ad","modified":1758693608765},{"_id":"source/_posts/java/interview/index.md","hash":"3b124414ea0c10f1685ac97f7d9783087c8d8308","modified":1758694857680},{"_id":"source/_posts/java/note/HashMap 与 TreeMap.md","hash":"65dee18f7a2805b9a7c0a1703e876283e5013d87","modified":1758694871509},{"_id":"source/_posts/java/debug/MySQL 8.0 Public Key Retrieval is not allowed 错误的解决方法.md","hash":"f66211a736a9ade69f6ecb09ba1b2aadb67a83ac","modified":1758694839402},{"_id":"source/_posts/k8s/kubevirt/cloud-init 无法调整分区大小：当 LANG 不是 en_US 时，growpart 不起作用.md","hash":"e17375b1230308be30bd19ff60717503d5f8bc1a","modified":1758694900790},{"_id":"source/_posts/k8s/study/k8s 网络策略.md","hash":"565ac4c48080687a6f9ce38e9510c0df3e0bf186","modified":1758694914035},{"_id":"source/img/posts/java/interview/1.png","hash":"26ee7f89480f0612309c1a59bd9bd4b6ae372141","modified":1758693608777},{"_id":"source/img/posts/java/interview/2.png","hash":"8598079d5ff823018c265046635618ec9cf9c921","modified":1758693608778},{"_id":"source/img/posts/java/interview/4.png","hash":"cdab7714ec1432bb781014fe3449ee8d02531fc7","modified":1758693608778},{"_id":"source/img/posts/java/interview/10.png","hash":"501a45864e2d5bed9ac42813396ebeab5bf54792","modified":1758693608777},{"_id":"source/img/posts/java/interview/3.png","hash":"6a0aa673a8a157e3793f23076d97665aff0c9f31","modified":1758693608778},{"_id":"source/img/posts/java/interview/6.png","hash":"420c3e4955a62cdd516bd8cf5507574ceb247879","modified":1758693608780},{"_id":"source/img/posts/java/interview/7.png","hash":"97b54bad797f7968813e8195f3f75e362c5e45af","modified":1758693608781},{"_id":"source/img/posts/java/interview/8.png","hash":"1ae9a5fc3c9a2ea129431e17d423c8df1f54d021","modified":1758693608781},{"_id":"source/img/posts/java/interview/9.png","hash":"e7a2830e353d2411ed1cafcda6ebcb1674c61bd3","modified":1758693608782},{"_id":"source/img/default_cover/geomeric3.png","hash":"7253e3d1188054ba6fcecf710a3ff2c5fd8f46ce","modified":1758693608766},{"_id":"source/img/default_cover/geomeric4.jpg","hash":"fe03714e9bce1a6147013d17533b97b9ae6ea946","modified":1758693608767},{"_id":"source/img/default_cover/geomeric9.png","hash":"850293b0f7eebc6142beb6b58a4b8800eebd0e72","modified":1758693608775},{"_id":"source/img/posts/java/interview/5.png","hash":"e647fb51905cd28eb692f3b9993787b0a4832087","modified":1758693608779},{"_id":"source/img/avatar.jpg","hash":"8f21176c7655a4b1add025bb014168505b2959e0","modified":1758693608754},{"_id":"source/img/default_cover/geomeric7.jpg","hash":"49102890f34bac8aebf3555e5c6b4e0dba8f1103","modified":1758693608772},{"_id":"source/img/default_cover/geomeric8.png","hash":"3e0ec2b27fa9a2077ab408af9a2f842ca1ff377b","modified":1758693608774},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1758693864738},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"b5d6e7271b88d1a63755386442663af03e36a428","modified":1758693865277},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"86569b94949392e9b981608433495f0941d20b0c","modified":1758693865270},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"459517785a7161e07c333bfe2900243b6287f905","modified":1758693866096},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"656d8b548940d7d214459cd8853007af38e6c465","modified":1758693865264},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"d0e179ae31cdc62037062432b0ee7a9008155a73","modified":1758693866108},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":1758693866114},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1758693866103},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":1758693866116},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1758693866104},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1758693865518},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1758693865415},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1758693865662},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1758693865713},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1758693865847},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1758693865928},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1758693866111},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1758693866112},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1758693866098},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1758693866100},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1758693866106},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1758693865292},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1758693865322},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1758693865584},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1758693865613},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1758693865674},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1758693865715},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"d15124c488273ea0801a042888feadc9261d0b2f","modified":1758693865908},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1758693865916},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1758693864924},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1758693864837},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1758693865019},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1758693865257},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1758693865204},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1758693864939},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1758693865169},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1758693865177},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1758693864878},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1758693864890},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1758693864954},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1758693865184},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1758693865034},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1758693865155},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1758693864913},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1758693864971},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1758693864986},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1758693865001},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1758693865056},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1758693865135},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1758693865146},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1758693865046},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1758693865194},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1758693865215},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1758693865223},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1758693866052},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1758693866093},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1758693864818},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1758693865283},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1758693864800},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1758693865120},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1758693865236},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1758693865249},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1758693865702},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1758693865757},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1758693865620},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1758693865688},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1758693865921},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1758693865708},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1758693865345},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"75e7a524af64fbaaaf7b05a1b1922bf6940d7afe","modified":1758693865534},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1758693865608},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1758693865705},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1758693865529},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1758693865877},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1758693865919},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1758693865850},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1758693865588},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1758693865711},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1758693865449},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1758693865624},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"1ed873db25eec869beebb6873f04e19f0b0f4134","modified":1758693865781},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1758693865513},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1758693865547},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1758693865580},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1758693865930},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1758693865904},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1758693865727},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1758693865408},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1758693865569},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"cde142861edfc7aab435b8a0ebb84d9ba450fb5b","modified":1758693865721},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1758693865718},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1758693865925},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1758693865853},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1758693865454},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1758693865459},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1758693865469},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1758693865464},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1758693865474},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1758693865480},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1758693865484},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1758693865487},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1758693865493},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1758693865497},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1758693865507},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1758693865502},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1758693865657},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"e0de61a059b5e6c7b8ebc7149b4650bdcd69af5e","modified":1758693866020},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"51868d861c94a9f1ad7c0dbd66d2f475c5d4ea62","modified":1758693866039},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"57a19eb0c418d92a88b143f56ccb8cd60e6d7ad0","modified":1758693866035},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1758693866086},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1758693865984},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1758693865993},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1758693866016},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1758693865995},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"8cd2aaa32cd68cd1908c9001444a811c3d0f9267","modified":1758693866028},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1758693866057},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1758693866068},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"fc9424d9c5def2201ec1d04dc79d0beedc1d2175","modified":1758693866071},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1758693866074},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1758693866076},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1758693866079},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1758693866081},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1758693866090},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"e4f948b0d4eb5483b2b360e56cbfe3359751b438","modified":1758693866001},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"c481d1f689a4e6d7ee492a03751bda47a30225ce","modified":1758693866072},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1758693865970},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1758693865980},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1758693865990},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1758693865997},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1758693866014},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"b3ea08d9460122751144a3ca835e009a460d6ad3","modified":1758693866037},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1758693866084},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1758693865977},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1758693866059},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1758693866048},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1758693865988},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1758693866021},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1758693866031},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1758693866030},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1758693866053},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1758693866054},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1758693866062},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1758693866083},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1758693866092},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1758693864762},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1758693865090},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1758693864860},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1758693865304},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1758693865423},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1758693865628},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1758693865881},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1758693865632},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1758693865554},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1758693865577},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1758693865940},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1758693865951},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"d02f3cc9e6183e7d05c7e90e9ae1dee5ce21f297","modified":1758693865961},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5d8a0a3a7690d6d01e3feb91c2a36a5cd651b1","modified":1758693865431},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"9ef303da16d180619da18b146ddb9bc35f66bdbf","modified":1758693865558},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"5127bc550a2edb1ab9f45416e1964c76e8201544","modified":1758693865592},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"6e17b2cea503eabeb328835038812cfa95f15871","modified":1758693865562},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0704efed9079c867ab5f7bee7381a6c869154c73","modified":1758693865572},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"2fc5627eb63118c83df9422b47c801822e28df98","modified":1758693865597},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1758693865679},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"35ae7980f658a349c5956c5699efd435b604b836","modified":1758693865639},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1758693865666},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"598790433e3c9be28b0063bff08d257acd0abf75","modified":1758693865897},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4d78f6266d0870c06c10eaf47c951bd4d9a7732e","modified":1758693865944},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"2a8d02ed9303092e8816f6489a443e7388102470","modified":1758693865947},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1758693865954},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"0a1b8fe95623b095eb7ede3f30ca327684d1e613","modified":1758693865963},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1758693865524},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1758693865539},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1758693865543},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1758693865634},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1758693865695},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1758693865933},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"8c0d9a45bd2d83cc6d0e7bbfe172a09ff33c0178","modified":1758693865437},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":1758693865550},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1758693865647},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":1758693865901},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":1758693865603},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":1758693865936},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":1758693865958},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ae1ccd78926cc19399d396b237d5161d7cde44a8","modified":1758693865965},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1758693865643},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1758693865685},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1758693865669},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"d0ce1891b042dcc2c93cacc866e38721b94aa4c4","modified":1758693865691},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1758693865316},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1758693865912},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1758693865326},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1758693865337},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1758693865653},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1758693865566},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1758693865682},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1758693865650},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1758693866041},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1758693866012},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1758693866007},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1758693866056},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1758693866043},{"_id":"source/img/default_cover/geomeric6.png","hash":"7aa9294f0e9ab317384c6c73102ba31df4210c50","modified":1758693608771},{"_id":"source/img/default_cover/geomeric5.png","hash":"28f315e2c6e320d196fea9d6bd2f65272712945f","modified":1758693608769},{"_id":"source/img/bg.jpg","hash":"88b0a9106c32c15128ec1d8ae4b5463b6e83de29","modified":1758693608763},{"_id":"public/css/pace/flash.css","hash":"cc37a951e00c2d64fe21c741ed2999bf66a31987","modified":1758695494677},{"_id":"public/self/Kimbiedark.css","hash":"fa424a5e5354a654fca7070b6da278d5c8da7726","modified":1758695494677},{"_id":"public/search.xml","hash":"4a422baf7e3fd62938ee455c3209516e3522ed77","modified":1758695494677},{"_id":"public/404.html","hash":"025ff098d93ee0291058e71b84ae396994ad3b25","modified":1758695494677},{"_id":"public/categories/index.html","hash":"35aad421237704c2688c362d7f8f328b88772ef0","modified":1758695494677},{"_id":"public/link/index.html","hash":"03f2d079a2190e73c843fbc47e78112aa2fba24f","modified":1758695494677},{"_id":"public/tags/index.html","hash":"8de0c5cf6aeee2ef00f5b6f20d9c8dac7604a1d6","modified":1758695494677},{"_id":"public/2025/09/24/mysql/20250924/index.html","hash":"4d7a8ac6d3dbe0ea9b3ceda473d7a5aaa88ae710","modified":1758695494677},{"_id":"public/2023/12/29/linux/Linux 根目录扩容操作/index.html","hash":"b3868c7f61f8afd5c76f6ad9f13e5bb668e0bfc6","modified":1758695494677},{"_id":"public/2023/12/29/mysql/mysql 创建用户并赋予管理员权限/index.html","hash":"d6cf7cadcbe34ad1879b01715f781c1765e07fa2","modified":1758695494677},{"_id":"public/2023/12/28/java/技术文章梳理/index.html","hash":"c9c9e3c3ce86d05d09d2ef566e134eea0c5963a2","modified":1758695494677},{"_id":"public/2023/12/28/k8s/MetaLib 安装/index.html","hash":"1fd84846b99a97003752d8fe0be3e671145bd266","modified":1758695494677},{"_id":"public/2023/12/27/mysql/mysql 查看表字段注释/index.html","hash":"14587159288fcb01b8693a296e8837a8d9ef4533","modified":1758695494677},{"_id":"public/2023/12/18/life/重塑生活的八个步骤/index.html","hash":"405ded051ba3b9e6fa4fec4b3101221bab4f2c22","modified":1758695494677},{"_id":"public/2023/11/03/k8s/安装 longhorn 出现的坑/index.html","hash":"fbbb3edfca577f2bdd3b42d58ba90f50f4e405dd","modified":1758695494677},{"_id":"public/2023/10/20/docker/用 Dockerfile 文件构建带 systemd 的ubuntu 22.04/index.html","hash":"a08d41bad0b6024f6b9915b1ac6b3f69c0c5c7f7","modified":1758695494677},{"_id":"public/2023/10/10/k8s/k8s 创建单节点 mysql 并持久化存储/index.html","hash":"f0570c0730a5cd3bef06e155038a7f6eb2d3d99c","modified":1758695494677},{"_id":"public/2023/06/14/k8s/kubevirt/cloud-init 无法调整分区大小：当 LANG 不是 en_US 时，growpart 不起作用/index.html","hash":"db03aacfb7fdecfd3344c96935375a7be204546c","modified":1758695494677},{"_id":"public/2023/06/12/k8s/k8s创建ubuntu22.04并暴露22端口/index.html","hash":"027cf1092292378316f881e6b46fa6948fb20c6a","modified":1758695494677},{"_id":"public/2023/06/12/java/debug/MySQL 8.0 Public Key Retrieval is not allowed 错误的解决方法/index.html","hash":"7eae2b9be6bc74c069ec79b9ff0e92c8700b7f55","modified":1758695494677},{"_id":"public/2023/06/12/k8s/study/k8s 网络策略/index.html","hash":"4420194ad62be77d1896df9d27fe74e1491e5ef3","modified":1758695494677},{"_id":"public/2021/10/01/ceph/Ceph 集群部署/index.html","hash":"1403a07cb463a7a5b5c30ad9bcc3d5968bbb88c4","modified":1758695494677},{"_id":"public/2021/09/30/ceph/Ceph 安装记录/index.html","hash":"0526f5bf9d184a4a5f8a9232c81f6b33cc140e07","modified":1758695494677},{"_id":"public/2021/07/31/linux/vi 常用命令/index.html","hash":"697099b60162cc6d6b2ef1657835741223ee975e","modified":1758695494677},{"_id":"public/2020/01/01/java/interview/index/index.html","hash":"9a47240e25e30522851f420af275fec5dedb8a79","modified":1758695494677},{"_id":"public/2020/01/01/java/note/HashMap 与 TreeMap/index.html","hash":"a9c8f57fb2f232ae278dbe93014c9ddf2ce26d0e","modified":1758695494677},{"_id":"public/categories/Ceph-学习/index.html","hash":"9d3896d5b72923460e30aa0dc409b26a1a394996","modified":1758695494677},{"_id":"public/categories/技术栈/index.html","hash":"29775eaa3148fe1069d476832df86ee1c528ab10","modified":1758695494677},{"_id":"public/categories/生活/index.html","hash":"104ee562c335bdfc861dc54724a5c832338aa7ae","modified":1758695494677},{"_id":"public/categories/Docker/index.html","hash":"fd1384f132fc6a428e749bc8d708062f7e52e83c","modified":1758695494677},{"_id":"public/categories/k8s/index.html","hash":"318ae7797a4a06f1a4d3132f060faad7e9564ec7","modified":1758695494677},{"_id":"public/categories/容器-虚拟化/index.html","hash":"12446b751976207fa8275376e8d6c245948fcd8a","modified":1758695494677},{"_id":"public/categories/linux/index.html","hash":"c49d8bed7d75b61555c101e9432a6fbb4ee7610f","modified":1758695494677},{"_id":"public/categories/mysql/index.html","hash":"44010f839034a55d9d831097a5ae42f210dcacba","modified":1758695494677},{"_id":"public/categories/Java/index.html","hash":"6fc136780acea3a9a6d83e5b951d57a6ac9d7879","modified":1758695494677},{"_id":"public/categories/遇坑记录/index.html","hash":"7c638d97dadd74eabdac3b7cde112b1455ffc5b1","modified":1758695494677},{"_id":"public/categories/虚拟化/index.html","hash":"f75957975a103cc70c1135b8e5fc7db80a0c3bc6","modified":1758695494677},{"_id":"public/index.html","hash":"07c331b440ca94214fad00aec1b909fa741c34bd","modified":1758695494677},{"_id":"public/page/2/index.html","hash":"614fd8aa2632f1479d17f526ec51a1ce0d82fbca","modified":1758695494677},{"_id":"public/archives/index.html","hash":"1e15fec840fc54181c8ceceb03b46af31cad74fd","modified":1758695494677},{"_id":"public/archives/page/2/index.html","hash":"eb2d59af14752c624e7c825653f73c70661f5eeb","modified":1758695494677},{"_id":"public/archives/2020/index.html","hash":"5b2a35f2bcc00f7afebed4c071b20980510fda63","modified":1758695494677},{"_id":"public/archives/2020/01/index.html","hash":"b9cf3a8e7edf06d8432d45275fc439851036ac0b","modified":1758695494677},{"_id":"public/archives/2021/index.html","hash":"4138fe7378b454010f4e306221bcbb1e79cbba01","modified":1758695494677},{"_id":"public/archives/2021/07/index.html","hash":"3f51df48c56ae8acc8f380f1c5e20e7550ac78ce","modified":1758695494677},{"_id":"public/archives/2021/09/index.html","hash":"0ce0618aa4e8825d6aa806f18c2596b50d8bb222","modified":1758695494677},{"_id":"public/archives/2021/10/index.html","hash":"4a2d6bb321ace0bfa8217ca3b8c30bc523cb07df","modified":1758695494677},{"_id":"public/archives/2023/index.html","hash":"928d8dec8dd2e9c217e4ab5eadcc0c8caaf8a304","modified":1758695494677},{"_id":"public/archives/2023/page/2/index.html","hash":"eab67f53edcb1e44e33da2fe7204a5267ebfff40","modified":1758695494677},{"_id":"public/archives/2023/06/index.html","hash":"886decf9ed7e980ee9b0f450c4d498e46a3414ab","modified":1758695494677},{"_id":"public/archives/2023/10/index.html","hash":"cc2658870b60487cf4408fc03987ece26ce1dc0a","modified":1758695494677},{"_id":"public/archives/2023/11/index.html","hash":"161f1a7fe8144273d17b170d8228c228a1d51508","modified":1758695494677},{"_id":"public/archives/2023/12/index.html","hash":"ade85564660aca0e500d2d19e25c222a75c39f30","modified":1758695494677},{"_id":"public/archives/2025/index.html","hash":"02a187f187ac0c396ca4387ccd60a75790c1c0bf","modified":1758695494677},{"_id":"public/archives/2025/09/index.html","hash":"c3daad55425103eb5da562ee26ab8018a732118c","modified":1758695494677},{"_id":"public/tags/ceph/index.html","hash":"2e25171dc8a25e76113b219442db9909f27c6fc9","modified":1758695494677},{"_id":"public/tags/Dockerfile/index.html","hash":"04549471ea36e078c34f2ea20a89b84c36a1ecfc","modified":1758695494677},{"_id":"public/tags/k8s/index.html","hash":"3848f2a013596431ec5a472cb487f30c8a15d0b1","modified":1758695494677},{"_id":"public/tags/linux/index.html","hash":"32dc943338de3c7822f6ec1200a1346aa57930df","modified":1758695494677},{"_id":"public/tags/mysql/index.html","hash":"1471cea10e3d9c9a56e65b8ee5c3cde851ea2039","modified":1758695494677},{"_id":"public/tags/vi/index.html","hash":"d871f63ce6125f395469c5398895f3fa6019f236","modified":1758695494677},{"_id":"public/tags/Java-笔记/index.html","hash":"a2862070ac878097e064c23edbe9a591077a3c24","modified":1758695494677},{"_id":"public/tags/java-遇坑记录，mysql/index.html","hash":"996ad4d19e5c065aa57872d78b389eb8ad3014c4","modified":1758695494677},{"_id":"public/tags/kubevirt/index.html","hash":"06398bf88eb8bf3f9c810ef81333ef87e7227ebf","modified":1758695494677},{"_id":"public/tags/Java-面试/index.html","hash":"5b1f682cd5d6acccb3aee73318f1c2d6ce049eef","modified":1758695494677},{"_id":"public/tags/学习/index.html","hash":"797b9bb38a6dd9efa0791ed01c5467ea086f8387","modified":1758695494677},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1758695494677},{"_id":"public/img/favicon.png","hash":"0a89c027b57958499837f186dea4ec9e8e790213","modified":1758695494677},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1758695494677},{"_id":"public/img/image.png","hash":"7705d4388668f460dcedbdb137dd8865953f4cd0","modified":1758695494677},{"_id":"public/img/default_cover/geomeric1.jpg","hash":"6ba7958abd428a49adc2dfba728d3c38786e49c3","modified":1758695494677},{"_id":"public/img/default_cover/geomeric10.png","hash":"b2508e510986db497afd39f91bded81c3f8d4e7b","modified":1758695494677},{"_id":"public/img/default_cover/geomeric2.png","hash":"9afbfe90fc2a0f97524dd8f3b2171d488e3ce6ad","modified":1758695494677},{"_id":"public/img/posts/java/interview/1.png","hash":"26ee7f89480f0612309c1a59bd9bd4b6ae372141","modified":1758695494677},{"_id":"public/img/posts/java/interview/10.png","hash":"501a45864e2d5bed9ac42813396ebeab5bf54792","modified":1758695494677},{"_id":"public/img/posts/java/interview/2.png","hash":"8598079d5ff823018c265046635618ec9cf9c921","modified":1758695494677},{"_id":"public/img/posts/java/interview/4.png","hash":"cdab7714ec1432bb781014fe3449ee8d02531fc7","modified":1758695494677},{"_id":"public/img/posts/java/interview/3.png","hash":"6a0aa673a8a157e3793f23076d97665aff0c9f31","modified":1758695494677},{"_id":"public/img/posts/java/interview/6.png","hash":"420c3e4955a62cdd516bd8cf5507574ceb247879","modified":1758695494677},{"_id":"public/img/posts/java/interview/7.png","hash":"97b54bad797f7968813e8195f3f75e362c5e45af","modified":1758695494677},{"_id":"public/img/posts/java/interview/8.png","hash":"1ae9a5fc3c9a2ea129431e17d423c8df1f54d021","modified":1758695494677},{"_id":"public/img/posts/java/interview/9.png","hash":"e7a2830e353d2411ed1cafcda6ebcb1674c61bd3","modified":1758695494677},{"_id":"public/css/hbe.style.css","hash":"72959894400fd5c350106cb558c39fa51f722cbd","modified":1758695494677},{"_id":"public/lib/hbe.js","hash":"fb05fcd82bb28d3b2887d388cabea7f9b1a318eb","modified":1758695494677},{"_id":"public/img/default_cover/geomeric3.png","hash":"7253e3d1188054ba6fcecf710a3ff2c5fd8f46ce","modified":1758695494677},{"_id":"public/img/default_cover/geomeric4.jpg","hash":"fe03714e9bce1a6147013d17533b97b9ae6ea946","modified":1758695494677},{"_id":"public/img/default_cover/geomeric9.png","hash":"850293b0f7eebc6142beb6b58a4b8800eebd0e72","modified":1758695494677},{"_id":"public/img/posts/java/interview/5.png","hash":"e647fb51905cd28eb692f3b9993787b0a4832087","modified":1758695494677},{"_id":"public/css/index.css","hash":"ecf43661140af84b05d53db2b781443ce0d7593d","modified":1758695494677},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1758695494677},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1758695494677},{"_id":"public/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1758695494677},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1758695494677},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1758695494677},{"_id":"public/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1758695494677},{"_id":"public/img/avatar.jpg","hash":"8f21176c7655a4b1add025bb014168505b2959e0","modified":1758695494677},{"_id":"public/img/default_cover/geomeric7.jpg","hash":"49102890f34bac8aebf3555e5c6b4e0dba8f1103","modified":1758695494677},{"_id":"public/img/default_cover/geomeric8.png","hash":"3e0ec2b27fa9a2077ab408af9a2f842ca1ff377b","modified":1758695494677},{"_id":"public/img/default_cover/geomeric6.png","hash":"7aa9294f0e9ab317384c6c73102ba31df4210c50","modified":1758695494677},{"_id":"public/img/default_cover/geomeric5.png","hash":"28f315e2c6e320d196fea9d6bd2f65272712945f","modified":1758695494677},{"_id":"public/img/bg.jpg","hash":"88b0a9106c32c15128ec1d8ae4b5463b6e83de29","modified":1758695494677}],"Category":[{"name":"Ceph 学习","_id":"cmfxlor7j0004zc7hcc8p7pdu"},{"name":"技术栈","_id":"cmfxlor7n000czc7h2j1hd5kq"},{"name":"生活","_id":"cmfxlor7p000jzc7hddkug5zt"},{"name":"Docker","_id":"cmfxlor7q000qzc7hfewi03np"},{"name":"k8s","_id":"cmfxlor7s000wzc7h7811407d"},{"name":"容器/虚拟化","_id":"cmfxlor7u0013zc7hfakg0lln"},{"name":"linux","_id":"cmfxlor7w001fzc7h8t976uac"},{"name":"mysql","_id":"cmfxlor7w001kzc7h23aw6tj8"},{"name":"Java","_id":"cmfxlor7y001wzc7h058ucg0h"},{"name":"遇坑记录","_id":"cmfxlor810022zc7hhtmd9znm"},{"name":"虚拟化","_id":"cmfxlor820028zc7hbvft7z0e"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}],"Page":[{"title":"分类","date":"2023-05-23T16:00:00.000Z","updated":"2023-05-23T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2023-05-24\nupdated: 2023-05-24\ntype: \"categories\"\n---\n","path":"categories/index.html","comments":1,"layout":"page","_id":"cmfxlor7e0000zc7hg0lqfvl5","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric10.png","cover_type":"img","excerpt":"","more":""},{"title":"友情链接","date":"2023-05-24T15:13:32.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2023-05-24 23:13:32\ntype: \"link\"\n---\n","updated":"2025-09-24T06:00:08.782Z","path":"link/index.html","comments":1,"layout":"page","_id":"cmfxlor7i0002zc7h8r678zp4","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric9.png","cover_type":"img","excerpt":"","more":""},{"_content":".pace {\n\t-webkit-pointer-events: none;\n\tpointer-events: none;\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\tuser-select: none;\n}\n\n.pace-inactive {\n\tdisplay: none;\n}\n\n.pace .pace-progress {\n\tbackground: #29d;\n\tposition: fixed;\n\tz-index: 2000;\n\ttop: 0;\n\tright: 100%;\n\twidth: 100%;\n\theight: 2px;\n}\n\n.pace .pace-progress-inner {\n\tdisplay: block;\n\tposition: absolute;\n\tright: 0px;\n\twidth: 100px;\n\theight: 100%;\n\tbox-shadow: 0 0 10px #29d, 0 0 5px #29d;\n\topacity: 1.0;\n\t-webkit-transform: rotate(3deg) translate(0px, -4px);\n\t-moz-transform: rotate(3deg) translate(0px, -4px);\n\t-ms-transform: rotate(3deg) translate(0px, -4px);\n\t-o-transform: rotate(3deg) translate(0px, -4px);\n\ttransform: rotate(3deg) translate(0px, -4px);\n}\n\n.pace .pace-activity {\n\tdisplay: block;\n\tposition: fixed;\n\tz-index: 2000;\n\ttop: 15px;\n\tright: 15px;\n\twidth: 14px;\n\theight: 14px;\n\tborder: solid 2px transparent;\n\tborder-top-color: #29d;\n\tborder-left-color: #29d;\n\tborder-radius: 10px;\n\t-webkit-animation: pace-spinner 400ms linear infinite;\n\t-moz-animation: pace-spinner 400ms linear infinite;\n\t-ms-animation: pace-spinner 400ms linear infinite;\n\t-o-animation: pace-spinner 400ms linear infinite;\n\tanimation: pace-spinner 400ms linear infinite;\n}\n\n@-webkit-keyframes pace-spinner {\n\t0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-moz-keyframes pace-spinner {\n\t0% { -moz-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -moz-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-o-keyframes pace-spinner {\n\t0% { -o-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -o-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-ms-keyframes pace-spinner {\n\t0% { -ms-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -ms-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@keyframes pace-spinner {\n\t0% { transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { transform: rotate(360deg); transform: rotate(360deg); }\n}","source":"css/pace/flash.css","raw":".pace {\n\t-webkit-pointer-events: none;\n\tpointer-events: none;\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\tuser-select: none;\n}\n\n.pace-inactive {\n\tdisplay: none;\n}\n\n.pace .pace-progress {\n\tbackground: #29d;\n\tposition: fixed;\n\tz-index: 2000;\n\ttop: 0;\n\tright: 100%;\n\twidth: 100%;\n\theight: 2px;\n}\n\n.pace .pace-progress-inner {\n\tdisplay: block;\n\tposition: absolute;\n\tright: 0px;\n\twidth: 100px;\n\theight: 100%;\n\tbox-shadow: 0 0 10px #29d, 0 0 5px #29d;\n\topacity: 1.0;\n\t-webkit-transform: rotate(3deg) translate(0px, -4px);\n\t-moz-transform: rotate(3deg) translate(0px, -4px);\n\t-ms-transform: rotate(3deg) translate(0px, -4px);\n\t-o-transform: rotate(3deg) translate(0px, -4px);\n\ttransform: rotate(3deg) translate(0px, -4px);\n}\n\n.pace .pace-activity {\n\tdisplay: block;\n\tposition: fixed;\n\tz-index: 2000;\n\ttop: 15px;\n\tright: 15px;\n\twidth: 14px;\n\theight: 14px;\n\tborder: solid 2px transparent;\n\tborder-top-color: #29d;\n\tborder-left-color: #29d;\n\tborder-radius: 10px;\n\t-webkit-animation: pace-spinner 400ms linear infinite;\n\t-moz-animation: pace-spinner 400ms linear infinite;\n\t-ms-animation: pace-spinner 400ms linear infinite;\n\t-o-animation: pace-spinner 400ms linear infinite;\n\tanimation: pace-spinner 400ms linear infinite;\n}\n\n@-webkit-keyframes pace-spinner {\n\t0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-moz-keyframes pace-spinner {\n\t0% { -moz-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -moz-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-o-keyframes pace-spinner {\n\t0% { -o-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -o-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-ms-keyframes pace-spinner {\n\t0% { -ms-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -ms-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@keyframes pace-spinner {\n\t0% { transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { transform: rotate(360deg); transform: rotate(360deg); }\n}","date":"2025-09-24T06:00:08.752Z","updated":"2025-09-24T06:00:08.752Z","path":"css/pace/flash.css","layout":"false","title":"","comments":1,"_id":"cmfxlor7l0006zc7hdmt57vco","content":".pace {\n\t-webkit-pointer-events: none;\n\tpointer-events: none;\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\tuser-select: none;\n}\n\n.pace-inactive {\n\tdisplay: none;\n}\n\n.pace .pace-progress {\n\tbackground: #29d;\n\tposition: fixed;\n\tz-index: 2000;\n\ttop: 0;\n\tright: 100%;\n\twidth: 100%;\n\theight: 2px;\n}\n\n.pace .pace-progress-inner {\n\tdisplay: block;\n\tposition: absolute;\n\tright: 0px;\n\twidth: 100px;\n\theight: 100%;\n\tbox-shadow: 0 0 10px #29d, 0 0 5px #29d;\n\topacity: 1.0;\n\t-webkit-transform: rotate(3deg) translate(0px, -4px);\n\t-moz-transform: rotate(3deg) translate(0px, -4px);\n\t-ms-transform: rotate(3deg) translate(0px, -4px);\n\t-o-transform: rotate(3deg) translate(0px, -4px);\n\ttransform: rotate(3deg) translate(0px, -4px);\n}\n\n.pace .pace-activity {\n\tdisplay: block;\n\tposition: fixed;\n\tz-index: 2000;\n\ttop: 15px;\n\tright: 15px;\n\twidth: 14px;\n\theight: 14px;\n\tborder: solid 2px transparent;\n\tborder-top-color: #29d;\n\tborder-left-color: #29d;\n\tborder-radius: 10px;\n\t-webkit-animation: pace-spinner 400ms linear infinite;\n\t-moz-animation: pace-spinner 400ms linear infinite;\n\t-ms-animation: pace-spinner 400ms linear infinite;\n\t-o-animation: pace-spinner 400ms linear infinite;\n\tanimation: pace-spinner 400ms linear infinite;\n}\n\n@-webkit-keyframes pace-spinner {\n\t0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-moz-keyframes pace-spinner {\n\t0% { -moz-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -moz-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-o-keyframes pace-spinner {\n\t0% { -o-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -o-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-ms-keyframes pace-spinner {\n\t0% { -ms-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -ms-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@keyframes pace-spinner {\n\t0% { transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { transform: rotate(360deg); transform: rotate(360deg); }\n}","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric8.png","cover_type":"img","excerpt":"","more":".pace {\n\t-webkit-pointer-events: none;\n\tpointer-events: none;\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\tuser-select: none;\n}\n\n.pace-inactive {\n\tdisplay: none;\n}\n\n.pace .pace-progress {\n\tbackground: #29d;\n\tposition: fixed;\n\tz-index: 2000;\n\ttop: 0;\n\tright: 100%;\n\twidth: 100%;\n\theight: 2px;\n}\n\n.pace .pace-progress-inner {\n\tdisplay: block;\n\tposition: absolute;\n\tright: 0px;\n\twidth: 100px;\n\theight: 100%;\n\tbox-shadow: 0 0 10px #29d, 0 0 5px #29d;\n\topacity: 1.0;\n\t-webkit-transform: rotate(3deg) translate(0px, -4px);\n\t-moz-transform: rotate(3deg) translate(0px, -4px);\n\t-ms-transform: rotate(3deg) translate(0px, -4px);\n\t-o-transform: rotate(3deg) translate(0px, -4px);\n\ttransform: rotate(3deg) translate(0px, -4px);\n}\n\n.pace .pace-activity {\n\tdisplay: block;\n\tposition: fixed;\n\tz-index: 2000;\n\ttop: 15px;\n\tright: 15px;\n\twidth: 14px;\n\theight: 14px;\n\tborder: solid 2px transparent;\n\tborder-top-color: #29d;\n\tborder-left-color: #29d;\n\tborder-radius: 10px;\n\t-webkit-animation: pace-spinner 400ms linear infinite;\n\t-moz-animation: pace-spinner 400ms linear infinite;\n\t-ms-animation: pace-spinner 400ms linear infinite;\n\t-o-animation: pace-spinner 400ms linear infinite;\n\tanimation: pace-spinner 400ms linear infinite;\n}\n\n@-webkit-keyframes pace-spinner {\n\t0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-moz-keyframes pace-spinner {\n\t0% { -moz-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -moz-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-o-keyframes pace-spinner {\n\t0% { -o-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -o-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@-ms-keyframes pace-spinner {\n\t0% { -ms-transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { -ms-transform: rotate(360deg); transform: rotate(360deg); }\n}\n@keyframes pace-spinner {\n\t0% { transform: rotate(0deg); transform: rotate(0deg); }\n\t100% { transform: rotate(360deg); transform: rotate(360deg); }\n}"},{"title":"标签","date":"2023-05-23T16:00:00.000Z","updated":"2023-05-23T16:00:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2023-05-24\nupdated: 2023-05-24\ntype: \"tags\"\n---\n","path":"tags/index.html","comments":1,"layout":"page","_id":"cmfxlor7l0008zc7h3g68grm0","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric4.jpg","cover_type":"img","excerpt":"","more":""},{"_content":"/*\n    Name:     Kimbie (dark)\n    Author:   Jan T. Sott\n    License:  Creative Commons Attribution-ShareAlike 4.0 Unported License\n    URL:      https://github.com/idleberg/Kimbie-highlight.js\n*/\n\n/* 新添加的内容\n  ------------------------------------- \n  --hl-color                  代码框字体顔色 【必须】 (把下面.hljs的 color复制到这里来)\n  --hl-bg                     代码框背景色 【必须】 (把下面.hljs的 background复制到这里来)\n  --hltools-bg: #321a0f       代码框顶部工具栏背景色 【可选】(如果你关掉了 copy、lang 和 shrink,可不用配置这个）\n  --hltools-color: #fff       代码框顶部工具栏字体顔色 【可选】(如果你关掉了 copy、lang 和 shrink,可不用配置这个）\n  --hlnumber-bg: #221a0f      代码框行数背景色 【可选】(如果已经关掉 line_number,可以不用配置这个)\n  --hlnumber-color: #fff      代码框行数字体顔色 【可选】 (如果已经关掉 line_number,可以不用配置这个)\n  --hlscrollbar-bg: #d3af86   代码框滚动条顔色 【可选】（默认为主题主顔色）\n  --hlexpand-bg: #d3af86      代码框底部展开背景色 【可选】(如果已经关掉 highlight_height_limit,可以不用配置这个)\n*/\n\n:root {\n    --hl-color: #d3af86;\n    --hl-bg: #221a0f;\n    --hltools-bg: #321a0f;\n    --hltools-color: #fff;\n    --hlnumber-bg: #221a0f;\n    --hlnumber-color: #fff;\n    --hlscrollbar-bg: #d3af86;\n    --hlexpand-bg: #d3af86;\n}\n\n/* Kimbie Comment */\n.hljs-comment,\n.hljs-quote {\n    color: #d6baad;\n}\n\n/* Kimbie Red */\n.hljs-variable,\n.hljs-template-variable,\n.hljs-tag,\n.hljs-name,\n.hljs-selector-id,\n.hljs-selector-class,\n.hljs-regexp,\n.hljs-meta {\n    color: #dc3958;\n}\n\n/* Kimbie Orange */\n.hljs-number,\n.hljs-built_in,\n.hljs-builtin-name,\n.hljs-literal,\n.hljs-type,\n.hljs-params,\n.hljs-deletion,\n.hljs-link {\n    color: #f79a32;\n}\n\n/* Kimbie Yellow */\n.hljs-title,\n.hljs-section,\n.hljs-attribute {\n    color: #f06431;\n}\n\n/* Kimbie Green */\n.hljs-string,\n.hljs-symbol,\n.hljs-bullet,\n.hljs-addition {\n    color: #889b4a;\n}\n\n/* Kimbie Purple */\n.hljs-keyword,\n.hljs-selector-tag,\n.hljs-function {\n    color: #98676a;\n}\n\n/* 更改的内容 把.hljs改为 #article-container figure.highlight .hljs *、\n  /* ------------------------------------- */\n#article-container figure.highlight .hljs {\n    display: block;\n    overflow-x: auto;\n    background: #221a0f;\n    color: #d3af86;\n    padding: 0.5em;\n}\n\n.hljs-emphasis {\n    font-style: italic;\n}\n\n.hljs-strong {\n    font-weight: bold;\n}","source":"self/Kimbiedark.css","raw":"/*\n    Name:     Kimbie (dark)\n    Author:   Jan T. Sott\n    License:  Creative Commons Attribution-ShareAlike 4.0 Unported License\n    URL:      https://github.com/idleberg/Kimbie-highlight.js\n*/\n\n/* 新添加的内容\n  ------------------------------------- \n  --hl-color                  代码框字体顔色 【必须】 (把下面.hljs的 color复制到这里来)\n  --hl-bg                     代码框背景色 【必须】 (把下面.hljs的 background复制到这里来)\n  --hltools-bg: #321a0f       代码框顶部工具栏背景色 【可选】(如果你关掉了 copy、lang 和 shrink,可不用配置这个）\n  --hltools-color: #fff       代码框顶部工具栏字体顔色 【可选】(如果你关掉了 copy、lang 和 shrink,可不用配置这个）\n  --hlnumber-bg: #221a0f      代码框行数背景色 【可选】(如果已经关掉 line_number,可以不用配置这个)\n  --hlnumber-color: #fff      代码框行数字体顔色 【可选】 (如果已经关掉 line_number,可以不用配置这个)\n  --hlscrollbar-bg: #d3af86   代码框滚动条顔色 【可选】（默认为主题主顔色）\n  --hlexpand-bg: #d3af86      代码框底部展开背景色 【可选】(如果已经关掉 highlight_height_limit,可以不用配置这个)\n*/\n\n:root {\n    --hl-color: #d3af86;\n    --hl-bg: #221a0f;\n    --hltools-bg: #321a0f;\n    --hltools-color: #fff;\n    --hlnumber-bg: #221a0f;\n    --hlnumber-color: #fff;\n    --hlscrollbar-bg: #d3af86;\n    --hlexpand-bg: #d3af86;\n}\n\n/* Kimbie Comment */\n.hljs-comment,\n.hljs-quote {\n    color: #d6baad;\n}\n\n/* Kimbie Red */\n.hljs-variable,\n.hljs-template-variable,\n.hljs-tag,\n.hljs-name,\n.hljs-selector-id,\n.hljs-selector-class,\n.hljs-regexp,\n.hljs-meta {\n    color: #dc3958;\n}\n\n/* Kimbie Orange */\n.hljs-number,\n.hljs-built_in,\n.hljs-builtin-name,\n.hljs-literal,\n.hljs-type,\n.hljs-params,\n.hljs-deletion,\n.hljs-link {\n    color: #f79a32;\n}\n\n/* Kimbie Yellow */\n.hljs-title,\n.hljs-section,\n.hljs-attribute {\n    color: #f06431;\n}\n\n/* Kimbie Green */\n.hljs-string,\n.hljs-symbol,\n.hljs-bullet,\n.hljs-addition {\n    color: #889b4a;\n}\n\n/* Kimbie Purple */\n.hljs-keyword,\n.hljs-selector-tag,\n.hljs-function {\n    color: #98676a;\n}\n\n/* 更改的内容 把.hljs改为 #article-container figure.highlight .hljs *、\n  /* ------------------------------------- */\n#article-container figure.highlight .hljs {\n    display: block;\n    overflow-x: auto;\n    background: #221a0f;\n    color: #d3af86;\n    padding: 0.5em;\n}\n\n.hljs-emphasis {\n    font-style: italic;\n}\n\n.hljs-strong {\n    font-weight: bold;\n}","date":"2025-09-24T06:00:08.783Z","updated":"2025-09-24T06:00:08.783Z","path":"self/Kimbiedark.css","layout":"false","title":"","comments":1,"_id":"cmfxlor7m000azc7h7ne8diis","content":"/*\n    Name:     Kimbie (dark)\n    Author:   Jan T. Sott\n    License:  Creative Commons Attribution-ShareAlike 4.0 Unported License\n    URL:      https://github.com/idleberg/Kimbie-highlight.js\n*/\n\n/* 新添加的内容\n  ------------------------------------- \n  --hl-color                  代码框字体顔色 【必须】 (把下面.hljs的 color复制到这里来)\n  --hl-bg                     代码框背景色 【必须】 (把下面.hljs的 background复制到这里来)\n  --hltools-bg: #321a0f       代码框顶部工具栏背景色 【可选】(如果你关掉了 copy、lang 和 shrink,可不用配置这个）\n  --hltools-color: #fff       代码框顶部工具栏字体顔色 【可选】(如果你关掉了 copy、lang 和 shrink,可不用配置这个）\n  --hlnumber-bg: #221a0f      代码框行数背景色 【可选】(如果已经关掉 line_number,可以不用配置这个)\n  --hlnumber-color: #fff      代码框行数字体顔色 【可选】 (如果已经关掉 line_number,可以不用配置这个)\n  --hlscrollbar-bg: #d3af86   代码框滚动条顔色 【可选】（默认为主题主顔色）\n  --hlexpand-bg: #d3af86      代码框底部展开背景色 【可选】(如果已经关掉 highlight_height_limit,可以不用配置这个)\n*/\n\n:root {\n    --hl-color: #d3af86;\n    --hl-bg: #221a0f;\n    --hltools-bg: #321a0f;\n    --hltools-color: #fff;\n    --hlnumber-bg: #221a0f;\n    --hlnumber-color: #fff;\n    --hlscrollbar-bg: #d3af86;\n    --hlexpand-bg: #d3af86;\n}\n\n/* Kimbie Comment */\n.hljs-comment,\n.hljs-quote {\n    color: #d6baad;\n}\n\n/* Kimbie Red */\n.hljs-variable,\n.hljs-template-variable,\n.hljs-tag,\n.hljs-name,\n.hljs-selector-id,\n.hljs-selector-class,\n.hljs-regexp,\n.hljs-meta {\n    color: #dc3958;\n}\n\n/* Kimbie Orange */\n.hljs-number,\n.hljs-built_in,\n.hljs-builtin-name,\n.hljs-literal,\n.hljs-type,\n.hljs-params,\n.hljs-deletion,\n.hljs-link {\n    color: #f79a32;\n}\n\n/* Kimbie Yellow */\n.hljs-title,\n.hljs-section,\n.hljs-attribute {\n    color: #f06431;\n}\n\n/* Kimbie Green */\n.hljs-string,\n.hljs-symbol,\n.hljs-bullet,\n.hljs-addition {\n    color: #889b4a;\n}\n\n/* Kimbie Purple */\n.hljs-keyword,\n.hljs-selector-tag,\n.hljs-function {\n    color: #98676a;\n}\n\n/* 更改的内容 把.hljs改为 #article-container figure.highlight .hljs *、\n  /* ------------------------------------- */\n#article-container figure.highlight .hljs {\n    display: block;\n    overflow-x: auto;\n    background: #221a0f;\n    color: #d3af86;\n    padding: 0.5em;\n}\n\n.hljs-emphasis {\n    font-style: italic;\n}\n\n.hljs-strong {\n    font-weight: bold;\n}","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric5.png","cover_type":"img","excerpt":"","more":"/*\n    Name:     Kimbie (dark)\n    Author:   Jan T. Sott\n    License:  Creative Commons Attribution-ShareAlike 4.0 Unported License\n    URL:      https://github.com/idleberg/Kimbie-highlight.js\n*/\n\n/* 新添加的内容\n  ------------------------------------- \n  --hl-color                  代码框字体顔色 【必须】 (把下面.hljs的 color复制到这里来)\n  --hl-bg                     代码框背景色 【必须】 (把下面.hljs的 background复制到这里来)\n  --hltools-bg: #321a0f       代码框顶部工具栏背景色 【可选】(如果你关掉了 copy、lang 和 shrink,可不用配置这个）\n  --hltools-color: #fff       代码框顶部工具栏字体顔色 【可选】(如果你关掉了 copy、lang 和 shrink,可不用配置这个）\n  --hlnumber-bg: #221a0f      代码框行数背景色 【可选】(如果已经关掉 line_number,可以不用配置这个)\n  --hlnumber-color: #fff      代码框行数字体顔色 【可选】 (如果已经关掉 line_number,可以不用配置这个)\n  --hlscrollbar-bg: #d3af86   代码框滚动条顔色 【可选】（默认为主题主顔色）\n  --hlexpand-bg: #d3af86      代码框底部展开背景色 【可选】(如果已经关掉 highlight_height_limit,可以不用配置这个)\n*/\n\n:root {\n    --hl-color: #d3af86;\n    --hl-bg: #221a0f;\n    --hltools-bg: #321a0f;\n    --hltools-color: #fff;\n    --hlnumber-bg: #221a0f;\n    --hlnumber-color: #fff;\n    --hlscrollbar-bg: #d3af86;\n    --hlexpand-bg: #d3af86;\n}\n\n/* Kimbie Comment */\n.hljs-comment,\n.hljs-quote {\n    color: #d6baad;\n}\n\n/* Kimbie Red */\n.hljs-variable,\n.hljs-template-variable,\n.hljs-tag,\n.hljs-name,\n.hljs-selector-id,\n.hljs-selector-class,\n.hljs-regexp,\n.hljs-meta {\n    color: #dc3958;\n}\n\n/* Kimbie Orange */\n.hljs-number,\n.hljs-built_in,\n.hljs-builtin-name,\n.hljs-literal,\n.hljs-type,\n.hljs-params,\n.hljs-deletion,\n.hljs-link {\n    color: #f79a32;\n}\n\n/* Kimbie Yellow */\n.hljs-title,\n.hljs-section,\n.hljs-attribute {\n    color: #f06431;\n}\n\n/* Kimbie Green */\n.hljs-string,\n.hljs-symbol,\n.hljs-bullet,\n.hljs-addition {\n    color: #889b4a;\n}\n\n/* Kimbie Purple */\n.hljs-keyword,\n.hljs-selector-tag,\n.hljs-function {\n    color: #98676a;\n}\n\n/* 更改的内容 把.hljs改为 #article-container figure.highlight .hljs *、\n  /* ------------------------------------- */\n#article-container figure.highlight .hljs {\n    display: block;\n    overflow-x: auto;\n    background: #221a0f;\n    color: #d3af86;\n    padding: 0.5em;\n}\n\n.hljs-emphasis {\n    font-style: italic;\n}\n\n.hljs-strong {\n    font-weight: bold;\n}"}],"Post":[{"title":"Ceph 安装记录","date":"2021-09-30T08:00:00.000Z","updated":"2021-09-30T08:00:00.000Z","cover":"/img/default_cover/geomeric7.jpg","_content":"\nceph 安装记录\n<!-- more -->\n```bash bash\nsudo su\napt install -y python-is-python3 systemd chrony\n\nchronyc sources\n\n172.31.18.113 ceph-01\n172.31.26.40 ceph-02\n172.31.24.19 ceph-03\n\n\n\n# 安装 docker\nsudo apt-get install -y apt-transport-https  ca-certificates  curl  software-properties-common gnupg1 gnupg2\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\napt-key fingerprint 0EBFCD88\nsudo add-apt-repository    \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\napt-get update\napt-get -y install docker-ce\n\n\n# 下载\ncurl --silent --remote-name --location https://github.com/ceph/ceph/raw/quincy/src/cephadm/cephadm\nchmod +x cephadm\n\n./cephadm add-repo --release quincy\n\n./cephadm install\nwhich cephadm\n\ncephadm shell\ncephadm shell -- ceph -s\n\ncephadm bootstrap --mon-ip *<mon-ip>*\ncephadm add-repo --release quincy\ncephadm install ceph-common\nceph -v\nceph status\n\nceph orch host label add *<host>* _admin\n\nssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-02\nssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-03\n\nceph orch host add ip-172-31-26-40 172.31.26.40 --labels _admin\nceph orch host add ip-172-31-24-19 172.31.24.19 --labels _admin\n\nceph orch apply osd --all-available-devices\n\n\nceph fs volume create fs-01 --placement=\"ip-172-31-18-113\"\nstat /sbin/mount.ceph\n\nmount -t ceph cephuser@.fs-01=/ -o secret=AQCR52Rjyuu7ChAAzZs+tBmFrp3bGvYAHZHwJg==\n\n# 挂载cephfs 前提条件\nssh {user}@{mon-host} \"sudo ceph config generate-minimal-conf\" | sudo tee /etc/ceph/ceph.conf\nchmod 644 /etc/ceph/ceph.conf\nssh {user}@{mon-host} \"sudo ceph fs authorize cephfs client.djx / rw\" | sudo tee /etc/ceph/ceph.client.foo.keyring\nchmod 600 /etc/ceph/ceph.client.foo.keyring\n\n# 挂载 cephfs\nmount -t ceph djx@f97eeb7c-5bed-11ed-9dfb-05518952193e.fs-01=/ /mnt/fs-01 -o mon_addr=172.31.18.113:6789/172.31.26.40:6789/172.31.24.19:6789,secret=AQCR52Rjyuu7ChAAzZs+tBmFrp3bGvYAHZHwJg==\n\n\n# 操作服务\nceph orch <start|stop|restart|redeploy|reconfig> <service_name>\n\n```\n","source":"_posts/ceph/Ceph 安装记录.md","raw":"---\ntitle: \"Ceph 安装记录\"\ntags: ceph\ncategories: Ceph 学习\ndate: 2021-09-30 16:00:00\nupdated: 2021-09-30 16:00:00\ncover:\n---\n\nceph 安装记录\n<!-- more -->\n```bash bash\nsudo su\napt install -y python-is-python3 systemd chrony\n\nchronyc sources\n\n172.31.18.113 ceph-01\n172.31.26.40 ceph-02\n172.31.24.19 ceph-03\n\n\n\n# 安装 docker\nsudo apt-get install -y apt-transport-https  ca-certificates  curl  software-properties-common gnupg1 gnupg2\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\napt-key fingerprint 0EBFCD88\nsudo add-apt-repository    \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\napt-get update\napt-get -y install docker-ce\n\n\n# 下载\ncurl --silent --remote-name --location https://github.com/ceph/ceph/raw/quincy/src/cephadm/cephadm\nchmod +x cephadm\n\n./cephadm add-repo --release quincy\n\n./cephadm install\nwhich cephadm\n\ncephadm shell\ncephadm shell -- ceph -s\n\ncephadm bootstrap --mon-ip *<mon-ip>*\ncephadm add-repo --release quincy\ncephadm install ceph-common\nceph -v\nceph status\n\nceph orch host label add *<host>* _admin\n\nssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-02\nssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-03\n\nceph orch host add ip-172-31-26-40 172.31.26.40 --labels _admin\nceph orch host add ip-172-31-24-19 172.31.24.19 --labels _admin\n\nceph orch apply osd --all-available-devices\n\n\nceph fs volume create fs-01 --placement=\"ip-172-31-18-113\"\nstat /sbin/mount.ceph\n\nmount -t ceph cephuser@.fs-01=/ -o secret=AQCR52Rjyuu7ChAAzZs+tBmFrp3bGvYAHZHwJg==\n\n# 挂载cephfs 前提条件\nssh {user}@{mon-host} \"sudo ceph config generate-minimal-conf\" | sudo tee /etc/ceph/ceph.conf\nchmod 644 /etc/ceph/ceph.conf\nssh {user}@{mon-host} \"sudo ceph fs authorize cephfs client.djx / rw\" | sudo tee /etc/ceph/ceph.client.foo.keyring\nchmod 600 /etc/ceph/ceph.client.foo.keyring\n\n# 挂载 cephfs\nmount -t ceph djx@f97eeb7c-5bed-11ed-9dfb-05518952193e.fs-01=/ /mnt/fs-01 -o mon_addr=172.31.18.113:6789/172.31.26.40:6789/172.31.24.19:6789,secret=AQCR52Rjyuu7ChAAzZs+tBmFrp3bGvYAHZHwJg==\n\n\n# 操作服务\nceph orch <start|stop|restart|redeploy|reconfig> <service_name>\n\n```\n","slug":"ceph/Ceph 安装记录","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor7g0001zc7hfn5u7pif","content":"<p>ceph 安装记录</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>bash</span></div><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">su</span>\n<span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> python-is-python3 systemd chrony\n\nchronyc sources\n\n<span class=\"token number\">172.31</span>.18.113 ceph-01\n<span class=\"token number\">172.31</span>.26.40 ceph-02\n<span class=\"token number\">172.31</span>.24.19 ceph-03\n\n\n\n<span class=\"token comment\"># 安装 docker</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> apt-transport-https  ca-certificates  <span class=\"token function\">curl</span>  software-properties-common gnupg1 gnupg2\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -\napt-key fingerprint 0EBFCD88\n<span class=\"token function\">sudo</span> add-apt-repository    <span class=\"token string\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release <span class=\"token parameter variable\">-cs</span><span class=\"token variable\">)</span></span> stable\"</span>\n<span class=\"token function\">apt-get</span> update\n<span class=\"token function\">apt-get</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> docker-ce\n\n\n<span class=\"token comment\"># 下载</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">--silent</span> --remote-name <span class=\"token parameter variable\">--location</span> https://github.com/ceph/ceph/raw/quincy/src/cephadm/cephadm\n<span class=\"token function\">chmod</span> +x cephadm\n\n./cephadm add-repo <span class=\"token parameter variable\">--release</span> quincy\n\n./cephadm <span class=\"token function\">install</span>\n<span class=\"token function\">which</span> cephadm\n\ncephadm shell\ncephadm shell -- ceph <span class=\"token parameter variable\">-s</span>\n\ncephadm bootstrap --mon-ip *<span class=\"token operator\">&lt;</span>mon-ip<span class=\"token operator\">></span>*\ncephadm add-repo <span class=\"token parameter variable\">--release</span> quincy\ncephadm <span class=\"token function\">install</span> ceph-common\nceph <span class=\"token parameter variable\">-v</span>\nceph status\n\nceph orch <span class=\"token function\">host</span> label <span class=\"token function\">add</span> *<span class=\"token operator\">&lt;</span>host<span class=\"token operator\">></span>* _admin\n\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@ceph-02\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@ceph-03\n\nceph orch <span class=\"token function\">host</span> <span class=\"token function\">add</span> ip-172-31-26-40 <span class=\"token number\">172.31</span>.26.40 <span class=\"token parameter variable\">--labels</span> _admin\nceph orch <span class=\"token function\">host</span> <span class=\"token function\">add</span> ip-172-31-24-19 <span class=\"token number\">172.31</span>.24.19 <span class=\"token parameter variable\">--labels</span> _admin\n\nceph orch apply osd --all-available-devices\n\n\nceph fs volume create fs-01 <span class=\"token parameter variable\">--placement</span><span class=\"token operator\">=</span><span class=\"token string\">\"ip-172-31-18-113\"</span>\n<span class=\"token function\">stat</span> /sbin/mount.ceph\n\n<span class=\"token function\">mount</span> <span class=\"token parameter variable\">-t</span> ceph cephuser@.fs-01<span class=\"token operator\">=</span>/ <span class=\"token parameter variable\">-o</span> <span class=\"token assign-left variable\">secret</span><span class=\"token operator\">=</span>AQCR52Rjyuu7ChAAzZs+tBmFrp3bGvYAHZHwJg<span class=\"token operator\">==</span>\n\n<span class=\"token comment\"># 挂载cephfs 前提条件</span>\n<span class=\"token function\">ssh</span> <span class=\"token punctuation\">&#123;</span>user<span class=\"token punctuation\">&#125;</span>@<span class=\"token punctuation\">&#123;</span>mon-host<span class=\"token punctuation\">&#125;</span> <span class=\"token string\">\"sudo ceph config generate-minimal-conf\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/ceph/ceph.conf\n<span class=\"token function\">chmod</span> <span class=\"token number\">644</span> /etc/ceph/ceph.conf\n<span class=\"token function\">ssh</span> <span class=\"token punctuation\">&#123;</span>user<span class=\"token punctuation\">&#125;</span>@<span class=\"token punctuation\">&#123;</span>mon-host<span class=\"token punctuation\">&#125;</span> <span class=\"token string\">\"sudo ceph fs authorize cephfs client.djx / rw\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/ceph/ceph.client.foo.keyring\n<span class=\"token function\">chmod</span> <span class=\"token number\">600</span> /etc/ceph/ceph.client.foo.keyring\n\n<span class=\"token comment\"># 挂载 cephfs</span>\n<span class=\"token function\">mount</span> <span class=\"token parameter variable\">-t</span> ceph djx@f97eeb7c-5bed-11ed-9dfb-05518952193e.fs-01<span class=\"token operator\">=</span>/ /mnt/fs-01 <span class=\"token parameter variable\">-o</span> <span class=\"token assign-left variable\">mon_addr</span><span class=\"token operator\">=</span><span class=\"token number\">172.31</span>.18.113:6789/172.31.26.40:6789/172.31.24.19:6789,secret<span class=\"token operator\">=</span>AQCR52Rjyuu7ChAAzZs+tBmFrp3bGvYAHZHwJg<span class=\"token operator\">==</span>\n\n\n<span class=\"token comment\"># 操作服务</span>\nceph orch <span class=\"token operator\">&lt;</span>start<span class=\"token operator\">|</span>stop<span class=\"token operator\">|</span>restart<span class=\"token operator\">|</span>redeploy<span class=\"token operator\">|</span>reconfig<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>service_name<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover_type":"img","excerpt":"<p>ceph 安装记录</p>","more":"<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>bash</span></div><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">su</span>\n<span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> python-is-python3 systemd chrony\n\nchronyc sources\n\n<span class=\"token number\">172.31</span>.18.113 ceph-01\n<span class=\"token number\">172.31</span>.26.40 ceph-02\n<span class=\"token number\">172.31</span>.24.19 ceph-03\n\n\n\n<span class=\"token comment\"># 安装 docker</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> apt-transport-https  ca-certificates  <span class=\"token function\">curl</span>  software-properties-common gnupg1 gnupg2\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -\napt-key fingerprint 0EBFCD88\n<span class=\"token function\">sudo</span> add-apt-repository    <span class=\"token string\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release <span class=\"token parameter variable\">-cs</span><span class=\"token variable\">)</span></span> stable\"</span>\n<span class=\"token function\">apt-get</span> update\n<span class=\"token function\">apt-get</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> docker-ce\n\n\n<span class=\"token comment\"># 下载</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">--silent</span> --remote-name <span class=\"token parameter variable\">--location</span> https://github.com/ceph/ceph/raw/quincy/src/cephadm/cephadm\n<span class=\"token function\">chmod</span> +x cephadm\n\n./cephadm add-repo <span class=\"token parameter variable\">--release</span> quincy\n\n./cephadm <span class=\"token function\">install</span>\n<span class=\"token function\">which</span> cephadm\n\ncephadm shell\ncephadm shell -- ceph <span class=\"token parameter variable\">-s</span>\n\ncephadm bootstrap --mon-ip *<span class=\"token operator\">&lt;</span>mon-ip<span class=\"token operator\">></span>*\ncephadm add-repo <span class=\"token parameter variable\">--release</span> quincy\ncephadm <span class=\"token function\">install</span> ceph-common\nceph <span class=\"token parameter variable\">-v</span>\nceph status\n\nceph orch <span class=\"token function\">host</span> label <span class=\"token function\">add</span> *<span class=\"token operator\">&lt;</span>host<span class=\"token operator\">></span>* _admin\n\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@ceph-02\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@ceph-03\n\nceph orch <span class=\"token function\">host</span> <span class=\"token function\">add</span> ip-172-31-26-40 <span class=\"token number\">172.31</span>.26.40 <span class=\"token parameter variable\">--labels</span> _admin\nceph orch <span class=\"token function\">host</span> <span class=\"token function\">add</span> ip-172-31-24-19 <span class=\"token number\">172.31</span>.24.19 <span class=\"token parameter variable\">--labels</span> _admin\n\nceph orch apply osd --all-available-devices\n\n\nceph fs volume create fs-01 <span class=\"token parameter variable\">--placement</span><span class=\"token operator\">=</span><span class=\"token string\">\"ip-172-31-18-113\"</span>\n<span class=\"token function\">stat</span> /sbin/mount.ceph\n\n<span class=\"token function\">mount</span> <span class=\"token parameter variable\">-t</span> ceph cephuser@.fs-01<span class=\"token operator\">=</span>/ <span class=\"token parameter variable\">-o</span> <span class=\"token assign-left variable\">secret</span><span class=\"token operator\">=</span>AQCR52Rjyuu7ChAAzZs+tBmFrp3bGvYAHZHwJg<span class=\"token operator\">==</span>\n\n<span class=\"token comment\"># 挂载cephfs 前提条件</span>\n<span class=\"token function\">ssh</span> <span class=\"token punctuation\">&#123;</span>user<span class=\"token punctuation\">&#125;</span>@<span class=\"token punctuation\">&#123;</span>mon-host<span class=\"token punctuation\">&#125;</span> <span class=\"token string\">\"sudo ceph config generate-minimal-conf\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/ceph/ceph.conf\n<span class=\"token function\">chmod</span> <span class=\"token number\">644</span> /etc/ceph/ceph.conf\n<span class=\"token function\">ssh</span> <span class=\"token punctuation\">&#123;</span>user<span class=\"token punctuation\">&#125;</span>@<span class=\"token punctuation\">&#123;</span>mon-host<span class=\"token punctuation\">&#125;</span> <span class=\"token string\">\"sudo ceph fs authorize cephfs client.djx / rw\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/ceph/ceph.client.foo.keyring\n<span class=\"token function\">chmod</span> <span class=\"token number\">600</span> /etc/ceph/ceph.client.foo.keyring\n\n<span class=\"token comment\"># 挂载 cephfs</span>\n<span class=\"token function\">mount</span> <span class=\"token parameter variable\">-t</span> ceph djx@f97eeb7c-5bed-11ed-9dfb-05518952193e.fs-01<span class=\"token operator\">=</span>/ /mnt/fs-01 <span class=\"token parameter variable\">-o</span> <span class=\"token assign-left variable\">mon_addr</span><span class=\"token operator\">=</span><span class=\"token number\">172.31</span>.18.113:6789/172.31.26.40:6789/172.31.24.19:6789,secret<span class=\"token operator\">=</span>AQCR52Rjyuu7ChAAzZs+tBmFrp3bGvYAHZHwJg<span class=\"token operator\">==</span>\n\n\n<span class=\"token comment\"># 操作服务</span>\nceph orch <span class=\"token operator\">&lt;</span>start<span class=\"token operator\">|</span>stop<span class=\"token operator\">|</span>restart<span class=\"token operator\">|</span>redeploy<span class=\"token operator\">|</span>reconfig<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>service_name<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"技术文章梳理","date":"2023-12-27T16:00:00.000Z","updated":"2023-12-27T16:00:00.000Z","_content":"\n# 技术文章\n## 计算机基础\n- <a href=\"https://www.cnblogs.com/itdragon/p/13700939.html\" target=\"_blank\">Socket 核心原理分享</a>\n- <a href=\"https://www.cnblogs.com/jingmoxukong/p/7755643.html\" target=\"_blank\">WebSocket 详解教程</a>\n- <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\" target=\"_blank\">常见 MIME 类型列表</a>\n## linux\n- <a href=\"https://blog.csdn.net/xingyegt/article/details/61548601\" target=\"_blank\">Vi 常用命令</a>\n- <a href=\"https://blog.csdn.net/u010452388/article/details/86481868\" target=\"_blank\">Linux固定IP地址</a>\n- <a href=\"https://www.cnblogs.com/liaojie970/p/6746230.html\" target=\"_blank\">linux如何复制文件夹和移动文件夹</a>\n- <a href=\"https://www.cnblogs.com/jiftle/p/9707518.html\" target=\"_blank\">linux find 命令查找文件和文件夹</a>\n- <a href=\"https://www.cnblogs.com/wmhuang/p/7516273.html\" target=\"_blank\">HTTPS静态服务搭建过程详解</a>\n- <a href=\"https://www.linuxidc.com/Linux/2017-04/143031.htm\" target=\"_blank\">Linux中查询当前用户的命令总结</a>\n- <a href=\"http://www.178linux.com/86931?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\">OpenSSL 及创建私有CA</a>\n## 对象存储\n- <a href=\"https://www.cnblogs.com/chris-cp/p/4835507.html\" target=\"_blank\">Amazon S3 API</a>\n- <a href=\"https://www.cnblogs.com/web424/p/6840207.html\" target=\"_blank\">Amazon S3 功能介绍</a>\n- <a href=\"https://blog.csdn.net/r_12xq/article/details/88424894\" target=\"_blank\">OOS对象存储</a>\n## Nginx\n- <a href=\"https://www.cnblogs.com/bjlhx/p/10477099.html\" target=\"_blank\">idea-常用插件-nginx</a>\n- <a href=\"https://www.runoob.com/w3cnote/nginx-setup-intro.html\" target=\"_blank\">Nginx 配置详解</a>\n- <a href=\"https://www.cnblogs.com/kevingrace/p/9512287.html\" target=\"_blank\">Nginx支持WebSocket反向代理-学习小结</a>\n## 数据库\n- <a href=\"https://www.cnblogs.com/takumicx/p/9998844.html\" target=\"_blank\">数据库事务的概念及其实现原理</a>\n- <a href=\"https://www.cnblogs.com/dong897812629/archive/2013/03/27/2981142.html\" target=\"_blank\">视图、索引、存储过程 、触发器、游标及事务</a>\n### MongoDB\n- <a href=\"https://www.cnblogs.com/TM0831/p/10606624.html\" target=\"_blank\">最详细的Windows平台安装MongoDB教程</a>\n### MySQL\n#### 基础\n- <a href=\"https://www.cnblogs.com/mycapple-zgs-111411/p/7680529.html\" target=\"_blank\">mysql创建存储过程</a>\n- <a href=\"https://blog.csdn.net/wuhuagu_wuhuaguo/article/details/90522435\" target=\"_blank\">MySQL 字符串截取函数</a>\n- <a href=\"https://www.cnblogs.com/boothsun/p/7792341.html\" target=\"_blank\">MySQL的七种join</a>\n- <a href=\"https://www.cnblogs.com/chenqionghe/p/4675844.html\" target=\"_blank\">MySQL CAST与CONVERT 函数的用法</a>\n- <a href=\"https://www.cnblogs.com/ggjucheng/p/3352280.html\" target=\"_blank\"> MySQL 获得当前日期时间 函数</a>\n- <a href=\"https://www.cnblogs.com/kaiwen1/p/6869025.html\" target=\"_blank\">MySQL外键设置中的的 Cascade、NO ACTION、Restrict、SET NULL&nbsp;</a>\n- <a href=\"https://blog.csdn.net/hry2015/article/details/76359281\" target=\"_blank\">mysql语法总结</a>\n- <a href=\"https://www.cnblogs.com/yang82/p/7794712.html\" target=\"_blank\">MySQL如何修改密码</a>\n- <a href=\"https://blog.csdn.net/mary19920410/article/details/76545053\" target=\"_blank\">浅析MySQL中concat以及group_concat的使用</a>\n#### 进阶\n- <a href=\"https://www.cnblogs.com/boothsun/p/8970952.html#autoid-7-1-0\" target=\"_blank\">MySQL索引底层实现原理 \n</a>\n- <a href=\"https://www.cnblogs.com/boothsun/p/8480909.html\" target=\"_blank\">MySQL查询性能优化&nbsp;</a>\n- <a href=\"https://www.cnblogs.com/vicenteforever/articles/1613119.html\" target=\"_blank\">InnoDB与Myisam的六大区别</a>\n- <a href=\"https://www.cnblogs.com/boothsun/p/7872669.html\" target=\"_blank\">MySQL 主从复制 \n</a>\n- <a href=\"https://www.cnblogs.com/boothsun/p/7774019.html\" target=\"_blank\">MySQL建立高性能索引策略 \n</a>\n- <a href=\"https://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html\" target=\"_blank\">理解MySQL——索引与优化</a>\n- <a href=\"https://www.cnblogs.com/zongyl/p/6021097.html\" target=\"_blank\">通过乐观锁（版本号）降低并发时的锁竞争问题</a>\n##### MySQL 优化\n- <a href=\"https://www.cnblogs.com/zhanjindong/p/3439042.html\" target=\"_blank\">MySQL优化—工欲善其事，必先利其器之EXPLAIN</a>\n- <a href=\"https://www.cnblogs.com/zhanjindong/p/3472804.html\" target=\"_blank\">MySQL优化—工欲善其事，必先利其器（2）</a>\n### Oracle\n- <a href=\"https://www.jb51.net/article/187271.htm\" target=\"_blank\">Windows10安装Oracle19c数据库详细记录</a>\n#### 授权\n- <a href=\"http://blog.itpub.net/29500582/viewspace-1314555/\" target=\"_blank\">Oracle查看当前登陆用户的权限或者角色</a>\n- <a href=\"https://www.cnblogs.com/roger112/p/7685307.html\" target=\"_blank\">Oracle创建用户、角色、授权、建表&nbsp;</a>\n- <a href=\"https://www.cnblogs.com/rosesmall/p/5767605.html\" target=\"_blank\">查看Oracle数据库的用户名和密码</a>\n### Redis\n- <a href=\"https://www.runoob.com/redis/redis-install.html\" target=\"_blank\">Redis 安装</a>\n- <a href=\"https://blog.csdn.net/yejingtao703/article/details/78484151\" target=\"_blank\">三张图秒懂Redis集群设计原理</a>\n- 在windows上搭建redis集群（Redis-Cluster）</a>\n- <a href=\"https://www.cnblogs.com/tommy-huang/p/6240083.html\" target=\"_blank\">Windows下搭建Redis集群</a>\n### SQL Server\n- <a href=\"https://www.cnblogs.com/wuyifu/p/3447870.html\" target=\"_blank\">SQL Server中的锁 详解 nolock,rowlock,tablock,xlock,paglock</a>\n- <a href=\"https://www.cnblogs.com/Brambling/p/6754993.html\" target=\"_blank\">SQL Server 创建索引（index）</a>\n- <a href=\"https://www.cnblogs.com/CreateMyself/p/6512692.html\" target=\"_blank\">SQL Server-聚焦NOLOCK、UPDLOCK、HOLDLOCK、READPAST你弄懂多少？</a>\n- <a href=\"https://www.w3school.com.cn/sql/func_datediff.asp\" target=\"_blank\">SQL Server DATEDIFF() 函数</a>\n- <a href=\"https://www.cnblogs.com/xwdreamer/archive/2012/06/23/2559344.html\" target=\"_blank\">查看sqlserver的端口号</a>\n- <a href=\"https://www.cnblogs.com/JohnnyBao/p/3799054.html\" target=\"_blank\">sql server 判断是否存在数据库，表，列，视图</a>\n- <a href=\"https://www.cnblogs.com/zhangpengnike/p/6122588.html\" target=\"_blank\">SQLServer 日期函数大全</a>\n## NodeJS\n- <a href=\"https://blog.csdn.net/uzizi/article/details/81046646\" target=\"_blank\">windows安装nvm的两种方式</a>\n## 分布式\n- <a href=\"https://www.cnblogs.com/jasontec/p/9698774.html\" target=\"_blank\">分布式系统理论--CAP理论、BASE理论</a>\n- <a href=\"https://www.cnblogs.com/boothsun/p/8976409.html\" target=\"_blank\">分布式事务解决办法 </a>\n## 面试题\n- Solr和ES对比</a>\n- <a href=\"https://juejin.cn/post/6844903955722403848#heading-0\" target=\"_blank\">9月腾讯、百度、阿里高频的29道SSM框架面试题解析</a>\n- <a href=\"https://blog.csdn.net/shmnh/article/details/42833291\" target=\"_blank\">28个MongoDB经典面试题</a>\n- <a href=\"https://blog.csdn.net/cliper9768/article/details/82870163\" target=\"_blank\">Dubbo面试题</a>\n- <a href=\"https://blog.csdn.net/qq_42629110/article/details/84963815\" target=\"_blank\">SpringCloud面试题</a>\n- <a href=\"https://blog.csdn.net/suxiexingchen/article/details/82020430\" target=\"_blank\">springBoot应用启动器基本的一共有44种</a>\n- <a href=\"https://blog.csdn.net/qq_34337272/article/details/81072874\" target=\"_blank\">面试必备之乐观锁与悲观锁</a>\n- <a href=\"https://juejin.cn/post/6844903809613840398\" target=\"_blank\">比较全面的中级Java面试题</a>\n## Java\n### 基础知识\n- <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247484920&amp;amp;idx=1&amp;amp;sn=c7167df0b36522935896565973d02cc9&amp;source=41#wechat_redirect\" target=\"_blank\">后端必备——数据通信知识(RPC、消息队列)一站式总结</a>\n#### JSR330\n- <a href=\"https://blog.csdn.net/u010278882/article/details/50773687\" target=\"_blank\">Java 依赖注入标准 JSR-330 简介</a>\n- <a href=\"https://www.chkui.com/article/java/java_jsr330\" target=\"_blank\">Java JSR330</a>\n- <a href=\"https://www.cnblogs.com/hhhshct/p/8523697.html\" target=\"_blank\">java实现HTTP请求的三种方式</a>\n- <a href=\"https://www.cnblogs.com/super-chao/p/6118739.html\" target=\"_blank\">java中cookie存取值</a>\n- <a href=\"https://baijiahao.baidu.com/s?id=1647621616629561468&amp;wfr=spider&amp;for=pc\" target=\"_blank\">详解java并发原子类AtomicInteger（基于jdk1.8源码分析）</a>\n- <a href=\"https://blog.csdn.net/weixin_38111667/article/details/81630290\" target=\"_blank\">JAVA &amp;&amp; java.lang.UnsatisfiedLinkError: The specified module could not be found.找不到指定模块</a>\n#### JVM\n- <a href=\"https://blog.csdn.net/weixin_40792878/article/details/82154402\" target=\"_blank\">Java虚拟机内存参数设置</a>\n#### 多线程\n- <a href=\"https://www.cnblogs.com/XHJT/p/3897440.html\" target=\"_blank\">线程同步的7种方式</a>\n### Spring\n- <a href=\"https://www.cnblogs.com/redcool/p/6426173.html\" target=\"_blank\">Spring线程池ThreadPoolTaskExecutor配置及详情</a>\n- <a href=\"https://www.cnblogs.com/pjfmeng/p/7551340.html\" target=\"_blank\">annotation之@Autowired、@Inject、@Resource三者区别</a>\n- <a href=\"https://blog.csdn.net/m0_37626813/article/details/78558010\" target=\"_blank\">Spring中@Component的作用</a>\n### SpringMVC\n- <a href=\"https://blog.csdn.net/littleskey/article/details/52841148\" target=\"_blank\">Spring Mvc @ResponseBody String返回中文字符串乱码</a>\n- <a href=\"https://www.cnblogs.com/WJ-163/p/6269409.html\" target=\"_blank\">SpringMVC文件上传与下载</a>\n- <a href=\"https://blog.csdn.net/liuxiao723846/article/details/46006275\" target=\"_blank\">jackson详解</a>\n### Spring Boot\n- <a href=\"https://www.cnblogs.com/itdragon/p/8686554.html\" target=\"_blank\">Spring Boot配置文件详解</a>\n- <a href=\"https://www.cnblogs.com/yuansc/p/9076604.html\" target=\"_blank\">SpringBoot配置Cors解决跨域请求问题</a>\n### Spring Cloud\n- <a href=\"https://blog.csdn.net/loushuiyifan/article/details/82702522\" target=\"_blank\">Hystrix原理与实战</a>\n### MyBatis\n- <a href=\"https://www.cnblogs.com/happyflyingpig/p/7739749.html\" target=\"_blank\">mybatis一级缓存二级缓存&nbsp;&nbsp;</a>\n### ShardingSpare\n- <a href=\"https://shardingsphere.apache.org/document/legacy/4.x/document/cn/overview/\" target=\"_blank\">shardingsphere 官方文档</a>\n### Zookeeper\n- <a href=\"https://www.cnblogs.com/jasontec/p/9651820.html\" target=\"_blank\">Zookeeper 与 Eureka 对比</a>\n- <a href=\"https://www.cnblogs.com/boothsun/p/8976502.html\" target=\"_blank\">ZooKeeper的典型应用场景 \n</a>\n- <a href=\"https://www.cnblogs.com/boothsun/p/8976829.html\" target=\"_blank\">ZK分布式锁（未完 待续）&nbsp;</a>\n### Druid\n- <a href=\"https://www.cnblogs.com/niejunlei/p/5977895.html\" target=\"_blank\">Druid 介绍及配置</a>\n### Log4j\n- <a href=\"http://www.blogjava.net/zJun/archive/2006/06/28/55511.html\" target=\"_blank\">配置Log4j(很详细)</a>\n### 日志分析\n- &nbsp;\n","source":"_posts/java/技术文章梳理.md","raw":"---\ntitle: 技术文章梳理\ndate: 2023-12-28\nupdated: 2023-12-28\ncategories: 技术栈\n---\n\n# 技术文章\n## 计算机基础\n- <a href=\"https://www.cnblogs.com/itdragon/p/13700939.html\" target=\"_blank\">Socket 核心原理分享</a>\n- <a href=\"https://www.cnblogs.com/jingmoxukong/p/7755643.html\" target=\"_blank\">WebSocket 详解教程</a>\n- <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\" target=\"_blank\">常见 MIME 类型列表</a>\n## linux\n- <a href=\"https://blog.csdn.net/xingyegt/article/details/61548601\" target=\"_blank\">Vi 常用命令</a>\n- <a href=\"https://blog.csdn.net/u010452388/article/details/86481868\" target=\"_blank\">Linux固定IP地址</a>\n- <a href=\"https://www.cnblogs.com/liaojie970/p/6746230.html\" target=\"_blank\">linux如何复制文件夹和移动文件夹</a>\n- <a href=\"https://www.cnblogs.com/jiftle/p/9707518.html\" target=\"_blank\">linux find 命令查找文件和文件夹</a>\n- <a href=\"https://www.cnblogs.com/wmhuang/p/7516273.html\" target=\"_blank\">HTTPS静态服务搭建过程详解</a>\n- <a href=\"https://www.linuxidc.com/Linux/2017-04/143031.htm\" target=\"_blank\">Linux中查询当前用户的命令总结</a>\n- <a href=\"http://www.178linux.com/86931?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\">OpenSSL 及创建私有CA</a>\n## 对象存储\n- <a href=\"https://www.cnblogs.com/chris-cp/p/4835507.html\" target=\"_blank\">Amazon S3 API</a>\n- <a href=\"https://www.cnblogs.com/web424/p/6840207.html\" target=\"_blank\">Amazon S3 功能介绍</a>\n- <a href=\"https://blog.csdn.net/r_12xq/article/details/88424894\" target=\"_blank\">OOS对象存储</a>\n## Nginx\n- <a href=\"https://www.cnblogs.com/bjlhx/p/10477099.html\" target=\"_blank\">idea-常用插件-nginx</a>\n- <a href=\"https://www.runoob.com/w3cnote/nginx-setup-intro.html\" target=\"_blank\">Nginx 配置详解</a>\n- <a href=\"https://www.cnblogs.com/kevingrace/p/9512287.html\" target=\"_blank\">Nginx支持WebSocket反向代理-学习小结</a>\n## 数据库\n- <a href=\"https://www.cnblogs.com/takumicx/p/9998844.html\" target=\"_blank\">数据库事务的概念及其实现原理</a>\n- <a href=\"https://www.cnblogs.com/dong897812629/archive/2013/03/27/2981142.html\" target=\"_blank\">视图、索引、存储过程 、触发器、游标及事务</a>\n### MongoDB\n- <a href=\"https://www.cnblogs.com/TM0831/p/10606624.html\" target=\"_blank\">最详细的Windows平台安装MongoDB教程</a>\n### MySQL\n#### 基础\n- <a href=\"https://www.cnblogs.com/mycapple-zgs-111411/p/7680529.html\" target=\"_blank\">mysql创建存储过程</a>\n- <a href=\"https://blog.csdn.net/wuhuagu_wuhuaguo/article/details/90522435\" target=\"_blank\">MySQL 字符串截取函数</a>\n- <a href=\"https://www.cnblogs.com/boothsun/p/7792341.html\" target=\"_blank\">MySQL的七种join</a>\n- <a href=\"https://www.cnblogs.com/chenqionghe/p/4675844.html\" target=\"_blank\">MySQL CAST与CONVERT 函数的用法</a>\n- <a href=\"https://www.cnblogs.com/ggjucheng/p/3352280.html\" target=\"_blank\"> MySQL 获得当前日期时间 函数</a>\n- <a href=\"https://www.cnblogs.com/kaiwen1/p/6869025.html\" target=\"_blank\">MySQL外键设置中的的 Cascade、NO ACTION、Restrict、SET NULL&nbsp;</a>\n- <a href=\"https://blog.csdn.net/hry2015/article/details/76359281\" target=\"_blank\">mysql语法总结</a>\n- <a href=\"https://www.cnblogs.com/yang82/p/7794712.html\" target=\"_blank\">MySQL如何修改密码</a>\n- <a href=\"https://blog.csdn.net/mary19920410/article/details/76545053\" target=\"_blank\">浅析MySQL中concat以及group_concat的使用</a>\n#### 进阶\n- <a href=\"https://www.cnblogs.com/boothsun/p/8970952.html#autoid-7-1-0\" target=\"_blank\">MySQL索引底层实现原理 \n</a>\n- <a href=\"https://www.cnblogs.com/boothsun/p/8480909.html\" target=\"_blank\">MySQL查询性能优化&nbsp;</a>\n- <a href=\"https://www.cnblogs.com/vicenteforever/articles/1613119.html\" target=\"_blank\">InnoDB与Myisam的六大区别</a>\n- <a href=\"https://www.cnblogs.com/boothsun/p/7872669.html\" target=\"_blank\">MySQL 主从复制 \n</a>\n- <a href=\"https://www.cnblogs.com/boothsun/p/7774019.html\" target=\"_blank\">MySQL建立高性能索引策略 \n</a>\n- <a href=\"https://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html\" target=\"_blank\">理解MySQL——索引与优化</a>\n- <a href=\"https://www.cnblogs.com/zongyl/p/6021097.html\" target=\"_blank\">通过乐观锁（版本号）降低并发时的锁竞争问题</a>\n##### MySQL 优化\n- <a href=\"https://www.cnblogs.com/zhanjindong/p/3439042.html\" target=\"_blank\">MySQL优化—工欲善其事，必先利其器之EXPLAIN</a>\n- <a href=\"https://www.cnblogs.com/zhanjindong/p/3472804.html\" target=\"_blank\">MySQL优化—工欲善其事，必先利其器（2）</a>\n### Oracle\n- <a href=\"https://www.jb51.net/article/187271.htm\" target=\"_blank\">Windows10安装Oracle19c数据库详细记录</a>\n#### 授权\n- <a href=\"http://blog.itpub.net/29500582/viewspace-1314555/\" target=\"_blank\">Oracle查看当前登陆用户的权限或者角色</a>\n- <a href=\"https://www.cnblogs.com/roger112/p/7685307.html\" target=\"_blank\">Oracle创建用户、角色、授权、建表&nbsp;</a>\n- <a href=\"https://www.cnblogs.com/rosesmall/p/5767605.html\" target=\"_blank\">查看Oracle数据库的用户名和密码</a>\n### Redis\n- <a href=\"https://www.runoob.com/redis/redis-install.html\" target=\"_blank\">Redis 安装</a>\n- <a href=\"https://blog.csdn.net/yejingtao703/article/details/78484151\" target=\"_blank\">三张图秒懂Redis集群设计原理</a>\n- 在windows上搭建redis集群（Redis-Cluster）</a>\n- <a href=\"https://www.cnblogs.com/tommy-huang/p/6240083.html\" target=\"_blank\">Windows下搭建Redis集群</a>\n### SQL Server\n- <a href=\"https://www.cnblogs.com/wuyifu/p/3447870.html\" target=\"_blank\">SQL Server中的锁 详解 nolock,rowlock,tablock,xlock,paglock</a>\n- <a href=\"https://www.cnblogs.com/Brambling/p/6754993.html\" target=\"_blank\">SQL Server 创建索引（index）</a>\n- <a href=\"https://www.cnblogs.com/CreateMyself/p/6512692.html\" target=\"_blank\">SQL Server-聚焦NOLOCK、UPDLOCK、HOLDLOCK、READPAST你弄懂多少？</a>\n- <a href=\"https://www.w3school.com.cn/sql/func_datediff.asp\" target=\"_blank\">SQL Server DATEDIFF() 函数</a>\n- <a href=\"https://www.cnblogs.com/xwdreamer/archive/2012/06/23/2559344.html\" target=\"_blank\">查看sqlserver的端口号</a>\n- <a href=\"https://www.cnblogs.com/JohnnyBao/p/3799054.html\" target=\"_blank\">sql server 判断是否存在数据库，表，列，视图</a>\n- <a href=\"https://www.cnblogs.com/zhangpengnike/p/6122588.html\" target=\"_blank\">SQLServer 日期函数大全</a>\n## NodeJS\n- <a href=\"https://blog.csdn.net/uzizi/article/details/81046646\" target=\"_blank\">windows安装nvm的两种方式</a>\n## 分布式\n- <a href=\"https://www.cnblogs.com/jasontec/p/9698774.html\" target=\"_blank\">分布式系统理论--CAP理论、BASE理论</a>\n- <a href=\"https://www.cnblogs.com/boothsun/p/8976409.html\" target=\"_blank\">分布式事务解决办法 </a>\n## 面试题\n- Solr和ES对比</a>\n- <a href=\"https://juejin.cn/post/6844903955722403848#heading-0\" target=\"_blank\">9月腾讯、百度、阿里高频的29道SSM框架面试题解析</a>\n- <a href=\"https://blog.csdn.net/shmnh/article/details/42833291\" target=\"_blank\">28个MongoDB经典面试题</a>\n- <a href=\"https://blog.csdn.net/cliper9768/article/details/82870163\" target=\"_blank\">Dubbo面试题</a>\n- <a href=\"https://blog.csdn.net/qq_42629110/article/details/84963815\" target=\"_blank\">SpringCloud面试题</a>\n- <a href=\"https://blog.csdn.net/suxiexingchen/article/details/82020430\" target=\"_blank\">springBoot应用启动器基本的一共有44种</a>\n- <a href=\"https://blog.csdn.net/qq_34337272/article/details/81072874\" target=\"_blank\">面试必备之乐观锁与悲观锁</a>\n- <a href=\"https://juejin.cn/post/6844903809613840398\" target=\"_blank\">比较全面的中级Java面试题</a>\n## Java\n### 基础知识\n- <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247484920&amp;amp;idx=1&amp;amp;sn=c7167df0b36522935896565973d02cc9&amp;source=41#wechat_redirect\" target=\"_blank\">后端必备——数据通信知识(RPC、消息队列)一站式总结</a>\n#### JSR330\n- <a href=\"https://blog.csdn.net/u010278882/article/details/50773687\" target=\"_blank\">Java 依赖注入标准 JSR-330 简介</a>\n- <a href=\"https://www.chkui.com/article/java/java_jsr330\" target=\"_blank\">Java JSR330</a>\n- <a href=\"https://www.cnblogs.com/hhhshct/p/8523697.html\" target=\"_blank\">java实现HTTP请求的三种方式</a>\n- <a href=\"https://www.cnblogs.com/super-chao/p/6118739.html\" target=\"_blank\">java中cookie存取值</a>\n- <a href=\"https://baijiahao.baidu.com/s?id=1647621616629561468&amp;wfr=spider&amp;for=pc\" target=\"_blank\">详解java并发原子类AtomicInteger（基于jdk1.8源码分析）</a>\n- <a href=\"https://blog.csdn.net/weixin_38111667/article/details/81630290\" target=\"_blank\">JAVA &amp;&amp; java.lang.UnsatisfiedLinkError: The specified module could not be found.找不到指定模块</a>\n#### JVM\n- <a href=\"https://blog.csdn.net/weixin_40792878/article/details/82154402\" target=\"_blank\">Java虚拟机内存参数设置</a>\n#### 多线程\n- <a href=\"https://www.cnblogs.com/XHJT/p/3897440.html\" target=\"_blank\">线程同步的7种方式</a>\n### Spring\n- <a href=\"https://www.cnblogs.com/redcool/p/6426173.html\" target=\"_blank\">Spring线程池ThreadPoolTaskExecutor配置及详情</a>\n- <a href=\"https://www.cnblogs.com/pjfmeng/p/7551340.html\" target=\"_blank\">annotation之@Autowired、@Inject、@Resource三者区别</a>\n- <a href=\"https://blog.csdn.net/m0_37626813/article/details/78558010\" target=\"_blank\">Spring中@Component的作用</a>\n### SpringMVC\n- <a href=\"https://blog.csdn.net/littleskey/article/details/52841148\" target=\"_blank\">Spring Mvc @ResponseBody String返回中文字符串乱码</a>\n- <a href=\"https://www.cnblogs.com/WJ-163/p/6269409.html\" target=\"_blank\">SpringMVC文件上传与下载</a>\n- <a href=\"https://blog.csdn.net/liuxiao723846/article/details/46006275\" target=\"_blank\">jackson详解</a>\n### Spring Boot\n- <a href=\"https://www.cnblogs.com/itdragon/p/8686554.html\" target=\"_blank\">Spring Boot配置文件详解</a>\n- <a href=\"https://www.cnblogs.com/yuansc/p/9076604.html\" target=\"_blank\">SpringBoot配置Cors解决跨域请求问题</a>\n### Spring Cloud\n- <a href=\"https://blog.csdn.net/loushuiyifan/article/details/82702522\" target=\"_blank\">Hystrix原理与实战</a>\n### MyBatis\n- <a href=\"https://www.cnblogs.com/happyflyingpig/p/7739749.html\" target=\"_blank\">mybatis一级缓存二级缓存&nbsp;&nbsp;</a>\n### ShardingSpare\n- <a href=\"https://shardingsphere.apache.org/document/legacy/4.x/document/cn/overview/\" target=\"_blank\">shardingsphere 官方文档</a>\n### Zookeeper\n- <a href=\"https://www.cnblogs.com/jasontec/p/9651820.html\" target=\"_blank\">Zookeeper 与 Eureka 对比</a>\n- <a href=\"https://www.cnblogs.com/boothsun/p/8976502.html\" target=\"_blank\">ZooKeeper的典型应用场景 \n</a>\n- <a href=\"https://www.cnblogs.com/boothsun/p/8976829.html\" target=\"_blank\">ZK分布式锁（未完 待续）&nbsp;</a>\n### Druid\n- <a href=\"https://www.cnblogs.com/niejunlei/p/5977895.html\" target=\"_blank\">Druid 介绍及配置</a>\n### Log4j\n- <a href=\"http://www.blogjava.net/zJun/archive/2006/06/28/55511.html\" target=\"_blank\">配置Log4j(很详细)</a>\n### 日志分析\n- &nbsp;\n","slug":"java/技术文章梳理","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor7i0003zc7hb7ai4szs","content":"<h1 id=\"技术文章\"><a href=\"#技术文章\" class=\"headerlink\" title=\"技术文章\"></a>技术文章</h1><h2 id=\"计算机基础\"><a href=\"#计算机基础\" class=\"headerlink\" title=\"计算机基础\"></a>计算机基础</h2><ul>\n<li><a href=\"https://www.cnblogs.com/itdragon/p/13700939.html\" target=\"_blank\">Socket 核心原理分享</a></li>\n<li><a href=\"https://www.cnblogs.com/jingmoxukong/p/7755643.html\" target=\"_blank\">WebSocket 详解教程</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\" target=\"_blank\">常见 MIME 类型列表</a></li>\n</ul>\n<h2 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h2><ul>\n<li><a href=\"https://blog.csdn.net/xingyegt/article/details/61548601\" target=\"_blank\">Vi 常用命令</a></li>\n<li><a href=\"https://blog.csdn.net/u010452388/article/details/86481868\" target=\"_blank\">Linux固定IP地址</a></li>\n<li><a href=\"https://www.cnblogs.com/liaojie970/p/6746230.html\" target=\"_blank\">linux如何复制文件夹和移动文件夹</a></li>\n<li><a href=\"https://www.cnblogs.com/jiftle/p/9707518.html\" target=\"_blank\">linux find 命令查找文件和文件夹</a></li>\n<li><a href=\"https://www.cnblogs.com/wmhuang/p/7516273.html\" target=\"_blank\">HTTPS静态服务搭建过程详解</a></li>\n<li><a href=\"https://www.linuxidc.com/Linux/2017-04/143031.htm\" target=\"_blank\">Linux中查询当前用户的命令总结</a></li>\n<li><a href=\"http://www.178linux.com/86931?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\">OpenSSL 及创建私有CA</a></li>\n</ul>\n<h2 id=\"对象存储\"><a href=\"#对象存储\" class=\"headerlink\" title=\"对象存储\"></a>对象存储</h2><ul>\n<li><a href=\"https://www.cnblogs.com/chris-cp/p/4835507.html\" target=\"_blank\">Amazon S3 API</a></li>\n<li><a href=\"https://www.cnblogs.com/web424/p/6840207.html\" target=\"_blank\">Amazon S3 功能介绍</a></li>\n<li><a href=\"https://blog.csdn.net/r_12xq/article/details/88424894\" target=\"_blank\">OOS对象存储</a></li>\n</ul>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><ul>\n<li><a href=\"https://www.cnblogs.com/bjlhx/p/10477099.html\" target=\"_blank\">idea-常用插件-nginx</a></li>\n<li><a href=\"https://www.runoob.com/w3cnote/nginx-setup-intro.html\" target=\"_blank\">Nginx 配置详解</a></li>\n<li><a href=\"https://www.cnblogs.com/kevingrace/p/9512287.html\" target=\"_blank\">Nginx支持WebSocket反向代理-学习小结</a></li>\n</ul>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><ul>\n<li><a href=\"https://www.cnblogs.com/takumicx/p/9998844.html\" target=\"_blank\">数据库事务的概念及其实现原理</a></li>\n<li><a href=\"https://www.cnblogs.com/dong897812629/archive/2013/03/27/2981142.html\" target=\"_blank\">视图、索引、存储过程 、触发器、游标及事务</a></li>\n</ul>\n<h3 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h3><ul>\n<li><a href=\"https://www.cnblogs.com/TM0831/p/10606624.html\" target=\"_blank\">最详细的Windows平台安装MongoDB教程</a></li>\n</ul>\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><h4 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h4><ul>\n<li><a href=\"https://www.cnblogs.com/mycapple-zgs-111411/p/7680529.html\" target=\"_blank\">mysql创建存储过程</a></li>\n<li><a href=\"https://blog.csdn.net/wuhuagu_wuhuaguo/article/details/90522435\" target=\"_blank\">MySQL 字符串截取函数</a></li>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/7792341.html\" target=\"_blank\">MySQL的七种join</a></li>\n<li><a href=\"https://www.cnblogs.com/chenqionghe/p/4675844.html\" target=\"_blank\">MySQL CAST与CONVERT 函数的用法</a></li>\n<li><a href=\"https://www.cnblogs.com/ggjucheng/p/3352280.html\" target=\"_blank\"> MySQL 获得当前日期时间 函数</a></li>\n<li><a href=\"https://www.cnblogs.com/kaiwen1/p/6869025.html\" target=\"_blank\">MySQL外键设置中的的 Cascade、NO ACTION、Restrict、SET NULL&amp;nbsp;</a></li>\n<li><a href=\"https://blog.csdn.net/hry2015/article/details/76359281\" target=\"_blank\">mysql语法总结</a></li>\n<li><a href=\"https://www.cnblogs.com/yang82/p/7794712.html\" target=\"_blank\">MySQL如何修改密码</a></li>\n<li><a href=\"https://blog.csdn.net/mary19920410/article/details/76545053\" target=\"_blank\">浅析MySQL中concat以及group_concat的使用</a></li>\n</ul>\n<h4 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h4><ul>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/8970952.html#autoid-7-1-0\" target=\"_blank\">MySQL索引底层实现原理 </a></li>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/8480909.html\" target=\"_blank\">MySQL查询性能优化&amp;nbsp;</a></li>\n<li><a href=\"https://www.cnblogs.com/vicenteforever/articles/1613119.html\" target=\"_blank\">InnoDB与Myisam的六大区别</a></li>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/7872669.html\" target=\"_blank\">MySQL 主从复制 </a></li>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/7774019.html\" target=\"_blank\">MySQL建立高性能索引策略 </a></li>\n<li><a href=\"https://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html\" target=\"_blank\">理解MySQL——索引与优化</a></li>\n<li><a href=\"https://www.cnblogs.com/zongyl/p/6021097.html\" target=\"_blank\">通过乐观锁（版本号）降低并发时的锁竞争问题</a></li>\n</ul>\n<h5 id=\"MySQL-优化\"><a href=\"#MySQL-优化\" class=\"headerlink\" title=\"MySQL 优化\"></a>MySQL 优化</h5><ul>\n<li><a href=\"https://www.cnblogs.com/zhanjindong/p/3439042.html\" target=\"_blank\">MySQL优化—工欲善其事，必先利其器之EXPLAIN</a></li>\n<li><a href=\"https://www.cnblogs.com/zhanjindong/p/3472804.html\" target=\"_blank\">MySQL优化—工欲善其事，必先利其器（2）</a></li>\n</ul>\n<h3 id=\"Oracle\"><a href=\"#Oracle\" class=\"headerlink\" title=\"Oracle\"></a>Oracle</h3><ul>\n<li><a href=\"https://www.jb51.net/article/187271.htm\" target=\"_blank\">Windows10安装Oracle19c数据库详细记录</a></li>\n</ul>\n<h4 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h4><ul>\n<li><a href=\"http://blog.itpub.net/29500582/viewspace-1314555/\" target=\"_blank\">Oracle查看当前登陆用户的权限或者角色</a></li>\n<li><a href=\"https://www.cnblogs.com/roger112/p/7685307.html\" target=\"_blank\">Oracle创建用户、角色、授权、建表&amp;nbsp;</a></li>\n<li><a href=\"https://www.cnblogs.com/rosesmall/p/5767605.html\" target=\"_blank\">查看Oracle数据库的用户名和密码</a></li>\n</ul>\n<h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><ul>\n<li><a href=\"https://www.runoob.com/redis/redis-install.html\" target=\"_blank\">Redis 安装</a></li>\n<li><a href=\"https://blog.csdn.net/yejingtao703/article/details/78484151\" target=\"_blank\">三张图秒懂Redis集群设计原理</a></li>\n<li>在windows上搭建redis集群（Redis-Cluster）</a></li>\n<li><a href=\"https://www.cnblogs.com/tommy-huang/p/6240083.html\" target=\"_blank\">Windows下搭建Redis集群</a></li>\n</ul>\n<h3 id=\"SQL-Server\"><a href=\"#SQL-Server\" class=\"headerlink\" title=\"SQL Server\"></a>SQL Server</h3><ul>\n<li><a href=\"https://www.cnblogs.com/wuyifu/p/3447870.html\" target=\"_blank\">SQL Server中的锁 详解 nolock,rowlock,tablock,xlock,paglock</a></li>\n<li><a href=\"https://www.cnblogs.com/Brambling/p/6754993.html\" target=\"_blank\">SQL Server 创建索引（index）</a></li>\n<li><a href=\"https://www.cnblogs.com/CreateMyself/p/6512692.html\" target=\"_blank\">SQL Server-聚焦NOLOCK、UPDLOCK、HOLDLOCK、READPAST你弄懂多少？</a></li>\n<li><a href=\"https://www.w3school.com.cn/sql/func_datediff.asp\" target=\"_blank\">SQL Server DATEDIFF() 函数</a></li>\n<li><a href=\"https://www.cnblogs.com/xwdreamer/archive/2012/06/23/2559344.html\" target=\"_blank\">查看sqlserver的端口号</a></li>\n<li><a href=\"https://www.cnblogs.com/JohnnyBao/p/3799054.html\" target=\"_blank\">sql server 判断是否存在数据库，表，列，视图</a></li>\n<li><a href=\"https://www.cnblogs.com/zhangpengnike/p/6122588.html\" target=\"_blank\">SQLServer 日期函数大全</a></li>\n</ul>\n<h2 id=\"NodeJS\"><a href=\"#NodeJS\" class=\"headerlink\" title=\"NodeJS\"></a>NodeJS</h2><ul>\n<li><a href=\"https://blog.csdn.net/uzizi/article/details/81046646\" target=\"_blank\">windows安装nvm的两种方式</a></li>\n</ul>\n<h2 id=\"分布式\"><a href=\"#分布式\" class=\"headerlink\" title=\"分布式\"></a>分布式</h2><ul>\n<li><a href=\"https://www.cnblogs.com/jasontec/p/9698774.html\" target=\"_blank\">分布式系统理论–CAP理论、BASE理论</a></li>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/8976409.html\" target=\"_blank\">分布式事务解决办法 </a></li>\n</ul>\n<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><ul>\n<li>Solr和ES对比</a></li>\n<li><a href=\"https://juejin.cn/post/6844903955722403848#heading-0\" target=\"_blank\">9月腾讯、百度、阿里高频的29道SSM框架面试题解析</a></li>\n<li><a href=\"https://blog.csdn.net/shmnh/article/details/42833291\" target=\"_blank\">28个MongoDB经典面试题</a></li>\n<li><a href=\"https://blog.csdn.net/cliper9768/article/details/82870163\" target=\"_blank\">Dubbo面试题</a></li>\n<li><a href=\"https://blog.csdn.net/qq_42629110/article/details/84963815\" target=\"_blank\">SpringCloud面试题</a></li>\n<li><a href=\"https://blog.csdn.net/suxiexingchen/article/details/82020430\" target=\"_blank\">springBoot应用启动器基本的一共有44种</a></li>\n<li><a href=\"https://blog.csdn.net/qq_34337272/article/details/81072874\" target=\"_blank\">面试必备之乐观锁与悲观锁</a></li>\n<li><a href=\"https://juejin.cn/post/6844903809613840398\" target=\"_blank\">比较全面的中级Java面试题</a></li>\n</ul>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247484920&amp;amp;idx=1&amp;amp;sn=c7167df0b36522935896565973d02cc9&amp;source=41#wechat_redirect\" target=\"_blank\">后端必备——数据通信知识(RPC、消息队列)一站式总结</a></li>\n</ul>\n<h4 id=\"JSR330\"><a href=\"#JSR330\" class=\"headerlink\" title=\"JSR330\"></a>JSR330</h4><ul>\n<li><a href=\"https://blog.csdn.net/u010278882/article/details/50773687\" target=\"_blank\">Java 依赖注入标准 JSR-330 简介</a></li>\n<li><a href=\"https://www.chkui.com/article/java/java_jsr330\" target=\"_blank\">Java JSR330</a></li>\n<li><a href=\"https://www.cnblogs.com/hhhshct/p/8523697.html\" target=\"_blank\">java实现HTTP请求的三种方式</a></li>\n<li><a href=\"https://www.cnblogs.com/super-chao/p/6118739.html\" target=\"_blank\">java中cookie存取值</a></li>\n<li><a href=\"https://baijiahao.baidu.com/s?id=1647621616629561468&amp;wfr=spider&amp;for=pc\" target=\"_blank\">详解java并发原子类AtomicInteger（基于jdk1.8源码分析）</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_38111667/article/details/81630290\" target=\"_blank\">JAVA &amp;&amp; java.lang.UnsatisfiedLinkError: The specified module could not be found.找不到指定模块</a></li>\n</ul>\n<h4 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h4><ul>\n<li><a href=\"https://blog.csdn.net/weixin_40792878/article/details/82154402\" target=\"_blank\">Java虚拟机内存参数设置</a></li>\n</ul>\n<h4 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h4><ul>\n<li><a href=\"https://www.cnblogs.com/XHJT/p/3897440.html\" target=\"_blank\">线程同步的7种方式</a></li>\n</ul>\n<h3 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h3><ul>\n<li><a href=\"https://www.cnblogs.com/redcool/p/6426173.html\" target=\"_blank\">Spring线程池ThreadPoolTaskExecutor配置及详情</a></li>\n<li><a href=\"https://www.cnblogs.com/pjfmeng/p/7551340.html\" target=\"_blank\">annotation之@Autowired、@Inject、@Resource三者区别</a></li>\n<li><a href=\"https://blog.csdn.net/m0_37626813/article/details/78558010\" target=\"_blank\">Spring中@Component的作用</a></li>\n</ul>\n<h3 id=\"SpringMVC\"><a href=\"#SpringMVC\" class=\"headerlink\" title=\"SpringMVC\"></a>SpringMVC</h3><ul>\n<li><a href=\"https://blog.csdn.net/littleskey/article/details/52841148\" target=\"_blank\">Spring Mvc @ResponseBody String返回中文字符串乱码</a></li>\n<li><a href=\"https://www.cnblogs.com/WJ-163/p/6269409.html\" target=\"_blank\">SpringMVC文件上传与下载</a></li>\n<li><a href=\"https://blog.csdn.net/liuxiao723846/article/details/46006275\" target=\"_blank\">jackson详解</a></li>\n</ul>\n<h3 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h3><ul>\n<li><a href=\"https://www.cnblogs.com/itdragon/p/8686554.html\" target=\"_blank\">Spring Boot配置文件详解</a></li>\n<li><a href=\"https://www.cnblogs.com/yuansc/p/9076604.html\" target=\"_blank\">SpringBoot配置Cors解决跨域请求问题</a></li>\n</ul>\n<h3 id=\"Spring-Cloud\"><a href=\"#Spring-Cloud\" class=\"headerlink\" title=\"Spring Cloud\"></a>Spring Cloud</h3><ul>\n<li><a href=\"https://blog.csdn.net/loushuiyifan/article/details/82702522\" target=\"_blank\">Hystrix原理与实战</a></li>\n</ul>\n<h3 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h3><ul>\n<li><a href=\"https://www.cnblogs.com/happyflyingpig/p/7739749.html\" target=\"_blank\">mybatis一级缓存二级缓存&amp;nbsp;&amp;nbsp;</a></li>\n</ul>\n<h3 id=\"ShardingSpare\"><a href=\"#ShardingSpare\" class=\"headerlink\" title=\"ShardingSpare\"></a>ShardingSpare</h3><ul>\n<li><a href=\"https://shardingsphere.apache.org/document/legacy/4.x/document/cn/overview/\" target=\"_blank\">shardingsphere 官方文档</a></li>\n</ul>\n<h3 id=\"Zookeeper\"><a href=\"#Zookeeper\" class=\"headerlink\" title=\"Zookeeper\"></a>Zookeeper</h3><ul>\n<li><a href=\"https://www.cnblogs.com/jasontec/p/9651820.html\" target=\"_blank\">Zookeeper 与 Eureka 对比</a></li>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/8976502.html\" target=\"_blank\">ZooKeeper的典型应用场景 </a></li>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/8976829.html\" target=\"_blank\">ZK分布式锁（未完 待续）&amp;nbsp;</a></li>\n</ul>\n<h3 id=\"Druid\"><a href=\"#Druid\" class=\"headerlink\" title=\"Druid\"></a>Druid</h3><ul>\n<li><a href=\"https://www.cnblogs.com/niejunlei/p/5977895.html\" target=\"_blank\">Druid 介绍及配置</a></li>\n</ul>\n<h3 id=\"Log4j\"><a href=\"#Log4j\" class=\"headerlink\" title=\"Log4j\"></a>Log4j</h3><ul>\n<li><a href=\"http://www.blogjava.net/zJun/archive/2006/06/28/55511.html\" target=\"_blank\">配置Log4j(很详细)</a></li>\n</ul>\n<h3 id=\"日志分析\"><a href=\"#日志分析\" class=\"headerlink\" title=\"日志分析\"></a>日志分析</h3><ul>\n<li>&amp;nbsp;</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric1.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"技术文章\"><a href=\"#技术文章\" class=\"headerlink\" title=\"技术文章\"></a>技术文章</h1><h2 id=\"计算机基础\"><a href=\"#计算机基础\" class=\"headerlink\" title=\"计算机基础\"></a>计算机基础</h2><ul>\n<li><a href=\"https://www.cnblogs.com/itdragon/p/13700939.html\" target=\"_blank\">Socket 核心原理分享</a></li>\n<li><a href=\"https://www.cnblogs.com/jingmoxukong/p/7755643.html\" target=\"_blank\">WebSocket 详解教程</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\" target=\"_blank\">常见 MIME 类型列表</a></li>\n</ul>\n<h2 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h2><ul>\n<li><a href=\"https://blog.csdn.net/xingyegt/article/details/61548601\" target=\"_blank\">Vi 常用命令</a></li>\n<li><a href=\"https://blog.csdn.net/u010452388/article/details/86481868\" target=\"_blank\">Linux固定IP地址</a></li>\n<li><a href=\"https://www.cnblogs.com/liaojie970/p/6746230.html\" target=\"_blank\">linux如何复制文件夹和移动文件夹</a></li>\n<li><a href=\"https://www.cnblogs.com/jiftle/p/9707518.html\" target=\"_blank\">linux find 命令查找文件和文件夹</a></li>\n<li><a href=\"https://www.cnblogs.com/wmhuang/p/7516273.html\" target=\"_blank\">HTTPS静态服务搭建过程详解</a></li>\n<li><a href=\"https://www.linuxidc.com/Linux/2017-04/143031.htm\" target=\"_blank\">Linux中查询当前用户的命令总结</a></li>\n<li><a href=\"http://www.178linux.com/86931?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\">OpenSSL 及创建私有CA</a></li>\n</ul>\n<h2 id=\"对象存储\"><a href=\"#对象存储\" class=\"headerlink\" title=\"对象存储\"></a>对象存储</h2><ul>\n<li><a href=\"https://www.cnblogs.com/chris-cp/p/4835507.html\" target=\"_blank\">Amazon S3 API</a></li>\n<li><a href=\"https://www.cnblogs.com/web424/p/6840207.html\" target=\"_blank\">Amazon S3 功能介绍</a></li>\n<li><a href=\"https://blog.csdn.net/r_12xq/article/details/88424894\" target=\"_blank\">OOS对象存储</a></li>\n</ul>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><ul>\n<li><a href=\"https://www.cnblogs.com/bjlhx/p/10477099.html\" target=\"_blank\">idea-常用插件-nginx</a></li>\n<li><a href=\"https://www.runoob.com/w3cnote/nginx-setup-intro.html\" target=\"_blank\">Nginx 配置详解</a></li>\n<li><a href=\"https://www.cnblogs.com/kevingrace/p/9512287.html\" target=\"_blank\">Nginx支持WebSocket反向代理-学习小结</a></li>\n</ul>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><ul>\n<li><a href=\"https://www.cnblogs.com/takumicx/p/9998844.html\" target=\"_blank\">数据库事务的概念及其实现原理</a></li>\n<li><a href=\"https://www.cnblogs.com/dong897812629/archive/2013/03/27/2981142.html\" target=\"_blank\">视图、索引、存储过程 、触发器、游标及事务</a></li>\n</ul>\n<h3 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h3><ul>\n<li><a href=\"https://www.cnblogs.com/TM0831/p/10606624.html\" target=\"_blank\">最详细的Windows平台安装MongoDB教程</a></li>\n</ul>\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><h4 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h4><ul>\n<li><a href=\"https://www.cnblogs.com/mycapple-zgs-111411/p/7680529.html\" target=\"_blank\">mysql创建存储过程</a></li>\n<li><a href=\"https://blog.csdn.net/wuhuagu_wuhuaguo/article/details/90522435\" target=\"_blank\">MySQL 字符串截取函数</a></li>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/7792341.html\" target=\"_blank\">MySQL的七种join</a></li>\n<li><a href=\"https://www.cnblogs.com/chenqionghe/p/4675844.html\" target=\"_blank\">MySQL CAST与CONVERT 函数的用法</a></li>\n<li><a href=\"https://www.cnblogs.com/ggjucheng/p/3352280.html\" target=\"_blank\"> MySQL 获得当前日期时间 函数</a></li>\n<li><a href=\"https://www.cnblogs.com/kaiwen1/p/6869025.html\" target=\"_blank\">MySQL外键设置中的的 Cascade、NO ACTION、Restrict、SET NULL&amp;nbsp;</a></li>\n<li><a href=\"https://blog.csdn.net/hry2015/article/details/76359281\" target=\"_blank\">mysql语法总结</a></li>\n<li><a href=\"https://www.cnblogs.com/yang82/p/7794712.html\" target=\"_blank\">MySQL如何修改密码</a></li>\n<li><a href=\"https://blog.csdn.net/mary19920410/article/details/76545053\" target=\"_blank\">浅析MySQL中concat以及group_concat的使用</a></li>\n</ul>\n<h4 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h4><ul>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/8970952.html#autoid-7-1-0\" target=\"_blank\">MySQL索引底层实现原理 </a></li>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/8480909.html\" target=\"_blank\">MySQL查询性能优化&amp;nbsp;</a></li>\n<li><a href=\"https://www.cnblogs.com/vicenteforever/articles/1613119.html\" target=\"_blank\">InnoDB与Myisam的六大区别</a></li>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/7872669.html\" target=\"_blank\">MySQL 主从复制 </a></li>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/7774019.html\" target=\"_blank\">MySQL建立高性能索引策略 </a></li>\n<li><a href=\"https://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html\" target=\"_blank\">理解MySQL——索引与优化</a></li>\n<li><a href=\"https://www.cnblogs.com/zongyl/p/6021097.html\" target=\"_blank\">通过乐观锁（版本号）降低并发时的锁竞争问题</a></li>\n</ul>\n<h5 id=\"MySQL-优化\"><a href=\"#MySQL-优化\" class=\"headerlink\" title=\"MySQL 优化\"></a>MySQL 优化</h5><ul>\n<li><a href=\"https://www.cnblogs.com/zhanjindong/p/3439042.html\" target=\"_blank\">MySQL优化—工欲善其事，必先利其器之EXPLAIN</a></li>\n<li><a href=\"https://www.cnblogs.com/zhanjindong/p/3472804.html\" target=\"_blank\">MySQL优化—工欲善其事，必先利其器（2）</a></li>\n</ul>\n<h3 id=\"Oracle\"><a href=\"#Oracle\" class=\"headerlink\" title=\"Oracle\"></a>Oracle</h3><ul>\n<li><a href=\"https://www.jb51.net/article/187271.htm\" target=\"_blank\">Windows10安装Oracle19c数据库详细记录</a></li>\n</ul>\n<h4 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h4><ul>\n<li><a href=\"http://blog.itpub.net/29500582/viewspace-1314555/\" target=\"_blank\">Oracle查看当前登陆用户的权限或者角色</a></li>\n<li><a href=\"https://www.cnblogs.com/roger112/p/7685307.html\" target=\"_blank\">Oracle创建用户、角色、授权、建表&amp;nbsp;</a></li>\n<li><a href=\"https://www.cnblogs.com/rosesmall/p/5767605.html\" target=\"_blank\">查看Oracle数据库的用户名和密码</a></li>\n</ul>\n<h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><ul>\n<li><a href=\"https://www.runoob.com/redis/redis-install.html\" target=\"_blank\">Redis 安装</a></li>\n<li><a href=\"https://blog.csdn.net/yejingtao703/article/details/78484151\" target=\"_blank\">三张图秒懂Redis集群设计原理</a></li>\n<li>在windows上搭建redis集群（Redis-Cluster）</a></li>\n<li><a href=\"https://www.cnblogs.com/tommy-huang/p/6240083.html\" target=\"_blank\">Windows下搭建Redis集群</a></li>\n</ul>\n<h3 id=\"SQL-Server\"><a href=\"#SQL-Server\" class=\"headerlink\" title=\"SQL Server\"></a>SQL Server</h3><ul>\n<li><a href=\"https://www.cnblogs.com/wuyifu/p/3447870.html\" target=\"_blank\">SQL Server中的锁 详解 nolock,rowlock,tablock,xlock,paglock</a></li>\n<li><a href=\"https://www.cnblogs.com/Brambling/p/6754993.html\" target=\"_blank\">SQL Server 创建索引（index）</a></li>\n<li><a href=\"https://www.cnblogs.com/CreateMyself/p/6512692.html\" target=\"_blank\">SQL Server-聚焦NOLOCK、UPDLOCK、HOLDLOCK、READPAST你弄懂多少？</a></li>\n<li><a href=\"https://www.w3school.com.cn/sql/func_datediff.asp\" target=\"_blank\">SQL Server DATEDIFF() 函数</a></li>\n<li><a href=\"https://www.cnblogs.com/xwdreamer/archive/2012/06/23/2559344.html\" target=\"_blank\">查看sqlserver的端口号</a></li>\n<li><a href=\"https://www.cnblogs.com/JohnnyBao/p/3799054.html\" target=\"_blank\">sql server 判断是否存在数据库，表，列，视图</a></li>\n<li><a href=\"https://www.cnblogs.com/zhangpengnike/p/6122588.html\" target=\"_blank\">SQLServer 日期函数大全</a></li>\n</ul>\n<h2 id=\"NodeJS\"><a href=\"#NodeJS\" class=\"headerlink\" title=\"NodeJS\"></a>NodeJS</h2><ul>\n<li><a href=\"https://blog.csdn.net/uzizi/article/details/81046646\" target=\"_blank\">windows安装nvm的两种方式</a></li>\n</ul>\n<h2 id=\"分布式\"><a href=\"#分布式\" class=\"headerlink\" title=\"分布式\"></a>分布式</h2><ul>\n<li><a href=\"https://www.cnblogs.com/jasontec/p/9698774.html\" target=\"_blank\">分布式系统理论–CAP理论、BASE理论</a></li>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/8976409.html\" target=\"_blank\">分布式事务解决办法 </a></li>\n</ul>\n<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><ul>\n<li>Solr和ES对比</a></li>\n<li><a href=\"https://juejin.cn/post/6844903955722403848#heading-0\" target=\"_blank\">9月腾讯、百度、阿里高频的29道SSM框架面试题解析</a></li>\n<li><a href=\"https://blog.csdn.net/shmnh/article/details/42833291\" target=\"_blank\">28个MongoDB经典面试题</a></li>\n<li><a href=\"https://blog.csdn.net/cliper9768/article/details/82870163\" target=\"_blank\">Dubbo面试题</a></li>\n<li><a href=\"https://blog.csdn.net/qq_42629110/article/details/84963815\" target=\"_blank\">SpringCloud面试题</a></li>\n<li><a href=\"https://blog.csdn.net/suxiexingchen/article/details/82020430\" target=\"_blank\">springBoot应用启动器基本的一共有44种</a></li>\n<li><a href=\"https://blog.csdn.net/qq_34337272/article/details/81072874\" target=\"_blank\">面试必备之乐观锁与悲观锁</a></li>\n<li><a href=\"https://juejin.cn/post/6844903809613840398\" target=\"_blank\">比较全面的中级Java面试题</a></li>\n</ul>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247484920&amp;amp;idx=1&amp;amp;sn=c7167df0b36522935896565973d02cc9&amp;source=41#wechat_redirect\" target=\"_blank\">后端必备——数据通信知识(RPC、消息队列)一站式总结</a></li>\n</ul>\n<h4 id=\"JSR330\"><a href=\"#JSR330\" class=\"headerlink\" title=\"JSR330\"></a>JSR330</h4><ul>\n<li><a href=\"https://blog.csdn.net/u010278882/article/details/50773687\" target=\"_blank\">Java 依赖注入标准 JSR-330 简介</a></li>\n<li><a href=\"https://www.chkui.com/article/java/java_jsr330\" target=\"_blank\">Java JSR330</a></li>\n<li><a href=\"https://www.cnblogs.com/hhhshct/p/8523697.html\" target=\"_blank\">java实现HTTP请求的三种方式</a></li>\n<li><a href=\"https://www.cnblogs.com/super-chao/p/6118739.html\" target=\"_blank\">java中cookie存取值</a></li>\n<li><a href=\"https://baijiahao.baidu.com/s?id=1647621616629561468&amp;wfr=spider&amp;for=pc\" target=\"_blank\">详解java并发原子类AtomicInteger（基于jdk1.8源码分析）</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_38111667/article/details/81630290\" target=\"_blank\">JAVA &amp;&amp; java.lang.UnsatisfiedLinkError: The specified module could not be found.找不到指定模块</a></li>\n</ul>\n<h4 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h4><ul>\n<li><a href=\"https://blog.csdn.net/weixin_40792878/article/details/82154402\" target=\"_blank\">Java虚拟机内存参数设置</a></li>\n</ul>\n<h4 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h4><ul>\n<li><a href=\"https://www.cnblogs.com/XHJT/p/3897440.html\" target=\"_blank\">线程同步的7种方式</a></li>\n</ul>\n<h3 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h3><ul>\n<li><a href=\"https://www.cnblogs.com/redcool/p/6426173.html\" target=\"_blank\">Spring线程池ThreadPoolTaskExecutor配置及详情</a></li>\n<li><a href=\"https://www.cnblogs.com/pjfmeng/p/7551340.html\" target=\"_blank\">annotation之@Autowired、@Inject、@Resource三者区别</a></li>\n<li><a href=\"https://blog.csdn.net/m0_37626813/article/details/78558010\" target=\"_blank\">Spring中@Component的作用</a></li>\n</ul>\n<h3 id=\"SpringMVC\"><a href=\"#SpringMVC\" class=\"headerlink\" title=\"SpringMVC\"></a>SpringMVC</h3><ul>\n<li><a href=\"https://blog.csdn.net/littleskey/article/details/52841148\" target=\"_blank\">Spring Mvc @ResponseBody String返回中文字符串乱码</a></li>\n<li><a href=\"https://www.cnblogs.com/WJ-163/p/6269409.html\" target=\"_blank\">SpringMVC文件上传与下载</a></li>\n<li><a href=\"https://blog.csdn.net/liuxiao723846/article/details/46006275\" target=\"_blank\">jackson详解</a></li>\n</ul>\n<h3 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h3><ul>\n<li><a href=\"https://www.cnblogs.com/itdragon/p/8686554.html\" target=\"_blank\">Spring Boot配置文件详解</a></li>\n<li><a href=\"https://www.cnblogs.com/yuansc/p/9076604.html\" target=\"_blank\">SpringBoot配置Cors解决跨域请求问题</a></li>\n</ul>\n<h3 id=\"Spring-Cloud\"><a href=\"#Spring-Cloud\" class=\"headerlink\" title=\"Spring Cloud\"></a>Spring Cloud</h3><ul>\n<li><a href=\"https://blog.csdn.net/loushuiyifan/article/details/82702522\" target=\"_blank\">Hystrix原理与实战</a></li>\n</ul>\n<h3 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h3><ul>\n<li><a href=\"https://www.cnblogs.com/happyflyingpig/p/7739749.html\" target=\"_blank\">mybatis一级缓存二级缓存&amp;nbsp;&amp;nbsp;</a></li>\n</ul>\n<h3 id=\"ShardingSpare\"><a href=\"#ShardingSpare\" class=\"headerlink\" title=\"ShardingSpare\"></a>ShardingSpare</h3><ul>\n<li><a href=\"https://shardingsphere.apache.org/document/legacy/4.x/document/cn/overview/\" target=\"_blank\">shardingsphere 官方文档</a></li>\n</ul>\n<h3 id=\"Zookeeper\"><a href=\"#Zookeeper\" class=\"headerlink\" title=\"Zookeeper\"></a>Zookeeper</h3><ul>\n<li><a href=\"https://www.cnblogs.com/jasontec/p/9651820.html\" target=\"_blank\">Zookeeper 与 Eureka 对比</a></li>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/8976502.html\" target=\"_blank\">ZooKeeper的典型应用场景 </a></li>\n<li><a href=\"https://www.cnblogs.com/boothsun/p/8976829.html\" target=\"_blank\">ZK分布式锁（未完 待续）&amp;nbsp;</a></li>\n</ul>\n<h3 id=\"Druid\"><a href=\"#Druid\" class=\"headerlink\" title=\"Druid\"></a>Druid</h3><ul>\n<li><a href=\"https://www.cnblogs.com/niejunlei/p/5977895.html\" target=\"_blank\">Druid 介绍及配置</a></li>\n</ul>\n<h3 id=\"Log4j\"><a href=\"#Log4j\" class=\"headerlink\" title=\"Log4j\"></a>Log4j</h3><ul>\n<li><a href=\"http://www.blogjava.net/zJun/archive/2006/06/28/55511.html\" target=\"_blank\">配置Log4j(很详细)</a></li>\n</ul>\n<h3 id=\"日志分析\"><a href=\"#日志分析\" class=\"headerlink\" title=\"日志分析\"></a>日志分析</h3><ul>\n<li>&amp;nbsp;</li>\n</ul>\n"},{"title":"重塑生活的八个步骤","date":"2023-12-17T16:00:00.000Z","updated":"2023-12-17T16:00:00.000Z","_content":"\n# 重塑生活的八个步骤\n\n## 一、洗净你的肉身\n\n洗澡，刷牙，穿上清新的衣服，时刻让自己的肉身整洁干净，这将向你的潜意识传递【你值得呵护】的信号。\n\n## 二、整顿你的领地\n\n打扫你的寝室，彻底清理你的房子，扔掉那些让你心烦意乱的废物。因为你的空间怎么样，你就是怎么样的人。如果你的空间乱七八糟，那你也是乱七八糟人。\n\n## 三、走出家门\n\n在我们信步行走、阳光洒脸、眼珠左右转动之时，大脑的运转状态最佳。走出去，因为我们生来就是为了与他人建立关系和与社群建立联系的。如果我们永远不离开家，我们将会悄然错失真实的生活。\n\n## 四、流汗\n\n让血液流动起来，去出点汗，因为消耗能量也会产生能量。\n\n## 五、监控你的小金库\n\n巨头每天都在做偷鸡摸狗的事，通过自动订阅掏空辛苦挣来的钱。请立刻打开你的订阅管理，取消所有默认的支付行为，你的小金库很重要！\n\n## 六、移除束缚，脱身引诱\n\n关闭通知，取关不必要的社交账号，戒断所有抽烟喝酒的成瘾行为。\n\n## 七、制定策略\n\n别再漫无目的地生活，天上不会掉馅饼。立即制定策略，付诸行动。\n\n## 八、臣服\n\n臣服于你必须做的事情，你已经思考过了，关闭你的大脑，卸下过度思考的负担。学会让你的理性思考静音。","source":"_posts/life/重塑生活的八个步骤.md","raw":"---\ntitle: 重塑生活的八个步骤\ndate: 2023-12-18\nupdated: 2023-12-18\ncategories: 生活\n---\n\n# 重塑生活的八个步骤\n\n## 一、洗净你的肉身\n\n洗澡，刷牙，穿上清新的衣服，时刻让自己的肉身整洁干净，这将向你的潜意识传递【你值得呵护】的信号。\n\n## 二、整顿你的领地\n\n打扫你的寝室，彻底清理你的房子，扔掉那些让你心烦意乱的废物。因为你的空间怎么样，你就是怎么样的人。如果你的空间乱七八糟，那你也是乱七八糟人。\n\n## 三、走出家门\n\n在我们信步行走、阳光洒脸、眼珠左右转动之时，大脑的运转状态最佳。走出去，因为我们生来就是为了与他人建立关系和与社群建立联系的。如果我们永远不离开家，我们将会悄然错失真实的生活。\n\n## 四、流汗\n\n让血液流动起来，去出点汗，因为消耗能量也会产生能量。\n\n## 五、监控你的小金库\n\n巨头每天都在做偷鸡摸狗的事，通过自动订阅掏空辛苦挣来的钱。请立刻打开你的订阅管理，取消所有默认的支付行为，你的小金库很重要！\n\n## 六、移除束缚，脱身引诱\n\n关闭通知，取关不必要的社交账号，戒断所有抽烟喝酒的成瘾行为。\n\n## 七、制定策略\n\n别再漫无目的地生活，天上不会掉馅饼。立即制定策略，付诸行动。\n\n## 八、臣服\n\n臣服于你必须做的事情，你已经思考过了，关闭你的大脑，卸下过度思考的负担。学会让你的理性思考静音。","slug":"life/重塑生活的八个步骤","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor7l0007zc7h2z6f5xua","content":"<h1 id=\"重塑生活的八个步骤\"><a href=\"#重塑生活的八个步骤\" class=\"headerlink\" title=\"重塑生活的八个步骤\"></a>重塑生活的八个步骤</h1><h2 id=\"一、洗净你的肉身\"><a href=\"#一、洗净你的肉身\" class=\"headerlink\" title=\"一、洗净你的肉身\"></a>一、洗净你的肉身</h2><p>洗澡，刷牙，穿上清新的衣服，时刻让自己的肉身整洁干净，这将向你的潜意识传递【你值得呵护】的信号。</p>\n<h2 id=\"二、整顿你的领地\"><a href=\"#二、整顿你的领地\" class=\"headerlink\" title=\"二、整顿你的领地\"></a>二、整顿你的领地</h2><p>打扫你的寝室，彻底清理你的房子，扔掉那些让你心烦意乱的废物。因为你的空间怎么样，你就是怎么样的人。如果你的空间乱七八糟，那你也是乱七八糟人。</p>\n<h2 id=\"三、走出家门\"><a href=\"#三、走出家门\" class=\"headerlink\" title=\"三、走出家门\"></a>三、走出家门</h2><p>在我们信步行走、阳光洒脸、眼珠左右转动之时，大脑的运转状态最佳。走出去，因为我们生来就是为了与他人建立关系和与社群建立联系的。如果我们永远不离开家，我们将会悄然错失真实的生活。</p>\n<h2 id=\"四、流汗\"><a href=\"#四、流汗\" class=\"headerlink\" title=\"四、流汗\"></a>四、流汗</h2><p>让血液流动起来，去出点汗，因为消耗能量也会产生能量。</p>\n<h2 id=\"五、监控你的小金库\"><a href=\"#五、监控你的小金库\" class=\"headerlink\" title=\"五、监控你的小金库\"></a>五、监控你的小金库</h2><p>巨头每天都在做偷鸡摸狗的事，通过自动订阅掏空辛苦挣来的钱。请立刻打开你的订阅管理，取消所有默认的支付行为，你的小金库很重要！</p>\n<h2 id=\"六、移除束缚，脱身引诱\"><a href=\"#六、移除束缚，脱身引诱\" class=\"headerlink\" title=\"六、移除束缚，脱身引诱\"></a>六、移除束缚，脱身引诱</h2><p>关闭通知，取关不必要的社交账号，戒断所有抽烟喝酒的成瘾行为。</p>\n<h2 id=\"七、制定策略\"><a href=\"#七、制定策略\" class=\"headerlink\" title=\"七、制定策略\"></a>七、制定策略</h2><p>别再漫无目的地生活，天上不会掉馅饼。立即制定策略，付诸行动。</p>\n<h2 id=\"八、臣服\"><a href=\"#八、臣服\" class=\"headerlink\" title=\"八、臣服\"></a>八、臣服</h2><p>臣服于你必须做的事情，你已经思考过了，关闭你的大脑，卸下过度思考的负担。学会让你的理性思考静音。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric5.png","cover_type":"img","excerpt":"","more":"<h1 id=\"重塑生活的八个步骤\"><a href=\"#重塑生活的八个步骤\" class=\"headerlink\" title=\"重塑生活的八个步骤\"></a>重塑生活的八个步骤</h1><h2 id=\"一、洗净你的肉身\"><a href=\"#一、洗净你的肉身\" class=\"headerlink\" title=\"一、洗净你的肉身\"></a>一、洗净你的肉身</h2><p>洗澡，刷牙，穿上清新的衣服，时刻让自己的肉身整洁干净，这将向你的潜意识传递【你值得呵护】的信号。</p>\n<h2 id=\"二、整顿你的领地\"><a href=\"#二、整顿你的领地\" class=\"headerlink\" title=\"二、整顿你的领地\"></a>二、整顿你的领地</h2><p>打扫你的寝室，彻底清理你的房子，扔掉那些让你心烦意乱的废物。因为你的空间怎么样，你就是怎么样的人。如果你的空间乱七八糟，那你也是乱七八糟人。</p>\n<h2 id=\"三、走出家门\"><a href=\"#三、走出家门\" class=\"headerlink\" title=\"三、走出家门\"></a>三、走出家门</h2><p>在我们信步行走、阳光洒脸、眼珠左右转动之时，大脑的运转状态最佳。走出去，因为我们生来就是为了与他人建立关系和与社群建立联系的。如果我们永远不离开家，我们将会悄然错失真实的生活。</p>\n<h2 id=\"四、流汗\"><a href=\"#四、流汗\" class=\"headerlink\" title=\"四、流汗\"></a>四、流汗</h2><p>让血液流动起来，去出点汗，因为消耗能量也会产生能量。</p>\n<h2 id=\"五、监控你的小金库\"><a href=\"#五、监控你的小金库\" class=\"headerlink\" title=\"五、监控你的小金库\"></a>五、监控你的小金库</h2><p>巨头每天都在做偷鸡摸狗的事，通过自动订阅掏空辛苦挣来的钱。请立刻打开你的订阅管理，取消所有默认的支付行为，你的小金库很重要！</p>\n<h2 id=\"六、移除束缚，脱身引诱\"><a href=\"#六、移除束缚，脱身引诱\" class=\"headerlink\" title=\"六、移除束缚，脱身引诱\"></a>六、移除束缚，脱身引诱</h2><p>关闭通知，取关不必要的社交账号，戒断所有抽烟喝酒的成瘾行为。</p>\n<h2 id=\"七、制定策略\"><a href=\"#七、制定策略\" class=\"headerlink\" title=\"七、制定策略\"></a>七、制定策略</h2><p>别再漫无目的地生活，天上不会掉馅饼。立即制定策略，付诸行动。</p>\n<h2 id=\"八、臣服\"><a href=\"#八、臣服\" class=\"headerlink\" title=\"八、臣服\"></a>八、臣服</h2><p>臣服于你必须做的事情，你已经思考过了，关闭你的大脑，卸下过度思考的负担。学会让你的理性思考静音。</p>\n"},{"title":"用 Dockerfile 文件构建带 systemd 的ubuntu 22.04","date":"2023-10-19T16:00:00.000Z","updated":"2023-10-19T16:00:00.000Z","copyright":false,"_content":"\n# 用 Dockerfile 文件构建带 systemd 的ubuntu 22.04\n\n## Dockerfile 文件\n```Dockerfile\nFROM ubuntu:22.04\nWORKDIR /root\n# noninteractive 配置时不需要输入任何信息\nENV DEBIAN_FRONTEND=\"noninteractive\"\n# 配置时区\nENV TZ=Asia/Shanghai\n# 配置apt源\nRUN sed -i 's@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g' /etc/apt/sources.list\n# 安装必要的软件\nRUN apt update && apt install -y init locales\n# 配置语言环境\nRUN locale-gen en_US.UTF-8\n# 配置 entrypoint 为 init, 是 init 可以作为 pid 1 运行, 并且可以启动 systemd\nENTRYPOINT [\"/usr/sbin/init\"]\n```\n\n## 构建镜像\n```bash\ndocker build -t ubuntu:22.04-systemd .\n```\n\n## 运行容器\n```bash\ndocker run -it --privileged --name ubuntu -h ubuntu ubuntu:22.04-systemd\n```\n","source":"_posts/docker/用 Dockerfile 文件构建带 systemd 的ubuntu 22.04.md","raw":"---\ntitle: 用 Dockerfile 文件构建带 systemd 的ubuntu 22.04\ndate: 2023-10-20\nupdated: 2023-10-20\ntags: [Dockerfile]\ncategories: Docker\ncopyright: false\n---\n\n# 用 Dockerfile 文件构建带 systemd 的ubuntu 22.04\n\n## Dockerfile 文件\n```Dockerfile\nFROM ubuntu:22.04\nWORKDIR /root\n# noninteractive 配置时不需要输入任何信息\nENV DEBIAN_FRONTEND=\"noninteractive\"\n# 配置时区\nENV TZ=Asia/Shanghai\n# 配置apt源\nRUN sed -i 's@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g' /etc/apt/sources.list\n# 安装必要的软件\nRUN apt update && apt install -y init locales\n# 配置语言环境\nRUN locale-gen en_US.UTF-8\n# 配置 entrypoint 为 init, 是 init 可以作为 pid 1 运行, 并且可以启动 systemd\nENTRYPOINT [\"/usr/sbin/init\"]\n```\n\n## 构建镜像\n```bash\ndocker build -t ubuntu:22.04-systemd .\n```\n\n## 运行容器\n```bash\ndocker run -it --privileged --name ubuntu -h ubuntu ubuntu:22.04-systemd\n```\n","slug":"docker/用 Dockerfile 文件构建带 systemd 的ubuntu 22.04","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor7m0009zc7h6akchd5q","content":"<h1 id=\"用-Dockerfile-文件构建带-systemd-的ubuntu-22-04\"><a href=\"#用-Dockerfile-文件构建带-systemd-的ubuntu-22-04\" class=\"headerlink\" title=\"用 Dockerfile 文件构建带 systemd 的ubuntu 22.04\"></a>用 Dockerfile 文件构建带 systemd 的ubuntu 22.04</h1><h2 id=\"Dockerfile-文件\"><a href=\"#Dockerfile-文件\" class=\"headerlink\" title=\"Dockerfile 文件\"></a>Dockerfile 文件</h2><pre class=\"line-numbers language-Dockerfile\" data-language=\"Dockerfile\"><code class=\"language-Dockerfile\">FROM ubuntu:22.04\nWORKDIR &#x2F;root\n# noninteractive 配置时不需要输入任何信息\nENV DEBIAN_FRONTEND&#x3D;&quot;noninteractive&quot;\n# 配置时区\nENV TZ&#x3D;Asia&#x2F;Shanghai\n# 配置apt源\nRUN sed -i &#39;s@&#x2F;&#x2F;.*archive.ubuntu.com@&#x2F;&#x2F;mirrors.ustc.edu.cn@g&#39; &#x2F;etc&#x2F;apt&#x2F;sources.list\n# 安装必要的软件\nRUN apt update &amp;&amp; apt install -y init locales\n# 配置语言环境\nRUN locale-gen en_US.UTF-8\n# 配置 entrypoint 为 init, 是 init 可以作为 pid 1 运行, 并且可以启动 systemd\nENTRYPOINT [&quot;&#x2F;usr&#x2F;sbin&#x2F;init&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> ubuntu:22.04-systemd <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--privileged</span> <span class=\"token parameter variable\">--name</span> ubuntu <span class=\"token parameter variable\">-h</span> ubuntu ubuntu:22.04-systemd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric7.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"用-Dockerfile-文件构建带-systemd-的ubuntu-22-04\"><a href=\"#用-Dockerfile-文件构建带-systemd-的ubuntu-22-04\" class=\"headerlink\" title=\"用 Dockerfile 文件构建带 systemd 的ubuntu 22.04\"></a>用 Dockerfile 文件构建带 systemd 的ubuntu 22.04</h1><h2 id=\"Dockerfile-文件\"><a href=\"#Dockerfile-文件\" class=\"headerlink\" title=\"Dockerfile 文件\"></a>Dockerfile 文件</h2><pre class=\"line-numbers language-Dockerfile\" data-language=\"Dockerfile\"><code class=\"language-Dockerfile\">FROM ubuntu:22.04\nWORKDIR &#x2F;root\n# noninteractive 配置时不需要输入任何信息\nENV DEBIAN_FRONTEND&#x3D;&quot;noninteractive&quot;\n# 配置时区\nENV TZ&#x3D;Asia&#x2F;Shanghai\n# 配置apt源\nRUN sed -i &#39;s@&#x2F;&#x2F;.*archive.ubuntu.com@&#x2F;&#x2F;mirrors.ustc.edu.cn@g&#39; &#x2F;etc&#x2F;apt&#x2F;sources.list\n# 安装必要的软件\nRUN apt update &amp;&amp; apt install -y init locales\n# 配置语言环境\nRUN locale-gen en_US.UTF-8\n# 配置 entrypoint 为 init, 是 init 可以作为 pid 1 运行, 并且可以启动 systemd\nENTRYPOINT [&quot;&#x2F;usr&#x2F;sbin&#x2F;init&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> ubuntu:22.04-systemd <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--privileged</span> <span class=\"token parameter variable\">--name</span> ubuntu <span class=\"token parameter variable\">-h</span> ubuntu ubuntu:22.04-systemd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n"},{"title":"Ceph集群部署","toc":true,"cover":"/img/default_cover/geomeric3.png","date":"2021-10-01T08:00:00.000Z","updated":"2021-10-01T08:00:00.000Z","_content":"\n# 一、Ceph 简介\n\n> 一个 Ceph 存储集群需要至少一个 Ceph 监视器、Ceph 管理器和 Ceph OSD(对象存储守护进程)。在运行 Ceph 文件系统客户端时，也需要 Ceph 元数据服务器。\n\n<!-- more -->\n\n- **Monitors**:\n\n  - Ceph 监视器(`ceph-mon`)维护着展示集群状态的各种图表，包括监视器图、管理器图、OSD 图、MDS 图和 CRUSH 图。这些图是 Ceph 守护进程相互协调所必需的关键集群状态。\n  - 监视器还负责管理守护进程和客户端之间的身份验证。为了实现冗余和高可用性，通常需要至少三个监视器。\n\n- **Managers**: [Ceph Manager](https://docs.ceph.com/en/latest/glossary/#term-Ceph-Manager)守护程序(`ceph-mgr`)\n\n  - 负责跟踪运行时指标和 Ceph 群集的当前状态，包括存储利用率、当前性能指标和系统负载。\n  - Ceph Manager 守护程序还托管基于 python 的模块来管理和公开 Ceph 群集信息，包括基于 Web 的[Ceph 仪表板和](https://docs.ceph.com/en/latest/mgr/dashboard/#mgr-dashboard) [REST API](https://docs.ceph.com/en/latest/mgr/restful)。高可用性通常需要至少两个管理器。\n\n- **OSDs**: [Ceph OSD](https://docs.ceph.com/en/latest/glossary/#term-Ceph-OSD) (object storage daemon, `ceph-osd`)存储数据，处理数据复制，恢复，重新平衡，并提供一些监视信息到 Ceph 监视器和管理器,通过检查其他 Ceph OSD 守护进程检测信号.冗余和高可用性通常需要至少 3 个 Ceph OSD。\n- **MDSs**: [Ceph 元数据服务器](https://docs.ceph.com/en/latest/glossary/#term-Ceph-Metadata-Server)（MDS, `ceph-mds`）代表[Ceph 文件系统](https://docs.ceph.com/en/latest/glossary/#term-Ceph-File-System)存储元数据（即 Ceph 块设备和 Ceph 对象存储不使用 MDS）。Ceph 元数据服务器允许 POSIX 文件系统用户执行基本命令 (如`ls`, `find`, `etc`等)，而不会给 Ceph 存储群集带来巨大负担。\n\n> Ceph 将数据存储为逻辑存储池中的对象。使用[CRUSH 算法](https://docs.ceph.com/en/latest/glossary/#term-CRUSH)，Ceph 计算哪个放置组应包含对象，并进一步计算哪个 Ceph OSD 守护程序应存储该放置组。CRUSH 算法使 Ceph 存储群集能够动态扩展、重新平衡和恢复。\n\n参考链接：\n\n- [https://mp.weixin.qq.com/s/TWXPPk7hE1D4AGsHg7CIMg](https://mp.weixin.qq.com/s/TWXPPk7hE1D4AGsHg7CIMg)\n- [https://www.jianshu.com/p/cc3ece850433](https://www.jianshu.com/p/cc3ece850433)\n- [https://mp.weixin.qq.com/s/QXRdyYKSKIa1aLNI8dOGcQ](https://mp.weixin.qq.com/s/QXRdyYKSKIa1aLNI8dOGcQ)\n- [https://blog.csdn.net/xiaoquqi/article/details/43055031](https://blog.csdn.net/xiaoquqi/article/details/43055031)\n\n# 二、Cephadm 部署集群\n\n简单，简述，详细参考：[https://docs.ceph.com/en/latest/cephadm/#cephadm](https://docs.ceph.com/en/latest/cephadm/#cephadm)\n\n## 1.环境规划\n\n| 主机名 | 内网 IP         | 操作系统 | 角色                | 配置                         |\n| ------ | --------------- | -------- | ------------------- | ---------------------------- |\n| ceph1  | 192.168.200.128 | Debian11 | cephadm,mon,mgr,osd | 2C,2G,20G 系统盘，20G 数据盘 |\n| ceph2  | 192.168.200.131 | Debian11 | cephadm,mon         | 2C,2G,20G 系统盘，20G 数据盘 |\n| ceph3  | 192.168.200.132 | Debian11 | cephadm,mon         | 2C,2G,20G 系统盘，20G 数据盘 |\n\n> 典型的 Ceph 集群有三个或五个监视器守护程序，分布在不同的主机上。如果群集中有五个或更多节点，我们建议部署五个监视器。\n\n当 Ceph 知道 mon 应该使用什么 IP 子网时，它可以随着群集的增长（或收缩）自动部署和缩放 mon。默认情况下，Ceph 假定其他 mon 使用与第一个 mon 的 IP 相同的子网。\n\n在单个子网的情况下，如果向集群中添加主机，默认最多只会添加 5 个 mon 如果有特定的 IP 子网给 mon 使用，可以使用 CIDR 格式配置该子网。\n\n## 2.前置(所有节点)\n\n> [https://docs.ceph.com/en/pacific/cephadm/install/](https://docs.ceph.com/en/pacific/cephadm/install/)\n\n各节点配置 hosts\n\n```conf\n10.200.10.31 ceph-pro-1-10-200-10-31\n10.200.10.32 ceph-pro-2-10-200-10-32\n10.200.10.33 ceph-pro-3-10-200-10-33\n10.200.10.34 ceph-pro-4-10-200-10-34\n10.200.10.35 ceph-pro-5-10-200-10-35\n```\n\n## 3.安装 CEPHADM(所有节点)\n\n```bash\n#下载cephadm\ncurl --remote-name --location https://hub.shutcm.cf/ceph/ceph/raw/pacific/src/cephadm/cephadm\nchmod +x cephadm\n#设置源\n./cephadm add-repo --release pacific\nsed -i 's#https://download.ceph.com#https://mirrors.aliyun.com/ceph#g' /etc/apt/sources.list.d/ceph.list\napt-get update\n#安装cephadm命令\n./cephadm install\n#确认在PATH中\nwhich cephadm\nrm -fr cephadm\n#安装ceph命令\ncephadm install ceph-common\n```\n\n## 4.引导新群集(第一台)\n\n> 创建新的 Ceph 集群的第一步是在 Ceph 集群的第一台主机上运行 cephadm bootstrap 命令，运行此命令的操作将创建 Ceph 集群的第一个“监视程序守护程序”。\n\n而该监视程序守护程序需要一个 IP 地址，必须将 Ceph 集群的第一个主机的 IP 地址传递给 ceph bootstrap 命令。\n\n```bash\ncephadm bootstrap --mon-ip 10.200.10.31\n#设置addr\n#ceph orch host set-addr ceph1 192.168.200.128\n#检查\nceph orch host ls\nceph -s\n```\n\n此命令将会：\n\n```\n1) 在本地主机上为新集群创建监视和管理器守护程序\n2) 为Ceph集群生成一个新的SSH密钥，并将其添加到root用户的/root/.ssh/authorized_keys文件中\n3) 将最小配置文件写入/etc/ceph/ceph.conf\n4) 将client.admin管理特权密钥写入/etc/ceph/ceph.client.admin.keyring\n5) 将公钥写入/etc/ceph/ceph.pub\n```\n\n## 5.向群集添加主机\n\n> 在解析主机名等方面，cephadm 的要求非常低, 通过以下命令可以明确 IP 与主机名之间的解析：ceph orch host add\n\n**注意**：添加主机时会自动创建 mon 服务，先按照 禁用监视器自动部署( 5.4 (1) ) 或 调整默认值监视器数量 (5.2 节)，再添加主机。\n\n在新主机 root 用户的 authorized_keys 文件中安装集群的公共 SSH 密钥\n\n```bash\n#ssh-copy-id -f -i /etc/ceph/ceph.pub root@*<new-host>*\nssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-pro-1-10-200-10-31\nssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-pro-2-10-200-10-32\nssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-pro-3-10-200-10-33\nssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-pro-4-10-200-10-34\nssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-pro-5-10-200-10-35\n```\n\n添加方式两种：\n\n- 命令方式添加\n\n```bash\n#ceph orch host add *<newhost>* [*<ip>*] [*<label1> ...*]\nceph orch host add ceph-pro-2-10-200-10-32 10.200.10.32 --labels _admin\n```\n\n- yaml 方式添加\n\n`host.yml`\n\n```yaml\n---\nservice_type: host\naddr: 192.168.200.131\nhostname: ceph2\nlabels:\n  - mon\n---\nservice_type: host\naddr: 192.168.200.132\nhostname: ceph3\nlabels:\n  - mon\n```\n\n## 3.检查状态\n\n```bash\nceph orch host ls\nceph -s\n```\n\n## 6.部署 OSD\n\n**[https://docs.ceph.com/en/pacific/cephadm/services/osd/#](https://docs.ceph.com/en/pacific/cephadm/services/osd/#)**\n\n> 当有新的 osd 加入集群或者移除了 osd，就会把状态上报给 Monitor，Monitor 知道了 osd map 发生了变化就会触发 rebalancing，确保 pg 能够平滑的移动到各个 osd 上，以 pg 为整体进行数据重平衡，重平衡的过程中可能会影响性能，一次性加入的 osd 越多，数据 rebalancing 就越频繁。\n\n> 当在做 rebalance 的时候，每个 osd 都会按照 osd_max_backfills 指定数量的线程来同步，如果该数值比较大，同步会比较快，但是会影响部分性能；为了避免 rebalance 带来的性能影响，可以对 rebalance 进行关闭；添加完 osd 后再打开。\n\n### 1).rebalance 关闭\n\n```bash\n# 设置标志位\nceph osd set norebalance\n\n# 关闭数据填充\nceph osd set nobackfill\n\n# 查看集群状态\nceph -s\n  cluster:\n    id:     87cdd3b2-987b-11eb-989e-000c29b12ae1\n    health: HEALTH_WARN\n            nobackfill,norebalance flag(s) set  # 有此信息\n```\n\n### 2).rebalance 开启\n\n```bash\n#开启数据填充\nceph osd unset nobackfill\n#开启rebalance\nceph osd unset norebalance\n# 查看集群状态\nceph -s\n  cluster:\n    id:     87cdd3b2-987b-11eb-989e-000c29b12ae1\n    health: HEALTH_OK\n```\n\n### 3).列出节点可用设备\n\n```bash\n#ceph orch device ls [--wide]\nceph orch device ls --wide\n```\n\n如果满足以下所有条件，则认为存储设备可用\n\n```\n1) 设备必须没有分区\n2) 设备不得具有任何LVM状态\n3) 设备不得挂载\n4) 设备不得包含文件系统\n5) 设备不得包含Ceph BlueStore OSD\n6) 设备必须大于5 GB\n```\n\n### 4).创建 osd\n\n```bash\n#需要至少 3 个 Ceph OSD 以实现冗余和高可用性\nceph orch daemon add osd ceph-pro-1-10-200-10-31:/dev/sdb\nceph orch daemon add osd ceph-pro-2-10-200-10-32:/dev/sdb\nceph orch daemon add osd ceph-pro-3-10-200-10-33:/dev/sdb\n```\n\n## 7.集群高可用\n\n```bash\n#需要至少三个监视器才能实现冗余和高可用性\nceph orch apply mon 3\n# 部署mon到指定节点\nceph orch host label add *<host>* mon\n#至少需要两个管理器才能实现高可用性\nceph orch apply mgr 3\n#\n```\n\n## 8.CephFS 部署\n\n## 9.部署 RGW\n\n[https://docs.ceph.com/en/pacific/cephadm/services/rgw/](https://docs.ceph.com/en/pacific/cephadm/services/rgw/)\n\n# 三、运维\n\n[https://www.cnblogs.com/royaljames/p/9807532.html](https://www.cnblogs.com/royaljames/p/9807532.html)\n\n## 1.向群集添加主机\n\n```bash\n#1.在新主机的根用户文件中安装群集的公共 SSH 密钥\nssh-copy-id -f -i /etc/ceph/ceph.pub root@host2\n#2.告诉 Ceph 新节点是群集的一部分：\nceph orch host add host2\n```\n\n## 2.部署其他监视器(monitor)\n\n> 典型的 Ceph 群集具有分布在不同主机的三个或五个监视器守护程序。如果群集中有五个或更多节点，我们建议部署五个监视器。\n\n当 Ceph 知道监视器应该使用什么 IP 子网时，它可以随着群集的增长（或收缩）自动部署和缩放监视器。默认情况下，Ceph 假定其他监视器应使用与第一个监视器的 IP 相同的子网。\n\n如果您的 Ceph 监视器（或整个群集）住在单个子网中，则在向群集添加新主机时，默认情况下，cephadm 会自动添加多达 5 个监视器。无需进一步步骤。\n\n```bash\n#如果有特定的 IP 子网应该由监视器使用，您可以用CIDR格式（例如 ） 配置该子网，Cephadm 仅在配置的子网中配置了 IP 的主机上部署新的监视器守护程序。\nceph config set mon public_network 10.1.2.0/24\n#如果要调整 5 个监视器的默认值：\nceph orch apply mon *<number-of-monitors>*\n#若要在一组特定的主机上部署监视器，请确保在此列表中包括第一个（引导）主机。\nceph orch apply mon *<host1,host2,host3,...>*\n#您可以通过使用主机标签来控制监视器运行的主机。要将标签设置为相应的主机，请：mon\nceph orch host label add *<hostname>* mon\n#要查看当前主机和标签：\nceph orch host ls\n#例如：\n# ceph orch host label add host1 mon\n# ceph orch host label add host2 mon\n# ceph orch host label add host3 mon\n# ceph orch host ls\nHOST   ADDR   LABELS  STATUS\nhost1         mon\nhost2         mon\nhost3         mon\nhost4\nhost5\n#告诉 cephadm 根据标签部署监视器：\nceph orch apply mon label:mon\n#您可以显式指定每个监视器的 IP 地址或 CIDR 网络，并控制其放置位置。要禁用自动监视器部署：\nceph orch apply mon --unmanaged\n#要部署每个附加监视器：\nceph orch daemon add mon *<host1:ip-or-network1> [<host1:ip-or-network-2>...]*\n#例如，要在使用 IP 地址上部署第二个监视器，在网络上部署第三个监视器\n# ceph orch apply mon --unmanaged\n# ceph orch daemon add mon newhost1:10.1.2.123\n# ceph orch daemon add mon newhost2:10.1.2.0/24\n\n#若要确保监视器应用于这三台主机中的每一个主机，请运行以下命令：\nceph orch apply mon \"host1,host2,host3\"\n```\n\n# 使用 YAML 规范\n\n```bash\nceph orch apply -i file.yaml\n```\n\n```yaml\nservice_type: mon\nplacement:\n  hosts:\n    - host1\n    - host2\n    - host3\n```\n\n## 3.部署 OSD\n\n### 1.所有群集主机上的存储设备清单可以显示\n\n```bash\nceph orch device ls\n```\n\n- 设备必须没有分区。\n- 设备不得具有任何 LVM 状态。\n- 不得安装设备。\n- 设备不能包含文件系统。\n- 设备不得包含 Ceph BlueStore OSD。\n- 设备必须大于 5 GB。\n\n### 2.创建新 OSD 的方法\n\n```bash\n# 1.告诉 Ceph 使用任何可用和未使用的存储设备：\nceph orch apply osd --all-available-devices\n# 2.从特定主机上的特定设备创建 OSD：ceph orch daemon add osd *<host>*:*<device-path>*\nceph orch daemon add osd host1:/dev/sdb\n# 3.使用OSD 服务规范描述设备，根据设备属性、此类设备类型（SSD 或 HDD）、设备型号名称、大小或设备存在的主机使用：\nceph orch apply osd -i spec.yml\n```\n\n## 4.部署 MDS\n\n使用 CephFS 文件系统需要一个或多个 MDS 守护程序。如果使用较新的接口创建新文件系统，则会自动创建这些接口。有关详细信息，请参阅 FS 卷和子卷。\n\n```bash\nceph orch apply mds *<fs-name>* --placement=\"*<num-daemons>* [*<host1>* ...]\"\n```\n\n## 5.部署 RGW\n\n## 6.管理 Monitor map\n\n### 1).多 Monitor 同步机制\n\n> 在生产环境建议最少三节点 monitor，以确保 cluster map 的高可用性和冗余性,monitor 节点不应该过多甚至操作 9 节点的行为,会导致数据读写时间下降，影响系统集群的性能。\n\n- monitor 使用 paxos 算法作为集群状态上达成一致的机制。paxos 是一种分布式一致性算法。每当 monitor 修改 map 时，它会通过 paxos 发送更新到其他 monitor。Ceph 只有在大多数 monitor 就更新达成一致时提交 map 的新版本。\n- cluster map 的更新操作需要 Paxos 确认，但是读操作不经由 Paxos，而是直接访问本地的 kv 存储。\n\n### 2).Monitor 选举机制\n\n- 多个 monitor 之间需要建立仲裁并选择出一个 leader，其他节点则作为工作节点（peon）。\n- 在选举完成并确定 leader 之后，leader 将从所有其他 monitor 请求最新的 map epoc，以确保 leader 具有集群的最新视图。\n- 要维护 monitor 集群的正常工作，必须有超过半数的节点正常。\n\n### 3).Monitor 租约\n\n- 在 Monitor 建立仲裁后，leader 开始分发短期的租约到所有的 monitors。让它们能够分发 cluster map 到 OSD 和 client。\n- Monitor 租约默认每 3s 续期一次。\n- 当 peon monitor 没有确认它收到租约时，leader 假定该 monitor 异常，它会召集新的选举以建立仲裁。\n- 如果 peon monitor 的租约到期后没有收到 leader 的续期，它会假定 leader 异常，并会召集新的选举。\n- 所以如果生产环境中存在多个 monitor 时候某个节点的超时会猝发节点的重新选举导致 client 无法第一时间拿到最新的 crushmap 图像也就无法去对应的 osd 上的 pv 写入数据了。\n\n### 4).常用的 monitor 管理\n\n```bash\n#打印monitor map信息\nceph mon dump\n\n#将monitor map导出为一个二进制文件\nceph mon getmap -o ./monmap\n\n#打印导出的二进制文件的内容\nmonmaptool --print ./monmap\n\n#修改二进制文件，从monmap删除某个monitor\nmonmaptool ./monmap --rm <id>\n\n#修改二进制文件，往monmap中添加一个monitor\nmonmaptool ./monmap --add <id> <ip:port>\n\n#导入一个二进制文件，在导入之前，需要先停止monitor\nceph-mon -i <id> --inject-monmap ./monmap\n```\n\n## 7.管理 OSD Map\n\n- 每当 OSD 加入或离开集群时，Ceph 都会更新 OSD map。\n- OSD 不使用 leader 来管理 OSD map，它们会在自身之间传播同步 map。OSD 会利用 OSD map epoch 标记它们交换的每一条信息，当 OSD 检测到自己已落后时，它会使用其对等 OSD 执行 map 更新。\n- 在大型集群中 OSD map 更新会非常频繁，节点会执行递增 map 更新。\n- Ceph 也会利用 epoch 来标记 OSD 和 client 之间的消息。当 client 连接到 OSD 时 OSD 会检查 epoch。如果发现 epoch 不匹配，则 OSD 会以正确的 epoch 响应，以便客户端可以更新其 OSD map。\n- OSD 定期向 monitor 报告自己的状态，OSD 之间会交换心跳，以便检测对等点的故障，并报告给 monitor。\n- leader monitor 发现 OSD 故障时，它会更新 map，递增 epoch，并使用 Paxos 更新协议来通知其他 monitor，同时撤销租约，并发布新的租约，以使 monitor 以分发最新的 OSD map。\n\n### 1).OSD 状态解读\n\n- 1.正常状态的 OSD 为 up 且 in\n- 2.当 OSD 故障时，守护进程 offline，在 5 分钟内，集群仍会将其标记为 up 和 in，这是为了防止网络抖动\n- 3.如果 5 分钟内仍未恢复，则会标记为 down 和 out。此时该 OSD 上的 PG 开始迁移。这个 5 分钟的时间间隔可以通过 mon_osd_down_out_interval 配置项修改\n- 4.当故障的 OSD 重新上线以后，会触发新的数据再平衡\n- 5.当集群有 noout 标志位时，则 osd 下线不会导致数据恢复\n- 6.OSD 每隔 6s 会互相验证状态。并每隔 120s 向 mon 报告一次状态。\n\n### 2).OSD map 命令\n\n```bash\nceph osd dump\nceph osd getmap -o binfile\nosdmaptool --print binfile\nosdmaptool --export-crush crushbinfile binfile\nosdmaptool --import-crush crushbinfile binfile\nosdmaptool --test-map-pg pgid binfile\n```\n\n### 3.)OSD 的状态\n\n- OSD 运行状态\n\n  - up\n  - down\n  - out\n  - in\n\n- OSD 容量状态\n\n  - nearfull\n  - full\n\n常用指令\n\n```bash\n#显示OSD状态\nceph osd stat\n\n#报告osd使用量\nceph osd df\n\n#查找指定osd位置\nceph osd find\n```\n\n### 4.)OSD 容量\n\n- 当集群容量达到 mon_osd_nearfull_ratio 的值时，集群会进入 HEALTH_WARN 状态。这是为了在达到 full_ratio 之前，提醒添加 OSD。默认设置为 0.85，即 85%\n- 当集群容量达到 mon_osd_full_ratio 的值时，集群将停止写入，但允许读取。集群会进入到 HEALTH_ERR 状态。默认为 0.95，即 95%。这是为了防止当一个或多个 OSD 故障时仍留有余地能重平衡数据\n\n设置方法：\n\n```bash\nceph osd set-full-ratio 0.95\nceph osd set-nearfull-ratio 0.85\nceph osd dump\n```\n\n### 5).OSD 状态参数\n\n```bash\n# osd之间传递心跳的间隔时间\nosd_heartbeat_interval\n\n# 一个osd多久没心跳，就会被集群认为它down了\nosd_heartbeat_grace\n\n# 确定一个osd状态为down的最少报告来源osd数\nmon_osd_min_down_reporters\n\n# 一个OSD必须重复报告一个osd状态为down的次数\nmon_osd_min_down_reports\n\n# 当osd停止响应多长时间，将其标记为down和out\nmon_osd_down_out_interval\n\n# monitor宣布失败osd为down前的等待时间\nmon_osd_report_timeout\n\n# 一个新的osd加入集群时，等待多长时间，开始向monitor报告\nosd_mon_report_interval_min\n\n# monitor允许osd报告的最大间隔，超时就认为它down了\nosd_mon_report_interval_max\n\n# osd向monitor报告心跳的时间\nosd_mon_heartbeat_interval\n```\n\n## 8.管理 PG\n\n### 1).管理文件到 PG 映射\n\ntest 对象所在 pg id 为 10.35，存储在三个 osd 上，分别为 osd.2、osd.1 和 osd.8，其中 osd.2 为 primary osd\n\n```bash\nrados -p test put test /etc/ceph/ceph.conf\nceph osd map test test\n    osdmap e201 pool 'test' (10) object 'test' -> pg 10.40e8aab5 (10.35) -> up ([2,1,8], p2) acting ([2,1,8], p2)\n\n#处于up状态的osd会一直留在PG的up set和acting set中，一旦主osd down，它首先会从up set中移除\n#然后从acting set中移除，之后从OSD将被升级为主。Ceph会将故障OSD上的PG恢复到一个新OSD上\n#然后再将这个新OSD加入到up和acting set中来维持集群的高可用性\n```\n\n### 2).管理 struck 状态的 PG\n\n- 如果 PG 长时间（mon_pg_stuck_threshold，默认为 300s）出现如下状态时，MON 会将该 PG 标记为 stuck：\n\n  - inactive：pg 有 peering 问题\n  - unclean：pg 在故障恢复时遇到问题\n  - stale：pg 没有任何 OSD 报告，可能其所有的 OSD 都是 down 和 out\n  - undersized：pg 没有充足的 osd 来存储它应具有的副本数\n\n- 默认情况下，Ceph 会自动执行恢复，但如果未能自动恢复，则集群状态会一直处于 HEALTH_WARN 或者 HEALTH_ERR\n\n- 如果特定 PG 的所有 osd 都是 down 和 out 状态，则 PG 会被标记为 stale。要解决这一情况，其中一个 OSD 必须要重生，且具有可用的 PG 副本，否则 PG 不可用\n\n- Ceph 可以声明 osd 或 PG 已丢失，这也就意味着数据丢失。需要说明的是，osd 的运行离不开 journal，如果 journal 丢失，则 osd 停止\n\n### 3).struck 状态操作\n\n```bash\n# 检查处于stuck状态的pg\nceph pg dump_stuck\n# 检查导致pg一致阻塞在peering状态的osd\nceph osd blocked-by\n# 检查某个pg的状态\nceph pg dump all|grep pgid\n# 声明pg丢失\nceph pg pgid mark_unfound_lost revert|delete\n# 声明osd丢失（需要osd状态为down且out）\nceph osd lost osdid --yes-i-really-mean-it\n```\n\n### 4).手动控制 PG 的 Primary OSD\n\n可以通过手动修改 osd 的权重以提升 特定 OSD 被选为 PG Primary OSD 的概率，避免将速度慢的磁盘用作 primary osd。\n\n需要先在配置文件中配置如下参数：\n\n```bash\nmon_osd_allow_primary_affinity = true\n```\n\n### 5).调整权重示例\n\n```bash\n1. 查看现在有多少PG的主OSD是osd.0\nceph pg dump |grep active+clean |egrep \"\\[0,\" |wc -l\n\n2. 修改osd.0的权重\nceph osd primary-affinity osd.0 0  # 权重范围从0.0到1.0\n\n3. 再次查看现在有多少PG的主OSD是osd.0\nceph pg dump |grep active+clean |egrep \"\\[0,\" |wc -l\n```\n\n## 9.Pool(存储池)管理\n\n[https://blog.csdn.net/weixin_42440345/article/details/81118964](https://blog.csdn.net/weixin_42440345/article/details/81118964)\n\n### PG 和 PGP 的区别\n\n[https://www.cnblogs.com/zphj1987/p/13575377.html](https://www.cnblogs.com/zphj1987/p/13575377.html)\n\nPG 是指定存储池存储对象的目录有多少个，PGP 是存储池 PG 的 OSD 分布组合个数\n\nPG 的增加会引起 PG 内的数据进行分裂，分裂到相同的 OSD 上新生成的 PG 当中\n\nPGP 的增加会引起部分 PG 的分布进行变化，但是不会引起 PG 内对象的变动\n\n### 4.)限制 pool 配置更改\n\n```bash\n#禁止池被删除\nosd_pool_default_flag_nodelete\n\n#禁止池的pg_num和pgp_num被修改\nosd_pool_default_flag_nopgchange\n\n#禁止修改池的size和min_size\nosd_pool_default_flag_nosizechange\n```\n\n### 1.查看 pool\n\n```bash\n#查看所有pool\nceph osd lspools\n#获取集群内所有POOL的概况信息,集群内POOL的个数、对应的POOL id、POOL名称、副本数、最小副本数，ruleset及POOL snap等信息\nceph osd pool ls detail\n#查看POOL的统计信息\n```\n\n### 2.创建 pool\n\n```bash\n#创建一个副本类型的POOL\nceph osd pool create {pool-name} {pg-num} [{pgp-num}] [{pgp-num}] [replicated] [ruleset]\n#举例：\nceph osd pool create rbd  32 32\n#创建一个纠删码类型的POOL\nceph osd pool create {pool-name} {pg-num} {pgp-num} erasure [erasure-code-profile] [ruleset]\n```\n\n在`{}`内的参数为必选项,`[]`内的参数均设有默认值,如果没有更改设计,可以不添加。\n\n参数的含义如下:\n\n- **pool-name**: POOL 的名字；必须添加。\n- **pg-num**: POOL 拥有的 PG 总数；必须添加。\n- **pgp-num**: POOL 拥有的 PGP 总数；非必须添加。默认与 pg-num 相同。\n- **replicated|erasure**: POOL 类型；非必须添加。如不指定为 erasure,则默认为 replicated 类型。\n- **ruleset**: POOL 所用的 CRUSH 规则 ID。非必须添加。默认为 0,若需指定其他 ruleset,需确保 ruleset 必须存在。\n- **erasure-code-profile**: 仅用于纠删码类型的 POOL。指定纠删码配置框架,此配置必须已由 osd erasure-code-profile set 定义\n\n这里强制选择 pg_num 和 pgp_num，因为 ceph 集群不能自动计算 pg 数量。下面有一些官方建议的 pg 使用数量：\n\n- 小于 5 个 osd 设置 pg_num 为 128\n- 5 到 10 个 osd 设置 pg_num 为 512\n- 10 到 50 个 osd 设置 pg_num 为 1024\n- 如果超过 50 个 osd 你需要自己明白权衡点，并且能自行计算 pg_num 的数量\n\npg_num 通用计算方法:\n\n(OSDs \\* 100)\n\nTotal PGs =  ------------\n\npool size\n\n### 3.修改 pool\n\n```bash\nceph osd pool set {pool-name} {key} {value}\nsize：设置存储池中的对象副本数，详情参见设置对象副本数。仅适用于副本存储池。\nmin_size：设置 I/O 需要的最小副本数，详情参见设置对象副本数。仅适用于副本存储池。\npg_num：计算数据分布时的有效 PG 数。只能大于当前 PG 数。\npgp_num：计算数据分布时使用的有效 PGP 数量。小于等于存储池的 PG 数。\nhashpspool：给指定存储池设置/取消 HASHPSPOOL 标志。\ntarget_max_bytes：达到 max_bytes 阀值时会触发 Ceph 冲洗或驱逐对象。\ntarget_max_objects：达到 max_objects 阀值时会触发 Ceph 冲洗或驱逐对象。\nscrub_min_interval：在负载低时，洗刷存储池的最小间隔秒数。如果是 0 ，就按照配置文件里的 osd_scrub_min_interval 。\nscrub_max_interval：不管集群负载如何，都要洗刷存储池的最大间隔秒数。如果是 0 ，就按照配置文件里的 osd_scrub_max_interval 。\ndeep_scrub_interval：“深度”洗刷存储池的间隔秒数。如果是 0 ，就按照配置文件里的 osd_deep_scrub_interval 。\n```\n\n### 4.删除存储池\n\n```bash\nceph osd pool delete {pool-name} [{pool-name} --yes-i-really-really-mean-it]\n```\n\n### 5.重命名存储池\n\n```bash\nceph osd pool rename {current-pool-name} {new-pool-name}\n```\n\n### 6.查看存储池统计信息\n\n```bash\nrados df\n```\n\n### 7.给存储池做快照\n\n```bash\nceph osd pool mksnap {pool-name} {snap-name}\n```\n\n### 8.删除存储池的快照\n\n```bash\nceph osd pool rmsnap {pool-name} {snap-name}\n```\n\n### 9.获取存储池选项值\n\n```bash\nceph osd pool get {pool-name} {key}\n```\n\n### 10.获取对象副本数\n\n```bash\nceph osd dump | grep 'replicated size'\n```\n\n### 11.设置存储池配额\n\n```bash\n命令格式：\n# ceph osd pool set-quota {pool-name} [max_objects {obj-count}] [max_bytes {bytes}]\n命令举例：\n# ceph osd pool set-quota rbd max_objects 10000\n```\n\n## 10.自定义 Crush Map\n\n> crush map 决定了客户端数据最终写入的 osd 的位置，在某些情况下存在 hdd 和 ssd 两种盘想让某些数据写入到指定的 osd 中这个时候就是需要去人为的手动编译 crush-map，编辑要修改的部分，再导入集群中达到我们特定的目的\n\n### 1).Crush 的放置策略\n\n- Ceph 使用 CRUSH 算法（Controlled Replication Under Scalable Hashing 可扩展哈希下的受控复制）来计算哪些 OSD 存放哪些对象\n- 对象分配到 PG 中，CRUSH 决定这些 PG 使用哪些 OSD 来存储对象。理想情况下，CRUSH 会将数据均匀的分布到存储中\n- 当添加新 OSD 或者现有的 OSD 出现故障时，Ceph 使用 CRUSH 在活跃的 OSD 上重平衡数据 CRUSH map 是 CRUSH 算法的中央配置机制，可通过调整 CRUSHmap 来优化数据存放位置默认情况下，CRUSH 将一个对象的多个副本放置到不同主机上的 0SD 中。可以配置 CRUSH map 和 CRUSH rules，使一个对象的多个副本放置到不同房间或者不同机柜的主机上的 0SD 中。\n- 也可以将 SSD 磁盘分配给需要高速存储的池\n\n### 2).编译与翻译和更新\n\n```bash\n#导出CRUSH map\nceph osd getcrushmap -o ./crushmap.bin\n#解译CRUSH map\ncrushtool -d ./crushmap.bin ./crushmap.txt\n#修改后的CRUSH map重新编译\ncrushtool -c ./crushmap.txt-o ./crushmap-new.bin\n#更新CRUSH map\nceph osd setcrushmap-i./crushmap-new.bin\n#查询crush map的内容（返回json）\nceph osd crush dump\n```\n\n例子\n\n```bash\nroot default {\n    id-1           # do not change unnecessarily\n    id-2 class hdd #do not change unnecessarily\n    #weiqht 0.166\n    alg straw2\n    hash 0#rjenkins1\n    item rackl weight 0.055\n    item rack2 weiqht 0.055\n    item rack3 weight 0.055\n}\n\n#rules\nrule replicated rule{\n    id 0\n    type replicated\n    min size 1\n    max size 10\n    step take default  #只要是应用这个rule的都把数据写入到defaults下\n    step chooseleaf firstn 0 type host  #定义故障的故障域为物理集机器级别（rack为机柜级别）\n    step emit #结尾符号\n}\n```\n\n## 11.admin sockets 管理守护进程\n\n- 通过 admin sockets，管理员可以直接与守护进程交互。如查看和修改守护进程的配置参数。\n- 守护进程的 socket 文件一般是/var/run/ceph/cluster-cluster−type.$id.asok\n- 基于 admin sockets 的操作：\n\n```bash\nceph daemon $type.$id command\n#或者\nceph --admin-daemon /var/run/ceph/$cluster-$type.$id.asok command\n#常用command如下：\nhelp\nconfig get parameter\nconfig set parameter\nconfig show\nperf dump\n```\n\n## 12.用户管理\n\n> Ceph 把数据以对象的形式存于各存储池中。Ceph 用户必须具有访问存储池的权限才能够读写数据。另外，Ceph 用户必须具有执行权限才能够使用 Ceph 的管理命令。\n\n### 1、查看用户信息\n\n```bash\n查看所有用户信息\n# ceph auth list\n获取所有用户的key与权限相关信息\n# ceph auth get client.admin\n如果只需要某个用户的key信息，可以使用pring-key子命令\n# ceph auth print-key client.admin\n```\n\n### 2、添加用户\n\n```bash\n# ceph auth add client.john mon 'allow r' osd 'allow rw pool=liverpool'\n# ceph auth get-or-create client.paul mon 'allow r' osd 'allow rw pool=liverpool'\n# ceph auth get-or-create client.george mon 'allow r' osd 'allow rw pool=liverpool' -o george.keyring\n# ceph auth get-or-create-key client.ringo mon 'allow r' osd 'allow rw pool=liverpool' -o ringo.key\n```\n\n### 3、修改用户权限\n\n```bash\n# ceph auth caps client.john mon 'allow r' osd 'allow rw pool=liverpool'\n# ceph auth caps client.paul mon 'allow rw' osd 'allow rwx pool=liverpool'\n# ceph auth caps client.brian-manager mon 'allow *' osd 'allow *'\n# ceph auth caps client.ringo mon ' ' osd ' '\n```\n\n### 4、删除用户\n\n```bash\n# ceph auth del {TYPE}.{ID}\n其中， {TYPE} 是 client，osd，mon 或 mds 的其中一种。{ID} 是用户的名字或守护进程的 ID 。\n```\n\n## 13.增加和删除 Monitor\n\n> 一个集群可以只有一个 monitor，推荐生产环境至少部署 3 个。 Ceph 使用 Paxos 算法的一个变种对各种 map 、以及其它对集群来说至关重要的信息达成共识。建议（但不是强制）部署奇数个 monitor 。Ceph 需要 mon 中的大多数在运行并能够互相通信，比如单个 mon，或 2 个中的 2 个，3 个中的 2 个，4 个中的 3 个等。初始部署时，建议部署 3 个 monitor。后续如果要增加，请一次增加 2 个.\n\n### 1、新增一个 monitor\n\n```bash\n# ceph-deploy mon create $hostname\n注意：执行ceph-deploy之前要进入之前安装时候配置的目录。/my-cluster\n```\n\n### 2、删除 Monitor\n\n```bash\n# ceph-deploy mon destroy $hostname\n注意： 确保你删除某个 Mon 后，其余 Mon 仍能达成一致。如果不可能，删除它之前可能需要先增加一个。\n```\n\n# 四、集群监控管理\n\n## 1.集群整体运行状态\n\n```bash\n[root@cephnode01 ~]# ceph -s\ncluster:\n    id:     8230a918-a0de-4784-9ab8-cd2a2b8671d0\n    health: HEALTH_WARN\n            application not enabled on 1 pool(s)\n\n  services:\n    mon: 3 daemons, quorum cephnode01,cephnode02,cephnode03 (age 27h)\n    mgr: cephnode01(active, since 53m), standbys: cephnode03, cephnode02\n    osd: 4 osds: 4 up (since 27h), 4 in (since 19h)\n    rgw: 1 daemon active (cephnode01)\n\n  data:\n    pools:   6 pools, 96 pgs\n    objects: 235 objects, 3.6 KiB\n    usage:   4.0 GiB used, 56 GiB / 60 GiB avail\n    pgs:     96 active+clean\n\n    id：集群ID\n    health：集群运行状态，这里有一个警告，说明是有问题，意思是pg数大于pgp数，通常此数值相等。\n    mon：Monitors运行状态。\n    osd：OSDs运行状态。\n    mgr：Managers运行状态。\n    mds：Metadatas运行状态。\n    pools：存储池与PGs的数量。\n    objects：存储对象的数量。\n    usage：存储的理论用量。\n    pgs：PGs的运行状态\n\n~]$ ceph -w\n~]$ ceph health detail\n```\n\n## 2.PG 状态\n\n> 查看 pg 状态查看通常使用下面两个命令即可，dump 可以查看更详细信息\n\n```bash\n~]$ ceph pg dump\n~]$ ceph pg stat\n```\n\n## 3.Pool 状态\n\n```bash\n~]$ ceph osd pool stats\n~]$ ceph osd pool stats\n```\n\n## 4.OSD 状态\n\n```bash\n~]$ ceph osd stat\n~]$ ceph osd dump\n~]$ ceph osd tree\n~]$ ceph osd df\n```\n\n## 5.Monitor 状态和查看仲裁状态\n\n```bash\n~]$ ceph mon stat\n~]$ ceph mon dump\n~]$ ceph quorum_status\n```\n\n## 6.集群空间用量\n\n```bash\n~]$ ceph df\n~]$ ceph df detail\n```\n\n# 五、集群配置管理(临时和全局，服务平滑重启)\n\n> 有时候需要更改服务的配置，但不想重启服务，或者是临时修改。这时候就可以使用 tell 和 daemon 子命令来完成此需求。\n\n## 1.查看运行配置\n\n```bash\n命令格式：\n# ceph daemon {daemon-type}.{id} config show\n\n命令举例：\n# ceph daemon osd.0 config show\n```\n\n## 2.tell 子命令格式\n\n> 使用 tell 的方式适合对整个集群进行设置，使用 \\* 号进行匹配，就可以对整个集群的角色进行设置。而出现节点异常无法设置时候，只会在命令行当中进行报错，不太便于查找。\n\n```bash\n命令格式：\n# ceph tell {daemon-type}.{daemon id or *} injectargs --{name}={value} [--{name}={value}]\n命令举例：\n# ceph tell osd.0 injectargs --debug-osd 20 --debug-ms 1\n```\n\n- daemon-type：为要操作的对象类型如 osd、mon、mds 等。\n- daemon id：该对象的名称，osd 通常为 0、1 等，mon 为 ceph -s 显示的名称，这里可以输入\\*表示全部。\n- injectargs：表示参数注入，后面必须跟一个参数，也可以跟多个\n\n## 3.daemon 子命令\n\n- 使用 daemon 进行设置的方式就是一个个的去设置，这样可以比较好的反馈，此方法是需要在设置的角色所在的主机上进行设置。\n\n```bash\n命令格式：\n# ceph daemon {daemon-type}.{id} config set {name}={value}\n命令举例：\n# ceph daemon mon.ceph-monitor-1 config set mon_allow_pool_delete false\n```\n\n## 4.集群操作\n\n- 命令包含 start、restart、status\n\n```bash\n#1.启动所有守护进程\nsystemctl start ceph.target\n\n#2.按类型启动守护进程\nsystemctl start ceph-mgr.target\nsystemctl start ceph-osd@id\nsystemctl start ceph-mon.target\nsystemctl start ceph-mds.target\nsystemctl start ceph-radosgw.target\n```\n\n## 5.添加和删除 OSD\n\n### 1).添加 OSD\n\n- 纵向扩容(会导致数据的重分布)\n- 生产环境下最好的做法就是不要一次性添加大量的 osd，最好逐步添加等待数据同步后再进行添加操作\n\n  - 当影响生产数据时候临时可以停止同步：ceph osd set [nobackfill|norebalance],unset 取消对应的参数\n\n```bash\n#1.格式化磁盘\nceph-volume lvm zap /dev/sd<id>\n\n#2.进入到ceph-deploy执行目录/my-cluster，添加OSD\nceph-deploy osd create --data /dev/sd<id> $hostname\n```\n\n### 2).删除 OSD\n\n- 如果机器有盘坏了可以使用 dmdsg 查看坏盘\n- 存在一种情况就是某 osd 的写入延迟大盘有坏道很大可能会拖垮 ceph 集群：\n\n  - ceph osd tree: 查看当前集群的 osd 状态\n  - ceph osd perf: 查看当前的 OSD 的延迟\n\n- 当某一快 osd 踢出集群时候立即做数据重分布(默认 10 分钟)\n\n```bash\n1、调整osd的crush weight为 0\nceph osd crush reweight osd.<ID> 0.0\n\n2、将osd进程stop\nsystemctl stop ceph-osd@<ID>\n\n3、将osd设置out(将会出发数据重分布)\nceph osd out <ID>\n\n4、从crushmap中踢出osd\n# 查看运行视图的osd状态\nceph osd crush dump|less\nceph osd crush rm <osd>.id\n\n5、从tree树中删除osd\nceph osd rm <osd>.id\n\n6、(选用)立即执行删除OSD中数据\nceph osd purge osd.<ID> --yes-i-really-mean-it\n\n7、卸载磁盘\numount /var/lib/ceph/osd/ceph-？\n\n8.从认证中删除磁盘对应的key\n# 查看认证的列表\nceph auth list\nceph auth rm <osd>.id\n```\n\n## 6.扩容 PG\n\n- 扩容大小取跟它接近的 2 的 N 次方\n- 在更改 pool 的 PG 数量时，需同时更改 PGP 的数量。PGP 是为了管理 placement 而存在的专门的 PG，它和 PG 的数量应该保持一致。如果你增加 pool 的 pg_num，就需要同时增加 pgp_num，保持它们大小一致，这样集群才能正常 rebalancing。\n\n```bash\nceph osd pool set {pool-name} pg_num 128\nceph osd pool set {pool-name} pgp_num 128\n```\n\n# 六、调优\n\n## 1.系统层面调优\n\n- 选择正确的 CPU 和内存。OSD、MON 和 MDS 节点具有不同的 CPU 和内存需求\n\n  - mon 的需求和 osd 的总个数有关需要的是计算力\n  - mds 对 CPU 和内存要求很高，会将大量的元数据缓存到自己的内存中，存储元数据的尽量的使用 ssd\n  - osd 最低要求 1H2G 的配置例如：24 块硬盘最少是 24H36G,磁盘方面必须高 I/O 有多好上多好\n\n- 尽可能关闭 NUMA\n- 规划好存储节点的数据以及各节点的磁盘要求（不考虑钱忽略）\n- 磁盘的选择尽可能在成本、吞吐量和延迟之间找到良好的平衡\n- journal 日志应该使用 SSD\n- 如果交换机支持（MTU 9000），则启用巨型帧(减少数据的分片)，前提是 ceph 在一个单独的网络环境中切有独立交换机。\n- 启用 ntp。Ceph 对时间敏感,集群网络至少 10GB 带宽\n\n### 1).系统调优工具\n\n- 使用 tuned-admin 工具，它可帮助系统管理员针对不同的工作负载进行系统调优\n- tuned-admin 使用的 profile 默认存放在/usr/lib/tuned/目录中，可以参考其模板来自定义 profile\n- 对于 ceph 而言，network-latency 可以改进全局系统延迟，network-throughput 可以改进全局系统吞吐量,如果两个都开启可以使用 Custom 自定义模式\n\n```bash\n# 列出现有可用的profile\ntuned-adm list\n\n# 查看当前生效的profile\ntuned-adm active\n\n# 使用指定的profile\ntuned-admin profile profile-name\n\n# 禁用所有的profile\ntuned-admin off\n```\n\n### 2).I/O 调度算法\n\n- noop：电梯算法，实现了一个简单的 FIFO 队列。基于 SSD 的磁盘，推荐使用这种调度方式\n- Deadline：截止时间调度算法，尽力为请求提供有保障的延迟。对于 Ceph，基于 sata 或者 sas 的驱动器，应该首选这种调度方式\n- cfq：完全公平队列，适合有许多进程同时读取和写入大小不等的请求的磁盘，也是默认的通用调度算法\n\n```bash\n#查看当前系统支持的调度算法：\n    dmesg|grep -I scheduler\n\n#查看指定磁盘使用的调度算法：\n    cat /sys/block/磁盘设备号/queue/scheduler\n\n#修改调度算法\n    echo \"deadline\" > /sys/block/vdb/queue/scheduler\n    vim /etc/default/grub\n        GRUB_CMDLINE_LINUX=\"elevator=deadline numa=off\"\n```\n\n### 3).网络 IO 子系统调优\n\n- 用于集群的网络建议尽可能使用 10Gb 网络\n\n以下参数用于缓冲区内存管理\n\n```bash\n#设置OS接收缓冲区的内存大小，第一个值告知内核一个TCP socket的最小缓冲区空间，第二值为默认缓冲区空间，第三个值是最大缓冲区空间\nnet.ipv4.tcp_wmem\n\n#设置Os发送缓冲区的内存大小\nnet.ipv4.tcp_rmem\n\n#定义TCP stack如何反应内存使用情况\nnet.ipv4.tcp_mem\n```\n\n- 交换机启用大型帧\n\n> 默认情况下，以太网最大传输数据包大小为 1500 字节。为提高吞吐量并减少处理开销，一种策略是将以太网网络配置为允许设备发送和接收更大的巨型帧。\n\n- 在使用巨型帧的要谨慎，因为需要硬件支持，且全部以太网口配置为相同的巨型帧 MTU 大小。\n\n### 4).虚拟内存调优\n\n设置较低的比率会导致高频但用时短的写操作，这适合 Ceph 等 I/O 密集型应用。设置较高的比率会导致低频但用时长的写操作，这会产生较小的系统开销，但可能会造成应用响应时间变长\n\n```bash\n#脏内存占总系统总内存的百分比，达到此比率时内核会开始在后台写出数据\nvm.dirty_background_ratio\n\n#脏内存占总系统总内存的百分比，达到此比率时写入进程停滞，而系统会将内存页清空到后端存储\nvm.dirty_ratio\n\n#控制交换分区的使用,生产中建议完全关闭，会拖慢系统运行速度\nvm.swappiness\n\n#系统尽力保持可用状态的RAM大小。在一个RAM大于48G的系统上，建议设置为4G\nvm.min_free_kbytes\n```\n\n## 2.Ceph 本身调优\n\n### 1).最佳实践\n\n- MON 的性能对集群总体性能至关重要，应用部署于专用节点，为确保正确仲裁，数量应为奇数个\n- 在 OSD 节点上，操作系统、OSD 数据、OSD 日志应当位于独立的磁盘上，以确保满意的吞吐量\n- 在集群安装后，需要监控集群、排除故障并维护，尽管 Ceph 具有自愈功能。如果发生性能问题，首先在磁盘、网络和硬件层面上调查。然后逐步转向 RADOS 块设备和 Ceph 对象网关\n\n### 2).影响 I/O 的 6 大操作\n\n- 业务数据写入\n- 数据恢复\n- 数据回填\n- 数据重平衡\n- 数据一致性校验\n- 快照清理\n\n### 3).OSD 生产建议\n\n- 更快的日志性能可以改进响应时间，建议将单独的低延迟 SSD 或者 NVMe 设备用于 OSD 日志。\n- 多个日志可以共享同一 SSD，以降低存储基础架构的成本。但是不能将过多 OSD 日志放在同一设备上。\n- 建议每个 SATA OSD 设备不超过 6 个 OSD 日志，每个 NVMe 设备不超过 12 个 OSD 日志。\n- 需要说明的是，当用于托管日志的 SSD 或者 NVMe 设备故障时，使用它托管其日志的所有 OSD 也都变得不可用\n\n### 4).硬件建议\n\n- 将一个 raid1 磁盘用于 ceph 操作系统\n- 每个 OSD 一块硬盘，尽量将 SSD 或者 NVMe 用于日志\n- 使用多个 10Gb 网卡，每个网络一个双链路绑定（建议生产环境 2 个网卡 4 个光模块，2 个万兆口做为数据的交换，2 个万兆口做业务流量）\n- 每个 OSD 预留 1 个 CPU,每个逻辑核心 1GHz，分配 16GB 内存，外加每个 OSD 2G 内存\n\n### 5).RBD 生产建议\n\n- 块设备上的工作负载通常是 I/O 密集型负载，例如在 OpenStack 中虚拟机上运行数据库。\n- 对于 RBD,OSD 日志应当位于 SSD 或者 NVMe 设备上\n- 对后端存储，可以使用不同的存储设备以提供不同级别的服务\n\n### 6).对象网关生产建议\n\n- Ceph 对象网关工作负载通常是吞吐密集型负载。但是其 bucket 索引池为 I/O 密集型工作负载模式。应当将这个池存储在 SSD 设备上\n- Ceph 对象网关为每个存储桶维护一个索引。Ceph 将这一索引存储在 RADOS 对象中。当存储桶存储数量巨大的对象时（超过 100000 个），索引性能会降低，因为只有一个 RADOS 对象参与所有索引操作。\n- Ceph 可以在多个 RADOS 对象或分片中保存大型索引。可以在 ceph.conf 中设置 rgw_override_bucket_index_max_shards 配置参数来启用该功能。此参数的建议值是存储桶中预计对象数量除以 10000\n- 当索引变大，Ceph 通常需要重新划分存储桶。rgw_dynamic_resharding 配置控制该功能，默认为 true\n\n### 7).CephFS 生产建议\n\n- 存放目录结构和其他索引的元数据池可能会成为 CephFS 的瓶颈。因此，应该将 SSD 设备用于这个池\n- 每个 MDS 维护一个内存中缓存 ，用于索引节点等不同类型的项目。Ceph 使用 mds_cache_memory_limit 配置参数限制这一缓存的大小。其默认值为 1GB，可以在需要时调整，得不得超过系统总内存数\n\n### 8).Monitor 生产建议\n\n- 最好为每个 MON 一个独立的服务器/虚拟机\n- 小型和中型集群，使用 10000RPM 的磁盘，大型集群使用 SSD\n- CPU 使用方面：使用一个多核 CPU，最少 16G 内存，最好不要和 osd 存放在同一个服务器上\n\n### 9).将 OSD 日志迁移到 SSD\n\n强烈建议生产中千万不要这么干，一定在集群初始化的时候就定制好\n\n```bash\n#集群中设置标志位停止指定的osd使用\nceph osd set noout\n\n#停止osd的进程\nsystemctl stop ceph-osd@3\n\n#将所有的日志做刷盘处理，刷盘到osd中\nceph-osd -i 3 --flush-journal\n\n#删除该osd现有的日志\nrm -f /var/lib/ceph/osd/ceph-3/journal\n\n#/dev/sdc1为SSD盘创建一个软连接\nln -s /dev/sdc1 /var/lib/ceph/osd/ceph-3/journal\n\n#刷出日志\nceph-osd -i 3 --mkjournal\n\n#启动osd\nsystemctl start ceph-osd@3\n\n#移除标志位\nceph osd unset noout\n```\n\n### 10).存储池中 PG 的计算方法\n\n- 通常，计算一个池中应该有多少个归置组的计算方法 = 100 \\* OSDs(个数) / size(副本数)\n\n- 一种比较通用的取值规则：\n\n  - 少于 5 个 OSD 时可把 pg_num 设置为 128\n  - OSD 数量在 5 到 10 个时，可把 pg_num 设置为 512\n  - OSD 数量在 10 到 50 个时，可把 pg_num 设置为 4096\n  - OSD 数量大于 50 时，建议自行计算\n\n- 自行计算 pg_num 聚会时的工具\n\n  - pgcalc：[https://ceph.com/pgcalc/](https://ceph.com/pgcalc/)\n  - cephpgc：[https://access.redhat.com/labs/cephpgc/](https://access.redhat.com/labs/cephpgc/)\n\n- 注意：在实际的生产环境中我们很难去预估需要多少个 pool，每个 pool 所占用的数据大小的百分百。所以正常情况下需要在特定的情况选择动态扩缩容 pg 的大小\n\n### 11).PG 与 PGP\n\n> 通常而言，PG 与 PGP 是相同的当我们为一个池增加 PG 时，PG 会开始分裂，这个时候，OSD 上的数据开始移动到新的 PG，但总体而言，此时，数据还是在一个 OSD 的不同 PG 中迁移而我们一旦同时增加了 PGP，则 PG 开始在多个 OSD 上重平衡，这时会出现跨 OSD 的数据迁移\n\n- ceph osd pool create poolName PgNum PgpNum\n- 当变动 pg 数量只是针对当前的特定池中的 osd 发生变动影响范围只是一个池的 pg 平衡\n- 正常情况下一个 osd 最多承载 100 个 pg\n- 当 pgp 发生大变动的时候会导致原本这个池中的 pg 变动导致池中 osd，过载或者有很大剩余性能，ceph 集群会将过大的性能均衡到各个性能使用小的 osd 上，这个时候就会发生数据的大规模迁移，大量的 i/O 写入会占有网络带宽会严重影响使用中的 pg 性能导致阻塞发生。\n- 建议的做法是将 pg_num 直接设置为希望作为最终值的 PG 数量，而 PGP 的数量应当慢慢增加，以确保集群不会因为一段时间内的大量数据重平衡而导致的性能下降\n\n### 12).Ceph 生产网络建议\n\n- 尽可能使用 10Gb 网络带宽以上的万兆带宽(内网)\n- 尽可能使用不同的 cluster 网络和 public 网络\n- 做好必要的网络设备监控防止网络过载\n\n### 13).OSD 和数据一致性校验\n\n> 清理会影响 ceph 集群性能，但建议不要禁用此功能，因为它能提供完数据的完整性\n\n- 清理：检查对象的存在性、校验和以及大小\n- 深度清理：检查对象的存在性和大小，重新计算并验证对象的校验和。(最好不开严重影响性能)\n\n```bash\n#清理调优参数\nosd_scrub_begin_hour =                    #取值范围0-24\nosd_scrub_end_hour = end_hbegin_hour our  #取值范围0-24\nosd_scrub_load_threshold                  #当系统负载低于多少的时候可以清理，默认为0.5\nosd_scrub_min_interval                    #多久清理一次，默认是一天一次（前提是系统负载低于上一个参数的设定）\nosd_scrub_interval_randomize_ratio        #在清理的时候，随机延迟的值，默认是0.5\nosd_scrub_max_interval                    #清理的最大间隔时间，默认是一周（如果一周内没清理过，这次就必须清理，不管负载是多少）\nosd_scrub_priority                        #清理的优先级，默认是5\nosd_deep_scrub_interal                    #深度清理的时间间隔，默认是一周\nosd_scrub_sleep                           #当有磁盘读取时，则暂停清理，增加此值可减缓清理的速度以降低对客户端的影响，默认为0,范围0-1\n```\n\n```bash\n#显示最近发生的清理和深度清理\nceph pg dump all  # 查看LAST_SCRUB和LAST_DEEP_SCRUB\n#-将清理调度到特定的pg\nceph pg scrub pg-id\n#将深度清理调度到特定的pg\nceph pg deep-scrub pg-id\n#为设定的池设定清理参数\nceph osd pool set <pool-name> <parameter> <value>\n    noscrub # 不清理，默认为false\n    nodeep-scrub # 不深度清理，默认为false\n    scrub_min_interval # 如果设置为0，则应用全局配置osd_scrub_min_interval\n    scrub_max_interval # 如果设置为0，则应用全局配置osd_scrub_max_interval\n    deep_scrub_interval # 如果设置为0，则应用全局配置osd_scrub_interval\n```\n\n### 14).快照的生产建议\n\n- 快照在池级别和 RBD 级别上提供。当快照被移除时，ceph 会以异步操作的形式删除快照数据，称为快照修剪进程\n- 为减轻快照修剪进程会影响集群总体性能。可以通过配置`osd_snap_trim_sleep`来在有客户端读写操作的时候暂停修剪，参数的值范围是`0`到`1`\n- 快照修剪的优先级通过使用`osd_snap_trim_priority`参数控制，默认为`5`\n\n### 15).保护数据和 osd\n\n- 需要控制回填和恢复操作，以限制这些操作的影响\n- 回填发生于新的 osd 加入集群时，或者 osd 死机并且 ceph 将其 pg 分配到其他 osd 时。在这种场景中，ceph 必须要在可用的 osd 之间复制对象副本\n- 恢复发生于新的 osd 已有数据时，如出现短暂停机。在这种情形下，ceph 会简单的重放 pg 日志\n\n  - 管理回填和恢复操作的配置项\n\n```bash\n#用于限制每个osd上用于回填的并发操作数，默认为1\nosd_max_backfills\n\n#用于限制每个osd上用于恢复的并发操作数，默认为3\nosd_recovery_max_active\n\n#恢复操作的优先级，默认为3\nosd_recovery_op_priority\n```\n\n### 16).OSD 数据存储后端\n\n> BlueStore 管理一个，两个或（在某些情况下）三个存储设备。在最简单的情况下，BlueStore 使用单个（主）存储设备。存储设备通常作为一个整体使用，BlueStore 直接占用完整设备。该主设备通常由数据目录中的块符号链接标识。数据目录挂载成一个 tmpfs，它将填充（在启动时或 ceph-volume 激活它时）所有常用的 OSD 文件，其中包含有关 OSD 的信息，例如：其标识符，它所属的集群，以及它的私钥。还可以使用两个额外的设备部署 BlueStore\n\n- WAL 设备（在数据目录中标识为 block.wal）可用于 BlueStore 的内部日志或预写日志。只有设备比主设备快（例如，当它在 SSD 上并且主设备是 HDD 时），使用 WAL 设备是有用的。\n- 数据库设备（在数据目录中标识为 block.db）可用于存储 BlueStore 的内部元数据。 BlueStore（或者更确切地说，嵌入式 RocksDB）将在数据库设备上放置尽可能多的元数据以提高性能。如果数据库设备填满，元数据将写到主设备。同样，数据库设备要比主设备更快，则提供数据库设备是有帮助的。\n- 如果只有少量快速存储可用（例如，小于 1GB），我们建议将其用作 WAL 设备。如果还有更多，配置数据库设备会更有意义。 BlueStore 日志将始终放在可用的最快设备上，因此使用数据库设备将提供与 WAL 设备相同的优势，同时还允许在其中存储其他元数据。\n- 正常 L 版本推荐使用 filestore，M 版本可以考虑使用 bluestore\n- 推荐优化文章：[https://www.cnblogs.com/luxiaodai/p/10006036.html#\\_lab2_1_9](https://www.cnblogs.com/luxiaodai/p/10006036.html#_lab2_1_9)\n\n### 17).关于性能测试\n\n- 推荐使用 fio 参考阿里云文档：[https://help.aliyun.com/document_detail/95501.html?spm=a2c4g.11174283.6.659.38b44da2KZr2Sn](https://help.aliyun.com/document_detail/95501.html?spm=a2c4g.11174283.6.659.38b44da2KZr2Sn)\n- dd\n\n```bash\necho 3 > /proc/sys/vm/drop_caches\ndd if=/dev/zero of=/var/lib/ceph/osd/ceph-0/test.img bs=4M count=1024 oflag=direct\ndd if=/var/lib/ceph/osd/ceph-0/test.img of=/dev/null bs=4M count=1024 oflag=direct\n```\n\n- rados bench 性能测试\n\n```bash\nrados bench -p <pool_name> <seconds> <write|seq|rand> -b <block size> -t --no-cleanup\n    pool_name 测试所针对的池\n    seconds 测试所持续的时间，以秒为单位\n    <write|seq|rand> 操作模式，分别是写、顺序读、随机读\n    -b <block_size> 块大小，默认是4M\n    -t 读/写的并行数，默认为16\n    --no-cleanup 表示测试完成后不删除测试用的数据。在做读测试之前，需要使用该参数来运行一遍写测试来产生测试数据，在全部测试完成以后，可以行rados -p <pool_name> cleanup来清理所有测试数据\n\n#示例：\nrados bench -p rbd 10 write --no-cleanup\nrados bench -p rbd 10 seq\n```\n\n- rbd bench 性能测试\n\n```bash\nrbd bench -p <pool_name> <image_name> --io-type <write|read> --io-size <size> --io-threads <num> --io-total <size> --io-pattern <seq|rand>\n    --io-type 测试类型，读/写\n    --io-size 字节数，默认4096\n    --io-threads 线程数，默认16\n    --io-total  读/写的总大小，默认1GB\n    --io-pattern  读/写的方式，顺序还是随机\n\n#示例：\nhttps://edenmal.moe/post/2017/Ceph-rbd-bench-Commands/\n```\n\n## 3.设置集群的标志\n\n**flag 操作**\n\n- 只能对整个集群操作，不能针对单个 osd\n\n  - ceph osd set\n  - ceph osd unset\n\n```bash\n#示例：\nceph osd set nodown\nceph osd unset nodown\nceph -s\n```\n\n| 标志名称     | 含义用法详解                                                                                                                                                     |\n| :----------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| noup         | OSD 启动时，会将自己在 MON 上标识为 UP 状态，设置该标志位，则 OSD 不会被自动标识为 up 状态                                                                       |\n| nodown       | OSD 停止时，MON 会将 OSD 标识为 down 状态，设置该标志位，则 MON 不会将停止的 OSD 标识为 down 状态，设置 noup 和 nodown 可以防止网络抖动                          |\n| noout        | 设置该标志位，则 mon 不会从 crush 映射中删除任何 OSD。对 OSD 作维护时，可设置该标志位，以防止 CRUSH 在 OSD 停止时自动重平衡数据。OSD 重新启动时，需要清除该 flag |\n| noin         | 设置该标志位，可以防止数据被自动分配到 OSD 上                                                                                                                    |\n| norecover    | 设置该 flag，禁止任何集群恢复操作。在执行维护和停机时，可设置该 flag                                                                                             |\n| nobackfill   | 禁止数据回填                                                                                                                                                     |\n| noscrub      | 禁止清理操作。清理 PG 会在短期内影响 OSD 的操作。在低带宽集群中，清理期间如果 OSD 的速度过慢，则会被标记为 down。可以该标记来防止这种情况发生                    |\n| nodeep-scrub | 禁止深度清理                                                                                                                                                     |\n| norebalance  | 禁止重平衡数据。在执行集群维护或者停机时，可以使用该 flag                                                                                                        |\n| pause        | 设置该标志位，则集群停止读写，但不影响 osd 自检                                                                                                                  |\n| full         | 标记集群已满，将拒绝任何数据写入，但可读                                                                                                                         |\n\n# 参考文档\n\n[https://poph163.com/category/分布式存储/](https://poph163.com/category/%e5%88%86%e5%b8%83%e5%bc%8f%e5%ad%98%e5%82%a8/)\n","source":"_posts/ceph/Ceph 集群部署.md","raw":"---\ntitle: \"Ceph集群部署\"\ntags: ceph\ncategories: Ceph 学习\ntoc: true\ncover:\ndate: 2021-10-01 16:00:00\nupdated: 2021-10-01 16:00:00\n---\n\n# 一、Ceph 简介\n\n> 一个 Ceph 存储集群需要至少一个 Ceph 监视器、Ceph 管理器和 Ceph OSD(对象存储守护进程)。在运行 Ceph 文件系统客户端时，也需要 Ceph 元数据服务器。\n\n<!-- more -->\n\n- **Monitors**:\n\n  - Ceph 监视器(`ceph-mon`)维护着展示集群状态的各种图表，包括监视器图、管理器图、OSD 图、MDS 图和 CRUSH 图。这些图是 Ceph 守护进程相互协调所必需的关键集群状态。\n  - 监视器还负责管理守护进程和客户端之间的身份验证。为了实现冗余和高可用性，通常需要至少三个监视器。\n\n- **Managers**: [Ceph Manager](https://docs.ceph.com/en/latest/glossary/#term-Ceph-Manager)守护程序(`ceph-mgr`)\n\n  - 负责跟踪运行时指标和 Ceph 群集的当前状态，包括存储利用率、当前性能指标和系统负载。\n  - Ceph Manager 守护程序还托管基于 python 的模块来管理和公开 Ceph 群集信息，包括基于 Web 的[Ceph 仪表板和](https://docs.ceph.com/en/latest/mgr/dashboard/#mgr-dashboard) [REST API](https://docs.ceph.com/en/latest/mgr/restful)。高可用性通常需要至少两个管理器。\n\n- **OSDs**: [Ceph OSD](https://docs.ceph.com/en/latest/glossary/#term-Ceph-OSD) (object storage daemon, `ceph-osd`)存储数据，处理数据复制，恢复，重新平衡，并提供一些监视信息到 Ceph 监视器和管理器,通过检查其他 Ceph OSD 守护进程检测信号.冗余和高可用性通常需要至少 3 个 Ceph OSD。\n- **MDSs**: [Ceph 元数据服务器](https://docs.ceph.com/en/latest/glossary/#term-Ceph-Metadata-Server)（MDS, `ceph-mds`）代表[Ceph 文件系统](https://docs.ceph.com/en/latest/glossary/#term-Ceph-File-System)存储元数据（即 Ceph 块设备和 Ceph 对象存储不使用 MDS）。Ceph 元数据服务器允许 POSIX 文件系统用户执行基本命令 (如`ls`, `find`, `etc`等)，而不会给 Ceph 存储群集带来巨大负担。\n\n> Ceph 将数据存储为逻辑存储池中的对象。使用[CRUSH 算法](https://docs.ceph.com/en/latest/glossary/#term-CRUSH)，Ceph 计算哪个放置组应包含对象，并进一步计算哪个 Ceph OSD 守护程序应存储该放置组。CRUSH 算法使 Ceph 存储群集能够动态扩展、重新平衡和恢复。\n\n参考链接：\n\n- [https://mp.weixin.qq.com/s/TWXPPk7hE1D4AGsHg7CIMg](https://mp.weixin.qq.com/s/TWXPPk7hE1D4AGsHg7CIMg)\n- [https://www.jianshu.com/p/cc3ece850433](https://www.jianshu.com/p/cc3ece850433)\n- [https://mp.weixin.qq.com/s/QXRdyYKSKIa1aLNI8dOGcQ](https://mp.weixin.qq.com/s/QXRdyYKSKIa1aLNI8dOGcQ)\n- [https://blog.csdn.net/xiaoquqi/article/details/43055031](https://blog.csdn.net/xiaoquqi/article/details/43055031)\n\n# 二、Cephadm 部署集群\n\n简单，简述，详细参考：[https://docs.ceph.com/en/latest/cephadm/#cephadm](https://docs.ceph.com/en/latest/cephadm/#cephadm)\n\n## 1.环境规划\n\n| 主机名 | 内网 IP         | 操作系统 | 角色                | 配置                         |\n| ------ | --------------- | -------- | ------------------- | ---------------------------- |\n| ceph1  | 192.168.200.128 | Debian11 | cephadm,mon,mgr,osd | 2C,2G,20G 系统盘，20G 数据盘 |\n| ceph2  | 192.168.200.131 | Debian11 | cephadm,mon         | 2C,2G,20G 系统盘，20G 数据盘 |\n| ceph3  | 192.168.200.132 | Debian11 | cephadm,mon         | 2C,2G,20G 系统盘，20G 数据盘 |\n\n> 典型的 Ceph 集群有三个或五个监视器守护程序，分布在不同的主机上。如果群集中有五个或更多节点，我们建议部署五个监视器。\n\n当 Ceph 知道 mon 应该使用什么 IP 子网时，它可以随着群集的增长（或收缩）自动部署和缩放 mon。默认情况下，Ceph 假定其他 mon 使用与第一个 mon 的 IP 相同的子网。\n\n在单个子网的情况下，如果向集群中添加主机，默认最多只会添加 5 个 mon 如果有特定的 IP 子网给 mon 使用，可以使用 CIDR 格式配置该子网。\n\n## 2.前置(所有节点)\n\n> [https://docs.ceph.com/en/pacific/cephadm/install/](https://docs.ceph.com/en/pacific/cephadm/install/)\n\n各节点配置 hosts\n\n```conf\n10.200.10.31 ceph-pro-1-10-200-10-31\n10.200.10.32 ceph-pro-2-10-200-10-32\n10.200.10.33 ceph-pro-3-10-200-10-33\n10.200.10.34 ceph-pro-4-10-200-10-34\n10.200.10.35 ceph-pro-5-10-200-10-35\n```\n\n## 3.安装 CEPHADM(所有节点)\n\n```bash\n#下载cephadm\ncurl --remote-name --location https://hub.shutcm.cf/ceph/ceph/raw/pacific/src/cephadm/cephadm\nchmod +x cephadm\n#设置源\n./cephadm add-repo --release pacific\nsed -i 's#https://download.ceph.com#https://mirrors.aliyun.com/ceph#g' /etc/apt/sources.list.d/ceph.list\napt-get update\n#安装cephadm命令\n./cephadm install\n#确认在PATH中\nwhich cephadm\nrm -fr cephadm\n#安装ceph命令\ncephadm install ceph-common\n```\n\n## 4.引导新群集(第一台)\n\n> 创建新的 Ceph 集群的第一步是在 Ceph 集群的第一台主机上运行 cephadm bootstrap 命令，运行此命令的操作将创建 Ceph 集群的第一个“监视程序守护程序”。\n\n而该监视程序守护程序需要一个 IP 地址，必须将 Ceph 集群的第一个主机的 IP 地址传递给 ceph bootstrap 命令。\n\n```bash\ncephadm bootstrap --mon-ip 10.200.10.31\n#设置addr\n#ceph orch host set-addr ceph1 192.168.200.128\n#检查\nceph orch host ls\nceph -s\n```\n\n此命令将会：\n\n```\n1) 在本地主机上为新集群创建监视和管理器守护程序\n2) 为Ceph集群生成一个新的SSH密钥，并将其添加到root用户的/root/.ssh/authorized_keys文件中\n3) 将最小配置文件写入/etc/ceph/ceph.conf\n4) 将client.admin管理特权密钥写入/etc/ceph/ceph.client.admin.keyring\n5) 将公钥写入/etc/ceph/ceph.pub\n```\n\n## 5.向群集添加主机\n\n> 在解析主机名等方面，cephadm 的要求非常低, 通过以下命令可以明确 IP 与主机名之间的解析：ceph orch host add\n\n**注意**：添加主机时会自动创建 mon 服务，先按照 禁用监视器自动部署( 5.4 (1) ) 或 调整默认值监视器数量 (5.2 节)，再添加主机。\n\n在新主机 root 用户的 authorized_keys 文件中安装集群的公共 SSH 密钥\n\n```bash\n#ssh-copy-id -f -i /etc/ceph/ceph.pub root@*<new-host>*\nssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-pro-1-10-200-10-31\nssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-pro-2-10-200-10-32\nssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-pro-3-10-200-10-33\nssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-pro-4-10-200-10-34\nssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-pro-5-10-200-10-35\n```\n\n添加方式两种：\n\n- 命令方式添加\n\n```bash\n#ceph orch host add *<newhost>* [*<ip>*] [*<label1> ...*]\nceph orch host add ceph-pro-2-10-200-10-32 10.200.10.32 --labels _admin\n```\n\n- yaml 方式添加\n\n`host.yml`\n\n```yaml\n---\nservice_type: host\naddr: 192.168.200.131\nhostname: ceph2\nlabels:\n  - mon\n---\nservice_type: host\naddr: 192.168.200.132\nhostname: ceph3\nlabels:\n  - mon\n```\n\n## 3.检查状态\n\n```bash\nceph orch host ls\nceph -s\n```\n\n## 6.部署 OSD\n\n**[https://docs.ceph.com/en/pacific/cephadm/services/osd/#](https://docs.ceph.com/en/pacific/cephadm/services/osd/#)**\n\n> 当有新的 osd 加入集群或者移除了 osd，就会把状态上报给 Monitor，Monitor 知道了 osd map 发生了变化就会触发 rebalancing，确保 pg 能够平滑的移动到各个 osd 上，以 pg 为整体进行数据重平衡，重平衡的过程中可能会影响性能，一次性加入的 osd 越多，数据 rebalancing 就越频繁。\n\n> 当在做 rebalance 的时候，每个 osd 都会按照 osd_max_backfills 指定数量的线程来同步，如果该数值比较大，同步会比较快，但是会影响部分性能；为了避免 rebalance 带来的性能影响，可以对 rebalance 进行关闭；添加完 osd 后再打开。\n\n### 1).rebalance 关闭\n\n```bash\n# 设置标志位\nceph osd set norebalance\n\n# 关闭数据填充\nceph osd set nobackfill\n\n# 查看集群状态\nceph -s\n  cluster:\n    id:     87cdd3b2-987b-11eb-989e-000c29b12ae1\n    health: HEALTH_WARN\n            nobackfill,norebalance flag(s) set  # 有此信息\n```\n\n### 2).rebalance 开启\n\n```bash\n#开启数据填充\nceph osd unset nobackfill\n#开启rebalance\nceph osd unset norebalance\n# 查看集群状态\nceph -s\n  cluster:\n    id:     87cdd3b2-987b-11eb-989e-000c29b12ae1\n    health: HEALTH_OK\n```\n\n### 3).列出节点可用设备\n\n```bash\n#ceph orch device ls [--wide]\nceph orch device ls --wide\n```\n\n如果满足以下所有条件，则认为存储设备可用\n\n```\n1) 设备必须没有分区\n2) 设备不得具有任何LVM状态\n3) 设备不得挂载\n4) 设备不得包含文件系统\n5) 设备不得包含Ceph BlueStore OSD\n6) 设备必须大于5 GB\n```\n\n### 4).创建 osd\n\n```bash\n#需要至少 3 个 Ceph OSD 以实现冗余和高可用性\nceph orch daemon add osd ceph-pro-1-10-200-10-31:/dev/sdb\nceph orch daemon add osd ceph-pro-2-10-200-10-32:/dev/sdb\nceph orch daemon add osd ceph-pro-3-10-200-10-33:/dev/sdb\n```\n\n## 7.集群高可用\n\n```bash\n#需要至少三个监视器才能实现冗余和高可用性\nceph orch apply mon 3\n# 部署mon到指定节点\nceph orch host label add *<host>* mon\n#至少需要两个管理器才能实现高可用性\nceph orch apply mgr 3\n#\n```\n\n## 8.CephFS 部署\n\n## 9.部署 RGW\n\n[https://docs.ceph.com/en/pacific/cephadm/services/rgw/](https://docs.ceph.com/en/pacific/cephadm/services/rgw/)\n\n# 三、运维\n\n[https://www.cnblogs.com/royaljames/p/9807532.html](https://www.cnblogs.com/royaljames/p/9807532.html)\n\n## 1.向群集添加主机\n\n```bash\n#1.在新主机的根用户文件中安装群集的公共 SSH 密钥\nssh-copy-id -f -i /etc/ceph/ceph.pub root@host2\n#2.告诉 Ceph 新节点是群集的一部分：\nceph orch host add host2\n```\n\n## 2.部署其他监视器(monitor)\n\n> 典型的 Ceph 群集具有分布在不同主机的三个或五个监视器守护程序。如果群集中有五个或更多节点，我们建议部署五个监视器。\n\n当 Ceph 知道监视器应该使用什么 IP 子网时，它可以随着群集的增长（或收缩）自动部署和缩放监视器。默认情况下，Ceph 假定其他监视器应使用与第一个监视器的 IP 相同的子网。\n\n如果您的 Ceph 监视器（或整个群集）住在单个子网中，则在向群集添加新主机时，默认情况下，cephadm 会自动添加多达 5 个监视器。无需进一步步骤。\n\n```bash\n#如果有特定的 IP 子网应该由监视器使用，您可以用CIDR格式（例如 ） 配置该子网，Cephadm 仅在配置的子网中配置了 IP 的主机上部署新的监视器守护程序。\nceph config set mon public_network 10.1.2.0/24\n#如果要调整 5 个监视器的默认值：\nceph orch apply mon *<number-of-monitors>*\n#若要在一组特定的主机上部署监视器，请确保在此列表中包括第一个（引导）主机。\nceph orch apply mon *<host1,host2,host3,...>*\n#您可以通过使用主机标签来控制监视器运行的主机。要将标签设置为相应的主机，请：mon\nceph orch host label add *<hostname>* mon\n#要查看当前主机和标签：\nceph orch host ls\n#例如：\n# ceph orch host label add host1 mon\n# ceph orch host label add host2 mon\n# ceph orch host label add host3 mon\n# ceph orch host ls\nHOST   ADDR   LABELS  STATUS\nhost1         mon\nhost2         mon\nhost3         mon\nhost4\nhost5\n#告诉 cephadm 根据标签部署监视器：\nceph orch apply mon label:mon\n#您可以显式指定每个监视器的 IP 地址或 CIDR 网络，并控制其放置位置。要禁用自动监视器部署：\nceph orch apply mon --unmanaged\n#要部署每个附加监视器：\nceph orch daemon add mon *<host1:ip-or-network1> [<host1:ip-or-network-2>...]*\n#例如，要在使用 IP 地址上部署第二个监视器，在网络上部署第三个监视器\n# ceph orch apply mon --unmanaged\n# ceph orch daemon add mon newhost1:10.1.2.123\n# ceph orch daemon add mon newhost2:10.1.2.0/24\n\n#若要确保监视器应用于这三台主机中的每一个主机，请运行以下命令：\nceph orch apply mon \"host1,host2,host3\"\n```\n\n# 使用 YAML 规范\n\n```bash\nceph orch apply -i file.yaml\n```\n\n```yaml\nservice_type: mon\nplacement:\n  hosts:\n    - host1\n    - host2\n    - host3\n```\n\n## 3.部署 OSD\n\n### 1.所有群集主机上的存储设备清单可以显示\n\n```bash\nceph orch device ls\n```\n\n- 设备必须没有分区。\n- 设备不得具有任何 LVM 状态。\n- 不得安装设备。\n- 设备不能包含文件系统。\n- 设备不得包含 Ceph BlueStore OSD。\n- 设备必须大于 5 GB。\n\n### 2.创建新 OSD 的方法\n\n```bash\n# 1.告诉 Ceph 使用任何可用和未使用的存储设备：\nceph orch apply osd --all-available-devices\n# 2.从特定主机上的特定设备创建 OSD：ceph orch daemon add osd *<host>*:*<device-path>*\nceph orch daemon add osd host1:/dev/sdb\n# 3.使用OSD 服务规范描述设备，根据设备属性、此类设备类型（SSD 或 HDD）、设备型号名称、大小或设备存在的主机使用：\nceph orch apply osd -i spec.yml\n```\n\n## 4.部署 MDS\n\n使用 CephFS 文件系统需要一个或多个 MDS 守护程序。如果使用较新的接口创建新文件系统，则会自动创建这些接口。有关详细信息，请参阅 FS 卷和子卷。\n\n```bash\nceph orch apply mds *<fs-name>* --placement=\"*<num-daemons>* [*<host1>* ...]\"\n```\n\n## 5.部署 RGW\n\n## 6.管理 Monitor map\n\n### 1).多 Monitor 同步机制\n\n> 在生产环境建议最少三节点 monitor，以确保 cluster map 的高可用性和冗余性,monitor 节点不应该过多甚至操作 9 节点的行为,会导致数据读写时间下降，影响系统集群的性能。\n\n- monitor 使用 paxos 算法作为集群状态上达成一致的机制。paxos 是一种分布式一致性算法。每当 monitor 修改 map 时，它会通过 paxos 发送更新到其他 monitor。Ceph 只有在大多数 monitor 就更新达成一致时提交 map 的新版本。\n- cluster map 的更新操作需要 Paxos 确认，但是读操作不经由 Paxos，而是直接访问本地的 kv 存储。\n\n### 2).Monitor 选举机制\n\n- 多个 monitor 之间需要建立仲裁并选择出一个 leader，其他节点则作为工作节点（peon）。\n- 在选举完成并确定 leader 之后，leader 将从所有其他 monitor 请求最新的 map epoc，以确保 leader 具有集群的最新视图。\n- 要维护 monitor 集群的正常工作，必须有超过半数的节点正常。\n\n### 3).Monitor 租约\n\n- 在 Monitor 建立仲裁后，leader 开始分发短期的租约到所有的 monitors。让它们能够分发 cluster map 到 OSD 和 client。\n- Monitor 租约默认每 3s 续期一次。\n- 当 peon monitor 没有确认它收到租约时，leader 假定该 monitor 异常，它会召集新的选举以建立仲裁。\n- 如果 peon monitor 的租约到期后没有收到 leader 的续期，它会假定 leader 异常，并会召集新的选举。\n- 所以如果生产环境中存在多个 monitor 时候某个节点的超时会猝发节点的重新选举导致 client 无法第一时间拿到最新的 crushmap 图像也就无法去对应的 osd 上的 pv 写入数据了。\n\n### 4).常用的 monitor 管理\n\n```bash\n#打印monitor map信息\nceph mon dump\n\n#将monitor map导出为一个二进制文件\nceph mon getmap -o ./monmap\n\n#打印导出的二进制文件的内容\nmonmaptool --print ./monmap\n\n#修改二进制文件，从monmap删除某个monitor\nmonmaptool ./monmap --rm <id>\n\n#修改二进制文件，往monmap中添加一个monitor\nmonmaptool ./monmap --add <id> <ip:port>\n\n#导入一个二进制文件，在导入之前，需要先停止monitor\nceph-mon -i <id> --inject-monmap ./monmap\n```\n\n## 7.管理 OSD Map\n\n- 每当 OSD 加入或离开集群时，Ceph 都会更新 OSD map。\n- OSD 不使用 leader 来管理 OSD map，它们会在自身之间传播同步 map。OSD 会利用 OSD map epoch 标记它们交换的每一条信息，当 OSD 检测到自己已落后时，它会使用其对等 OSD 执行 map 更新。\n- 在大型集群中 OSD map 更新会非常频繁，节点会执行递增 map 更新。\n- Ceph 也会利用 epoch 来标记 OSD 和 client 之间的消息。当 client 连接到 OSD 时 OSD 会检查 epoch。如果发现 epoch 不匹配，则 OSD 会以正确的 epoch 响应，以便客户端可以更新其 OSD map。\n- OSD 定期向 monitor 报告自己的状态，OSD 之间会交换心跳，以便检测对等点的故障，并报告给 monitor。\n- leader monitor 发现 OSD 故障时，它会更新 map，递增 epoch，并使用 Paxos 更新协议来通知其他 monitor，同时撤销租约，并发布新的租约，以使 monitor 以分发最新的 OSD map。\n\n### 1).OSD 状态解读\n\n- 1.正常状态的 OSD 为 up 且 in\n- 2.当 OSD 故障时，守护进程 offline，在 5 分钟内，集群仍会将其标记为 up 和 in，这是为了防止网络抖动\n- 3.如果 5 分钟内仍未恢复，则会标记为 down 和 out。此时该 OSD 上的 PG 开始迁移。这个 5 分钟的时间间隔可以通过 mon_osd_down_out_interval 配置项修改\n- 4.当故障的 OSD 重新上线以后，会触发新的数据再平衡\n- 5.当集群有 noout 标志位时，则 osd 下线不会导致数据恢复\n- 6.OSD 每隔 6s 会互相验证状态。并每隔 120s 向 mon 报告一次状态。\n\n### 2).OSD map 命令\n\n```bash\nceph osd dump\nceph osd getmap -o binfile\nosdmaptool --print binfile\nosdmaptool --export-crush crushbinfile binfile\nosdmaptool --import-crush crushbinfile binfile\nosdmaptool --test-map-pg pgid binfile\n```\n\n### 3.)OSD 的状态\n\n- OSD 运行状态\n\n  - up\n  - down\n  - out\n  - in\n\n- OSD 容量状态\n\n  - nearfull\n  - full\n\n常用指令\n\n```bash\n#显示OSD状态\nceph osd stat\n\n#报告osd使用量\nceph osd df\n\n#查找指定osd位置\nceph osd find\n```\n\n### 4.)OSD 容量\n\n- 当集群容量达到 mon_osd_nearfull_ratio 的值时，集群会进入 HEALTH_WARN 状态。这是为了在达到 full_ratio 之前，提醒添加 OSD。默认设置为 0.85，即 85%\n- 当集群容量达到 mon_osd_full_ratio 的值时，集群将停止写入，但允许读取。集群会进入到 HEALTH_ERR 状态。默认为 0.95，即 95%。这是为了防止当一个或多个 OSD 故障时仍留有余地能重平衡数据\n\n设置方法：\n\n```bash\nceph osd set-full-ratio 0.95\nceph osd set-nearfull-ratio 0.85\nceph osd dump\n```\n\n### 5).OSD 状态参数\n\n```bash\n# osd之间传递心跳的间隔时间\nosd_heartbeat_interval\n\n# 一个osd多久没心跳，就会被集群认为它down了\nosd_heartbeat_grace\n\n# 确定一个osd状态为down的最少报告来源osd数\nmon_osd_min_down_reporters\n\n# 一个OSD必须重复报告一个osd状态为down的次数\nmon_osd_min_down_reports\n\n# 当osd停止响应多长时间，将其标记为down和out\nmon_osd_down_out_interval\n\n# monitor宣布失败osd为down前的等待时间\nmon_osd_report_timeout\n\n# 一个新的osd加入集群时，等待多长时间，开始向monitor报告\nosd_mon_report_interval_min\n\n# monitor允许osd报告的最大间隔，超时就认为它down了\nosd_mon_report_interval_max\n\n# osd向monitor报告心跳的时间\nosd_mon_heartbeat_interval\n```\n\n## 8.管理 PG\n\n### 1).管理文件到 PG 映射\n\ntest 对象所在 pg id 为 10.35，存储在三个 osd 上，分别为 osd.2、osd.1 和 osd.8，其中 osd.2 为 primary osd\n\n```bash\nrados -p test put test /etc/ceph/ceph.conf\nceph osd map test test\n    osdmap e201 pool 'test' (10) object 'test' -> pg 10.40e8aab5 (10.35) -> up ([2,1,8], p2) acting ([2,1,8], p2)\n\n#处于up状态的osd会一直留在PG的up set和acting set中，一旦主osd down，它首先会从up set中移除\n#然后从acting set中移除，之后从OSD将被升级为主。Ceph会将故障OSD上的PG恢复到一个新OSD上\n#然后再将这个新OSD加入到up和acting set中来维持集群的高可用性\n```\n\n### 2).管理 struck 状态的 PG\n\n- 如果 PG 长时间（mon_pg_stuck_threshold，默认为 300s）出现如下状态时，MON 会将该 PG 标记为 stuck：\n\n  - inactive：pg 有 peering 问题\n  - unclean：pg 在故障恢复时遇到问题\n  - stale：pg 没有任何 OSD 报告，可能其所有的 OSD 都是 down 和 out\n  - undersized：pg 没有充足的 osd 来存储它应具有的副本数\n\n- 默认情况下，Ceph 会自动执行恢复，但如果未能自动恢复，则集群状态会一直处于 HEALTH_WARN 或者 HEALTH_ERR\n\n- 如果特定 PG 的所有 osd 都是 down 和 out 状态，则 PG 会被标记为 stale。要解决这一情况，其中一个 OSD 必须要重生，且具有可用的 PG 副本，否则 PG 不可用\n\n- Ceph 可以声明 osd 或 PG 已丢失，这也就意味着数据丢失。需要说明的是，osd 的运行离不开 journal，如果 journal 丢失，则 osd 停止\n\n### 3).struck 状态操作\n\n```bash\n# 检查处于stuck状态的pg\nceph pg dump_stuck\n# 检查导致pg一致阻塞在peering状态的osd\nceph osd blocked-by\n# 检查某个pg的状态\nceph pg dump all|grep pgid\n# 声明pg丢失\nceph pg pgid mark_unfound_lost revert|delete\n# 声明osd丢失（需要osd状态为down且out）\nceph osd lost osdid --yes-i-really-mean-it\n```\n\n### 4).手动控制 PG 的 Primary OSD\n\n可以通过手动修改 osd 的权重以提升 特定 OSD 被选为 PG Primary OSD 的概率，避免将速度慢的磁盘用作 primary osd。\n\n需要先在配置文件中配置如下参数：\n\n```bash\nmon_osd_allow_primary_affinity = true\n```\n\n### 5).调整权重示例\n\n```bash\n1. 查看现在有多少PG的主OSD是osd.0\nceph pg dump |grep active+clean |egrep \"\\[0,\" |wc -l\n\n2. 修改osd.0的权重\nceph osd primary-affinity osd.0 0  # 权重范围从0.0到1.0\n\n3. 再次查看现在有多少PG的主OSD是osd.0\nceph pg dump |grep active+clean |egrep \"\\[0,\" |wc -l\n```\n\n## 9.Pool(存储池)管理\n\n[https://blog.csdn.net/weixin_42440345/article/details/81118964](https://blog.csdn.net/weixin_42440345/article/details/81118964)\n\n### PG 和 PGP 的区别\n\n[https://www.cnblogs.com/zphj1987/p/13575377.html](https://www.cnblogs.com/zphj1987/p/13575377.html)\n\nPG 是指定存储池存储对象的目录有多少个，PGP 是存储池 PG 的 OSD 分布组合个数\n\nPG 的增加会引起 PG 内的数据进行分裂，分裂到相同的 OSD 上新生成的 PG 当中\n\nPGP 的增加会引起部分 PG 的分布进行变化，但是不会引起 PG 内对象的变动\n\n### 4.)限制 pool 配置更改\n\n```bash\n#禁止池被删除\nosd_pool_default_flag_nodelete\n\n#禁止池的pg_num和pgp_num被修改\nosd_pool_default_flag_nopgchange\n\n#禁止修改池的size和min_size\nosd_pool_default_flag_nosizechange\n```\n\n### 1.查看 pool\n\n```bash\n#查看所有pool\nceph osd lspools\n#获取集群内所有POOL的概况信息,集群内POOL的个数、对应的POOL id、POOL名称、副本数、最小副本数，ruleset及POOL snap等信息\nceph osd pool ls detail\n#查看POOL的统计信息\n```\n\n### 2.创建 pool\n\n```bash\n#创建一个副本类型的POOL\nceph osd pool create {pool-name} {pg-num} [{pgp-num}] [{pgp-num}] [replicated] [ruleset]\n#举例：\nceph osd pool create rbd  32 32\n#创建一个纠删码类型的POOL\nceph osd pool create {pool-name} {pg-num} {pgp-num} erasure [erasure-code-profile] [ruleset]\n```\n\n在`{}`内的参数为必选项,`[]`内的参数均设有默认值,如果没有更改设计,可以不添加。\n\n参数的含义如下:\n\n- **pool-name**: POOL 的名字；必须添加。\n- **pg-num**: POOL 拥有的 PG 总数；必须添加。\n- **pgp-num**: POOL 拥有的 PGP 总数；非必须添加。默认与 pg-num 相同。\n- **replicated|erasure**: POOL 类型；非必须添加。如不指定为 erasure,则默认为 replicated 类型。\n- **ruleset**: POOL 所用的 CRUSH 规则 ID。非必须添加。默认为 0,若需指定其他 ruleset,需确保 ruleset 必须存在。\n- **erasure-code-profile**: 仅用于纠删码类型的 POOL。指定纠删码配置框架,此配置必须已由 osd erasure-code-profile set 定义\n\n这里强制选择 pg_num 和 pgp_num，因为 ceph 集群不能自动计算 pg 数量。下面有一些官方建议的 pg 使用数量：\n\n- 小于 5 个 osd 设置 pg_num 为 128\n- 5 到 10 个 osd 设置 pg_num 为 512\n- 10 到 50 个 osd 设置 pg_num 为 1024\n- 如果超过 50 个 osd 你需要自己明白权衡点，并且能自行计算 pg_num 的数量\n\npg_num 通用计算方法:\n\n(OSDs \\* 100)\n\nTotal PGs =  ------------\n\npool size\n\n### 3.修改 pool\n\n```bash\nceph osd pool set {pool-name} {key} {value}\nsize：设置存储池中的对象副本数，详情参见设置对象副本数。仅适用于副本存储池。\nmin_size：设置 I/O 需要的最小副本数，详情参见设置对象副本数。仅适用于副本存储池。\npg_num：计算数据分布时的有效 PG 数。只能大于当前 PG 数。\npgp_num：计算数据分布时使用的有效 PGP 数量。小于等于存储池的 PG 数。\nhashpspool：给指定存储池设置/取消 HASHPSPOOL 标志。\ntarget_max_bytes：达到 max_bytes 阀值时会触发 Ceph 冲洗或驱逐对象。\ntarget_max_objects：达到 max_objects 阀值时会触发 Ceph 冲洗或驱逐对象。\nscrub_min_interval：在负载低时，洗刷存储池的最小间隔秒数。如果是 0 ，就按照配置文件里的 osd_scrub_min_interval 。\nscrub_max_interval：不管集群负载如何，都要洗刷存储池的最大间隔秒数。如果是 0 ，就按照配置文件里的 osd_scrub_max_interval 。\ndeep_scrub_interval：“深度”洗刷存储池的间隔秒数。如果是 0 ，就按照配置文件里的 osd_deep_scrub_interval 。\n```\n\n### 4.删除存储池\n\n```bash\nceph osd pool delete {pool-name} [{pool-name} --yes-i-really-really-mean-it]\n```\n\n### 5.重命名存储池\n\n```bash\nceph osd pool rename {current-pool-name} {new-pool-name}\n```\n\n### 6.查看存储池统计信息\n\n```bash\nrados df\n```\n\n### 7.给存储池做快照\n\n```bash\nceph osd pool mksnap {pool-name} {snap-name}\n```\n\n### 8.删除存储池的快照\n\n```bash\nceph osd pool rmsnap {pool-name} {snap-name}\n```\n\n### 9.获取存储池选项值\n\n```bash\nceph osd pool get {pool-name} {key}\n```\n\n### 10.获取对象副本数\n\n```bash\nceph osd dump | grep 'replicated size'\n```\n\n### 11.设置存储池配额\n\n```bash\n命令格式：\n# ceph osd pool set-quota {pool-name} [max_objects {obj-count}] [max_bytes {bytes}]\n命令举例：\n# ceph osd pool set-quota rbd max_objects 10000\n```\n\n## 10.自定义 Crush Map\n\n> crush map 决定了客户端数据最终写入的 osd 的位置，在某些情况下存在 hdd 和 ssd 两种盘想让某些数据写入到指定的 osd 中这个时候就是需要去人为的手动编译 crush-map，编辑要修改的部分，再导入集群中达到我们特定的目的\n\n### 1).Crush 的放置策略\n\n- Ceph 使用 CRUSH 算法（Controlled Replication Under Scalable Hashing 可扩展哈希下的受控复制）来计算哪些 OSD 存放哪些对象\n- 对象分配到 PG 中，CRUSH 决定这些 PG 使用哪些 OSD 来存储对象。理想情况下，CRUSH 会将数据均匀的分布到存储中\n- 当添加新 OSD 或者现有的 OSD 出现故障时，Ceph 使用 CRUSH 在活跃的 OSD 上重平衡数据 CRUSH map 是 CRUSH 算法的中央配置机制，可通过调整 CRUSHmap 来优化数据存放位置默认情况下，CRUSH 将一个对象的多个副本放置到不同主机上的 0SD 中。可以配置 CRUSH map 和 CRUSH rules，使一个对象的多个副本放置到不同房间或者不同机柜的主机上的 0SD 中。\n- 也可以将 SSD 磁盘分配给需要高速存储的池\n\n### 2).编译与翻译和更新\n\n```bash\n#导出CRUSH map\nceph osd getcrushmap -o ./crushmap.bin\n#解译CRUSH map\ncrushtool -d ./crushmap.bin ./crushmap.txt\n#修改后的CRUSH map重新编译\ncrushtool -c ./crushmap.txt-o ./crushmap-new.bin\n#更新CRUSH map\nceph osd setcrushmap-i./crushmap-new.bin\n#查询crush map的内容（返回json）\nceph osd crush dump\n```\n\n例子\n\n```bash\nroot default {\n    id-1           # do not change unnecessarily\n    id-2 class hdd #do not change unnecessarily\n    #weiqht 0.166\n    alg straw2\n    hash 0#rjenkins1\n    item rackl weight 0.055\n    item rack2 weiqht 0.055\n    item rack3 weight 0.055\n}\n\n#rules\nrule replicated rule{\n    id 0\n    type replicated\n    min size 1\n    max size 10\n    step take default  #只要是应用这个rule的都把数据写入到defaults下\n    step chooseleaf firstn 0 type host  #定义故障的故障域为物理集机器级别（rack为机柜级别）\n    step emit #结尾符号\n}\n```\n\n## 11.admin sockets 管理守护进程\n\n- 通过 admin sockets，管理员可以直接与守护进程交互。如查看和修改守护进程的配置参数。\n- 守护进程的 socket 文件一般是/var/run/ceph/cluster-cluster−type.$id.asok\n- 基于 admin sockets 的操作：\n\n```bash\nceph daemon $type.$id command\n#或者\nceph --admin-daemon /var/run/ceph/$cluster-$type.$id.asok command\n#常用command如下：\nhelp\nconfig get parameter\nconfig set parameter\nconfig show\nperf dump\n```\n\n## 12.用户管理\n\n> Ceph 把数据以对象的形式存于各存储池中。Ceph 用户必须具有访问存储池的权限才能够读写数据。另外，Ceph 用户必须具有执行权限才能够使用 Ceph 的管理命令。\n\n### 1、查看用户信息\n\n```bash\n查看所有用户信息\n# ceph auth list\n获取所有用户的key与权限相关信息\n# ceph auth get client.admin\n如果只需要某个用户的key信息，可以使用pring-key子命令\n# ceph auth print-key client.admin\n```\n\n### 2、添加用户\n\n```bash\n# ceph auth add client.john mon 'allow r' osd 'allow rw pool=liverpool'\n# ceph auth get-or-create client.paul mon 'allow r' osd 'allow rw pool=liverpool'\n# ceph auth get-or-create client.george mon 'allow r' osd 'allow rw pool=liverpool' -o george.keyring\n# ceph auth get-or-create-key client.ringo mon 'allow r' osd 'allow rw pool=liverpool' -o ringo.key\n```\n\n### 3、修改用户权限\n\n```bash\n# ceph auth caps client.john mon 'allow r' osd 'allow rw pool=liverpool'\n# ceph auth caps client.paul mon 'allow rw' osd 'allow rwx pool=liverpool'\n# ceph auth caps client.brian-manager mon 'allow *' osd 'allow *'\n# ceph auth caps client.ringo mon ' ' osd ' '\n```\n\n### 4、删除用户\n\n```bash\n# ceph auth del {TYPE}.{ID}\n其中， {TYPE} 是 client，osd，mon 或 mds 的其中一种。{ID} 是用户的名字或守护进程的 ID 。\n```\n\n## 13.增加和删除 Monitor\n\n> 一个集群可以只有一个 monitor，推荐生产环境至少部署 3 个。 Ceph 使用 Paxos 算法的一个变种对各种 map 、以及其它对集群来说至关重要的信息达成共识。建议（但不是强制）部署奇数个 monitor 。Ceph 需要 mon 中的大多数在运行并能够互相通信，比如单个 mon，或 2 个中的 2 个，3 个中的 2 个，4 个中的 3 个等。初始部署时，建议部署 3 个 monitor。后续如果要增加，请一次增加 2 个.\n\n### 1、新增一个 monitor\n\n```bash\n# ceph-deploy mon create $hostname\n注意：执行ceph-deploy之前要进入之前安装时候配置的目录。/my-cluster\n```\n\n### 2、删除 Monitor\n\n```bash\n# ceph-deploy mon destroy $hostname\n注意： 确保你删除某个 Mon 后，其余 Mon 仍能达成一致。如果不可能，删除它之前可能需要先增加一个。\n```\n\n# 四、集群监控管理\n\n## 1.集群整体运行状态\n\n```bash\n[root@cephnode01 ~]# ceph -s\ncluster:\n    id:     8230a918-a0de-4784-9ab8-cd2a2b8671d0\n    health: HEALTH_WARN\n            application not enabled on 1 pool(s)\n\n  services:\n    mon: 3 daemons, quorum cephnode01,cephnode02,cephnode03 (age 27h)\n    mgr: cephnode01(active, since 53m), standbys: cephnode03, cephnode02\n    osd: 4 osds: 4 up (since 27h), 4 in (since 19h)\n    rgw: 1 daemon active (cephnode01)\n\n  data:\n    pools:   6 pools, 96 pgs\n    objects: 235 objects, 3.6 KiB\n    usage:   4.0 GiB used, 56 GiB / 60 GiB avail\n    pgs:     96 active+clean\n\n    id：集群ID\n    health：集群运行状态，这里有一个警告，说明是有问题，意思是pg数大于pgp数，通常此数值相等。\n    mon：Monitors运行状态。\n    osd：OSDs运行状态。\n    mgr：Managers运行状态。\n    mds：Metadatas运行状态。\n    pools：存储池与PGs的数量。\n    objects：存储对象的数量。\n    usage：存储的理论用量。\n    pgs：PGs的运行状态\n\n~]$ ceph -w\n~]$ ceph health detail\n```\n\n## 2.PG 状态\n\n> 查看 pg 状态查看通常使用下面两个命令即可，dump 可以查看更详细信息\n\n```bash\n~]$ ceph pg dump\n~]$ ceph pg stat\n```\n\n## 3.Pool 状态\n\n```bash\n~]$ ceph osd pool stats\n~]$ ceph osd pool stats\n```\n\n## 4.OSD 状态\n\n```bash\n~]$ ceph osd stat\n~]$ ceph osd dump\n~]$ ceph osd tree\n~]$ ceph osd df\n```\n\n## 5.Monitor 状态和查看仲裁状态\n\n```bash\n~]$ ceph mon stat\n~]$ ceph mon dump\n~]$ ceph quorum_status\n```\n\n## 6.集群空间用量\n\n```bash\n~]$ ceph df\n~]$ ceph df detail\n```\n\n# 五、集群配置管理(临时和全局，服务平滑重启)\n\n> 有时候需要更改服务的配置，但不想重启服务，或者是临时修改。这时候就可以使用 tell 和 daemon 子命令来完成此需求。\n\n## 1.查看运行配置\n\n```bash\n命令格式：\n# ceph daemon {daemon-type}.{id} config show\n\n命令举例：\n# ceph daemon osd.0 config show\n```\n\n## 2.tell 子命令格式\n\n> 使用 tell 的方式适合对整个集群进行设置，使用 \\* 号进行匹配，就可以对整个集群的角色进行设置。而出现节点异常无法设置时候，只会在命令行当中进行报错，不太便于查找。\n\n```bash\n命令格式：\n# ceph tell {daemon-type}.{daemon id or *} injectargs --{name}={value} [--{name}={value}]\n命令举例：\n# ceph tell osd.0 injectargs --debug-osd 20 --debug-ms 1\n```\n\n- daemon-type：为要操作的对象类型如 osd、mon、mds 等。\n- daemon id：该对象的名称，osd 通常为 0、1 等，mon 为 ceph -s 显示的名称，这里可以输入\\*表示全部。\n- injectargs：表示参数注入，后面必须跟一个参数，也可以跟多个\n\n## 3.daemon 子命令\n\n- 使用 daemon 进行设置的方式就是一个个的去设置，这样可以比较好的反馈，此方法是需要在设置的角色所在的主机上进行设置。\n\n```bash\n命令格式：\n# ceph daemon {daemon-type}.{id} config set {name}={value}\n命令举例：\n# ceph daemon mon.ceph-monitor-1 config set mon_allow_pool_delete false\n```\n\n## 4.集群操作\n\n- 命令包含 start、restart、status\n\n```bash\n#1.启动所有守护进程\nsystemctl start ceph.target\n\n#2.按类型启动守护进程\nsystemctl start ceph-mgr.target\nsystemctl start ceph-osd@id\nsystemctl start ceph-mon.target\nsystemctl start ceph-mds.target\nsystemctl start ceph-radosgw.target\n```\n\n## 5.添加和删除 OSD\n\n### 1).添加 OSD\n\n- 纵向扩容(会导致数据的重分布)\n- 生产环境下最好的做法就是不要一次性添加大量的 osd，最好逐步添加等待数据同步后再进行添加操作\n\n  - 当影响生产数据时候临时可以停止同步：ceph osd set [nobackfill|norebalance],unset 取消对应的参数\n\n```bash\n#1.格式化磁盘\nceph-volume lvm zap /dev/sd<id>\n\n#2.进入到ceph-deploy执行目录/my-cluster，添加OSD\nceph-deploy osd create --data /dev/sd<id> $hostname\n```\n\n### 2).删除 OSD\n\n- 如果机器有盘坏了可以使用 dmdsg 查看坏盘\n- 存在一种情况就是某 osd 的写入延迟大盘有坏道很大可能会拖垮 ceph 集群：\n\n  - ceph osd tree: 查看当前集群的 osd 状态\n  - ceph osd perf: 查看当前的 OSD 的延迟\n\n- 当某一快 osd 踢出集群时候立即做数据重分布(默认 10 分钟)\n\n```bash\n1、调整osd的crush weight为 0\nceph osd crush reweight osd.<ID> 0.0\n\n2、将osd进程stop\nsystemctl stop ceph-osd@<ID>\n\n3、将osd设置out(将会出发数据重分布)\nceph osd out <ID>\n\n4、从crushmap中踢出osd\n# 查看运行视图的osd状态\nceph osd crush dump|less\nceph osd crush rm <osd>.id\n\n5、从tree树中删除osd\nceph osd rm <osd>.id\n\n6、(选用)立即执行删除OSD中数据\nceph osd purge osd.<ID> --yes-i-really-mean-it\n\n7、卸载磁盘\numount /var/lib/ceph/osd/ceph-？\n\n8.从认证中删除磁盘对应的key\n# 查看认证的列表\nceph auth list\nceph auth rm <osd>.id\n```\n\n## 6.扩容 PG\n\n- 扩容大小取跟它接近的 2 的 N 次方\n- 在更改 pool 的 PG 数量时，需同时更改 PGP 的数量。PGP 是为了管理 placement 而存在的专门的 PG，它和 PG 的数量应该保持一致。如果你增加 pool 的 pg_num，就需要同时增加 pgp_num，保持它们大小一致，这样集群才能正常 rebalancing。\n\n```bash\nceph osd pool set {pool-name} pg_num 128\nceph osd pool set {pool-name} pgp_num 128\n```\n\n# 六、调优\n\n## 1.系统层面调优\n\n- 选择正确的 CPU 和内存。OSD、MON 和 MDS 节点具有不同的 CPU 和内存需求\n\n  - mon 的需求和 osd 的总个数有关需要的是计算力\n  - mds 对 CPU 和内存要求很高，会将大量的元数据缓存到自己的内存中，存储元数据的尽量的使用 ssd\n  - osd 最低要求 1H2G 的配置例如：24 块硬盘最少是 24H36G,磁盘方面必须高 I/O 有多好上多好\n\n- 尽可能关闭 NUMA\n- 规划好存储节点的数据以及各节点的磁盘要求（不考虑钱忽略）\n- 磁盘的选择尽可能在成本、吞吐量和延迟之间找到良好的平衡\n- journal 日志应该使用 SSD\n- 如果交换机支持（MTU 9000），则启用巨型帧(减少数据的分片)，前提是 ceph 在一个单独的网络环境中切有独立交换机。\n- 启用 ntp。Ceph 对时间敏感,集群网络至少 10GB 带宽\n\n### 1).系统调优工具\n\n- 使用 tuned-admin 工具，它可帮助系统管理员针对不同的工作负载进行系统调优\n- tuned-admin 使用的 profile 默认存放在/usr/lib/tuned/目录中，可以参考其模板来自定义 profile\n- 对于 ceph 而言，network-latency 可以改进全局系统延迟，network-throughput 可以改进全局系统吞吐量,如果两个都开启可以使用 Custom 自定义模式\n\n```bash\n# 列出现有可用的profile\ntuned-adm list\n\n# 查看当前生效的profile\ntuned-adm active\n\n# 使用指定的profile\ntuned-admin profile profile-name\n\n# 禁用所有的profile\ntuned-admin off\n```\n\n### 2).I/O 调度算法\n\n- noop：电梯算法，实现了一个简单的 FIFO 队列。基于 SSD 的磁盘，推荐使用这种调度方式\n- Deadline：截止时间调度算法，尽力为请求提供有保障的延迟。对于 Ceph，基于 sata 或者 sas 的驱动器，应该首选这种调度方式\n- cfq：完全公平队列，适合有许多进程同时读取和写入大小不等的请求的磁盘，也是默认的通用调度算法\n\n```bash\n#查看当前系统支持的调度算法：\n    dmesg|grep -I scheduler\n\n#查看指定磁盘使用的调度算法：\n    cat /sys/block/磁盘设备号/queue/scheduler\n\n#修改调度算法\n    echo \"deadline\" > /sys/block/vdb/queue/scheduler\n    vim /etc/default/grub\n        GRUB_CMDLINE_LINUX=\"elevator=deadline numa=off\"\n```\n\n### 3).网络 IO 子系统调优\n\n- 用于集群的网络建议尽可能使用 10Gb 网络\n\n以下参数用于缓冲区内存管理\n\n```bash\n#设置OS接收缓冲区的内存大小，第一个值告知内核一个TCP socket的最小缓冲区空间，第二值为默认缓冲区空间，第三个值是最大缓冲区空间\nnet.ipv4.tcp_wmem\n\n#设置Os发送缓冲区的内存大小\nnet.ipv4.tcp_rmem\n\n#定义TCP stack如何反应内存使用情况\nnet.ipv4.tcp_mem\n```\n\n- 交换机启用大型帧\n\n> 默认情况下，以太网最大传输数据包大小为 1500 字节。为提高吞吐量并减少处理开销，一种策略是将以太网网络配置为允许设备发送和接收更大的巨型帧。\n\n- 在使用巨型帧的要谨慎，因为需要硬件支持，且全部以太网口配置为相同的巨型帧 MTU 大小。\n\n### 4).虚拟内存调优\n\n设置较低的比率会导致高频但用时短的写操作，这适合 Ceph 等 I/O 密集型应用。设置较高的比率会导致低频但用时长的写操作，这会产生较小的系统开销，但可能会造成应用响应时间变长\n\n```bash\n#脏内存占总系统总内存的百分比，达到此比率时内核会开始在后台写出数据\nvm.dirty_background_ratio\n\n#脏内存占总系统总内存的百分比，达到此比率时写入进程停滞，而系统会将内存页清空到后端存储\nvm.dirty_ratio\n\n#控制交换分区的使用,生产中建议完全关闭，会拖慢系统运行速度\nvm.swappiness\n\n#系统尽力保持可用状态的RAM大小。在一个RAM大于48G的系统上，建议设置为4G\nvm.min_free_kbytes\n```\n\n## 2.Ceph 本身调优\n\n### 1).最佳实践\n\n- MON 的性能对集群总体性能至关重要，应用部署于专用节点，为确保正确仲裁，数量应为奇数个\n- 在 OSD 节点上，操作系统、OSD 数据、OSD 日志应当位于独立的磁盘上，以确保满意的吞吐量\n- 在集群安装后，需要监控集群、排除故障并维护，尽管 Ceph 具有自愈功能。如果发生性能问题，首先在磁盘、网络和硬件层面上调查。然后逐步转向 RADOS 块设备和 Ceph 对象网关\n\n### 2).影响 I/O 的 6 大操作\n\n- 业务数据写入\n- 数据恢复\n- 数据回填\n- 数据重平衡\n- 数据一致性校验\n- 快照清理\n\n### 3).OSD 生产建议\n\n- 更快的日志性能可以改进响应时间，建议将单独的低延迟 SSD 或者 NVMe 设备用于 OSD 日志。\n- 多个日志可以共享同一 SSD，以降低存储基础架构的成本。但是不能将过多 OSD 日志放在同一设备上。\n- 建议每个 SATA OSD 设备不超过 6 个 OSD 日志，每个 NVMe 设备不超过 12 个 OSD 日志。\n- 需要说明的是，当用于托管日志的 SSD 或者 NVMe 设备故障时，使用它托管其日志的所有 OSD 也都变得不可用\n\n### 4).硬件建议\n\n- 将一个 raid1 磁盘用于 ceph 操作系统\n- 每个 OSD 一块硬盘，尽量将 SSD 或者 NVMe 用于日志\n- 使用多个 10Gb 网卡，每个网络一个双链路绑定（建议生产环境 2 个网卡 4 个光模块，2 个万兆口做为数据的交换，2 个万兆口做业务流量）\n- 每个 OSD 预留 1 个 CPU,每个逻辑核心 1GHz，分配 16GB 内存，外加每个 OSD 2G 内存\n\n### 5).RBD 生产建议\n\n- 块设备上的工作负载通常是 I/O 密集型负载，例如在 OpenStack 中虚拟机上运行数据库。\n- 对于 RBD,OSD 日志应当位于 SSD 或者 NVMe 设备上\n- 对后端存储，可以使用不同的存储设备以提供不同级别的服务\n\n### 6).对象网关生产建议\n\n- Ceph 对象网关工作负载通常是吞吐密集型负载。但是其 bucket 索引池为 I/O 密集型工作负载模式。应当将这个池存储在 SSD 设备上\n- Ceph 对象网关为每个存储桶维护一个索引。Ceph 将这一索引存储在 RADOS 对象中。当存储桶存储数量巨大的对象时（超过 100000 个），索引性能会降低，因为只有一个 RADOS 对象参与所有索引操作。\n- Ceph 可以在多个 RADOS 对象或分片中保存大型索引。可以在 ceph.conf 中设置 rgw_override_bucket_index_max_shards 配置参数来启用该功能。此参数的建议值是存储桶中预计对象数量除以 10000\n- 当索引变大，Ceph 通常需要重新划分存储桶。rgw_dynamic_resharding 配置控制该功能，默认为 true\n\n### 7).CephFS 生产建议\n\n- 存放目录结构和其他索引的元数据池可能会成为 CephFS 的瓶颈。因此，应该将 SSD 设备用于这个池\n- 每个 MDS 维护一个内存中缓存 ，用于索引节点等不同类型的项目。Ceph 使用 mds_cache_memory_limit 配置参数限制这一缓存的大小。其默认值为 1GB，可以在需要时调整，得不得超过系统总内存数\n\n### 8).Monitor 生产建议\n\n- 最好为每个 MON 一个独立的服务器/虚拟机\n- 小型和中型集群，使用 10000RPM 的磁盘，大型集群使用 SSD\n- CPU 使用方面：使用一个多核 CPU，最少 16G 内存，最好不要和 osd 存放在同一个服务器上\n\n### 9).将 OSD 日志迁移到 SSD\n\n强烈建议生产中千万不要这么干，一定在集群初始化的时候就定制好\n\n```bash\n#集群中设置标志位停止指定的osd使用\nceph osd set noout\n\n#停止osd的进程\nsystemctl stop ceph-osd@3\n\n#将所有的日志做刷盘处理，刷盘到osd中\nceph-osd -i 3 --flush-journal\n\n#删除该osd现有的日志\nrm -f /var/lib/ceph/osd/ceph-3/journal\n\n#/dev/sdc1为SSD盘创建一个软连接\nln -s /dev/sdc1 /var/lib/ceph/osd/ceph-3/journal\n\n#刷出日志\nceph-osd -i 3 --mkjournal\n\n#启动osd\nsystemctl start ceph-osd@3\n\n#移除标志位\nceph osd unset noout\n```\n\n### 10).存储池中 PG 的计算方法\n\n- 通常，计算一个池中应该有多少个归置组的计算方法 = 100 \\* OSDs(个数) / size(副本数)\n\n- 一种比较通用的取值规则：\n\n  - 少于 5 个 OSD 时可把 pg_num 设置为 128\n  - OSD 数量在 5 到 10 个时，可把 pg_num 设置为 512\n  - OSD 数量在 10 到 50 个时，可把 pg_num 设置为 4096\n  - OSD 数量大于 50 时，建议自行计算\n\n- 自行计算 pg_num 聚会时的工具\n\n  - pgcalc：[https://ceph.com/pgcalc/](https://ceph.com/pgcalc/)\n  - cephpgc：[https://access.redhat.com/labs/cephpgc/](https://access.redhat.com/labs/cephpgc/)\n\n- 注意：在实际的生产环境中我们很难去预估需要多少个 pool，每个 pool 所占用的数据大小的百分百。所以正常情况下需要在特定的情况选择动态扩缩容 pg 的大小\n\n### 11).PG 与 PGP\n\n> 通常而言，PG 与 PGP 是相同的当我们为一个池增加 PG 时，PG 会开始分裂，这个时候，OSD 上的数据开始移动到新的 PG，但总体而言，此时，数据还是在一个 OSD 的不同 PG 中迁移而我们一旦同时增加了 PGP，则 PG 开始在多个 OSD 上重平衡，这时会出现跨 OSD 的数据迁移\n\n- ceph osd pool create poolName PgNum PgpNum\n- 当变动 pg 数量只是针对当前的特定池中的 osd 发生变动影响范围只是一个池的 pg 平衡\n- 正常情况下一个 osd 最多承载 100 个 pg\n- 当 pgp 发生大变动的时候会导致原本这个池中的 pg 变动导致池中 osd，过载或者有很大剩余性能，ceph 集群会将过大的性能均衡到各个性能使用小的 osd 上，这个时候就会发生数据的大规模迁移，大量的 i/O 写入会占有网络带宽会严重影响使用中的 pg 性能导致阻塞发生。\n- 建议的做法是将 pg_num 直接设置为希望作为最终值的 PG 数量，而 PGP 的数量应当慢慢增加，以确保集群不会因为一段时间内的大量数据重平衡而导致的性能下降\n\n### 12).Ceph 生产网络建议\n\n- 尽可能使用 10Gb 网络带宽以上的万兆带宽(内网)\n- 尽可能使用不同的 cluster 网络和 public 网络\n- 做好必要的网络设备监控防止网络过载\n\n### 13).OSD 和数据一致性校验\n\n> 清理会影响 ceph 集群性能，但建议不要禁用此功能，因为它能提供完数据的完整性\n\n- 清理：检查对象的存在性、校验和以及大小\n- 深度清理：检查对象的存在性和大小，重新计算并验证对象的校验和。(最好不开严重影响性能)\n\n```bash\n#清理调优参数\nosd_scrub_begin_hour =                    #取值范围0-24\nosd_scrub_end_hour = end_hbegin_hour our  #取值范围0-24\nosd_scrub_load_threshold                  #当系统负载低于多少的时候可以清理，默认为0.5\nosd_scrub_min_interval                    #多久清理一次，默认是一天一次（前提是系统负载低于上一个参数的设定）\nosd_scrub_interval_randomize_ratio        #在清理的时候，随机延迟的值，默认是0.5\nosd_scrub_max_interval                    #清理的最大间隔时间，默认是一周（如果一周内没清理过，这次就必须清理，不管负载是多少）\nosd_scrub_priority                        #清理的优先级，默认是5\nosd_deep_scrub_interal                    #深度清理的时间间隔，默认是一周\nosd_scrub_sleep                           #当有磁盘读取时，则暂停清理，增加此值可减缓清理的速度以降低对客户端的影响，默认为0,范围0-1\n```\n\n```bash\n#显示最近发生的清理和深度清理\nceph pg dump all  # 查看LAST_SCRUB和LAST_DEEP_SCRUB\n#-将清理调度到特定的pg\nceph pg scrub pg-id\n#将深度清理调度到特定的pg\nceph pg deep-scrub pg-id\n#为设定的池设定清理参数\nceph osd pool set <pool-name> <parameter> <value>\n    noscrub # 不清理，默认为false\n    nodeep-scrub # 不深度清理，默认为false\n    scrub_min_interval # 如果设置为0，则应用全局配置osd_scrub_min_interval\n    scrub_max_interval # 如果设置为0，则应用全局配置osd_scrub_max_interval\n    deep_scrub_interval # 如果设置为0，则应用全局配置osd_scrub_interval\n```\n\n### 14).快照的生产建议\n\n- 快照在池级别和 RBD 级别上提供。当快照被移除时，ceph 会以异步操作的形式删除快照数据，称为快照修剪进程\n- 为减轻快照修剪进程会影响集群总体性能。可以通过配置`osd_snap_trim_sleep`来在有客户端读写操作的时候暂停修剪，参数的值范围是`0`到`1`\n- 快照修剪的优先级通过使用`osd_snap_trim_priority`参数控制，默认为`5`\n\n### 15).保护数据和 osd\n\n- 需要控制回填和恢复操作，以限制这些操作的影响\n- 回填发生于新的 osd 加入集群时，或者 osd 死机并且 ceph 将其 pg 分配到其他 osd 时。在这种场景中，ceph 必须要在可用的 osd 之间复制对象副本\n- 恢复发生于新的 osd 已有数据时，如出现短暂停机。在这种情形下，ceph 会简单的重放 pg 日志\n\n  - 管理回填和恢复操作的配置项\n\n```bash\n#用于限制每个osd上用于回填的并发操作数，默认为1\nosd_max_backfills\n\n#用于限制每个osd上用于恢复的并发操作数，默认为3\nosd_recovery_max_active\n\n#恢复操作的优先级，默认为3\nosd_recovery_op_priority\n```\n\n### 16).OSD 数据存储后端\n\n> BlueStore 管理一个，两个或（在某些情况下）三个存储设备。在最简单的情况下，BlueStore 使用单个（主）存储设备。存储设备通常作为一个整体使用，BlueStore 直接占用完整设备。该主设备通常由数据目录中的块符号链接标识。数据目录挂载成一个 tmpfs，它将填充（在启动时或 ceph-volume 激活它时）所有常用的 OSD 文件，其中包含有关 OSD 的信息，例如：其标识符，它所属的集群，以及它的私钥。还可以使用两个额外的设备部署 BlueStore\n\n- WAL 设备（在数据目录中标识为 block.wal）可用于 BlueStore 的内部日志或预写日志。只有设备比主设备快（例如，当它在 SSD 上并且主设备是 HDD 时），使用 WAL 设备是有用的。\n- 数据库设备（在数据目录中标识为 block.db）可用于存储 BlueStore 的内部元数据。 BlueStore（或者更确切地说，嵌入式 RocksDB）将在数据库设备上放置尽可能多的元数据以提高性能。如果数据库设备填满，元数据将写到主设备。同样，数据库设备要比主设备更快，则提供数据库设备是有帮助的。\n- 如果只有少量快速存储可用（例如，小于 1GB），我们建议将其用作 WAL 设备。如果还有更多，配置数据库设备会更有意义。 BlueStore 日志将始终放在可用的最快设备上，因此使用数据库设备将提供与 WAL 设备相同的优势，同时还允许在其中存储其他元数据。\n- 正常 L 版本推荐使用 filestore，M 版本可以考虑使用 bluestore\n- 推荐优化文章：[https://www.cnblogs.com/luxiaodai/p/10006036.html#\\_lab2_1_9](https://www.cnblogs.com/luxiaodai/p/10006036.html#_lab2_1_9)\n\n### 17).关于性能测试\n\n- 推荐使用 fio 参考阿里云文档：[https://help.aliyun.com/document_detail/95501.html?spm=a2c4g.11174283.6.659.38b44da2KZr2Sn](https://help.aliyun.com/document_detail/95501.html?spm=a2c4g.11174283.6.659.38b44da2KZr2Sn)\n- dd\n\n```bash\necho 3 > /proc/sys/vm/drop_caches\ndd if=/dev/zero of=/var/lib/ceph/osd/ceph-0/test.img bs=4M count=1024 oflag=direct\ndd if=/var/lib/ceph/osd/ceph-0/test.img of=/dev/null bs=4M count=1024 oflag=direct\n```\n\n- rados bench 性能测试\n\n```bash\nrados bench -p <pool_name> <seconds> <write|seq|rand> -b <block size> -t --no-cleanup\n    pool_name 测试所针对的池\n    seconds 测试所持续的时间，以秒为单位\n    <write|seq|rand> 操作模式，分别是写、顺序读、随机读\n    -b <block_size> 块大小，默认是4M\n    -t 读/写的并行数，默认为16\n    --no-cleanup 表示测试完成后不删除测试用的数据。在做读测试之前，需要使用该参数来运行一遍写测试来产生测试数据，在全部测试完成以后，可以行rados -p <pool_name> cleanup来清理所有测试数据\n\n#示例：\nrados bench -p rbd 10 write --no-cleanup\nrados bench -p rbd 10 seq\n```\n\n- rbd bench 性能测试\n\n```bash\nrbd bench -p <pool_name> <image_name> --io-type <write|read> --io-size <size> --io-threads <num> --io-total <size> --io-pattern <seq|rand>\n    --io-type 测试类型，读/写\n    --io-size 字节数，默认4096\n    --io-threads 线程数，默认16\n    --io-total  读/写的总大小，默认1GB\n    --io-pattern  读/写的方式，顺序还是随机\n\n#示例：\nhttps://edenmal.moe/post/2017/Ceph-rbd-bench-Commands/\n```\n\n## 3.设置集群的标志\n\n**flag 操作**\n\n- 只能对整个集群操作，不能针对单个 osd\n\n  - ceph osd set\n  - ceph osd unset\n\n```bash\n#示例：\nceph osd set nodown\nceph osd unset nodown\nceph -s\n```\n\n| 标志名称     | 含义用法详解                                                                                                                                                     |\n| :----------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| noup         | OSD 启动时，会将自己在 MON 上标识为 UP 状态，设置该标志位，则 OSD 不会被自动标识为 up 状态                                                                       |\n| nodown       | OSD 停止时，MON 会将 OSD 标识为 down 状态，设置该标志位，则 MON 不会将停止的 OSD 标识为 down 状态，设置 noup 和 nodown 可以防止网络抖动                          |\n| noout        | 设置该标志位，则 mon 不会从 crush 映射中删除任何 OSD。对 OSD 作维护时，可设置该标志位，以防止 CRUSH 在 OSD 停止时自动重平衡数据。OSD 重新启动时，需要清除该 flag |\n| noin         | 设置该标志位，可以防止数据被自动分配到 OSD 上                                                                                                                    |\n| norecover    | 设置该 flag，禁止任何集群恢复操作。在执行维护和停机时，可设置该 flag                                                                                             |\n| nobackfill   | 禁止数据回填                                                                                                                                                     |\n| noscrub      | 禁止清理操作。清理 PG 会在短期内影响 OSD 的操作。在低带宽集群中，清理期间如果 OSD 的速度过慢，则会被标记为 down。可以该标记来防止这种情况发生                    |\n| nodeep-scrub | 禁止深度清理                                                                                                                                                     |\n| norebalance  | 禁止重平衡数据。在执行集群维护或者停机时，可以使用该 flag                                                                                                        |\n| pause        | 设置该标志位，则集群停止读写，但不影响 osd 自检                                                                                                                  |\n| full         | 标记集群已满，将拒绝任何数据写入，但可读                                                                                                                         |\n\n# 参考文档\n\n[https://poph163.com/category/分布式存储/](https://poph163.com/category/%e5%88%86%e5%b8%83%e5%bc%8f%e5%ad%98%e5%82%a8/)\n","slug":"ceph/Ceph 集群部署","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor7n000bzc7h2kfg8fqg","content":"<h1 id=\"一、Ceph-简介\"><a href=\"#一、Ceph-简介\" class=\"headerlink\" title=\"一、Ceph 简介\"></a>一、Ceph 简介</h1><blockquote>\n<p>一个 Ceph 存储集群需要至少一个 Ceph 监视器、Ceph 管理器和 Ceph OSD(对象存储守护进程)。在运行 Ceph 文件系统客户端时，也需要 Ceph 元数据服务器。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<ul>\n<li><p><strong>Monitors</strong>:</p>\n<ul>\n<li>Ceph 监视器(<code>ceph-mon</code>)维护着展示集群状态的各种图表，包括监视器图、管理器图、OSD 图、MDS 图和 CRUSH 图。这些图是 Ceph 守护进程相互协调所必需的关键集群状态。</li>\n<li>监视器还负责管理守护进程和客户端之间的身份验证。为了实现冗余和高可用性，通常需要至少三个监视器。</li>\n</ul>\n</li>\n<li><p><strong>Managers</strong>: <a href=\"https://docs.ceph.com/en/latest/glossary/#term-Ceph-Manager\">Ceph Manager</a>守护程序(<code>ceph-mgr</code>)</p>\n<ul>\n<li>负责跟踪运行时指标和 Ceph 群集的当前状态，包括存储利用率、当前性能指标和系统负载。</li>\n<li>Ceph Manager 守护程序还托管基于 python 的模块来管理和公开 Ceph 群集信息，包括基于 Web 的<a href=\"https://docs.ceph.com/en/latest/mgr/dashboard/#mgr-dashboard\">Ceph 仪表板和</a> <a href=\"https://docs.ceph.com/en/latest/mgr/restful\">REST API</a>。高可用性通常需要至少两个管理器。</li>\n</ul>\n</li>\n<li><p><strong>OSDs</strong>: <a href=\"https://docs.ceph.com/en/latest/glossary/#term-Ceph-OSD\">Ceph OSD</a> (object storage daemon, <code>ceph-osd</code>)存储数据，处理数据复制，恢复，重新平衡，并提供一些监视信息到 Ceph 监视器和管理器,通过检查其他 Ceph OSD 守护进程检测信号.冗余和高可用性通常需要至少 3 个 Ceph OSD。</p>\n</li>\n<li><p><strong>MDSs</strong>: <a href=\"https://docs.ceph.com/en/latest/glossary/#term-Ceph-Metadata-Server\">Ceph 元数据服务器</a>（MDS, <code>ceph-mds</code>）代表<a href=\"https://docs.ceph.com/en/latest/glossary/#term-Ceph-File-System\">Ceph 文件系统</a>存储元数据（即 Ceph 块设备和 Ceph 对象存储不使用 MDS）。Ceph 元数据服务器允许 POSIX 文件系统用户执行基本命令 (如<code>ls</code>, <code>find</code>, <code>etc</code>等)，而不会给 Ceph 存储群集带来巨大负担。</p>\n</li>\n</ul>\n<blockquote>\n<p>Ceph 将数据存储为逻辑存储池中的对象。使用<a href=\"https://docs.ceph.com/en/latest/glossary/#term-CRUSH\">CRUSH 算法</a>，Ceph 计算哪个放置组应包含对象，并进一步计算哪个 Ceph OSD 守护程序应存储该放置组。CRUSH 算法使 Ceph 存储群集能够动态扩展、重新平衡和恢复。</p>\n</blockquote>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/TWXPPk7hE1D4AGsHg7CIMg\">https://mp.weixin.qq.com/s/TWXPPk7hE1D4AGsHg7CIMg</a></li>\n<li><a href=\"https://www.jianshu.com/p/cc3ece850433\">https://www.jianshu.com/p/cc3ece850433</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/QXRdyYKSKIa1aLNI8dOGcQ\">https://mp.weixin.qq.com/s/QXRdyYKSKIa1aLNI8dOGcQ</a></li>\n<li><a href=\"https://blog.csdn.net/xiaoquqi/article/details/43055031\">https://blog.csdn.net/xiaoquqi/article/details/43055031</a></li>\n</ul>\n<h1 id=\"二、Cephadm-部署集群\"><a href=\"#二、Cephadm-部署集群\" class=\"headerlink\" title=\"二、Cephadm 部署集群\"></a>二、Cephadm 部署集群</h1><p>简单，简述，详细参考：<a href=\"https://docs.ceph.com/en/latest/cephadm/#cephadm\">https://docs.ceph.com/en/latest/cephadm/#cephadm</a></p>\n<h2 id=\"1-环境规划\"><a href=\"#1-环境规划\" class=\"headerlink\" title=\"1.环境规划\"></a>1.环境规划</h2><table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>内网 IP</th>\n<th>操作系统</th>\n<th>角色</th>\n<th>配置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ceph1</td>\n<td>192.168.200.128</td>\n<td>Debian11</td>\n<td>cephadm,mon,mgr,osd</td>\n<td>2C,2G,20G 系统盘，20G 数据盘</td>\n</tr>\n<tr>\n<td>ceph2</td>\n<td>192.168.200.131</td>\n<td>Debian11</td>\n<td>cephadm,mon</td>\n<td>2C,2G,20G 系统盘，20G 数据盘</td>\n</tr>\n<tr>\n<td>ceph3</td>\n<td>192.168.200.132</td>\n<td>Debian11</td>\n<td>cephadm,mon</td>\n<td>2C,2G,20G 系统盘，20G 数据盘</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>典型的 Ceph 集群有三个或五个监视器守护程序，分布在不同的主机上。如果群集中有五个或更多节点，我们建议部署五个监视器。</p>\n</blockquote>\n<p>当 Ceph 知道 mon 应该使用什么 IP 子网时，它可以随着群集的增长（或收缩）自动部署和缩放 mon。默认情况下，Ceph 假定其他 mon 使用与第一个 mon 的 IP 相同的子网。</p>\n<p>在单个子网的情况下，如果向集群中添加主机，默认最多只会添加 5 个 mon 如果有特定的 IP 子网给 mon 使用，可以使用 CIDR 格式配置该子网。</p>\n<h2 id=\"2-前置-所有节点\"><a href=\"#2-前置-所有节点\" class=\"headerlink\" title=\"2.前置(所有节点)\"></a>2.前置(所有节点)</h2><blockquote>\n<p><a href=\"https://docs.ceph.com/en/pacific/cephadm/install/\">https://docs.ceph.com/en/pacific/cephadm/install/</a></p>\n</blockquote>\n<p>各节点配置 hosts</p>\n<pre class=\"line-numbers language-conf\" data-language=\"conf\"><code class=\"language-conf\">10.200.10.31 ceph-pro-1-10-200-10-31\n10.200.10.32 ceph-pro-2-10-200-10-32\n10.200.10.33 ceph-pro-3-10-200-10-33\n10.200.10.34 ceph-pro-4-10-200-10-34\n10.200.10.35 ceph-pro-5-10-200-10-35<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-安装-CEPHADM-所有节点\"><a href=\"#3-安装-CEPHADM-所有节点\" class=\"headerlink\" title=\"3.安装 CEPHADM(所有节点)\"></a>3.安装 CEPHADM(所有节点)</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#下载cephadm</span>\n<span class=\"token function\">curl</span> --remote-name <span class=\"token parameter variable\">--location</span> https://hub.shutcm.cf/ceph/ceph/raw/pacific/src/cephadm/cephadm\n<span class=\"token function\">chmod</span> +x cephadm\n<span class=\"token comment\">#设置源</span>\n./cephadm add-repo <span class=\"token parameter variable\">--release</span> pacific\n<span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s#https://download.ceph.com#https://mirrors.aliyun.com/ceph#g'</span> /etc/apt/sources.list.d/ceph.list\n<span class=\"token function\">apt-get</span> update\n<span class=\"token comment\">#安装cephadm命令</span>\n./cephadm <span class=\"token function\">install</span>\n<span class=\"token comment\">#确认在PATH中</span>\n<span class=\"token function\">which</span> cephadm\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-fr</span> cephadm\n<span class=\"token comment\">#安装ceph命令</span>\ncephadm <span class=\"token function\">install</span> ceph-common<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-引导新群集-第一台\"><a href=\"#4-引导新群集-第一台\" class=\"headerlink\" title=\"4.引导新群集(第一台)\"></a>4.引导新群集(第一台)</h2><blockquote>\n<p>创建新的 Ceph 集群的第一步是在 Ceph 集群的第一台主机上运行 cephadm bootstrap 命令，运行此命令的操作将创建 Ceph 集群的第一个“监视程序守护程序”。</p>\n</blockquote>\n<p>而该监视程序守护程序需要一个 IP 地址，必须将 Ceph 集群的第一个主机的 IP 地址传递给 ceph bootstrap 命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cephadm bootstrap --mon-ip <span class=\"token number\">10.200</span>.10.31\n<span class=\"token comment\">#设置addr</span>\n<span class=\"token comment\">#ceph orch host set-addr ceph1 192.168.200.128</span>\n<span class=\"token comment\">#检查</span>\nceph orch <span class=\"token function\">host</span> <span class=\"token function\">ls</span>\nceph <span class=\"token parameter variable\">-s</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此命令将会：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1) 在本地主机上为新集群创建监视和管理器守护程序\n2) 为Ceph集群生成一个新的SSH密钥，并将其添加到root用户的&#x2F;root&#x2F;.ssh&#x2F;authorized_keys文件中\n3) 将最小配置文件写入&#x2F;etc&#x2F;ceph&#x2F;ceph.conf\n4) 将client.admin管理特权密钥写入&#x2F;etc&#x2F;ceph&#x2F;ceph.client.admin.keyring\n5) 将公钥写入&#x2F;etc&#x2F;ceph&#x2F;ceph.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-向群集添加主机\"><a href=\"#5-向群集添加主机\" class=\"headerlink\" title=\"5.向群集添加主机\"></a>5.向群集添加主机</h2><blockquote>\n<p>在解析主机名等方面，cephadm 的要求非常低, 通过以下命令可以明确 IP 与主机名之间的解析：ceph orch host add</p>\n</blockquote>\n<p><strong>注意</strong>：添加主机时会自动创建 mon 服务，先按照 禁用监视器自动部署( 5.4 (1) ) 或 调整默认值监视器数量 (5.2 节)，再添加主机。</p>\n<p>在新主机 root 用户的 authorized_keys 文件中安装集群的公共 SSH 密钥</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#ssh-copy-id -f -i /etc/ceph/ceph.pub root@*&lt;new-host>*</span>\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@ceph-pro-1-10-200-10-31\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@ceph-pro-2-10-200-10-32\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@ceph-pro-3-10-200-10-33\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@ceph-pro-4-10-200-10-34\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@ceph-pro-5-10-200-10-35<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>添加方式两种：</p>\n<ul>\n<li>命令方式添加</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#ceph orch host add *&lt;newhost>* [*&lt;ip>*] [*&lt;label1> ...*]</span>\nceph orch <span class=\"token function\">host</span> <span class=\"token function\">add</span> ceph-pro-2-10-200-10-32 <span class=\"token number\">10.200</span>.10.32 <span class=\"token parameter variable\">--labels</span> _admin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>yaml 方式添加</li>\n</ul>\n<p><code>host.yml</code></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">service_type</span><span class=\"token punctuation\">:</span> host\n<span class=\"token key atrule\">addr</span><span class=\"token punctuation\">:</span> 192.168.200.131\n<span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> ceph2\n<span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> mon\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">service_type</span><span class=\"token punctuation\">:</span> host\n<span class=\"token key atrule\">addr</span><span class=\"token punctuation\">:</span> 192.168.200.132\n<span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> ceph3\n<span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> mon<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-检查状态\"><a href=\"#3-检查状态\" class=\"headerlink\" title=\"3.检查状态\"></a>3.检查状态</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph orch <span class=\"token function\">host</span> <span class=\"token function\">ls</span>\nceph <span class=\"token parameter variable\">-s</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"6-部署-OSD\"><a href=\"#6-部署-OSD\" class=\"headerlink\" title=\"6.部署 OSD\"></a>6.部署 OSD</h2><p><strong><a href=\"https://docs.ceph.com/en/pacific/cephadm/services/osd/#\">https://docs.ceph.com/en/pacific/cephadm/services/osd/#</a></strong></p>\n<blockquote>\n<p>当有新的 osd 加入集群或者移除了 osd，就会把状态上报给 Monitor，Monitor 知道了 osd map 发生了变化就会触发 rebalancing，确保 pg 能够平滑的移动到各个 osd 上，以 pg 为整体进行数据重平衡，重平衡的过程中可能会影响性能，一次性加入的 osd 越多，数据 rebalancing 就越频繁。</p>\n</blockquote>\n<blockquote>\n<p>当在做 rebalance 的时候，每个 osd 都会按照 osd_max_backfills 指定数量的线程来同步，如果该数值比较大，同步会比较快，但是会影响部分性能；为了避免 rebalance 带来的性能影响，可以对 rebalance 进行关闭；添加完 osd 后再打开。</p>\n</blockquote>\n<h3 id=\"1-rebalance-关闭\"><a href=\"#1-rebalance-关闭\" class=\"headerlink\" title=\"1).rebalance 关闭\"></a>1).rebalance 关闭</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 设置标志位</span>\nceph osd <span class=\"token builtin class-name\">set</span> norebalance\n\n<span class=\"token comment\"># 关闭数据填充</span>\nceph osd <span class=\"token builtin class-name\">set</span> nobackfill\n\n<span class=\"token comment\"># 查看集群状态</span>\nceph <span class=\"token parameter variable\">-s</span>\n  cluster:\n    id:     87cdd3b2-987b-11eb-989e-000c29b12ae1\n    health: HEALTH_WARN\n            nobackfill,norebalance flag<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">set</span>  <span class=\"token comment\"># 有此信息</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-rebalance-开启\"><a href=\"#2-rebalance-开启\" class=\"headerlink\" title=\"2).rebalance 开启\"></a>2).rebalance 开启</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#开启数据填充</span>\nceph osd <span class=\"token builtin class-name\">unset</span> nobackfill\n<span class=\"token comment\">#开启rebalance</span>\nceph osd <span class=\"token builtin class-name\">unset</span> norebalance\n<span class=\"token comment\"># 查看集群状态</span>\nceph <span class=\"token parameter variable\">-s</span>\n  cluster:\n    id:     87cdd3b2-987b-11eb-989e-000c29b12ae1\n    health: HEALTH_OK<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-列出节点可用设备\"><a href=\"#3-列出节点可用设备\" class=\"headerlink\" title=\"3).列出节点可用设备\"></a>3).列出节点可用设备</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#ceph orch device ls [--wide]</span>\nceph orch device <span class=\"token function\">ls</span> <span class=\"token parameter variable\">--wide</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果满足以下所有条件，则认为存储设备可用</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1) 设备必须没有分区\n2) 设备不得具有任何LVM状态\n3) 设备不得挂载\n4) 设备不得包含文件系统\n5) 设备不得包含Ceph BlueStore OSD\n6) 设备必须大于5 GB<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-创建-osd\"><a href=\"#4-创建-osd\" class=\"headerlink\" title=\"4).创建 osd\"></a>4).创建 osd</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#需要至少 3 个 Ceph OSD 以实现冗余和高可用性</span>\nceph orch daemon <span class=\"token function\">add</span> osd ceph-pro-1-10-200-10-31:/dev/sdb\nceph orch daemon <span class=\"token function\">add</span> osd ceph-pro-2-10-200-10-32:/dev/sdb\nceph orch daemon <span class=\"token function\">add</span> osd ceph-pro-3-10-200-10-33:/dev/sdb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"7-集群高可用\"><a href=\"#7-集群高可用\" class=\"headerlink\" title=\"7.集群高可用\"></a>7.集群高可用</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#需要至少三个监视器才能实现冗余和高可用性</span>\nceph orch apply mon <span class=\"token number\">3</span>\n<span class=\"token comment\"># 部署mon到指定节点</span>\nceph orch <span class=\"token function\">host</span> label <span class=\"token function\">add</span> *<span class=\"token operator\">&lt;</span>host<span class=\"token operator\">></span>* mon\n<span class=\"token comment\">#至少需要两个管理器才能实现高可用性</span>\nceph orch apply mgr <span class=\"token number\">3</span>\n<span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"8-CephFS-部署\"><a href=\"#8-CephFS-部署\" class=\"headerlink\" title=\"8.CephFS 部署\"></a>8.CephFS 部署</h2><h2 id=\"9-部署-RGW\"><a href=\"#9-部署-RGW\" class=\"headerlink\" title=\"9.部署 RGW\"></a>9.部署 RGW</h2><p><a href=\"https://docs.ceph.com/en/pacific/cephadm/services/rgw/\">https://docs.ceph.com/en/pacific/cephadm/services/rgw/</a></p>\n<h1 id=\"三、运维\"><a href=\"#三、运维\" class=\"headerlink\" title=\"三、运维\"></a>三、运维</h1><p><a href=\"https://www.cnblogs.com/royaljames/p/9807532.html\">https://www.cnblogs.com/royaljames/p/9807532.html</a></p>\n<h2 id=\"1-向群集添加主机\"><a href=\"#1-向群集添加主机\" class=\"headerlink\" title=\"1.向群集添加主机\"></a>1.向群集添加主机</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#1.在新主机的根用户文件中安装群集的公共 SSH 密钥</span>\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@host2\n<span class=\"token comment\">#2.告诉 Ceph 新节点是群集的一部分：</span>\nceph orch <span class=\"token function\">host</span> <span class=\"token function\">add</span> host2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-部署其他监视器-monitor\"><a href=\"#2-部署其他监视器-monitor\" class=\"headerlink\" title=\"2.部署其他监视器(monitor)\"></a>2.部署其他监视器(monitor)</h2><blockquote>\n<p>典型的 Ceph 群集具有分布在不同主机的三个或五个监视器守护程序。如果群集中有五个或更多节点，我们建议部署五个监视器。</p>\n</blockquote>\n<p>当 Ceph 知道监视器应该使用什么 IP 子网时，它可以随着群集的增长（或收缩）自动部署和缩放监视器。默认情况下，Ceph 假定其他监视器应使用与第一个监视器的 IP 相同的子网。</p>\n<p>如果您的 Ceph 监视器（或整个群集）住在单个子网中，则在向群集添加新主机时，默认情况下，cephadm 会自动添加多达 5 个监视器。无需进一步步骤。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#如果有特定的 IP 子网应该由监视器使用，您可以用CIDR格式（例如 ） 配置该子网，Cephadm 仅在配置的子网中配置了 IP 的主机上部署新的监视器守护程序。</span>\nceph config <span class=\"token builtin class-name\">set</span> mon public_network <span class=\"token number\">10.1</span>.2.0/24\n<span class=\"token comment\">#如果要调整 5 个监视器的默认值：</span>\nceph orch apply mon *<span class=\"token operator\">&lt;</span>number-of-monitors<span class=\"token operator\">></span>*\n<span class=\"token comment\">#若要在一组特定的主机上部署监视器，请确保在此列表中包括第一个（引导）主机。</span>\nceph orch apply mon *<span class=\"token operator\">&lt;</span>host1,host2,host3,<span class=\"token punctuation\">..</span>.<span class=\"token operator\">></span>*\n<span class=\"token comment\">#您可以通过使用主机标签来控制监视器运行的主机。要将标签设置为相应的主机，请：mon</span>\nceph orch <span class=\"token function\">host</span> label <span class=\"token function\">add</span> *<span class=\"token operator\">&lt;</span>hostname<span class=\"token operator\">></span>* mon\n<span class=\"token comment\">#要查看当前主机和标签：</span>\nceph orch <span class=\"token function\">host</span> <span class=\"token function\">ls</span>\n<span class=\"token comment\">#例如：</span>\n<span class=\"token comment\"># ceph orch host label add host1 mon</span>\n<span class=\"token comment\"># ceph orch host label add host2 mon</span>\n<span class=\"token comment\"># ceph orch host label add host3 mon</span>\n<span class=\"token comment\"># ceph orch host ls</span>\nHOST   ADDR   LABELS  STATUS\nhost1         mon\nhost2         mon\nhost3         mon\nhost4\nhost5\n<span class=\"token comment\">#告诉 cephadm 根据标签部署监视器：</span>\nceph orch apply mon label:mon\n<span class=\"token comment\">#您可以显式指定每个监视器的 IP 地址或 CIDR 网络，并控制其放置位置。要禁用自动监视器部署：</span>\nceph orch apply mon <span class=\"token parameter variable\">--unmanaged</span>\n<span class=\"token comment\">#要部署每个附加监视器：</span>\nceph orch daemon <span class=\"token function\">add</span> mon *<span class=\"token operator\">&lt;</span>host1:ip-or-network<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>host1:ip-or-network-<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>*\n<span class=\"token comment\">#例如，要在使用 IP 地址上部署第二个监视器，在网络上部署第三个监视器</span>\n<span class=\"token comment\"># ceph orch apply mon --unmanaged</span>\n<span class=\"token comment\"># ceph orch daemon add mon newhost1:10.1.2.123</span>\n<span class=\"token comment\"># ceph orch daemon add mon newhost2:10.1.2.0/24</span>\n\n<span class=\"token comment\">#若要确保监视器应用于这三台主机中的每一个主机，请运行以下命令：</span>\nceph orch apply mon <span class=\"token string\">\"host1,host2,host3\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"使用-YAML-规范\"><a href=\"#使用-YAML-规范\" class=\"headerlink\" title=\"使用 YAML 规范\"></a>使用 YAML 规范</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph orch apply <span class=\"token parameter variable\">-i</span> file.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service_type</span><span class=\"token punctuation\">:</span> mon\n<span class=\"token key atrule\">placement</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> host1\n    <span class=\"token punctuation\">-</span> host2\n    <span class=\"token punctuation\">-</span> host3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-部署-OSD\"><a href=\"#3-部署-OSD\" class=\"headerlink\" title=\"3.部署 OSD\"></a>3.部署 OSD</h2><h3 id=\"1-所有群集主机上的存储设备清单可以显示\"><a href=\"#1-所有群集主机上的存储设备清单可以显示\" class=\"headerlink\" title=\"1.所有群集主机上的存储设备清单可以显示\"></a>1.所有群集主机上的存储设备清单可以显示</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph orch device <span class=\"token function\">ls</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>设备必须没有分区。</li>\n<li>设备不得具有任何 LVM 状态。</li>\n<li>不得安装设备。</li>\n<li>设备不能包含文件系统。</li>\n<li>设备不得包含 Ceph BlueStore OSD。</li>\n<li>设备必须大于 5 GB。</li>\n</ul>\n<h3 id=\"2-创建新-OSD-的方法\"><a href=\"#2-创建新-OSD-的方法\" class=\"headerlink\" title=\"2.创建新 OSD 的方法\"></a>2.创建新 OSD 的方法</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1.告诉 Ceph 使用任何可用和未使用的存储设备：</span>\nceph orch apply osd --all-available-devices\n<span class=\"token comment\"># 2.从特定主机上的特定设备创建 OSD：ceph orch daemon add osd *&lt;host>*:*&lt;device-path>*</span>\nceph orch daemon <span class=\"token function\">add</span> osd host1:/dev/sdb\n<span class=\"token comment\"># 3.使用OSD 服务规范描述设备，根据设备属性、此类设备类型（SSD 或 HDD）、设备型号名称、大小或设备存在的主机使用：</span>\nceph orch apply osd <span class=\"token parameter variable\">-i</span> spec.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-部署-MDS\"><a href=\"#4-部署-MDS\" class=\"headerlink\" title=\"4.部署 MDS\"></a>4.部署 MDS</h2><p>使用 CephFS 文件系统需要一个或多个 MDS 守护程序。如果使用较新的接口创建新文件系统，则会自动创建这些接口。有关详细信息，请参阅 FS 卷和子卷。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph orch apply mds *<span class=\"token operator\">&lt;</span>fs-name<span class=\"token operator\">></span>* <span class=\"token parameter variable\">--placement</span><span class=\"token operator\">=</span><span class=\"token string\">\"*&lt;num-daemons>* [*&lt;host1>* ...]\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"5-部署-RGW\"><a href=\"#5-部署-RGW\" class=\"headerlink\" title=\"5.部署 RGW\"></a>5.部署 RGW</h2><h2 id=\"6-管理-Monitor-map\"><a href=\"#6-管理-Monitor-map\" class=\"headerlink\" title=\"6.管理 Monitor map\"></a>6.管理 Monitor map</h2><h3 id=\"1-多-Monitor-同步机制\"><a href=\"#1-多-Monitor-同步机制\" class=\"headerlink\" title=\"1).多 Monitor 同步机制\"></a>1).多 Monitor 同步机制</h3><blockquote>\n<p>在生产环境建议最少三节点 monitor，以确保 cluster map 的高可用性和冗余性,monitor 节点不应该过多甚至操作 9 节点的行为,会导致数据读写时间下降，影响系统集群的性能。</p>\n</blockquote>\n<ul>\n<li>monitor 使用 paxos 算法作为集群状态上达成一致的机制。paxos 是一种分布式一致性算法。每当 monitor 修改 map 时，它会通过 paxos 发送更新到其他 monitor。Ceph 只有在大多数 monitor 就更新达成一致时提交 map 的新版本。</li>\n<li>cluster map 的更新操作需要 Paxos 确认，但是读操作不经由 Paxos，而是直接访问本地的 kv 存储。</li>\n</ul>\n<h3 id=\"2-Monitor-选举机制\"><a href=\"#2-Monitor-选举机制\" class=\"headerlink\" title=\"2).Monitor 选举机制\"></a>2).Monitor 选举机制</h3><ul>\n<li>多个 monitor 之间需要建立仲裁并选择出一个 leader，其他节点则作为工作节点（peon）。</li>\n<li>在选举完成并确定 leader 之后，leader 将从所有其他 monitor 请求最新的 map epoc，以确保 leader 具有集群的最新视图。</li>\n<li>要维护 monitor 集群的正常工作，必须有超过半数的节点正常。</li>\n</ul>\n<h3 id=\"3-Monitor-租约\"><a href=\"#3-Monitor-租约\" class=\"headerlink\" title=\"3).Monitor 租约\"></a>3).Monitor 租约</h3><ul>\n<li>在 Monitor 建立仲裁后，leader 开始分发短期的租约到所有的 monitors。让它们能够分发 cluster map 到 OSD 和 client。</li>\n<li>Monitor 租约默认每 3s 续期一次。</li>\n<li>当 peon monitor 没有确认它收到租约时，leader 假定该 monitor 异常，它会召集新的选举以建立仲裁。</li>\n<li>如果 peon monitor 的租约到期后没有收到 leader 的续期，它会假定 leader 异常，并会召集新的选举。</li>\n<li>所以如果生产环境中存在多个 monitor 时候某个节点的超时会猝发节点的重新选举导致 client 无法第一时间拿到最新的 crushmap 图像也就无法去对应的 osd 上的 pv 写入数据了。</li>\n</ul>\n<h3 id=\"4-常用的-monitor-管理\"><a href=\"#4-常用的-monitor-管理\" class=\"headerlink\" title=\"4).常用的 monitor 管理\"></a>4).常用的 monitor 管理</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#打印monitor map信息</span>\nceph mon dump\n\n<span class=\"token comment\">#将monitor map导出为一个二进制文件</span>\nceph mon getmap <span class=\"token parameter variable\">-o</span> ./monmap\n\n<span class=\"token comment\">#打印导出的二进制文件的内容</span>\nmonmaptool <span class=\"token parameter variable\">--print</span> ./monmap\n\n<span class=\"token comment\">#修改二进制文件，从monmap删除某个monitor</span>\nmonmaptool ./monmap <span class=\"token parameter variable\">--rm</span> <span class=\"token operator\">&lt;</span>id<span class=\"token operator\">></span>\n\n<span class=\"token comment\">#修改二进制文件，往monmap中添加一个monitor</span>\nmonmaptool ./monmap <span class=\"token parameter variable\">--add</span> <span class=\"token operator\">&lt;</span>id<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>ip:port<span class=\"token operator\">></span>\n\n<span class=\"token comment\">#导入一个二进制文件，在导入之前，需要先停止monitor</span>\nceph-mon <span class=\"token parameter variable\">-i</span> <span class=\"token operator\">&lt;</span>id<span class=\"token operator\">></span> --inject-monmap ./monmap<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"7-管理-OSD-Map\"><a href=\"#7-管理-OSD-Map\" class=\"headerlink\" title=\"7.管理 OSD Map\"></a>7.管理 OSD Map</h2><ul>\n<li>每当 OSD 加入或离开集群时，Ceph 都会更新 OSD map。</li>\n<li>OSD 不使用 leader 来管理 OSD map，它们会在自身之间传播同步 map。OSD 会利用 OSD map epoch 标记它们交换的每一条信息，当 OSD 检测到自己已落后时，它会使用其对等 OSD 执行 map 更新。</li>\n<li>在大型集群中 OSD map 更新会非常频繁，节点会执行递增 map 更新。</li>\n<li>Ceph 也会利用 epoch 来标记 OSD 和 client 之间的消息。当 client 连接到 OSD 时 OSD 会检查 epoch。如果发现 epoch 不匹配，则 OSD 会以正确的 epoch 响应，以便客户端可以更新其 OSD map。</li>\n<li>OSD 定期向 monitor 报告自己的状态，OSD 之间会交换心跳，以便检测对等点的故障，并报告给 monitor。</li>\n<li>leader monitor 发现 OSD 故障时，它会更新 map，递增 epoch，并使用 Paxos 更新协议来通知其他 monitor，同时撤销租约，并发布新的租约，以使 monitor 以分发最新的 OSD map。</li>\n</ul>\n<h3 id=\"1-OSD-状态解读\"><a href=\"#1-OSD-状态解读\" class=\"headerlink\" title=\"1).OSD 状态解读\"></a>1).OSD 状态解读</h3><ul>\n<li>1.正常状态的 OSD 为 up 且 in</li>\n<li>2.当 OSD 故障时，守护进程 offline，在 5 分钟内，集群仍会将其标记为 up 和 in，这是为了防止网络抖动</li>\n<li>3.如果 5 分钟内仍未恢复，则会标记为 down 和 out。此时该 OSD 上的 PG 开始迁移。这个 5 分钟的时间间隔可以通过 mon_osd_down_out_interval 配置项修改</li>\n<li>4.当故障的 OSD 重新上线以后，会触发新的数据再平衡</li>\n<li>5.当集群有 noout 标志位时，则 osd 下线不会导致数据恢复</li>\n<li>6.OSD 每隔 6s 会互相验证状态。并每隔 120s 向 mon 报告一次状态。</li>\n</ul>\n<h3 id=\"2-OSD-map-命令\"><a href=\"#2-OSD-map-命令\" class=\"headerlink\" title=\"2).OSD map 命令\"></a>2).OSD map 命令</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd dump\nceph osd getmap <span class=\"token parameter variable\">-o</span> binfile\nosdmaptool <span class=\"token parameter variable\">--print</span> binfile\nosdmaptool --export-crush crushbinfile binfile\nosdmaptool --import-crush crushbinfile binfile\nosdmaptool --test-map-pg pgid binfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-OSD-的状态\"><a href=\"#3-OSD-的状态\" class=\"headerlink\" title=\"3.)OSD 的状态\"></a>3.)OSD 的状态</h3><ul>\n<li><p>OSD 运行状态</p>\n<ul>\n<li>up</li>\n<li>down</li>\n<li>out</li>\n<li>in</li>\n</ul>\n</li>\n<li><p>OSD 容量状态</p>\n<ul>\n<li>nearfull</li>\n<li>full</li>\n</ul>\n</li>\n</ul>\n<p>常用指令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#显示OSD状态</span>\nceph osd <span class=\"token function\">stat</span>\n\n<span class=\"token comment\">#报告osd使用量</span>\nceph osd <span class=\"token function\">df</span>\n\n<span class=\"token comment\">#查找指定osd位置</span>\nceph osd <span class=\"token function\">find</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-OSD-容量\"><a href=\"#4-OSD-容量\" class=\"headerlink\" title=\"4.)OSD 容量\"></a>4.)OSD 容量</h3><ul>\n<li>当集群容量达到 mon_osd_nearfull_ratio 的值时，集群会进入 HEALTH_WARN 状态。这是为了在达到 full_ratio 之前，提醒添加 OSD。默认设置为 0.85，即 85%</li>\n<li>当集群容量达到 mon_osd_full_ratio 的值时，集群将停止写入，但允许读取。集群会进入到 HEALTH_ERR 状态。默认为 0.95，即 95%。这是为了防止当一个或多个 OSD 故障时仍留有余地能重平衡数据</li>\n</ul>\n<p>设置方法：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd set-full-ratio <span class=\"token number\">0.95</span>\nceph osd set-nearfull-ratio <span class=\"token number\">0.85</span>\nceph osd dump<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-OSD-状态参数\"><a href=\"#5-OSD-状态参数\" class=\"headerlink\" title=\"5).OSD 状态参数\"></a>5).OSD 状态参数</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># osd之间传递心跳的间隔时间</span>\nosd_heartbeat_interval\n\n<span class=\"token comment\"># 一个osd多久没心跳，就会被集群认为它down了</span>\nosd_heartbeat_grace\n\n<span class=\"token comment\"># 确定一个osd状态为down的最少报告来源osd数</span>\nmon_osd_min_down_reporters\n\n<span class=\"token comment\"># 一个OSD必须重复报告一个osd状态为down的次数</span>\nmon_osd_min_down_reports\n\n<span class=\"token comment\"># 当osd停止响应多长时间，将其标记为down和out</span>\nmon_osd_down_out_interval\n\n<span class=\"token comment\"># monitor宣布失败osd为down前的等待时间</span>\nmon_osd_report_timeout\n\n<span class=\"token comment\"># 一个新的osd加入集群时，等待多长时间，开始向monitor报告</span>\nosd_mon_report_interval_min\n\n<span class=\"token comment\"># monitor允许osd报告的最大间隔，超时就认为它down了</span>\nosd_mon_report_interval_max\n\n<span class=\"token comment\"># osd向monitor报告心跳的时间</span>\nosd_mon_heartbeat_interval<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"8-管理-PG\"><a href=\"#8-管理-PG\" class=\"headerlink\" title=\"8.管理 PG\"></a>8.管理 PG</h2><h3 id=\"1-管理文件到-PG-映射\"><a href=\"#1-管理文件到-PG-映射\" class=\"headerlink\" title=\"1).管理文件到 PG 映射\"></a>1).管理文件到 PG 映射</h3><p>test 对象所在 pg id 为 10.35，存储在三个 osd 上，分别为 osd.2、osd.1 和 osd.8，其中 osd.2 为 primary osd</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rados <span class=\"token parameter variable\">-p</span> <span class=\"token builtin class-name\">test</span> put <span class=\"token builtin class-name\">test</span> /etc/ceph/ceph.conf\nceph osd map <span class=\"token builtin class-name\">test</span> <span class=\"token builtin class-name\">test</span>\n    osdmap e201 pool <span class=\"token string\">'test'</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> object <span class=\"token string\">'test'</span> -<span class=\"token operator\">></span> pg <span class=\"token number\">10</span>.40e8aab5 <span class=\"token punctuation\">(</span><span class=\"token number\">10.35</span><span class=\"token punctuation\">)</span> -<span class=\"token operator\">></span> up <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2,1</span>,8<span class=\"token punctuation\">]</span>, p2<span class=\"token punctuation\">)</span> acting <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2,1</span>,8<span class=\"token punctuation\">]</span>, p2<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#处于up状态的osd会一直留在PG的up set和acting set中，一旦主osd down，它首先会从up set中移除</span>\n<span class=\"token comment\">#然后从acting set中移除，之后从OSD将被升级为主。Ceph会将故障OSD上的PG恢复到一个新OSD上</span>\n<span class=\"token comment\">#然后再将这个新OSD加入到up和acting set中来维持集群的高可用性</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-管理-struck-状态的-PG\"><a href=\"#2-管理-struck-状态的-PG\" class=\"headerlink\" title=\"2).管理 struck 状态的 PG\"></a>2).管理 struck 状态的 PG</h3><ul>\n<li><p>如果 PG 长时间（mon_pg_stuck_threshold，默认为 300s）出现如下状态时，MON 会将该 PG 标记为 stuck：</p>\n<ul>\n<li>inactive：pg 有 peering 问题</li>\n<li>unclean：pg 在故障恢复时遇到问题</li>\n<li>stale：pg 没有任何 OSD 报告，可能其所有的 OSD 都是 down 和 out</li>\n<li>undersized：pg 没有充足的 osd 来存储它应具有的副本数</li>\n</ul>\n</li>\n<li><p>默认情况下，Ceph 会自动执行恢复，但如果未能自动恢复，则集群状态会一直处于 HEALTH_WARN 或者 HEALTH_ERR</p>\n</li>\n<li><p>如果特定 PG 的所有 osd 都是 down 和 out 状态，则 PG 会被标记为 stale。要解决这一情况，其中一个 OSD 必须要重生，且具有可用的 PG 副本，否则 PG 不可用</p>\n</li>\n<li><p>Ceph 可以声明 osd 或 PG 已丢失，这也就意味着数据丢失。需要说明的是，osd 的运行离不开 journal，如果 journal 丢失，则 osd 停止</p>\n</li>\n</ul>\n<h3 id=\"3-struck-状态操作\"><a href=\"#3-struck-状态操作\" class=\"headerlink\" title=\"3).struck 状态操作\"></a>3).struck 状态操作</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 检查处于stuck状态的pg</span>\nceph pg dump_stuck\n<span class=\"token comment\"># 检查导致pg一致阻塞在peering状态的osd</span>\nceph osd blocked-by\n<span class=\"token comment\"># 检查某个pg的状态</span>\nceph pg dump all<span class=\"token operator\">|</span><span class=\"token function\">grep</span> pgid\n<span class=\"token comment\"># 声明pg丢失</span>\nceph pg pgid mark_unfound_lost revert<span class=\"token operator\">|</span>delete\n<span class=\"token comment\"># 声明osd丢失（需要osd状态为down且out）</span>\nceph osd lost osdid --yes-i-really-mean-it<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-手动控制-PG-的-Primary-OSD\"><a href=\"#4-手动控制-PG-的-Primary-OSD\" class=\"headerlink\" title=\"4).手动控制 PG 的 Primary OSD\"></a>4).手动控制 PG 的 Primary OSD</h3><p>可以通过手动修改 osd 的权重以提升 特定 OSD 被选为 PG Primary OSD 的概率，避免将速度慢的磁盘用作 primary osd。</p>\n<p>需要先在配置文件中配置如下参数：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mon_osd_allow_primary_affinity <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-调整权重示例\"><a href=\"#5-调整权重示例\" class=\"headerlink\" title=\"5).调整权重示例\"></a>5).调整权重示例</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>. 查看现在有多少PG的主OSD是osd.0\nceph pg dump <span class=\"token operator\">|</span><span class=\"token function\">grep</span> active+clean <span class=\"token operator\">|</span><span class=\"token function\">egrep</span> <span class=\"token string\">\"\\[0,\"</span> <span class=\"token operator\">|</span><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span>\n\n<span class=\"token number\">2</span>. 修改osd.0的权重\nceph osd primary-affinity osd.0 <span class=\"token number\">0</span>  <span class=\"token comment\"># 权重范围从0.0到1.0</span>\n\n<span class=\"token number\">3</span>. 再次查看现在有多少PG的主OSD是osd.0\nceph pg dump <span class=\"token operator\">|</span><span class=\"token function\">grep</span> active+clean <span class=\"token operator\">|</span><span class=\"token function\">egrep</span> <span class=\"token string\">\"\\[0,\"</span> <span class=\"token operator\">|</span><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"9-Pool-存储池-管理\"><a href=\"#9-Pool-存储池-管理\" class=\"headerlink\" title=\"9.Pool(存储池)管理\"></a>9.Pool(存储池)管理</h2><p><a href=\"https://blog.csdn.net/weixin_42440345/article/details/81118964\">https://blog.csdn.net/weixin_42440345&#x2F;article&#x2F;details&#x2F;81118964</a></p>\n<h3 id=\"PG-和-PGP-的区别\"><a href=\"#PG-和-PGP-的区别\" class=\"headerlink\" title=\"PG 和 PGP 的区别\"></a>PG 和 PGP 的区别</h3><p><a href=\"https://www.cnblogs.com/zphj1987/p/13575377.html\">https://www.cnblogs.com/zphj1987/p/13575377.html</a></p>\n<p>PG 是指定存储池存储对象的目录有多少个，PGP 是存储池 PG 的 OSD 分布组合个数</p>\n<p>PG 的增加会引起 PG 内的数据进行分裂，分裂到相同的 OSD 上新生成的 PG 当中</p>\n<p>PGP 的增加会引起部分 PG 的分布进行变化，但是不会引起 PG 内对象的变动</p>\n<h3 id=\"4-限制-pool-配置更改\"><a href=\"#4-限制-pool-配置更改\" class=\"headerlink\" title=\"4.)限制 pool 配置更改\"></a>4.)限制 pool 配置更改</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#禁止池被删除</span>\nosd_pool_default_flag_nodelete\n\n<span class=\"token comment\">#禁止池的pg_num和pgp_num被修改</span>\nosd_pool_default_flag_nopgchange\n\n<span class=\"token comment\">#禁止修改池的size和min_size</span>\nosd_pool_default_flag_nosizechange<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-查看-pool\"><a href=\"#1-查看-pool\" class=\"headerlink\" title=\"1.查看 pool\"></a>1.查看 pool</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看所有pool</span>\nceph osd lspools\n<span class=\"token comment\">#获取集群内所有POOL的概况信息,集群内POOL的个数、对应的POOL id、POOL名称、副本数、最小副本数，ruleset及POOL snap等信息</span>\nceph osd pool <span class=\"token function\">ls</span> detail\n<span class=\"token comment\">#查看POOL的统计信息</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-创建-pool\"><a href=\"#2-创建-pool\" class=\"headerlink\" title=\"2.创建 pool\"></a>2.创建 pool</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#创建一个副本类型的POOL</span>\nceph osd pool create <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>pg-num<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>pgp-num<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>pgp-num<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>replicated<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>ruleset<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#举例：</span>\nceph osd pool create rbd  <span class=\"token number\">32</span> <span class=\"token number\">32</span>\n<span class=\"token comment\">#创建一个纠删码类型的POOL</span>\nceph osd pool create <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>pg-num<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>pgp-num<span class=\"token punctuation\">&#125;</span> erasure <span class=\"token punctuation\">[</span>erasure-code-profile<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>ruleset<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在<code>&#123;&#125;</code>内的参数为必选项,<code>[]</code>内的参数均设有默认值,如果没有更改设计,可以不添加。</p>\n<p>参数的含义如下:</p>\n<ul>\n<li><strong>pool-name</strong>: POOL 的名字；必须添加。</li>\n<li><strong>pg-num</strong>: POOL 拥有的 PG 总数；必须添加。</li>\n<li><strong>pgp-num</strong>: POOL 拥有的 PGP 总数；非必须添加。默认与 pg-num 相同。</li>\n<li><strong>replicated|erasure</strong>: POOL 类型；非必须添加。如不指定为 erasure,则默认为 replicated 类型。</li>\n<li><strong>ruleset</strong>: POOL 所用的 CRUSH 规则 ID。非必须添加。默认为 0,若需指定其他 ruleset,需确保 ruleset 必须存在。</li>\n<li><strong>erasure-code-profile</strong>: 仅用于纠删码类型的 POOL。指定纠删码配置框架,此配置必须已由 osd erasure-code-profile set 定义</li>\n</ul>\n<p>这里强制选择 pg_num 和 pgp_num，因为 ceph 集群不能自动计算 pg 数量。下面有一些官方建议的 pg 使用数量：</p>\n<ul>\n<li>小于 5 个 osd 设置 pg_num 为 128</li>\n<li>5 到 10 个 osd 设置 pg_num 为 512</li>\n<li>10 到 50 个 osd 设置 pg_num 为 1024</li>\n<li>如果超过 50 个 osd 你需要自己明白权衡点，并且能自行计算 pg_num 的数量</li>\n</ul>\n<p>pg_num 通用计算方法:</p>\n<p>(OSDs * 100)</p>\n<p>Total PGs &#x3D;  ————</p>\n<p>pool size</p>\n<h3 id=\"3-修改-pool\"><a href=\"#3-修改-pool\" class=\"headerlink\" title=\"3.修改 pool\"></a>3.修改 pool</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd pool <span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">&#125;</span>\nsize：设置存储池中的对象副本数，详情参见设置对象副本数。仅适用于副本存储池。\nmin_size：设置 I/O 需要的最小副本数，详情参见设置对象副本数。仅适用于副本存储池。\npg_num：计算数据分布时的有效 PG 数。只能大于当前 PG 数。\npgp_num：计算数据分布时使用的有效 PGP 数量。小于等于存储池的 PG 数。\nhashpspool：给指定存储池设置/取消 HASHPSPOOL 标志。\ntarget_max_bytes：达到 max_bytes 阀值时会触发 Ceph 冲洗或驱逐对象。\ntarget_max_objects：达到 max_objects 阀值时会触发 Ceph 冲洗或驱逐对象。\nscrub_min_interval：在负载低时，洗刷存储池的最小间隔秒数。如果是 <span class=\"token number\">0</span> ，就按照配置文件里的 osd_scrub_min_interval 。\nscrub_max_interval：不管集群负载如何，都要洗刷存储池的最大间隔秒数。如果是 <span class=\"token number\">0</span> ，就按照配置文件里的 osd_scrub_max_interval 。\ndeep_scrub_interval：“深度”洗刷存储池的间隔秒数。如果是 <span class=\"token number\">0</span> ，就按照配置文件里的 osd_deep_scrub_interval 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-删除存储池\"><a href=\"#4-删除存储池\" class=\"headerlink\" title=\"4.删除存储池\"></a>4.删除存储池</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd pool delete <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> --yes-i-really-really-mean-it<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-重命名存储池\"><a href=\"#5-重命名存储池\" class=\"headerlink\" title=\"5.重命名存储池\"></a>5.重命名存储池</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd pool <span class=\"token function\">rename</span> <span class=\"token punctuation\">&#123;</span>current-pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>new-pool-name<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"6-查看存储池统计信息\"><a href=\"#6-查看存储池统计信息\" class=\"headerlink\" title=\"6.查看存储池统计信息\"></a>6.查看存储池统计信息</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rados <span class=\"token function\">df</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"7-给存储池做快照\"><a href=\"#7-给存储池做快照\" class=\"headerlink\" title=\"7.给存储池做快照\"></a>7.给存储池做快照</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd pool mksnap <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>snap-name<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"8-删除存储池的快照\"><a href=\"#8-删除存储池的快照\" class=\"headerlink\" title=\"8.删除存储池的快照\"></a>8.删除存储池的快照</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd pool rmsnap <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>snap-name<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"9-获取存储池选项值\"><a href=\"#9-获取存储池选项值\" class=\"headerlink\" title=\"9.获取存储池选项值\"></a>9.获取存储池选项值</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd pool get <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"10-获取对象副本数\"><a href=\"#10-获取对象副本数\" class=\"headerlink\" title=\"10.获取对象副本数\"></a>10.获取对象副本数</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd dump <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'replicated size'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"11-设置存储池配额\"><a href=\"#11-设置存储池配额\" class=\"headerlink\" title=\"11.设置存储池配额\"></a>11.设置存储池配额</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">命令格式：\n<span class=\"token comment\"># ceph osd pool set-quota &#123;pool-name&#125; [max_objects &#123;obj-count&#125;] [max_bytes &#123;bytes&#125;]</span>\n命令举例：\n<span class=\"token comment\"># ceph osd pool set-quota rbd max_objects 10000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"10-自定义-Crush-Map\"><a href=\"#10-自定义-Crush-Map\" class=\"headerlink\" title=\"10.自定义 Crush Map\"></a>10.自定义 Crush Map</h2><blockquote>\n<p>crush map 决定了客户端数据最终写入的 osd 的位置，在某些情况下存在 hdd 和 ssd 两种盘想让某些数据写入到指定的 osd 中这个时候就是需要去人为的手动编译 crush-map，编辑要修改的部分，再导入集群中达到我们特定的目的</p>\n</blockquote>\n<h3 id=\"1-Crush-的放置策略\"><a href=\"#1-Crush-的放置策略\" class=\"headerlink\" title=\"1).Crush 的放置策略\"></a>1).Crush 的放置策略</h3><ul>\n<li>Ceph 使用 CRUSH 算法（Controlled Replication Under Scalable Hashing 可扩展哈希下的受控复制）来计算哪些 OSD 存放哪些对象</li>\n<li>对象分配到 PG 中，CRUSH 决定这些 PG 使用哪些 OSD 来存储对象。理想情况下，CRUSH 会将数据均匀的分布到存储中</li>\n<li>当添加新 OSD 或者现有的 OSD 出现故障时，Ceph 使用 CRUSH 在活跃的 OSD 上重平衡数据 CRUSH map 是 CRUSH 算法的中央配置机制，可通过调整 CRUSHmap 来优化数据存放位置默认情况下，CRUSH 将一个对象的多个副本放置到不同主机上的 0SD 中。可以配置 CRUSH map 和 CRUSH rules，使一个对象的多个副本放置到不同房间或者不同机柜的主机上的 0SD 中。</li>\n<li>也可以将 SSD 磁盘分配给需要高速存储的池</li>\n</ul>\n<h3 id=\"2-编译与翻译和更新\"><a href=\"#2-编译与翻译和更新\" class=\"headerlink\" title=\"2).编译与翻译和更新\"></a>2).编译与翻译和更新</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#导出CRUSH map</span>\nceph osd getcrushmap <span class=\"token parameter variable\">-o</span> ./crushmap.bin\n<span class=\"token comment\">#解译CRUSH map</span>\ncrushtool <span class=\"token parameter variable\">-d</span> ./crushmap.bin ./crushmap.txt\n<span class=\"token comment\">#修改后的CRUSH map重新编译</span>\ncrushtool <span class=\"token parameter variable\">-c</span> ./crushmap.txt-o ./crushmap-new.bin\n<span class=\"token comment\">#更新CRUSH map</span>\nceph osd setcrushmap-i./crushmap-new.bin\n<span class=\"token comment\">#查询crush map的内容（返回json）</span>\nceph osd crush dump<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例子</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">root default <span class=\"token punctuation\">&#123;</span>\n    id-1           <span class=\"token comment\"># do not change unnecessarily</span>\n    id-2 class hdd <span class=\"token comment\">#do not change unnecessarily</span>\n    <span class=\"token comment\">#weiqht 0.166</span>\n    alg straw2\n    <span class=\"token builtin class-name\">hash</span> <span class=\"token number\">0</span><span class=\"token comment\">#rjenkins1</span>\n    item rackl weight <span class=\"token number\">0.055</span>\n    item rack2 weiqht <span class=\"token number\">0.055</span>\n    item rack3 weight <span class=\"token number\">0.055</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">#rules</span>\nrule replicated rule<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">id</span> <span class=\"token number\">0</span>\n    <span class=\"token builtin class-name\">type</span> replicated\n    min size <span class=\"token number\">1</span>\n    max size <span class=\"token number\">10</span>\n    step take default  <span class=\"token comment\">#只要是应用这个rule的都把数据写入到defaults下</span>\n    step chooseleaf firstn <span class=\"token number\">0</span> <span class=\"token builtin class-name\">type</span> <span class=\"token function\">host</span>  <span class=\"token comment\">#定义故障的故障域为物理集机器级别（rack为机柜级别）</span>\n    step emit <span class=\"token comment\">#结尾符号</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"11-admin-sockets-管理守护进程\"><a href=\"#11-admin-sockets-管理守护进程\" class=\"headerlink\" title=\"11.admin sockets 管理守护进程\"></a>11.admin sockets 管理守护进程</h2><ul>\n<li>通过 admin sockets，管理员可以直接与守护进程交互。如查看和修改守护进程的配置参数。</li>\n<li>守护进程的 socket 文件一般是&#x2F;var&#x2F;run&#x2F;ceph&#x2F;cluster-cluster−type.$id.asok</li>\n<li>基于 admin sockets 的操作：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph daemon <span class=\"token variable\">$type</span><span class=\"token builtin class-name\">.</span><span class=\"token variable\">$id</span> <span class=\"token builtin class-name\">command</span>\n<span class=\"token comment\">#或者</span>\nceph --admin-daemon /var/run/ceph/<span class=\"token variable\">$cluster</span>-<span class=\"token variable\">$type</span><span class=\"token builtin class-name\">.</span><span class=\"token variable\">$id</span>.asok <span class=\"token builtin class-name\">command</span>\n<span class=\"token comment\">#常用command如下：</span>\n<span class=\"token builtin class-name\">help</span>\nconfig get parameter\nconfig <span class=\"token builtin class-name\">set</span> parameter\nconfig show\nperf dump<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"12-用户管理\"><a href=\"#12-用户管理\" class=\"headerlink\" title=\"12.用户管理\"></a>12.用户管理</h2><blockquote>\n<p>Ceph 把数据以对象的形式存于各存储池中。Ceph 用户必须具有访问存储池的权限才能够读写数据。另外，Ceph 用户必须具有执行权限才能够使用 Ceph 的管理命令。</p>\n</blockquote>\n<h3 id=\"1、查看用户信息\"><a href=\"#1、查看用户信息\" class=\"headerlink\" title=\"1、查看用户信息\"></a>1、查看用户信息</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">查看所有用户信息\n<span class=\"token comment\"># ceph auth list</span>\n获取所有用户的key与权限相关信息\n<span class=\"token comment\"># ceph auth get client.admin</span>\n如果只需要某个用户的key信息，可以使用pring-key子命令\n<span class=\"token comment\"># ceph auth print-key client.admin</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、添加用户\"><a href=\"#2、添加用户\" class=\"headerlink\" title=\"2、添加用户\"></a>2、添加用户</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ceph auth add client.john mon 'allow r' osd 'allow rw pool=liverpool'</span>\n<span class=\"token comment\"># ceph auth get-or-create client.paul mon 'allow r' osd 'allow rw pool=liverpool'</span>\n<span class=\"token comment\"># ceph auth get-or-create client.george mon 'allow r' osd 'allow rw pool=liverpool' -o george.keyring</span>\n<span class=\"token comment\"># ceph auth get-or-create-key client.ringo mon 'allow r' osd 'allow rw pool=liverpool' -o ringo.key</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、修改用户权限\"><a href=\"#3、修改用户权限\" class=\"headerlink\" title=\"3、修改用户权限\"></a>3、修改用户权限</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ceph auth caps client.john mon 'allow r' osd 'allow rw pool=liverpool'</span>\n<span class=\"token comment\"># ceph auth caps client.paul mon 'allow rw' osd 'allow rwx pool=liverpool'</span>\n<span class=\"token comment\"># ceph auth caps client.brian-manager mon 'allow *' osd 'allow *'</span>\n<span class=\"token comment\"># ceph auth caps client.ringo mon ' ' osd ' '</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4、删除用户\"><a href=\"#4、删除用户\" class=\"headerlink\" title=\"4、删除用户\"></a>4、删除用户</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ceph auth del &#123;TYPE&#125;.&#123;ID&#125;</span>\n其中， <span class=\"token punctuation\">&#123;</span>TYPE<span class=\"token punctuation\">&#125;</span> 是 client，osd，mon 或 mds 的其中一种。<span class=\"token punctuation\">&#123;</span>ID<span class=\"token punctuation\">&#125;</span> 是用户的名字或守护进程的 ID 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"13-增加和删除-Monitor\"><a href=\"#13-增加和删除-Monitor\" class=\"headerlink\" title=\"13.增加和删除 Monitor\"></a>13.增加和删除 Monitor</h2><blockquote>\n<p>一个集群可以只有一个 monitor，推荐生产环境至少部署 3 个。 Ceph 使用 Paxos 算法的一个变种对各种 map 、以及其它对集群来说至关重要的信息达成共识。建议（但不是强制）部署奇数个 monitor 。Ceph 需要 mon 中的大多数在运行并能够互相通信，比如单个 mon，或 2 个中的 2 个，3 个中的 2 个，4 个中的 3 个等。初始部署时，建议部署 3 个 monitor。后续如果要增加，请一次增加 2 个.</p>\n</blockquote>\n<h3 id=\"1、新增一个-monitor\"><a href=\"#1、新增一个-monitor\" class=\"headerlink\" title=\"1、新增一个 monitor\"></a>1、新增一个 monitor</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ceph-deploy mon create $hostname</span>\n注意：执行ceph-deploy之前要进入之前安装时候配置的目录。/my-cluster<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、删除-Monitor\"><a href=\"#2、删除-Monitor\" class=\"headerlink\" title=\"2、删除 Monitor\"></a>2、删除 Monitor</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ceph-deploy mon destroy $hostname</span>\n注意： 确保你删除某个 Mon 后，其余 Mon 仍能达成一致。如果不可能，删除它之前可能需要先增加一个。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"四、集群监控管理\"><a href=\"#四、集群监控管理\" class=\"headerlink\" title=\"四、集群监控管理\"></a>四、集群监控管理</h1><h2 id=\"1-集群整体运行状态\"><a href=\"#1-集群整体运行状态\" class=\"headerlink\" title=\"1.集群整体运行状态\"></a>1.集群整体运行状态</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@cephnode01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ceph -s</span>\ncluster:\n    id:     8230a918-a0de-4784-9ab8-cd2a2b8671d0\n    health: HEALTH_WARN\n            application not enabled on <span class=\"token number\">1</span> pool<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n  services:\n    mon: <span class=\"token number\">3</span> daemons, quorum cephnode01,cephnode02,cephnode03 <span class=\"token punctuation\">(</span>age 27h<span class=\"token punctuation\">)</span>\n    mgr: cephnode01<span class=\"token punctuation\">(</span>active, since 53m<span class=\"token punctuation\">)</span>, standbys: cephnode03, cephnode02\n    osd: <span class=\"token number\">4</span> osds: <span class=\"token number\">4</span> up <span class=\"token punctuation\">(</span>since 27h<span class=\"token punctuation\">)</span>, <span class=\"token number\">4</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>since 19h<span class=\"token punctuation\">)</span>\n    rgw: <span class=\"token number\">1</span> daemon active <span class=\"token punctuation\">(</span>cephnode01<span class=\"token punctuation\">)</span>\n\n  data:\n    pools:   <span class=\"token number\">6</span> pools, <span class=\"token number\">96</span> pgs\n    objects: <span class=\"token number\">235</span> objects, <span class=\"token number\">3.6</span> KiB\n    usage:   <span class=\"token number\">4.0</span> GiB used, <span class=\"token number\">56</span> GiB / <span class=\"token number\">60</span> GiB avail\n    pgs:     <span class=\"token number\">96</span> active+clean\n\n    id：集群ID\n    health：集群运行状态，这里有一个警告，说明是有问题，意思是pg数大于pgp数，通常此数值相等。\n    mon：Monitors运行状态。\n    osd：OSDs运行状态。\n    mgr：Managers运行状态。\n    mds：Metadatas运行状态。\n    pools：存储池与PGs的数量。\n    objects：存储对象的数量。\n    usage：存储的理论用量。\n    pgs：PGs的运行状态\n\n~<span class=\"token punctuation\">]</span>$ ceph <span class=\"token parameter variable\">-w</span>\n~<span class=\"token punctuation\">]</span>$ ceph health detail<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-PG-状态\"><a href=\"#2-PG-状态\" class=\"headerlink\" title=\"2.PG 状态\"></a>2.PG 状态</h2><blockquote>\n<p>查看 pg 状态查看通常使用下面两个命令即可，dump 可以查看更详细信息</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">~<span class=\"token punctuation\">]</span>$ ceph pg dump\n~<span class=\"token punctuation\">]</span>$ ceph pg <span class=\"token function\">stat</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-Pool-状态\"><a href=\"#3-Pool-状态\" class=\"headerlink\" title=\"3.Pool 状态\"></a>3.Pool 状态</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">~<span class=\"token punctuation\">]</span>$ ceph osd pool stats\n~<span class=\"token punctuation\">]</span>$ ceph osd pool stats<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-OSD-状态\"><a href=\"#4-OSD-状态\" class=\"headerlink\" title=\"4.OSD 状态\"></a>4.OSD 状态</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">~<span class=\"token punctuation\">]</span>$ ceph osd <span class=\"token function\">stat</span>\n~<span class=\"token punctuation\">]</span>$ ceph osd dump\n~<span class=\"token punctuation\">]</span>$ ceph osd tree\n~<span class=\"token punctuation\">]</span>$ ceph osd <span class=\"token function\">df</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-Monitor-状态和查看仲裁状态\"><a href=\"#5-Monitor-状态和查看仲裁状态\" class=\"headerlink\" title=\"5.Monitor 状态和查看仲裁状态\"></a>5.Monitor 状态和查看仲裁状态</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">~<span class=\"token punctuation\">]</span>$ ceph mon <span class=\"token function\">stat</span>\n~<span class=\"token punctuation\">]</span>$ ceph mon dump\n~<span class=\"token punctuation\">]</span>$ ceph quorum_status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"6-集群空间用量\"><a href=\"#6-集群空间用量\" class=\"headerlink\" title=\"6.集群空间用量\"></a>6.集群空间用量</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">~<span class=\"token punctuation\">]</span>$ ceph <span class=\"token function\">df</span>\n~<span class=\"token punctuation\">]</span>$ ceph <span class=\"token function\">df</span> detail<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"五、集群配置管理-临时和全局，服务平滑重启\"><a href=\"#五、集群配置管理-临时和全局，服务平滑重启\" class=\"headerlink\" title=\"五、集群配置管理(临时和全局，服务平滑重启)\"></a>五、集群配置管理(临时和全局，服务平滑重启)</h1><blockquote>\n<p>有时候需要更改服务的配置，但不想重启服务，或者是临时修改。这时候就可以使用 tell 和 daemon 子命令来完成此需求。</p>\n</blockquote>\n<h2 id=\"1-查看运行配置\"><a href=\"#1-查看运行配置\" class=\"headerlink\" title=\"1.查看运行配置\"></a>1.查看运行配置</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">命令格式：\n<span class=\"token comment\"># ceph daemon &#123;daemon-type&#125;.&#123;id&#125; config show</span>\n\n命令举例：\n<span class=\"token comment\"># ceph daemon osd.0 config show</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-tell-子命令格式\"><a href=\"#2-tell-子命令格式\" class=\"headerlink\" title=\"2.tell 子命令格式\"></a>2.tell 子命令格式</h2><blockquote>\n<p>使用 tell 的方式适合对整个集群进行设置，使用 * 号进行匹配，就可以对整个集群的角色进行设置。而出现节点异常无法设置时候，只会在命令行当中进行报错，不太便于查找。</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">命令格式：\n<span class=\"token comment\"># ceph tell &#123;daemon-type&#125;.&#123;daemon id or *&#125; injectargs --&#123;name&#125;=&#123;value&#125; [--&#123;name&#125;=&#123;value&#125;]</span>\n命令举例：\n<span class=\"token comment\"># ceph tell osd.0 injectargs --debug-osd 20 --debug-ms 1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>daemon-type：为要操作的对象类型如 osd、mon、mds 等。</li>\n<li>daemon id：该对象的名称，osd 通常为 0、1 等，mon 为 ceph -s 显示的名称，这里可以输入*表示全部。</li>\n<li>injectargs：表示参数注入，后面必须跟一个参数，也可以跟多个</li>\n</ul>\n<h2 id=\"3-daemon-子命令\"><a href=\"#3-daemon-子命令\" class=\"headerlink\" title=\"3.daemon 子命令\"></a>3.daemon 子命令</h2><ul>\n<li>使用 daemon 进行设置的方式就是一个个的去设置，这样可以比较好的反馈，此方法是需要在设置的角色所在的主机上进行设置。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">命令格式：\n<span class=\"token comment\"># ceph daemon &#123;daemon-type&#125;.&#123;id&#125; config set &#123;name&#125;=&#123;value&#125;</span>\n命令举例：\n<span class=\"token comment\"># ceph daemon mon.ceph-monitor-1 config set mon_allow_pool_delete false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-集群操作\"><a href=\"#4-集群操作\" class=\"headerlink\" title=\"4.集群操作\"></a>4.集群操作</h2><ul>\n<li>命令包含 start、restart、status</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#1.启动所有守护进程</span>\nsystemctl start ceph.target\n\n<span class=\"token comment\">#2.按类型启动守护进程</span>\nsystemctl start ceph-mgr.target\nsystemctl start ceph-osd@id\nsystemctl start ceph-mon.target\nsystemctl start ceph-mds.target\nsystemctl start ceph-radosgw.target<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-添加和删除-OSD\"><a href=\"#5-添加和删除-OSD\" class=\"headerlink\" title=\"5.添加和删除 OSD\"></a>5.添加和删除 OSD</h2><h3 id=\"1-添加-OSD\"><a href=\"#1-添加-OSD\" class=\"headerlink\" title=\"1).添加 OSD\"></a>1).添加 OSD</h3><ul>\n<li><p>纵向扩容(会导致数据的重分布)</p>\n</li>\n<li><p>生产环境下最好的做法就是不要一次性添加大量的 osd，最好逐步添加等待数据同步后再进行添加操作</p>\n<ul>\n<li>当影响生产数据时候临时可以停止同步：ceph osd set [nobackfill|norebalance],unset 取消对应的参数</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#1.格式化磁盘</span>\nceph-volume lvm zap /dev/sd<span class=\"token operator\">&lt;</span>id<span class=\"token operator\">></span>\n\n<span class=\"token comment\">#2.进入到ceph-deploy执行目录/my-cluster，添加OSD</span>\nceph-deploy osd create <span class=\"token parameter variable\">--data</span> /dev/sd<span class=\"token operator\">&lt;</span>id<span class=\"token operator\">></span> <span class=\"token variable\">$hostname</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-删除-OSD\"><a href=\"#2-删除-OSD\" class=\"headerlink\" title=\"2).删除 OSD\"></a>2).删除 OSD</h3><ul>\n<li><p>如果机器有盘坏了可以使用 dmdsg 查看坏盘</p>\n</li>\n<li><p>存在一种情况就是某 osd 的写入延迟大盘有坏道很大可能会拖垮 ceph 集群：</p>\n<ul>\n<li>ceph osd tree: 查看当前集群的 osd 状态</li>\n<li>ceph osd perf: 查看当前的 OSD 的延迟</li>\n</ul>\n</li>\n<li><p>当某一快 osd 踢出集群时候立即做数据重分布(默认 10 分钟)</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>、调整osd的crush weight为 <span class=\"token number\">0</span>\nceph osd crush reweight osd.<span class=\"token operator\">&lt;</span>ID<span class=\"token operator\">></span> <span class=\"token number\">0.0</span>\n\n<span class=\"token number\">2</span>、将osd进程stop\nsystemctl stop ceph-osd@<span class=\"token operator\">&lt;</span>ID<span class=\"token operator\">></span>\n\n<span class=\"token number\">3</span>、将osd设置out<span class=\"token punctuation\">(</span>将会出发数据重分布<span class=\"token punctuation\">)</span>\nceph osd out <span class=\"token operator\">&lt;</span>ID<span class=\"token operator\">></span>\n\n<span class=\"token number\">4</span>、从crushmap中踢出osd\n<span class=\"token comment\"># 查看运行视图的osd状态</span>\nceph osd crush dump<span class=\"token operator\">|</span><span class=\"token function\">less</span>\nceph osd crush <span class=\"token function\">rm</span> <span class=\"token operator\">&lt;</span>osd<span class=\"token operator\">></span>.id\n\n<span class=\"token number\">5</span>、从tree树中删除osd\nceph osd <span class=\"token function\">rm</span> <span class=\"token operator\">&lt;</span>osd<span class=\"token operator\">></span>.id\n\n<span class=\"token number\">6</span>、<span class=\"token punctuation\">(</span>选用<span class=\"token punctuation\">)</span>立即执行删除OSD中数据\nceph osd purge osd.<span class=\"token operator\">&lt;</span>ID<span class=\"token operator\">></span> --yes-i-really-mean-it\n\n<span class=\"token number\">7</span>、卸载磁盘\n<span class=\"token function\">umount</span> /var/lib/ceph/osd/ceph-？\n\n<span class=\"token number\">8</span>.从认证中删除磁盘对应的key\n<span class=\"token comment\"># 查看认证的列表</span>\nceph auth list\nceph auth <span class=\"token function\">rm</span> <span class=\"token operator\">&lt;</span>osd<span class=\"token operator\">></span>.id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"6-扩容-PG\"><a href=\"#6-扩容-PG\" class=\"headerlink\" title=\"6.扩容 PG\"></a>6.扩容 PG</h2><ul>\n<li>扩容大小取跟它接近的 2 的 N 次方</li>\n<li>在更改 pool 的 PG 数量时，需同时更改 PGP 的数量。PGP 是为了管理 placement 而存在的专门的 PG，它和 PG 的数量应该保持一致。如果你增加 pool 的 pg_num，就需要同时增加 pgp_num，保持它们大小一致，这样集群才能正常 rebalancing。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd pool <span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> pg_num <span class=\"token number\">128</span>\nceph osd pool <span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> pgp_num <span class=\"token number\">128</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"六、调优\"><a href=\"#六、调优\" class=\"headerlink\" title=\"六、调优\"></a>六、调优</h1><h2 id=\"1-系统层面调优\"><a href=\"#1-系统层面调优\" class=\"headerlink\" title=\"1.系统层面调优\"></a>1.系统层面调优</h2><ul>\n<li><p>选择正确的 CPU 和内存。OSD、MON 和 MDS 节点具有不同的 CPU 和内存需求</p>\n<ul>\n<li>mon 的需求和 osd 的总个数有关需要的是计算力</li>\n<li>mds 对 CPU 和内存要求很高，会将大量的元数据缓存到自己的内存中，存储元数据的尽量的使用 ssd</li>\n<li>osd 最低要求 1H2G 的配置例如：24 块硬盘最少是 24H36G,磁盘方面必须高 I&#x2F;O 有多好上多好</li>\n</ul>\n</li>\n<li><p>尽可能关闭 NUMA</p>\n</li>\n<li><p>规划好存储节点的数据以及各节点的磁盘要求（不考虑钱忽略）</p>\n</li>\n<li><p>磁盘的选择尽可能在成本、吞吐量和延迟之间找到良好的平衡</p>\n</li>\n<li><p>journal 日志应该使用 SSD</p>\n</li>\n<li><p>如果交换机支持（MTU 9000），则启用巨型帧(减少数据的分片)，前提是 ceph 在一个单独的网络环境中切有独立交换机。</p>\n</li>\n<li><p>启用 ntp。Ceph 对时间敏感,集群网络至少 10GB 带宽</p>\n</li>\n</ul>\n<h3 id=\"1-系统调优工具\"><a href=\"#1-系统调优工具\" class=\"headerlink\" title=\"1).系统调优工具\"></a>1).系统调优工具</h3><ul>\n<li>使用 tuned-admin 工具，它可帮助系统管理员针对不同的工作负载进行系统调优</li>\n<li>tuned-admin 使用的 profile 默认存放在&#x2F;usr&#x2F;lib&#x2F;tuned&#x2F;目录中，可以参考其模板来自定义 profile</li>\n<li>对于 ceph 而言，network-latency 可以改进全局系统延迟，network-throughput 可以改进全局系统吞吐量,如果两个都开启可以使用 Custom 自定义模式</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 列出现有可用的profile</span>\ntuned-adm list\n\n<span class=\"token comment\"># 查看当前生效的profile</span>\ntuned-adm active\n\n<span class=\"token comment\"># 使用指定的profile</span>\ntuned-admin profile profile-name\n\n<span class=\"token comment\"># 禁用所有的profile</span>\ntuned-admin off<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-I-x2F-O-调度算法\"><a href=\"#2-I-x2F-O-调度算法\" class=\"headerlink\" title=\"2).I&#x2F;O 调度算法\"></a>2).I&#x2F;O 调度算法</h3><ul>\n<li>noop：电梯算法，实现了一个简单的 FIFO 队列。基于 SSD 的磁盘，推荐使用这种调度方式</li>\n<li>Deadline：截止时间调度算法，尽力为请求提供有保障的延迟。对于 Ceph，基于 sata 或者 sas 的驱动器，应该首选这种调度方式</li>\n<li>cfq：完全公平队列，适合有许多进程同时读取和写入大小不等的请求的磁盘，也是默认的通用调度算法</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看当前系统支持的调度算法：</span>\n    <span class=\"token function\">dmesg</span><span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-I</span> scheduler\n\n<span class=\"token comment\">#查看指定磁盘使用的调度算法：</span>\n    <span class=\"token function\">cat</span> /sys/block/磁盘设备号/queue/scheduler\n\n<span class=\"token comment\">#修改调度算法</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"deadline\"</span> <span class=\"token operator\">></span> /sys/block/vdb/queue/scheduler\n    <span class=\"token function\">vim</span> /etc/default/grub\n        <span class=\"token assign-left variable\">GRUB_CMDLINE_LINUX</span><span class=\"token operator\">=</span><span class=\"token string\">\"elevator=deadline numa=off\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-网络-IO-子系统调优\"><a href=\"#3-网络-IO-子系统调优\" class=\"headerlink\" title=\"3).网络 IO 子系统调优\"></a>3).网络 IO 子系统调优</h3><ul>\n<li>用于集群的网络建议尽可能使用 10Gb 网络</li>\n</ul>\n<p>以下参数用于缓冲区内存管理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#设置OS接收缓冲区的内存大小，第一个值告知内核一个TCP socket的最小缓冲区空间，第二值为默认缓冲区空间，第三个值是最大缓冲区空间</span>\nnet.ipv4.tcp_wmem\n\n<span class=\"token comment\">#设置Os发送缓冲区的内存大小</span>\nnet.ipv4.tcp_rmem\n\n<span class=\"token comment\">#定义TCP stack如何反应内存使用情况</span>\nnet.ipv4.tcp_mem<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>交换机启用大型帧</li>\n</ul>\n<blockquote>\n<p>默认情况下，以太网最大传输数据包大小为 1500 字节。为提高吞吐量并减少处理开销，一种策略是将以太网网络配置为允许设备发送和接收更大的巨型帧。</p>\n</blockquote>\n<ul>\n<li>在使用巨型帧的要谨慎，因为需要硬件支持，且全部以太网口配置为相同的巨型帧 MTU 大小。</li>\n</ul>\n<h3 id=\"4-虚拟内存调优\"><a href=\"#4-虚拟内存调优\" class=\"headerlink\" title=\"4).虚拟内存调优\"></a>4).虚拟内存调优</h3><p>设置较低的比率会导致高频但用时短的写操作，这适合 Ceph 等 I&#x2F;O 密集型应用。设置较高的比率会导致低频但用时长的写操作，这会产生较小的系统开销，但可能会造成应用响应时间变长</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#脏内存占总系统总内存的百分比，达到此比率时内核会开始在后台写出数据</span>\nvm.dirty_background_ratio\n\n<span class=\"token comment\">#脏内存占总系统总内存的百分比，达到此比率时写入进程停滞，而系统会将内存页清空到后端存储</span>\nvm.dirty_ratio\n\n<span class=\"token comment\">#控制交换分区的使用,生产中建议完全关闭，会拖慢系统运行速度</span>\nvm.swappiness\n\n<span class=\"token comment\">#系统尽力保持可用状态的RAM大小。在一个RAM大于48G的系统上，建议设置为4G</span>\nvm.min_free_kbytes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-Ceph-本身调优\"><a href=\"#2-Ceph-本身调优\" class=\"headerlink\" title=\"2.Ceph 本身调优\"></a>2.Ceph 本身调优</h2><h3 id=\"1-最佳实践\"><a href=\"#1-最佳实践\" class=\"headerlink\" title=\"1).最佳实践\"></a>1).最佳实践</h3><ul>\n<li>MON 的性能对集群总体性能至关重要，应用部署于专用节点，为确保正确仲裁，数量应为奇数个</li>\n<li>在 OSD 节点上，操作系统、OSD 数据、OSD 日志应当位于独立的磁盘上，以确保满意的吞吐量</li>\n<li>在集群安装后，需要监控集群、排除故障并维护，尽管 Ceph 具有自愈功能。如果发生性能问题，首先在磁盘、网络和硬件层面上调查。然后逐步转向 RADOS 块设备和 Ceph 对象网关</li>\n</ul>\n<h3 id=\"2-影响-I-x2F-O-的-6-大操作\"><a href=\"#2-影响-I-x2F-O-的-6-大操作\" class=\"headerlink\" title=\"2).影响 I&#x2F;O 的 6 大操作\"></a>2).影响 I&#x2F;O 的 6 大操作</h3><ul>\n<li>业务数据写入</li>\n<li>数据恢复</li>\n<li>数据回填</li>\n<li>数据重平衡</li>\n<li>数据一致性校验</li>\n<li>快照清理</li>\n</ul>\n<h3 id=\"3-OSD-生产建议\"><a href=\"#3-OSD-生产建议\" class=\"headerlink\" title=\"3).OSD 生产建议\"></a>3).OSD 生产建议</h3><ul>\n<li>更快的日志性能可以改进响应时间，建议将单独的低延迟 SSD 或者 NVMe 设备用于 OSD 日志。</li>\n<li>多个日志可以共享同一 SSD，以降低存储基础架构的成本。但是不能将过多 OSD 日志放在同一设备上。</li>\n<li>建议每个 SATA OSD 设备不超过 6 个 OSD 日志，每个 NVMe 设备不超过 12 个 OSD 日志。</li>\n<li>需要说明的是，当用于托管日志的 SSD 或者 NVMe 设备故障时，使用它托管其日志的所有 OSD 也都变得不可用</li>\n</ul>\n<h3 id=\"4-硬件建议\"><a href=\"#4-硬件建议\" class=\"headerlink\" title=\"4).硬件建议\"></a>4).硬件建议</h3><ul>\n<li>将一个 raid1 磁盘用于 ceph 操作系统</li>\n<li>每个 OSD 一块硬盘，尽量将 SSD 或者 NVMe 用于日志</li>\n<li>使用多个 10Gb 网卡，每个网络一个双链路绑定（建议生产环境 2 个网卡 4 个光模块，2 个万兆口做为数据的交换，2 个万兆口做业务流量）</li>\n<li>每个 OSD 预留 1 个 CPU,每个逻辑核心 1GHz，分配 16GB 内存，外加每个 OSD 2G 内存</li>\n</ul>\n<h3 id=\"5-RBD-生产建议\"><a href=\"#5-RBD-生产建议\" class=\"headerlink\" title=\"5).RBD 生产建议\"></a>5).RBD 生产建议</h3><ul>\n<li>块设备上的工作负载通常是 I&#x2F;O 密集型负载，例如在 OpenStack 中虚拟机上运行数据库。</li>\n<li>对于 RBD,OSD 日志应当位于 SSD 或者 NVMe 设备上</li>\n<li>对后端存储，可以使用不同的存储设备以提供不同级别的服务</li>\n</ul>\n<h3 id=\"6-对象网关生产建议\"><a href=\"#6-对象网关生产建议\" class=\"headerlink\" title=\"6).对象网关生产建议\"></a>6).对象网关生产建议</h3><ul>\n<li>Ceph 对象网关工作负载通常是吞吐密集型负载。但是其 bucket 索引池为 I&#x2F;O 密集型工作负载模式。应当将这个池存储在 SSD 设备上</li>\n<li>Ceph 对象网关为每个存储桶维护一个索引。Ceph 将这一索引存储在 RADOS 对象中。当存储桶存储数量巨大的对象时（超过 100000 个），索引性能会降低，因为只有一个 RADOS 对象参与所有索引操作。</li>\n<li>Ceph 可以在多个 RADOS 对象或分片中保存大型索引。可以在 ceph.conf 中设置 rgw_override_bucket_index_max_shards 配置参数来启用该功能。此参数的建议值是存储桶中预计对象数量除以 10000</li>\n<li>当索引变大，Ceph 通常需要重新划分存储桶。rgw_dynamic_resharding 配置控制该功能，默认为 true</li>\n</ul>\n<h3 id=\"7-CephFS-生产建议\"><a href=\"#7-CephFS-生产建议\" class=\"headerlink\" title=\"7).CephFS 生产建议\"></a>7).CephFS 生产建议</h3><ul>\n<li>存放目录结构和其他索引的元数据池可能会成为 CephFS 的瓶颈。因此，应该将 SSD 设备用于这个池</li>\n<li>每个 MDS 维护一个内存中缓存 ，用于索引节点等不同类型的项目。Ceph 使用 mds_cache_memory_limit 配置参数限制这一缓存的大小。其默认值为 1GB，可以在需要时调整，得不得超过系统总内存数</li>\n</ul>\n<h3 id=\"8-Monitor-生产建议\"><a href=\"#8-Monitor-生产建议\" class=\"headerlink\" title=\"8).Monitor 生产建议\"></a>8).Monitor 生产建议</h3><ul>\n<li>最好为每个 MON 一个独立的服务器&#x2F;虚拟机</li>\n<li>小型和中型集群，使用 10000RPM 的磁盘，大型集群使用 SSD</li>\n<li>CPU 使用方面：使用一个多核 CPU，最少 16G 内存，最好不要和 osd 存放在同一个服务器上</li>\n</ul>\n<h3 id=\"9-将-OSD-日志迁移到-SSD\"><a href=\"#9-将-OSD-日志迁移到-SSD\" class=\"headerlink\" title=\"9).将 OSD 日志迁移到 SSD\"></a>9).将 OSD 日志迁移到 SSD</h3><p>强烈建议生产中千万不要这么干，一定在集群初始化的时候就定制好</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#集群中设置标志位停止指定的osd使用</span>\nceph osd <span class=\"token builtin class-name\">set</span> noout\n\n<span class=\"token comment\">#停止osd的进程</span>\nsystemctl stop ceph-osd@3\n\n<span class=\"token comment\">#将所有的日志做刷盘处理，刷盘到osd中</span>\nceph-osd <span class=\"token parameter variable\">-i</span> <span class=\"token number\">3</span> --flush-journal\n\n<span class=\"token comment\">#删除该osd现有的日志</span>\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> /var/lib/ceph/osd/ceph-3/journal\n\n<span class=\"token comment\">#/dev/sdc1为SSD盘创建一个软连接</span>\n<span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /dev/sdc1 /var/lib/ceph/osd/ceph-3/journal\n\n<span class=\"token comment\">#刷出日志</span>\nceph-osd <span class=\"token parameter variable\">-i</span> <span class=\"token number\">3</span> <span class=\"token parameter variable\">--mkjournal</span>\n\n<span class=\"token comment\">#启动osd</span>\nsystemctl start ceph-osd@3\n\n<span class=\"token comment\">#移除标志位</span>\nceph osd <span class=\"token builtin class-name\">unset</span> noout<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"10-存储池中-PG-的计算方法\"><a href=\"#10-存储池中-PG-的计算方法\" class=\"headerlink\" title=\"10).存储池中 PG 的计算方法\"></a>10).存储池中 PG 的计算方法</h3><ul>\n<li><p>通常，计算一个池中应该有多少个归置组的计算方法 &#x3D; 100 * OSDs(个数) &#x2F; size(副本数)</p>\n</li>\n<li><p>一种比较通用的取值规则：</p>\n<ul>\n<li>少于 5 个 OSD 时可把 pg_num 设置为 128</li>\n<li>OSD 数量在 5 到 10 个时，可把 pg_num 设置为 512</li>\n<li>OSD 数量在 10 到 50 个时，可把 pg_num 设置为 4096</li>\n<li>OSD 数量大于 50 时，建议自行计算</li>\n</ul>\n</li>\n<li><p>自行计算 pg_num 聚会时的工具</p>\n<ul>\n<li>pgcalc：<a href=\"https://ceph.com/pgcalc/\">https://ceph.com/pgcalc/</a></li>\n<li>cephpgc：<a href=\"https://access.redhat.com/labs/cephpgc/\">https://access.redhat.com/labs/cephpgc/</a></li>\n</ul>\n</li>\n<li><p>注意：在实际的生产环境中我们很难去预估需要多少个 pool，每个 pool 所占用的数据大小的百分百。所以正常情况下需要在特定的情况选择动态扩缩容 pg 的大小</p>\n</li>\n</ul>\n<h3 id=\"11-PG-与-PGP\"><a href=\"#11-PG-与-PGP\" class=\"headerlink\" title=\"11).PG 与 PGP\"></a>11).PG 与 PGP</h3><blockquote>\n<p>通常而言，PG 与 PGP 是相同的当我们为一个池增加 PG 时，PG 会开始分裂，这个时候，OSD 上的数据开始移动到新的 PG，但总体而言，此时，数据还是在一个 OSD 的不同 PG 中迁移而我们一旦同时增加了 PGP，则 PG 开始在多个 OSD 上重平衡，这时会出现跨 OSD 的数据迁移</p>\n</blockquote>\n<ul>\n<li>ceph osd pool create poolName PgNum PgpNum</li>\n<li>当变动 pg 数量只是针对当前的特定池中的 osd 发生变动影响范围只是一个池的 pg 平衡</li>\n<li>正常情况下一个 osd 最多承载 100 个 pg</li>\n<li>当 pgp 发生大变动的时候会导致原本这个池中的 pg 变动导致池中 osd，过载或者有很大剩余性能，ceph 集群会将过大的性能均衡到各个性能使用小的 osd 上，这个时候就会发生数据的大规模迁移，大量的 i&#x2F;O 写入会占有网络带宽会严重影响使用中的 pg 性能导致阻塞发生。</li>\n<li>建议的做法是将 pg_num 直接设置为希望作为最终值的 PG 数量，而 PGP 的数量应当慢慢增加，以确保集群不会因为一段时间内的大量数据重平衡而导致的性能下降</li>\n</ul>\n<h3 id=\"12-Ceph-生产网络建议\"><a href=\"#12-Ceph-生产网络建议\" class=\"headerlink\" title=\"12).Ceph 生产网络建议\"></a>12).Ceph 生产网络建议</h3><ul>\n<li>尽可能使用 10Gb 网络带宽以上的万兆带宽(内网)</li>\n<li>尽可能使用不同的 cluster 网络和 public 网络</li>\n<li>做好必要的网络设备监控防止网络过载</li>\n</ul>\n<h3 id=\"13-OSD-和数据一致性校验\"><a href=\"#13-OSD-和数据一致性校验\" class=\"headerlink\" title=\"13).OSD 和数据一致性校验\"></a>13).OSD 和数据一致性校验</h3><blockquote>\n<p>清理会影响 ceph 集群性能，但建议不要禁用此功能，因为它能提供完数据的完整性</p>\n</blockquote>\n<ul>\n<li>清理：检查对象的存在性、校验和以及大小</li>\n<li>深度清理：检查对象的存在性和大小，重新计算并验证对象的校验和。(最好不开严重影响性能)</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#清理调优参数</span>\nosd_scrub_begin_hour <span class=\"token operator\">=</span>                    <span class=\"token comment\">#取值范围0-24</span>\nosd_scrub_end_hour <span class=\"token operator\">=</span> end_hbegin_hour our  <span class=\"token comment\">#取值范围0-24</span>\nosd_scrub_load_threshold                  <span class=\"token comment\">#当系统负载低于多少的时候可以清理，默认为0.5</span>\nosd_scrub_min_interval                    <span class=\"token comment\">#多久清理一次，默认是一天一次（前提是系统负载低于上一个参数的设定）</span>\nosd_scrub_interval_randomize_ratio        <span class=\"token comment\">#在清理的时候，随机延迟的值，默认是0.5</span>\nosd_scrub_max_interval                    <span class=\"token comment\">#清理的最大间隔时间，默认是一周（如果一周内没清理过，这次就必须清理，不管负载是多少）</span>\nosd_scrub_priority                        <span class=\"token comment\">#清理的优先级，默认是5</span>\nosd_deep_scrub_interal                    <span class=\"token comment\">#深度清理的时间间隔，默认是一周</span>\nosd_scrub_sleep                           <span class=\"token comment\">#当有磁盘读取时，则暂停清理，增加此值可减缓清理的速度以降低对客户端的影响，默认为0,范围0-1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#显示最近发生的清理和深度清理</span>\nceph pg dump all  <span class=\"token comment\"># 查看LAST_SCRUB和LAST_DEEP_SCRUB</span>\n<span class=\"token comment\">#-将清理调度到特定的pg</span>\nceph pg scrub pg-id\n<span class=\"token comment\">#将深度清理调度到特定的pg</span>\nceph pg deep-scrub pg-id\n<span class=\"token comment\">#为设定的池设定清理参数</span>\nceph osd pool <span class=\"token builtin class-name\">set</span> <span class=\"token operator\">&lt;</span>pool-name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>parameter<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>value<span class=\"token operator\">></span>\n    noscrub <span class=\"token comment\"># 不清理，默认为false</span>\n    nodeep-scrub <span class=\"token comment\"># 不深度清理，默认为false</span>\n    scrub_min_interval <span class=\"token comment\"># 如果设置为0，则应用全局配置osd_scrub_min_interval</span>\n    scrub_max_interval <span class=\"token comment\"># 如果设置为0，则应用全局配置osd_scrub_max_interval</span>\n    deep_scrub_interval <span class=\"token comment\"># 如果设置为0，则应用全局配置osd_scrub_interval</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"14-快照的生产建议\"><a href=\"#14-快照的生产建议\" class=\"headerlink\" title=\"14).快照的生产建议\"></a>14).快照的生产建议</h3><ul>\n<li>快照在池级别和 RBD 级别上提供。当快照被移除时，ceph 会以异步操作的形式删除快照数据，称为快照修剪进程</li>\n<li>为减轻快照修剪进程会影响集群总体性能。可以通过配置<code>osd_snap_trim_sleep</code>来在有客户端读写操作的时候暂停修剪，参数的值范围是<code>0</code>到<code>1</code></li>\n<li>快照修剪的优先级通过使用<code>osd_snap_trim_priority</code>参数控制，默认为<code>5</code></li>\n</ul>\n<h3 id=\"15-保护数据和-osd\"><a href=\"#15-保护数据和-osd\" class=\"headerlink\" title=\"15).保护数据和 osd\"></a>15).保护数据和 osd</h3><ul>\n<li><p>需要控制回填和恢复操作，以限制这些操作的影响</p>\n</li>\n<li><p>回填发生于新的 osd 加入集群时，或者 osd 死机并且 ceph 将其 pg 分配到其他 osd 时。在这种场景中，ceph 必须要在可用的 osd 之间复制对象副本</p>\n</li>\n<li><p>恢复发生于新的 osd 已有数据时，如出现短暂停机。在这种情形下，ceph 会简单的重放 pg 日志</p>\n<ul>\n<li>管理回填和恢复操作的配置项</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#用于限制每个osd上用于回填的并发操作数，默认为1</span>\nosd_max_backfills\n\n<span class=\"token comment\">#用于限制每个osd上用于恢复的并发操作数，默认为3</span>\nosd_recovery_max_active\n\n<span class=\"token comment\">#恢复操作的优先级，默认为3</span>\nosd_recovery_op_priority<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"16-OSD-数据存储后端\"><a href=\"#16-OSD-数据存储后端\" class=\"headerlink\" title=\"16).OSD 数据存储后端\"></a>16).OSD 数据存储后端</h3><blockquote>\n<p>BlueStore 管理一个，两个或（在某些情况下）三个存储设备。在最简单的情况下，BlueStore 使用单个（主）存储设备。存储设备通常作为一个整体使用，BlueStore 直接占用完整设备。该主设备通常由数据目录中的块符号链接标识。数据目录挂载成一个 tmpfs，它将填充（在启动时或 ceph-volume 激活它时）所有常用的 OSD 文件，其中包含有关 OSD 的信息，例如：其标识符，它所属的集群，以及它的私钥。还可以使用两个额外的设备部署 BlueStore</p>\n</blockquote>\n<ul>\n<li>WAL 设备（在数据目录中标识为 block.wal）可用于 BlueStore 的内部日志或预写日志。只有设备比主设备快（例如，当它在 SSD 上并且主设备是 HDD 时），使用 WAL 设备是有用的。</li>\n<li>数据库设备（在数据目录中标识为 block.db）可用于存储 BlueStore 的内部元数据。 BlueStore（或者更确切地说，嵌入式 RocksDB）将在数据库设备上放置尽可能多的元数据以提高性能。如果数据库设备填满，元数据将写到主设备。同样，数据库设备要比主设备更快，则提供数据库设备是有帮助的。</li>\n<li>如果只有少量快速存储可用（例如，小于 1GB），我们建议将其用作 WAL 设备。如果还有更多，配置数据库设备会更有意义。 BlueStore 日志将始终放在可用的最快设备上，因此使用数据库设备将提供与 WAL 设备相同的优势，同时还允许在其中存储其他元数据。</li>\n<li>正常 L 版本推荐使用 filestore，M 版本可以考虑使用 bluestore</li>\n<li>推荐优化文章：<a href=\"https://www.cnblogs.com/luxiaodai/p/10006036.html#_lab2_1_9\">https://www.cnblogs.com/luxiaodai/p/10006036.html#_lab2_1_9</a></li>\n</ul>\n<h3 id=\"17-关于性能测试\"><a href=\"#17-关于性能测试\" class=\"headerlink\" title=\"17).关于性能测试\"></a>17).关于性能测试</h3><ul>\n<li>推荐使用 fio 参考阿里云文档：<a href=\"https://help.aliyun.com/document_detail/95501.html?spm=a2c4g.11174283.6.659.38b44da2KZr2Sn\">https://help.aliyun.com/document_detail&#x2F;95501.html?spm&#x3D;a2c4g.11174283.6.659.38b44da2KZr2Sn</a></li>\n<li>dd</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span> <span class=\"token operator\">></span> /proc/sys/vm/drop_caches\n<span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/dev/zero <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>/var/lib/ceph/osd/ceph-0/test.img <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>4M <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">1024</span> <span class=\"token assign-left variable\">oflag</span><span class=\"token operator\">=</span>direct\n<span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/var/lib/ceph/osd/ceph-0/test.img <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>/dev/null <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>4M <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">1024</span> <span class=\"token assign-left variable\">oflag</span><span class=\"token operator\">=</span>direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>rados bench 性能测试</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rados bench <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">&lt;</span>pool_name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>seconds<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>write<span class=\"token operator\">|</span><span class=\"token function\">seq</span><span class=\"token operator\">|</span>rand<span class=\"token operator\">></span> <span class=\"token parameter variable\">-b</span> <span class=\"token operator\">&lt;</span>block size<span class=\"token operator\">></span> <span class=\"token parameter variable\">-t</span> --no-cleanup\n    pool_name 测试所针对的池\n    seconds 测试所持续的时间，以秒为单位\n    <span class=\"token operator\">&lt;</span>write<span class=\"token operator\">|</span><span class=\"token function\">seq</span><span class=\"token operator\">|</span>rand<span class=\"token operator\">></span> 操作模式，分别是写、顺序读、随机读\n    <span class=\"token parameter variable\">-b</span> <span class=\"token operator\">&lt;</span>block_size<span class=\"token operator\">></span> 块大小，默认是4M\n    <span class=\"token parameter variable\">-t</span> 读/写的并行数，默认为16\n    --no-cleanup 表示测试完成后不删除测试用的数据。在做读测试之前，需要使用该参数来运行一遍写测试来产生测试数据，在全部测试完成以后，可以行rados <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">&lt;</span>pool_name<span class=\"token operator\">></span> cleanup来清理所有测试数据\n\n<span class=\"token comment\">#示例：</span>\nrados bench <span class=\"token parameter variable\">-p</span> rbd <span class=\"token number\">10</span> <span class=\"token function\">write</span> --no-cleanup\nrados bench <span class=\"token parameter variable\">-p</span> rbd <span class=\"token number\">10</span> <span class=\"token function\">seq</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>rbd bench 性能测试</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rbd bench <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">&lt;</span>pool_name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>image_name<span class=\"token operator\">></span> --io-type <span class=\"token operator\">&lt;</span>write<span class=\"token operator\">|</span>read<span class=\"token operator\">></span> --io-size <span class=\"token operator\">&lt;</span>size<span class=\"token operator\">></span> --io-threads <span class=\"token operator\">&lt;</span>num<span class=\"token operator\">></span> --io-total <span class=\"token operator\">&lt;</span>size<span class=\"token operator\">></span> --io-pattern <span class=\"token operator\">&lt;</span>seq<span class=\"token operator\">|</span>rand<span class=\"token operator\">></span>\n    --io-type 测试类型，读/写\n    --io-size 字节数，默认4096\n    --io-threads 线程数，默认16\n    --io-total  读/写的总大小，默认1GB\n    --io-pattern  读/写的方式，顺序还是随机\n\n<span class=\"token comment\">#示例：</span>\nhttps://edenmal.moe/post/2017/Ceph-rbd-bench-Commands/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-设置集群的标志\"><a href=\"#3-设置集群的标志\" class=\"headerlink\" title=\"3.设置集群的标志\"></a>3.设置集群的标志</h2><p><strong>flag 操作</strong></p>\n<ul>\n<li><p>只能对整个集群操作，不能针对单个 osd</p>\n<ul>\n<li>ceph osd set</li>\n<li>ceph osd unset</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#示例：</span>\nceph osd <span class=\"token builtin class-name\">set</span> nodown\nceph osd <span class=\"token builtin class-name\">unset</span> nodown\nceph <span class=\"token parameter variable\">-s</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">标志名称</th>\n<th align=\"left\">含义用法详解</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">noup</td>\n<td align=\"left\">OSD 启动时，会将自己在 MON 上标识为 UP 状态，设置该标志位，则 OSD 不会被自动标识为 up 状态</td>\n</tr>\n<tr>\n<td align=\"left\">nodown</td>\n<td align=\"left\">OSD 停止时，MON 会将 OSD 标识为 down 状态，设置该标志位，则 MON 不会将停止的 OSD 标识为 down 状态，设置 noup 和 nodown 可以防止网络抖动</td>\n</tr>\n<tr>\n<td align=\"left\">noout</td>\n<td align=\"left\">设置该标志位，则 mon 不会从 crush 映射中删除任何 OSD。对 OSD 作维护时，可设置该标志位，以防止 CRUSH 在 OSD 停止时自动重平衡数据。OSD 重新启动时，需要清除该 flag</td>\n</tr>\n<tr>\n<td align=\"left\">noin</td>\n<td align=\"left\">设置该标志位，可以防止数据被自动分配到 OSD 上</td>\n</tr>\n<tr>\n<td align=\"left\">norecover</td>\n<td align=\"left\">设置该 flag，禁止任何集群恢复操作。在执行维护和停机时，可设置该 flag</td>\n</tr>\n<tr>\n<td align=\"left\">nobackfill</td>\n<td align=\"left\">禁止数据回填</td>\n</tr>\n<tr>\n<td align=\"left\">noscrub</td>\n<td align=\"left\">禁止清理操作。清理 PG 会在短期内影响 OSD 的操作。在低带宽集群中，清理期间如果 OSD 的速度过慢，则会被标记为 down。可以该标记来防止这种情况发生</td>\n</tr>\n<tr>\n<td align=\"left\">nodeep-scrub</td>\n<td align=\"left\">禁止深度清理</td>\n</tr>\n<tr>\n<td align=\"left\">norebalance</td>\n<td align=\"left\">禁止重平衡数据。在执行集群维护或者停机时，可以使用该 flag</td>\n</tr>\n<tr>\n<td align=\"left\">pause</td>\n<td align=\"left\">设置该标志位，则集群停止读写，但不影响 osd 自检</td>\n</tr>\n<tr>\n<td align=\"left\">full</td>\n<td align=\"left\">标记集群已满，将拒绝任何数据写入，但可读</td>\n</tr>\n</tbody></table>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p><a href=\"https://poph163.com/category/%e5%88%86%e5%b8%83%e5%bc%8f%e5%ad%98%e5%82%a8/\">https://poph163.com/category/分布式存储/</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover_type":"img","excerpt":"<h1 id=\"一、Ceph-简介\"><a href=\"#一、Ceph-简介\" class=\"headerlink\" title=\"一、Ceph 简介\"></a>一、Ceph 简介</h1><blockquote>\n<p>一个 Ceph 存储集群需要至少一个 Ceph 监视器、Ceph 管理器和 Ceph OSD(对象存储守护进程)。在运行 Ceph 文件系统客户端时，也需要 Ceph 元数据服务器。</p>\n</blockquote>","more":"<ul>\n<li><p><strong>Monitors</strong>:</p>\n<ul>\n<li>Ceph 监视器(<code>ceph-mon</code>)维护着展示集群状态的各种图表，包括监视器图、管理器图、OSD 图、MDS 图和 CRUSH 图。这些图是 Ceph 守护进程相互协调所必需的关键集群状态。</li>\n<li>监视器还负责管理守护进程和客户端之间的身份验证。为了实现冗余和高可用性，通常需要至少三个监视器。</li>\n</ul>\n</li>\n<li><p><strong>Managers</strong>: <a href=\"https://docs.ceph.com/en/latest/glossary/#term-Ceph-Manager\">Ceph Manager</a>守护程序(<code>ceph-mgr</code>)</p>\n<ul>\n<li>负责跟踪运行时指标和 Ceph 群集的当前状态，包括存储利用率、当前性能指标和系统负载。</li>\n<li>Ceph Manager 守护程序还托管基于 python 的模块来管理和公开 Ceph 群集信息，包括基于 Web 的<a href=\"https://docs.ceph.com/en/latest/mgr/dashboard/#mgr-dashboard\">Ceph 仪表板和</a> <a href=\"https://docs.ceph.com/en/latest/mgr/restful\">REST API</a>。高可用性通常需要至少两个管理器。</li>\n</ul>\n</li>\n<li><p><strong>OSDs</strong>: <a href=\"https://docs.ceph.com/en/latest/glossary/#term-Ceph-OSD\">Ceph OSD</a> (object storage daemon, <code>ceph-osd</code>)存储数据，处理数据复制，恢复，重新平衡，并提供一些监视信息到 Ceph 监视器和管理器,通过检查其他 Ceph OSD 守护进程检测信号.冗余和高可用性通常需要至少 3 个 Ceph OSD。</p>\n</li>\n<li><p><strong>MDSs</strong>: <a href=\"https://docs.ceph.com/en/latest/glossary/#term-Ceph-Metadata-Server\">Ceph 元数据服务器</a>（MDS, <code>ceph-mds</code>）代表<a href=\"https://docs.ceph.com/en/latest/glossary/#term-Ceph-File-System\">Ceph 文件系统</a>存储元数据（即 Ceph 块设备和 Ceph 对象存储不使用 MDS）。Ceph 元数据服务器允许 POSIX 文件系统用户执行基本命令 (如<code>ls</code>, <code>find</code>, <code>etc</code>等)，而不会给 Ceph 存储群集带来巨大负担。</p>\n</li>\n</ul>\n<blockquote>\n<p>Ceph 将数据存储为逻辑存储池中的对象。使用<a href=\"https://docs.ceph.com/en/latest/glossary/#term-CRUSH\">CRUSH 算法</a>，Ceph 计算哪个放置组应包含对象，并进一步计算哪个 Ceph OSD 守护程序应存储该放置组。CRUSH 算法使 Ceph 存储群集能够动态扩展、重新平衡和恢复。</p>\n</blockquote>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/TWXPPk7hE1D4AGsHg7CIMg\">https://mp.weixin.qq.com/s/TWXPPk7hE1D4AGsHg7CIMg</a></li>\n<li><a href=\"https://www.jianshu.com/p/cc3ece850433\">https://www.jianshu.com/p/cc3ece850433</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/QXRdyYKSKIa1aLNI8dOGcQ\">https://mp.weixin.qq.com/s/QXRdyYKSKIa1aLNI8dOGcQ</a></li>\n<li><a href=\"https://blog.csdn.net/xiaoquqi/article/details/43055031\">https://blog.csdn.net/xiaoquqi/article/details/43055031</a></li>\n</ul>\n<h1 id=\"二、Cephadm-部署集群\"><a href=\"#二、Cephadm-部署集群\" class=\"headerlink\" title=\"二、Cephadm 部署集群\"></a>二、Cephadm 部署集群</h1><p>简单，简述，详细参考：<a href=\"https://docs.ceph.com/en/latest/cephadm/#cephadm\">https://docs.ceph.com/en/latest/cephadm/#cephadm</a></p>\n<h2 id=\"1-环境规划\"><a href=\"#1-环境规划\" class=\"headerlink\" title=\"1.环境规划\"></a>1.环境规划</h2><table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>内网 IP</th>\n<th>操作系统</th>\n<th>角色</th>\n<th>配置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ceph1</td>\n<td>192.168.200.128</td>\n<td>Debian11</td>\n<td>cephadm,mon,mgr,osd</td>\n<td>2C,2G,20G 系统盘，20G 数据盘</td>\n</tr>\n<tr>\n<td>ceph2</td>\n<td>192.168.200.131</td>\n<td>Debian11</td>\n<td>cephadm,mon</td>\n<td>2C,2G,20G 系统盘，20G 数据盘</td>\n</tr>\n<tr>\n<td>ceph3</td>\n<td>192.168.200.132</td>\n<td>Debian11</td>\n<td>cephadm,mon</td>\n<td>2C,2G,20G 系统盘，20G 数据盘</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>典型的 Ceph 集群有三个或五个监视器守护程序，分布在不同的主机上。如果群集中有五个或更多节点，我们建议部署五个监视器。</p>\n</blockquote>\n<p>当 Ceph 知道 mon 应该使用什么 IP 子网时，它可以随着群集的增长（或收缩）自动部署和缩放 mon。默认情况下，Ceph 假定其他 mon 使用与第一个 mon 的 IP 相同的子网。</p>\n<p>在单个子网的情况下，如果向集群中添加主机，默认最多只会添加 5 个 mon 如果有特定的 IP 子网给 mon 使用，可以使用 CIDR 格式配置该子网。</p>\n<h2 id=\"2-前置-所有节点\"><a href=\"#2-前置-所有节点\" class=\"headerlink\" title=\"2.前置(所有节点)\"></a>2.前置(所有节点)</h2><blockquote>\n<p><a href=\"https://docs.ceph.com/en/pacific/cephadm/install/\">https://docs.ceph.com/en/pacific/cephadm/install/</a></p>\n</blockquote>\n<p>各节点配置 hosts</p>\n<pre class=\"line-numbers language-conf\" data-language=\"conf\"><code class=\"language-conf\">10.200.10.31 ceph-pro-1-10-200-10-31\n10.200.10.32 ceph-pro-2-10-200-10-32\n10.200.10.33 ceph-pro-3-10-200-10-33\n10.200.10.34 ceph-pro-4-10-200-10-34\n10.200.10.35 ceph-pro-5-10-200-10-35<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-安装-CEPHADM-所有节点\"><a href=\"#3-安装-CEPHADM-所有节点\" class=\"headerlink\" title=\"3.安装 CEPHADM(所有节点)\"></a>3.安装 CEPHADM(所有节点)</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#下载cephadm</span>\n<span class=\"token function\">curl</span> --remote-name <span class=\"token parameter variable\">--location</span> https://hub.shutcm.cf/ceph/ceph/raw/pacific/src/cephadm/cephadm\n<span class=\"token function\">chmod</span> +x cephadm\n<span class=\"token comment\">#设置源</span>\n./cephadm add-repo <span class=\"token parameter variable\">--release</span> pacific\n<span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s#https://download.ceph.com#https://mirrors.aliyun.com/ceph#g'</span> /etc/apt/sources.list.d/ceph.list\n<span class=\"token function\">apt-get</span> update\n<span class=\"token comment\">#安装cephadm命令</span>\n./cephadm <span class=\"token function\">install</span>\n<span class=\"token comment\">#确认在PATH中</span>\n<span class=\"token function\">which</span> cephadm\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-fr</span> cephadm\n<span class=\"token comment\">#安装ceph命令</span>\ncephadm <span class=\"token function\">install</span> ceph-common<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-引导新群集-第一台\"><a href=\"#4-引导新群集-第一台\" class=\"headerlink\" title=\"4.引导新群集(第一台)\"></a>4.引导新群集(第一台)</h2><blockquote>\n<p>创建新的 Ceph 集群的第一步是在 Ceph 集群的第一台主机上运行 cephadm bootstrap 命令，运行此命令的操作将创建 Ceph 集群的第一个“监视程序守护程序”。</p>\n</blockquote>\n<p>而该监视程序守护程序需要一个 IP 地址，必须将 Ceph 集群的第一个主机的 IP 地址传递给 ceph bootstrap 命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cephadm bootstrap --mon-ip <span class=\"token number\">10.200</span>.10.31\n<span class=\"token comment\">#设置addr</span>\n<span class=\"token comment\">#ceph orch host set-addr ceph1 192.168.200.128</span>\n<span class=\"token comment\">#检查</span>\nceph orch <span class=\"token function\">host</span> <span class=\"token function\">ls</span>\nceph <span class=\"token parameter variable\">-s</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此命令将会：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1) 在本地主机上为新集群创建监视和管理器守护程序\n2) 为Ceph集群生成一个新的SSH密钥，并将其添加到root用户的&#x2F;root&#x2F;.ssh&#x2F;authorized_keys文件中\n3) 将最小配置文件写入&#x2F;etc&#x2F;ceph&#x2F;ceph.conf\n4) 将client.admin管理特权密钥写入&#x2F;etc&#x2F;ceph&#x2F;ceph.client.admin.keyring\n5) 将公钥写入&#x2F;etc&#x2F;ceph&#x2F;ceph.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-向群集添加主机\"><a href=\"#5-向群集添加主机\" class=\"headerlink\" title=\"5.向群集添加主机\"></a>5.向群集添加主机</h2><blockquote>\n<p>在解析主机名等方面，cephadm 的要求非常低, 通过以下命令可以明确 IP 与主机名之间的解析：ceph orch host add</p>\n</blockquote>\n<p><strong>注意</strong>：添加主机时会自动创建 mon 服务，先按照 禁用监视器自动部署( 5.4 (1) ) 或 调整默认值监视器数量 (5.2 节)，再添加主机。</p>\n<p>在新主机 root 用户的 authorized_keys 文件中安装集群的公共 SSH 密钥</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#ssh-copy-id -f -i /etc/ceph/ceph.pub root@*&lt;new-host>*</span>\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@ceph-pro-1-10-200-10-31\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@ceph-pro-2-10-200-10-32\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@ceph-pro-3-10-200-10-33\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@ceph-pro-4-10-200-10-34\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@ceph-pro-5-10-200-10-35<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>添加方式两种：</p>\n<ul>\n<li>命令方式添加</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#ceph orch host add *&lt;newhost>* [*&lt;ip>*] [*&lt;label1> ...*]</span>\nceph orch <span class=\"token function\">host</span> <span class=\"token function\">add</span> ceph-pro-2-10-200-10-32 <span class=\"token number\">10.200</span>.10.32 <span class=\"token parameter variable\">--labels</span> _admin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>yaml 方式添加</li>\n</ul>\n<p><code>host.yml</code></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">service_type</span><span class=\"token punctuation\">:</span> host\n<span class=\"token key atrule\">addr</span><span class=\"token punctuation\">:</span> 192.168.200.131\n<span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> ceph2\n<span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> mon\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">service_type</span><span class=\"token punctuation\">:</span> host\n<span class=\"token key atrule\">addr</span><span class=\"token punctuation\">:</span> 192.168.200.132\n<span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> ceph3\n<span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> mon<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-检查状态\"><a href=\"#3-检查状态\" class=\"headerlink\" title=\"3.检查状态\"></a>3.检查状态</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph orch <span class=\"token function\">host</span> <span class=\"token function\">ls</span>\nceph <span class=\"token parameter variable\">-s</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"6-部署-OSD\"><a href=\"#6-部署-OSD\" class=\"headerlink\" title=\"6.部署 OSD\"></a>6.部署 OSD</h2><p><strong><a href=\"https://docs.ceph.com/en/pacific/cephadm/services/osd/#\">https://docs.ceph.com/en/pacific/cephadm/services/osd/#</a></strong></p>\n<blockquote>\n<p>当有新的 osd 加入集群或者移除了 osd，就会把状态上报给 Monitor，Monitor 知道了 osd map 发生了变化就会触发 rebalancing，确保 pg 能够平滑的移动到各个 osd 上，以 pg 为整体进行数据重平衡，重平衡的过程中可能会影响性能，一次性加入的 osd 越多，数据 rebalancing 就越频繁。</p>\n</blockquote>\n<blockquote>\n<p>当在做 rebalance 的时候，每个 osd 都会按照 osd_max_backfills 指定数量的线程来同步，如果该数值比较大，同步会比较快，但是会影响部分性能；为了避免 rebalance 带来的性能影响，可以对 rebalance 进行关闭；添加完 osd 后再打开。</p>\n</blockquote>\n<h3 id=\"1-rebalance-关闭\"><a href=\"#1-rebalance-关闭\" class=\"headerlink\" title=\"1).rebalance 关闭\"></a>1).rebalance 关闭</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 设置标志位</span>\nceph osd <span class=\"token builtin class-name\">set</span> norebalance\n\n<span class=\"token comment\"># 关闭数据填充</span>\nceph osd <span class=\"token builtin class-name\">set</span> nobackfill\n\n<span class=\"token comment\"># 查看集群状态</span>\nceph <span class=\"token parameter variable\">-s</span>\n  cluster:\n    id:     87cdd3b2-987b-11eb-989e-000c29b12ae1\n    health: HEALTH_WARN\n            nobackfill,norebalance flag<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">set</span>  <span class=\"token comment\"># 有此信息</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-rebalance-开启\"><a href=\"#2-rebalance-开启\" class=\"headerlink\" title=\"2).rebalance 开启\"></a>2).rebalance 开启</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#开启数据填充</span>\nceph osd <span class=\"token builtin class-name\">unset</span> nobackfill\n<span class=\"token comment\">#开启rebalance</span>\nceph osd <span class=\"token builtin class-name\">unset</span> norebalance\n<span class=\"token comment\"># 查看集群状态</span>\nceph <span class=\"token parameter variable\">-s</span>\n  cluster:\n    id:     87cdd3b2-987b-11eb-989e-000c29b12ae1\n    health: HEALTH_OK<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-列出节点可用设备\"><a href=\"#3-列出节点可用设备\" class=\"headerlink\" title=\"3).列出节点可用设备\"></a>3).列出节点可用设备</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#ceph orch device ls [--wide]</span>\nceph orch device <span class=\"token function\">ls</span> <span class=\"token parameter variable\">--wide</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果满足以下所有条件，则认为存储设备可用</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1) 设备必须没有分区\n2) 设备不得具有任何LVM状态\n3) 设备不得挂载\n4) 设备不得包含文件系统\n5) 设备不得包含Ceph BlueStore OSD\n6) 设备必须大于5 GB<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-创建-osd\"><a href=\"#4-创建-osd\" class=\"headerlink\" title=\"4).创建 osd\"></a>4).创建 osd</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#需要至少 3 个 Ceph OSD 以实现冗余和高可用性</span>\nceph orch daemon <span class=\"token function\">add</span> osd ceph-pro-1-10-200-10-31:/dev/sdb\nceph orch daemon <span class=\"token function\">add</span> osd ceph-pro-2-10-200-10-32:/dev/sdb\nceph orch daemon <span class=\"token function\">add</span> osd ceph-pro-3-10-200-10-33:/dev/sdb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"7-集群高可用\"><a href=\"#7-集群高可用\" class=\"headerlink\" title=\"7.集群高可用\"></a>7.集群高可用</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#需要至少三个监视器才能实现冗余和高可用性</span>\nceph orch apply mon <span class=\"token number\">3</span>\n<span class=\"token comment\"># 部署mon到指定节点</span>\nceph orch <span class=\"token function\">host</span> label <span class=\"token function\">add</span> *<span class=\"token operator\">&lt;</span>host<span class=\"token operator\">></span>* mon\n<span class=\"token comment\">#至少需要两个管理器才能实现高可用性</span>\nceph orch apply mgr <span class=\"token number\">3</span>\n<span class=\"token comment\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"8-CephFS-部署\"><a href=\"#8-CephFS-部署\" class=\"headerlink\" title=\"8.CephFS 部署\"></a>8.CephFS 部署</h2><h2 id=\"9-部署-RGW\"><a href=\"#9-部署-RGW\" class=\"headerlink\" title=\"9.部署 RGW\"></a>9.部署 RGW</h2><p><a href=\"https://docs.ceph.com/en/pacific/cephadm/services/rgw/\">https://docs.ceph.com/en/pacific/cephadm/services/rgw/</a></p>\n<h1 id=\"三、运维\"><a href=\"#三、运维\" class=\"headerlink\" title=\"三、运维\"></a>三、运维</h1><p><a href=\"https://www.cnblogs.com/royaljames/p/9807532.html\">https://www.cnblogs.com/royaljames/p/9807532.html</a></p>\n<h2 id=\"1-向群集添加主机\"><a href=\"#1-向群集添加主机\" class=\"headerlink\" title=\"1.向群集添加主机\"></a>1.向群集添加主机</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#1.在新主机的根用户文件中安装群集的公共 SSH 密钥</span>\nssh-copy-id <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-i</span> /etc/ceph/ceph.pub root@host2\n<span class=\"token comment\">#2.告诉 Ceph 新节点是群集的一部分：</span>\nceph orch <span class=\"token function\">host</span> <span class=\"token function\">add</span> host2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-部署其他监视器-monitor\"><a href=\"#2-部署其他监视器-monitor\" class=\"headerlink\" title=\"2.部署其他监视器(monitor)\"></a>2.部署其他监视器(monitor)</h2><blockquote>\n<p>典型的 Ceph 群集具有分布在不同主机的三个或五个监视器守护程序。如果群集中有五个或更多节点，我们建议部署五个监视器。</p>\n</blockquote>\n<p>当 Ceph 知道监视器应该使用什么 IP 子网时，它可以随着群集的增长（或收缩）自动部署和缩放监视器。默认情况下，Ceph 假定其他监视器应使用与第一个监视器的 IP 相同的子网。</p>\n<p>如果您的 Ceph 监视器（或整个群集）住在单个子网中，则在向群集添加新主机时，默认情况下，cephadm 会自动添加多达 5 个监视器。无需进一步步骤。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#如果有特定的 IP 子网应该由监视器使用，您可以用CIDR格式（例如 ） 配置该子网，Cephadm 仅在配置的子网中配置了 IP 的主机上部署新的监视器守护程序。</span>\nceph config <span class=\"token builtin class-name\">set</span> mon public_network <span class=\"token number\">10.1</span>.2.0/24\n<span class=\"token comment\">#如果要调整 5 个监视器的默认值：</span>\nceph orch apply mon *<span class=\"token operator\">&lt;</span>number-of-monitors<span class=\"token operator\">></span>*\n<span class=\"token comment\">#若要在一组特定的主机上部署监视器，请确保在此列表中包括第一个（引导）主机。</span>\nceph orch apply mon *<span class=\"token operator\">&lt;</span>host1,host2,host3,<span class=\"token punctuation\">..</span>.<span class=\"token operator\">></span>*\n<span class=\"token comment\">#您可以通过使用主机标签来控制监视器运行的主机。要将标签设置为相应的主机，请：mon</span>\nceph orch <span class=\"token function\">host</span> label <span class=\"token function\">add</span> *<span class=\"token operator\">&lt;</span>hostname<span class=\"token operator\">></span>* mon\n<span class=\"token comment\">#要查看当前主机和标签：</span>\nceph orch <span class=\"token function\">host</span> <span class=\"token function\">ls</span>\n<span class=\"token comment\">#例如：</span>\n<span class=\"token comment\"># ceph orch host label add host1 mon</span>\n<span class=\"token comment\"># ceph orch host label add host2 mon</span>\n<span class=\"token comment\"># ceph orch host label add host3 mon</span>\n<span class=\"token comment\"># ceph orch host ls</span>\nHOST   ADDR   LABELS  STATUS\nhost1         mon\nhost2         mon\nhost3         mon\nhost4\nhost5\n<span class=\"token comment\">#告诉 cephadm 根据标签部署监视器：</span>\nceph orch apply mon label:mon\n<span class=\"token comment\">#您可以显式指定每个监视器的 IP 地址或 CIDR 网络，并控制其放置位置。要禁用自动监视器部署：</span>\nceph orch apply mon <span class=\"token parameter variable\">--unmanaged</span>\n<span class=\"token comment\">#要部署每个附加监视器：</span>\nceph orch daemon <span class=\"token function\">add</span> mon *<span class=\"token operator\">&lt;</span>host1:ip-or-network<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>host1:ip-or-network-<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>*\n<span class=\"token comment\">#例如，要在使用 IP 地址上部署第二个监视器，在网络上部署第三个监视器</span>\n<span class=\"token comment\"># ceph orch apply mon --unmanaged</span>\n<span class=\"token comment\"># ceph orch daemon add mon newhost1:10.1.2.123</span>\n<span class=\"token comment\"># ceph orch daemon add mon newhost2:10.1.2.0/24</span>\n\n<span class=\"token comment\">#若要确保监视器应用于这三台主机中的每一个主机，请运行以下命令：</span>\nceph orch apply mon <span class=\"token string\">\"host1,host2,host3\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"使用-YAML-规范\"><a href=\"#使用-YAML-规范\" class=\"headerlink\" title=\"使用 YAML 规范\"></a>使用 YAML 规范</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph orch apply <span class=\"token parameter variable\">-i</span> file.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service_type</span><span class=\"token punctuation\">:</span> mon\n<span class=\"token key atrule\">placement</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> host1\n    <span class=\"token punctuation\">-</span> host2\n    <span class=\"token punctuation\">-</span> host3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-部署-OSD\"><a href=\"#3-部署-OSD\" class=\"headerlink\" title=\"3.部署 OSD\"></a>3.部署 OSD</h2><h3 id=\"1-所有群集主机上的存储设备清单可以显示\"><a href=\"#1-所有群集主机上的存储设备清单可以显示\" class=\"headerlink\" title=\"1.所有群集主机上的存储设备清单可以显示\"></a>1.所有群集主机上的存储设备清单可以显示</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph orch device <span class=\"token function\">ls</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>设备必须没有分区。</li>\n<li>设备不得具有任何 LVM 状态。</li>\n<li>不得安装设备。</li>\n<li>设备不能包含文件系统。</li>\n<li>设备不得包含 Ceph BlueStore OSD。</li>\n<li>设备必须大于 5 GB。</li>\n</ul>\n<h3 id=\"2-创建新-OSD-的方法\"><a href=\"#2-创建新-OSD-的方法\" class=\"headerlink\" title=\"2.创建新 OSD 的方法\"></a>2.创建新 OSD 的方法</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1.告诉 Ceph 使用任何可用和未使用的存储设备：</span>\nceph orch apply osd --all-available-devices\n<span class=\"token comment\"># 2.从特定主机上的特定设备创建 OSD：ceph orch daemon add osd *&lt;host>*:*&lt;device-path>*</span>\nceph orch daemon <span class=\"token function\">add</span> osd host1:/dev/sdb\n<span class=\"token comment\"># 3.使用OSD 服务规范描述设备，根据设备属性、此类设备类型（SSD 或 HDD）、设备型号名称、大小或设备存在的主机使用：</span>\nceph orch apply osd <span class=\"token parameter variable\">-i</span> spec.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-部署-MDS\"><a href=\"#4-部署-MDS\" class=\"headerlink\" title=\"4.部署 MDS\"></a>4.部署 MDS</h2><p>使用 CephFS 文件系统需要一个或多个 MDS 守护程序。如果使用较新的接口创建新文件系统，则会自动创建这些接口。有关详细信息，请参阅 FS 卷和子卷。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph orch apply mds *<span class=\"token operator\">&lt;</span>fs-name<span class=\"token operator\">></span>* <span class=\"token parameter variable\">--placement</span><span class=\"token operator\">=</span><span class=\"token string\">\"*&lt;num-daemons>* [*&lt;host1>* ...]\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"5-部署-RGW\"><a href=\"#5-部署-RGW\" class=\"headerlink\" title=\"5.部署 RGW\"></a>5.部署 RGW</h2><h2 id=\"6-管理-Monitor-map\"><a href=\"#6-管理-Monitor-map\" class=\"headerlink\" title=\"6.管理 Monitor map\"></a>6.管理 Monitor map</h2><h3 id=\"1-多-Monitor-同步机制\"><a href=\"#1-多-Monitor-同步机制\" class=\"headerlink\" title=\"1).多 Monitor 同步机制\"></a>1).多 Monitor 同步机制</h3><blockquote>\n<p>在生产环境建议最少三节点 monitor，以确保 cluster map 的高可用性和冗余性,monitor 节点不应该过多甚至操作 9 节点的行为,会导致数据读写时间下降，影响系统集群的性能。</p>\n</blockquote>\n<ul>\n<li>monitor 使用 paxos 算法作为集群状态上达成一致的机制。paxos 是一种分布式一致性算法。每当 monitor 修改 map 时，它会通过 paxos 发送更新到其他 monitor。Ceph 只有在大多数 monitor 就更新达成一致时提交 map 的新版本。</li>\n<li>cluster map 的更新操作需要 Paxos 确认，但是读操作不经由 Paxos，而是直接访问本地的 kv 存储。</li>\n</ul>\n<h3 id=\"2-Monitor-选举机制\"><a href=\"#2-Monitor-选举机制\" class=\"headerlink\" title=\"2).Monitor 选举机制\"></a>2).Monitor 选举机制</h3><ul>\n<li>多个 monitor 之间需要建立仲裁并选择出一个 leader，其他节点则作为工作节点（peon）。</li>\n<li>在选举完成并确定 leader 之后，leader 将从所有其他 monitor 请求最新的 map epoc，以确保 leader 具有集群的最新视图。</li>\n<li>要维护 monitor 集群的正常工作，必须有超过半数的节点正常。</li>\n</ul>\n<h3 id=\"3-Monitor-租约\"><a href=\"#3-Monitor-租约\" class=\"headerlink\" title=\"3).Monitor 租约\"></a>3).Monitor 租约</h3><ul>\n<li>在 Monitor 建立仲裁后，leader 开始分发短期的租约到所有的 monitors。让它们能够分发 cluster map 到 OSD 和 client。</li>\n<li>Monitor 租约默认每 3s 续期一次。</li>\n<li>当 peon monitor 没有确认它收到租约时，leader 假定该 monitor 异常，它会召集新的选举以建立仲裁。</li>\n<li>如果 peon monitor 的租约到期后没有收到 leader 的续期，它会假定 leader 异常，并会召集新的选举。</li>\n<li>所以如果生产环境中存在多个 monitor 时候某个节点的超时会猝发节点的重新选举导致 client 无法第一时间拿到最新的 crushmap 图像也就无法去对应的 osd 上的 pv 写入数据了。</li>\n</ul>\n<h3 id=\"4-常用的-monitor-管理\"><a href=\"#4-常用的-monitor-管理\" class=\"headerlink\" title=\"4).常用的 monitor 管理\"></a>4).常用的 monitor 管理</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#打印monitor map信息</span>\nceph mon dump\n\n<span class=\"token comment\">#将monitor map导出为一个二进制文件</span>\nceph mon getmap <span class=\"token parameter variable\">-o</span> ./monmap\n\n<span class=\"token comment\">#打印导出的二进制文件的内容</span>\nmonmaptool <span class=\"token parameter variable\">--print</span> ./monmap\n\n<span class=\"token comment\">#修改二进制文件，从monmap删除某个monitor</span>\nmonmaptool ./monmap <span class=\"token parameter variable\">--rm</span> <span class=\"token operator\">&lt;</span>id<span class=\"token operator\">></span>\n\n<span class=\"token comment\">#修改二进制文件，往monmap中添加一个monitor</span>\nmonmaptool ./monmap <span class=\"token parameter variable\">--add</span> <span class=\"token operator\">&lt;</span>id<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>ip:port<span class=\"token operator\">></span>\n\n<span class=\"token comment\">#导入一个二进制文件，在导入之前，需要先停止monitor</span>\nceph-mon <span class=\"token parameter variable\">-i</span> <span class=\"token operator\">&lt;</span>id<span class=\"token operator\">></span> --inject-monmap ./monmap<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"7-管理-OSD-Map\"><a href=\"#7-管理-OSD-Map\" class=\"headerlink\" title=\"7.管理 OSD Map\"></a>7.管理 OSD Map</h2><ul>\n<li>每当 OSD 加入或离开集群时，Ceph 都会更新 OSD map。</li>\n<li>OSD 不使用 leader 来管理 OSD map，它们会在自身之间传播同步 map。OSD 会利用 OSD map epoch 标记它们交换的每一条信息，当 OSD 检测到自己已落后时，它会使用其对等 OSD 执行 map 更新。</li>\n<li>在大型集群中 OSD map 更新会非常频繁，节点会执行递增 map 更新。</li>\n<li>Ceph 也会利用 epoch 来标记 OSD 和 client 之间的消息。当 client 连接到 OSD 时 OSD 会检查 epoch。如果发现 epoch 不匹配，则 OSD 会以正确的 epoch 响应，以便客户端可以更新其 OSD map。</li>\n<li>OSD 定期向 monitor 报告自己的状态，OSD 之间会交换心跳，以便检测对等点的故障，并报告给 monitor。</li>\n<li>leader monitor 发现 OSD 故障时，它会更新 map，递增 epoch，并使用 Paxos 更新协议来通知其他 monitor，同时撤销租约，并发布新的租约，以使 monitor 以分发最新的 OSD map。</li>\n</ul>\n<h3 id=\"1-OSD-状态解读\"><a href=\"#1-OSD-状态解读\" class=\"headerlink\" title=\"1).OSD 状态解读\"></a>1).OSD 状态解读</h3><ul>\n<li>1.正常状态的 OSD 为 up 且 in</li>\n<li>2.当 OSD 故障时，守护进程 offline，在 5 分钟内，集群仍会将其标记为 up 和 in，这是为了防止网络抖动</li>\n<li>3.如果 5 分钟内仍未恢复，则会标记为 down 和 out。此时该 OSD 上的 PG 开始迁移。这个 5 分钟的时间间隔可以通过 mon_osd_down_out_interval 配置项修改</li>\n<li>4.当故障的 OSD 重新上线以后，会触发新的数据再平衡</li>\n<li>5.当集群有 noout 标志位时，则 osd 下线不会导致数据恢复</li>\n<li>6.OSD 每隔 6s 会互相验证状态。并每隔 120s 向 mon 报告一次状态。</li>\n</ul>\n<h3 id=\"2-OSD-map-命令\"><a href=\"#2-OSD-map-命令\" class=\"headerlink\" title=\"2).OSD map 命令\"></a>2).OSD map 命令</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd dump\nceph osd getmap <span class=\"token parameter variable\">-o</span> binfile\nosdmaptool <span class=\"token parameter variable\">--print</span> binfile\nosdmaptool --export-crush crushbinfile binfile\nosdmaptool --import-crush crushbinfile binfile\nosdmaptool --test-map-pg pgid binfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-OSD-的状态\"><a href=\"#3-OSD-的状态\" class=\"headerlink\" title=\"3.)OSD 的状态\"></a>3.)OSD 的状态</h3><ul>\n<li><p>OSD 运行状态</p>\n<ul>\n<li>up</li>\n<li>down</li>\n<li>out</li>\n<li>in</li>\n</ul>\n</li>\n<li><p>OSD 容量状态</p>\n<ul>\n<li>nearfull</li>\n<li>full</li>\n</ul>\n</li>\n</ul>\n<p>常用指令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#显示OSD状态</span>\nceph osd <span class=\"token function\">stat</span>\n\n<span class=\"token comment\">#报告osd使用量</span>\nceph osd <span class=\"token function\">df</span>\n\n<span class=\"token comment\">#查找指定osd位置</span>\nceph osd <span class=\"token function\">find</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-OSD-容量\"><a href=\"#4-OSD-容量\" class=\"headerlink\" title=\"4.)OSD 容量\"></a>4.)OSD 容量</h3><ul>\n<li>当集群容量达到 mon_osd_nearfull_ratio 的值时，集群会进入 HEALTH_WARN 状态。这是为了在达到 full_ratio 之前，提醒添加 OSD。默认设置为 0.85，即 85%</li>\n<li>当集群容量达到 mon_osd_full_ratio 的值时，集群将停止写入，但允许读取。集群会进入到 HEALTH_ERR 状态。默认为 0.95，即 95%。这是为了防止当一个或多个 OSD 故障时仍留有余地能重平衡数据</li>\n</ul>\n<p>设置方法：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd set-full-ratio <span class=\"token number\">0.95</span>\nceph osd set-nearfull-ratio <span class=\"token number\">0.85</span>\nceph osd dump<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-OSD-状态参数\"><a href=\"#5-OSD-状态参数\" class=\"headerlink\" title=\"5).OSD 状态参数\"></a>5).OSD 状态参数</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># osd之间传递心跳的间隔时间</span>\nosd_heartbeat_interval\n\n<span class=\"token comment\"># 一个osd多久没心跳，就会被集群认为它down了</span>\nosd_heartbeat_grace\n\n<span class=\"token comment\"># 确定一个osd状态为down的最少报告来源osd数</span>\nmon_osd_min_down_reporters\n\n<span class=\"token comment\"># 一个OSD必须重复报告一个osd状态为down的次数</span>\nmon_osd_min_down_reports\n\n<span class=\"token comment\"># 当osd停止响应多长时间，将其标记为down和out</span>\nmon_osd_down_out_interval\n\n<span class=\"token comment\"># monitor宣布失败osd为down前的等待时间</span>\nmon_osd_report_timeout\n\n<span class=\"token comment\"># 一个新的osd加入集群时，等待多长时间，开始向monitor报告</span>\nosd_mon_report_interval_min\n\n<span class=\"token comment\"># monitor允许osd报告的最大间隔，超时就认为它down了</span>\nosd_mon_report_interval_max\n\n<span class=\"token comment\"># osd向monitor报告心跳的时间</span>\nosd_mon_heartbeat_interval<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"8-管理-PG\"><a href=\"#8-管理-PG\" class=\"headerlink\" title=\"8.管理 PG\"></a>8.管理 PG</h2><h3 id=\"1-管理文件到-PG-映射\"><a href=\"#1-管理文件到-PG-映射\" class=\"headerlink\" title=\"1).管理文件到 PG 映射\"></a>1).管理文件到 PG 映射</h3><p>test 对象所在 pg id 为 10.35，存储在三个 osd 上，分别为 osd.2、osd.1 和 osd.8，其中 osd.2 为 primary osd</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rados <span class=\"token parameter variable\">-p</span> <span class=\"token builtin class-name\">test</span> put <span class=\"token builtin class-name\">test</span> /etc/ceph/ceph.conf\nceph osd map <span class=\"token builtin class-name\">test</span> <span class=\"token builtin class-name\">test</span>\n    osdmap e201 pool <span class=\"token string\">'test'</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> object <span class=\"token string\">'test'</span> -<span class=\"token operator\">></span> pg <span class=\"token number\">10</span>.40e8aab5 <span class=\"token punctuation\">(</span><span class=\"token number\">10.35</span><span class=\"token punctuation\">)</span> -<span class=\"token operator\">></span> up <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2,1</span>,8<span class=\"token punctuation\">]</span>, p2<span class=\"token punctuation\">)</span> acting <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2,1</span>,8<span class=\"token punctuation\">]</span>, p2<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#处于up状态的osd会一直留在PG的up set和acting set中，一旦主osd down，它首先会从up set中移除</span>\n<span class=\"token comment\">#然后从acting set中移除，之后从OSD将被升级为主。Ceph会将故障OSD上的PG恢复到一个新OSD上</span>\n<span class=\"token comment\">#然后再将这个新OSD加入到up和acting set中来维持集群的高可用性</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-管理-struck-状态的-PG\"><a href=\"#2-管理-struck-状态的-PG\" class=\"headerlink\" title=\"2).管理 struck 状态的 PG\"></a>2).管理 struck 状态的 PG</h3><ul>\n<li><p>如果 PG 长时间（mon_pg_stuck_threshold，默认为 300s）出现如下状态时，MON 会将该 PG 标记为 stuck：</p>\n<ul>\n<li>inactive：pg 有 peering 问题</li>\n<li>unclean：pg 在故障恢复时遇到问题</li>\n<li>stale：pg 没有任何 OSD 报告，可能其所有的 OSD 都是 down 和 out</li>\n<li>undersized：pg 没有充足的 osd 来存储它应具有的副本数</li>\n</ul>\n</li>\n<li><p>默认情况下，Ceph 会自动执行恢复，但如果未能自动恢复，则集群状态会一直处于 HEALTH_WARN 或者 HEALTH_ERR</p>\n</li>\n<li><p>如果特定 PG 的所有 osd 都是 down 和 out 状态，则 PG 会被标记为 stale。要解决这一情况，其中一个 OSD 必须要重生，且具有可用的 PG 副本，否则 PG 不可用</p>\n</li>\n<li><p>Ceph 可以声明 osd 或 PG 已丢失，这也就意味着数据丢失。需要说明的是，osd 的运行离不开 journal，如果 journal 丢失，则 osd 停止</p>\n</li>\n</ul>\n<h3 id=\"3-struck-状态操作\"><a href=\"#3-struck-状态操作\" class=\"headerlink\" title=\"3).struck 状态操作\"></a>3).struck 状态操作</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 检查处于stuck状态的pg</span>\nceph pg dump_stuck\n<span class=\"token comment\"># 检查导致pg一致阻塞在peering状态的osd</span>\nceph osd blocked-by\n<span class=\"token comment\"># 检查某个pg的状态</span>\nceph pg dump all<span class=\"token operator\">|</span><span class=\"token function\">grep</span> pgid\n<span class=\"token comment\"># 声明pg丢失</span>\nceph pg pgid mark_unfound_lost revert<span class=\"token operator\">|</span>delete\n<span class=\"token comment\"># 声明osd丢失（需要osd状态为down且out）</span>\nceph osd lost osdid --yes-i-really-mean-it<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-手动控制-PG-的-Primary-OSD\"><a href=\"#4-手动控制-PG-的-Primary-OSD\" class=\"headerlink\" title=\"4).手动控制 PG 的 Primary OSD\"></a>4).手动控制 PG 的 Primary OSD</h3><p>可以通过手动修改 osd 的权重以提升 特定 OSD 被选为 PG Primary OSD 的概率，避免将速度慢的磁盘用作 primary osd。</p>\n<p>需要先在配置文件中配置如下参数：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mon_osd_allow_primary_affinity <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-调整权重示例\"><a href=\"#5-调整权重示例\" class=\"headerlink\" title=\"5).调整权重示例\"></a>5).调整权重示例</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>. 查看现在有多少PG的主OSD是osd.0\nceph pg dump <span class=\"token operator\">|</span><span class=\"token function\">grep</span> active+clean <span class=\"token operator\">|</span><span class=\"token function\">egrep</span> <span class=\"token string\">\"\\[0,\"</span> <span class=\"token operator\">|</span><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span>\n\n<span class=\"token number\">2</span>. 修改osd.0的权重\nceph osd primary-affinity osd.0 <span class=\"token number\">0</span>  <span class=\"token comment\"># 权重范围从0.0到1.0</span>\n\n<span class=\"token number\">3</span>. 再次查看现在有多少PG的主OSD是osd.0\nceph pg dump <span class=\"token operator\">|</span><span class=\"token function\">grep</span> active+clean <span class=\"token operator\">|</span><span class=\"token function\">egrep</span> <span class=\"token string\">\"\\[0,\"</span> <span class=\"token operator\">|</span><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"9-Pool-存储池-管理\"><a href=\"#9-Pool-存储池-管理\" class=\"headerlink\" title=\"9.Pool(存储池)管理\"></a>9.Pool(存储池)管理</h2><p><a href=\"https://blog.csdn.net/weixin_42440345/article/details/81118964\">https://blog.csdn.net/weixin_42440345&#x2F;article&#x2F;details&#x2F;81118964</a></p>\n<h3 id=\"PG-和-PGP-的区别\"><a href=\"#PG-和-PGP-的区别\" class=\"headerlink\" title=\"PG 和 PGP 的区别\"></a>PG 和 PGP 的区别</h3><p><a href=\"https://www.cnblogs.com/zphj1987/p/13575377.html\">https://www.cnblogs.com/zphj1987/p/13575377.html</a></p>\n<p>PG 是指定存储池存储对象的目录有多少个，PGP 是存储池 PG 的 OSD 分布组合个数</p>\n<p>PG 的增加会引起 PG 内的数据进行分裂，分裂到相同的 OSD 上新生成的 PG 当中</p>\n<p>PGP 的增加会引起部分 PG 的分布进行变化，但是不会引起 PG 内对象的变动</p>\n<h3 id=\"4-限制-pool-配置更改\"><a href=\"#4-限制-pool-配置更改\" class=\"headerlink\" title=\"4.)限制 pool 配置更改\"></a>4.)限制 pool 配置更改</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#禁止池被删除</span>\nosd_pool_default_flag_nodelete\n\n<span class=\"token comment\">#禁止池的pg_num和pgp_num被修改</span>\nosd_pool_default_flag_nopgchange\n\n<span class=\"token comment\">#禁止修改池的size和min_size</span>\nosd_pool_default_flag_nosizechange<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-查看-pool\"><a href=\"#1-查看-pool\" class=\"headerlink\" title=\"1.查看 pool\"></a>1.查看 pool</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看所有pool</span>\nceph osd lspools\n<span class=\"token comment\">#获取集群内所有POOL的概况信息,集群内POOL的个数、对应的POOL id、POOL名称、副本数、最小副本数，ruleset及POOL snap等信息</span>\nceph osd pool <span class=\"token function\">ls</span> detail\n<span class=\"token comment\">#查看POOL的统计信息</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-创建-pool\"><a href=\"#2-创建-pool\" class=\"headerlink\" title=\"2.创建 pool\"></a>2.创建 pool</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#创建一个副本类型的POOL</span>\nceph osd pool create <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>pg-num<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>pgp-num<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>pgp-num<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>replicated<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>ruleset<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#举例：</span>\nceph osd pool create rbd  <span class=\"token number\">32</span> <span class=\"token number\">32</span>\n<span class=\"token comment\">#创建一个纠删码类型的POOL</span>\nceph osd pool create <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>pg-num<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>pgp-num<span class=\"token punctuation\">&#125;</span> erasure <span class=\"token punctuation\">[</span>erasure-code-profile<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>ruleset<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在<code>&#123;&#125;</code>内的参数为必选项,<code>[]</code>内的参数均设有默认值,如果没有更改设计,可以不添加。</p>\n<p>参数的含义如下:</p>\n<ul>\n<li><strong>pool-name</strong>: POOL 的名字；必须添加。</li>\n<li><strong>pg-num</strong>: POOL 拥有的 PG 总数；必须添加。</li>\n<li><strong>pgp-num</strong>: POOL 拥有的 PGP 总数；非必须添加。默认与 pg-num 相同。</li>\n<li><strong>replicated|erasure</strong>: POOL 类型；非必须添加。如不指定为 erasure,则默认为 replicated 类型。</li>\n<li><strong>ruleset</strong>: POOL 所用的 CRUSH 规则 ID。非必须添加。默认为 0,若需指定其他 ruleset,需确保 ruleset 必须存在。</li>\n<li><strong>erasure-code-profile</strong>: 仅用于纠删码类型的 POOL。指定纠删码配置框架,此配置必须已由 osd erasure-code-profile set 定义</li>\n</ul>\n<p>这里强制选择 pg_num 和 pgp_num，因为 ceph 集群不能自动计算 pg 数量。下面有一些官方建议的 pg 使用数量：</p>\n<ul>\n<li>小于 5 个 osd 设置 pg_num 为 128</li>\n<li>5 到 10 个 osd 设置 pg_num 为 512</li>\n<li>10 到 50 个 osd 设置 pg_num 为 1024</li>\n<li>如果超过 50 个 osd 你需要自己明白权衡点，并且能自行计算 pg_num 的数量</li>\n</ul>\n<p>pg_num 通用计算方法:</p>\n<p>(OSDs * 100)</p>\n<p>Total PGs &#x3D;  ————</p>\n<p>pool size</p>\n<h3 id=\"3-修改-pool\"><a href=\"#3-修改-pool\" class=\"headerlink\" title=\"3.修改 pool\"></a>3.修改 pool</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd pool <span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">&#125;</span>\nsize：设置存储池中的对象副本数，详情参见设置对象副本数。仅适用于副本存储池。\nmin_size：设置 I/O 需要的最小副本数，详情参见设置对象副本数。仅适用于副本存储池。\npg_num：计算数据分布时的有效 PG 数。只能大于当前 PG 数。\npgp_num：计算数据分布时使用的有效 PGP 数量。小于等于存储池的 PG 数。\nhashpspool：给指定存储池设置/取消 HASHPSPOOL 标志。\ntarget_max_bytes：达到 max_bytes 阀值时会触发 Ceph 冲洗或驱逐对象。\ntarget_max_objects：达到 max_objects 阀值时会触发 Ceph 冲洗或驱逐对象。\nscrub_min_interval：在负载低时，洗刷存储池的最小间隔秒数。如果是 <span class=\"token number\">0</span> ，就按照配置文件里的 osd_scrub_min_interval 。\nscrub_max_interval：不管集群负载如何，都要洗刷存储池的最大间隔秒数。如果是 <span class=\"token number\">0</span> ，就按照配置文件里的 osd_scrub_max_interval 。\ndeep_scrub_interval：“深度”洗刷存储池的间隔秒数。如果是 <span class=\"token number\">0</span> ，就按照配置文件里的 osd_deep_scrub_interval 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-删除存储池\"><a href=\"#4-删除存储池\" class=\"headerlink\" title=\"4.删除存储池\"></a>4.删除存储池</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd pool delete <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> --yes-i-really-really-mean-it<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-重命名存储池\"><a href=\"#5-重命名存储池\" class=\"headerlink\" title=\"5.重命名存储池\"></a>5.重命名存储池</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd pool <span class=\"token function\">rename</span> <span class=\"token punctuation\">&#123;</span>current-pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>new-pool-name<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"6-查看存储池统计信息\"><a href=\"#6-查看存储池统计信息\" class=\"headerlink\" title=\"6.查看存储池统计信息\"></a>6.查看存储池统计信息</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rados <span class=\"token function\">df</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"7-给存储池做快照\"><a href=\"#7-给存储池做快照\" class=\"headerlink\" title=\"7.给存储池做快照\"></a>7.给存储池做快照</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd pool mksnap <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>snap-name<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"8-删除存储池的快照\"><a href=\"#8-删除存储池的快照\" class=\"headerlink\" title=\"8.删除存储池的快照\"></a>8.删除存储池的快照</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd pool rmsnap <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>snap-name<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"9-获取存储池选项值\"><a href=\"#9-获取存储池选项值\" class=\"headerlink\" title=\"9.获取存储池选项值\"></a>9.获取存储池选项值</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd pool get <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"10-获取对象副本数\"><a href=\"#10-获取对象副本数\" class=\"headerlink\" title=\"10.获取对象副本数\"></a>10.获取对象副本数</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd dump <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'replicated size'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"11-设置存储池配额\"><a href=\"#11-设置存储池配额\" class=\"headerlink\" title=\"11.设置存储池配额\"></a>11.设置存储池配额</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">命令格式：\n<span class=\"token comment\"># ceph osd pool set-quota &#123;pool-name&#125; [max_objects &#123;obj-count&#125;] [max_bytes &#123;bytes&#125;]</span>\n命令举例：\n<span class=\"token comment\"># ceph osd pool set-quota rbd max_objects 10000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"10-自定义-Crush-Map\"><a href=\"#10-自定义-Crush-Map\" class=\"headerlink\" title=\"10.自定义 Crush Map\"></a>10.自定义 Crush Map</h2><blockquote>\n<p>crush map 决定了客户端数据最终写入的 osd 的位置，在某些情况下存在 hdd 和 ssd 两种盘想让某些数据写入到指定的 osd 中这个时候就是需要去人为的手动编译 crush-map，编辑要修改的部分，再导入集群中达到我们特定的目的</p>\n</blockquote>\n<h3 id=\"1-Crush-的放置策略\"><a href=\"#1-Crush-的放置策略\" class=\"headerlink\" title=\"1).Crush 的放置策略\"></a>1).Crush 的放置策略</h3><ul>\n<li>Ceph 使用 CRUSH 算法（Controlled Replication Under Scalable Hashing 可扩展哈希下的受控复制）来计算哪些 OSD 存放哪些对象</li>\n<li>对象分配到 PG 中，CRUSH 决定这些 PG 使用哪些 OSD 来存储对象。理想情况下，CRUSH 会将数据均匀的分布到存储中</li>\n<li>当添加新 OSD 或者现有的 OSD 出现故障时，Ceph 使用 CRUSH 在活跃的 OSD 上重平衡数据 CRUSH map 是 CRUSH 算法的中央配置机制，可通过调整 CRUSHmap 来优化数据存放位置默认情况下，CRUSH 将一个对象的多个副本放置到不同主机上的 0SD 中。可以配置 CRUSH map 和 CRUSH rules，使一个对象的多个副本放置到不同房间或者不同机柜的主机上的 0SD 中。</li>\n<li>也可以将 SSD 磁盘分配给需要高速存储的池</li>\n</ul>\n<h3 id=\"2-编译与翻译和更新\"><a href=\"#2-编译与翻译和更新\" class=\"headerlink\" title=\"2).编译与翻译和更新\"></a>2).编译与翻译和更新</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#导出CRUSH map</span>\nceph osd getcrushmap <span class=\"token parameter variable\">-o</span> ./crushmap.bin\n<span class=\"token comment\">#解译CRUSH map</span>\ncrushtool <span class=\"token parameter variable\">-d</span> ./crushmap.bin ./crushmap.txt\n<span class=\"token comment\">#修改后的CRUSH map重新编译</span>\ncrushtool <span class=\"token parameter variable\">-c</span> ./crushmap.txt-o ./crushmap-new.bin\n<span class=\"token comment\">#更新CRUSH map</span>\nceph osd setcrushmap-i./crushmap-new.bin\n<span class=\"token comment\">#查询crush map的内容（返回json）</span>\nceph osd crush dump<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例子</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">root default <span class=\"token punctuation\">&#123;</span>\n    id-1           <span class=\"token comment\"># do not change unnecessarily</span>\n    id-2 class hdd <span class=\"token comment\">#do not change unnecessarily</span>\n    <span class=\"token comment\">#weiqht 0.166</span>\n    alg straw2\n    <span class=\"token builtin class-name\">hash</span> <span class=\"token number\">0</span><span class=\"token comment\">#rjenkins1</span>\n    item rackl weight <span class=\"token number\">0.055</span>\n    item rack2 weiqht <span class=\"token number\">0.055</span>\n    item rack3 weight <span class=\"token number\">0.055</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">#rules</span>\nrule replicated rule<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">id</span> <span class=\"token number\">0</span>\n    <span class=\"token builtin class-name\">type</span> replicated\n    min size <span class=\"token number\">1</span>\n    max size <span class=\"token number\">10</span>\n    step take default  <span class=\"token comment\">#只要是应用这个rule的都把数据写入到defaults下</span>\n    step chooseleaf firstn <span class=\"token number\">0</span> <span class=\"token builtin class-name\">type</span> <span class=\"token function\">host</span>  <span class=\"token comment\">#定义故障的故障域为物理集机器级别（rack为机柜级别）</span>\n    step emit <span class=\"token comment\">#结尾符号</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"11-admin-sockets-管理守护进程\"><a href=\"#11-admin-sockets-管理守护进程\" class=\"headerlink\" title=\"11.admin sockets 管理守护进程\"></a>11.admin sockets 管理守护进程</h2><ul>\n<li>通过 admin sockets，管理员可以直接与守护进程交互。如查看和修改守护进程的配置参数。</li>\n<li>守护进程的 socket 文件一般是&#x2F;var&#x2F;run&#x2F;ceph&#x2F;cluster-cluster−type.$id.asok</li>\n<li>基于 admin sockets 的操作：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph daemon <span class=\"token variable\">$type</span><span class=\"token builtin class-name\">.</span><span class=\"token variable\">$id</span> <span class=\"token builtin class-name\">command</span>\n<span class=\"token comment\">#或者</span>\nceph --admin-daemon /var/run/ceph/<span class=\"token variable\">$cluster</span>-<span class=\"token variable\">$type</span><span class=\"token builtin class-name\">.</span><span class=\"token variable\">$id</span>.asok <span class=\"token builtin class-name\">command</span>\n<span class=\"token comment\">#常用command如下：</span>\n<span class=\"token builtin class-name\">help</span>\nconfig get parameter\nconfig <span class=\"token builtin class-name\">set</span> parameter\nconfig show\nperf dump<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"12-用户管理\"><a href=\"#12-用户管理\" class=\"headerlink\" title=\"12.用户管理\"></a>12.用户管理</h2><blockquote>\n<p>Ceph 把数据以对象的形式存于各存储池中。Ceph 用户必须具有访问存储池的权限才能够读写数据。另外，Ceph 用户必须具有执行权限才能够使用 Ceph 的管理命令。</p>\n</blockquote>\n<h3 id=\"1、查看用户信息\"><a href=\"#1、查看用户信息\" class=\"headerlink\" title=\"1、查看用户信息\"></a>1、查看用户信息</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">查看所有用户信息\n<span class=\"token comment\"># ceph auth list</span>\n获取所有用户的key与权限相关信息\n<span class=\"token comment\"># ceph auth get client.admin</span>\n如果只需要某个用户的key信息，可以使用pring-key子命令\n<span class=\"token comment\"># ceph auth print-key client.admin</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、添加用户\"><a href=\"#2、添加用户\" class=\"headerlink\" title=\"2、添加用户\"></a>2、添加用户</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ceph auth add client.john mon 'allow r' osd 'allow rw pool=liverpool'</span>\n<span class=\"token comment\"># ceph auth get-or-create client.paul mon 'allow r' osd 'allow rw pool=liverpool'</span>\n<span class=\"token comment\"># ceph auth get-or-create client.george mon 'allow r' osd 'allow rw pool=liverpool' -o george.keyring</span>\n<span class=\"token comment\"># ceph auth get-or-create-key client.ringo mon 'allow r' osd 'allow rw pool=liverpool' -o ringo.key</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、修改用户权限\"><a href=\"#3、修改用户权限\" class=\"headerlink\" title=\"3、修改用户权限\"></a>3、修改用户权限</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ceph auth caps client.john mon 'allow r' osd 'allow rw pool=liverpool'</span>\n<span class=\"token comment\"># ceph auth caps client.paul mon 'allow rw' osd 'allow rwx pool=liverpool'</span>\n<span class=\"token comment\"># ceph auth caps client.brian-manager mon 'allow *' osd 'allow *'</span>\n<span class=\"token comment\"># ceph auth caps client.ringo mon ' ' osd ' '</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4、删除用户\"><a href=\"#4、删除用户\" class=\"headerlink\" title=\"4、删除用户\"></a>4、删除用户</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ceph auth del &#123;TYPE&#125;.&#123;ID&#125;</span>\n其中， <span class=\"token punctuation\">&#123;</span>TYPE<span class=\"token punctuation\">&#125;</span> 是 client，osd，mon 或 mds 的其中一种。<span class=\"token punctuation\">&#123;</span>ID<span class=\"token punctuation\">&#125;</span> 是用户的名字或守护进程的 ID 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"13-增加和删除-Monitor\"><a href=\"#13-增加和删除-Monitor\" class=\"headerlink\" title=\"13.增加和删除 Monitor\"></a>13.增加和删除 Monitor</h2><blockquote>\n<p>一个集群可以只有一个 monitor，推荐生产环境至少部署 3 个。 Ceph 使用 Paxos 算法的一个变种对各种 map 、以及其它对集群来说至关重要的信息达成共识。建议（但不是强制）部署奇数个 monitor 。Ceph 需要 mon 中的大多数在运行并能够互相通信，比如单个 mon，或 2 个中的 2 个，3 个中的 2 个，4 个中的 3 个等。初始部署时，建议部署 3 个 monitor。后续如果要增加，请一次增加 2 个.</p>\n</blockquote>\n<h3 id=\"1、新增一个-monitor\"><a href=\"#1、新增一个-monitor\" class=\"headerlink\" title=\"1、新增一个 monitor\"></a>1、新增一个 monitor</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ceph-deploy mon create $hostname</span>\n注意：执行ceph-deploy之前要进入之前安装时候配置的目录。/my-cluster<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、删除-Monitor\"><a href=\"#2、删除-Monitor\" class=\"headerlink\" title=\"2、删除 Monitor\"></a>2、删除 Monitor</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ceph-deploy mon destroy $hostname</span>\n注意： 确保你删除某个 Mon 后，其余 Mon 仍能达成一致。如果不可能，删除它之前可能需要先增加一个。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"四、集群监控管理\"><a href=\"#四、集群监控管理\" class=\"headerlink\" title=\"四、集群监控管理\"></a>四、集群监控管理</h1><h2 id=\"1-集群整体运行状态\"><a href=\"#1-集群整体运行状态\" class=\"headerlink\" title=\"1.集群整体运行状态\"></a>1.集群整体运行状态</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@cephnode01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ceph -s</span>\ncluster:\n    id:     8230a918-a0de-4784-9ab8-cd2a2b8671d0\n    health: HEALTH_WARN\n            application not enabled on <span class=\"token number\">1</span> pool<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n  services:\n    mon: <span class=\"token number\">3</span> daemons, quorum cephnode01,cephnode02,cephnode03 <span class=\"token punctuation\">(</span>age 27h<span class=\"token punctuation\">)</span>\n    mgr: cephnode01<span class=\"token punctuation\">(</span>active, since 53m<span class=\"token punctuation\">)</span>, standbys: cephnode03, cephnode02\n    osd: <span class=\"token number\">4</span> osds: <span class=\"token number\">4</span> up <span class=\"token punctuation\">(</span>since 27h<span class=\"token punctuation\">)</span>, <span class=\"token number\">4</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>since 19h<span class=\"token punctuation\">)</span>\n    rgw: <span class=\"token number\">1</span> daemon active <span class=\"token punctuation\">(</span>cephnode01<span class=\"token punctuation\">)</span>\n\n  data:\n    pools:   <span class=\"token number\">6</span> pools, <span class=\"token number\">96</span> pgs\n    objects: <span class=\"token number\">235</span> objects, <span class=\"token number\">3.6</span> KiB\n    usage:   <span class=\"token number\">4.0</span> GiB used, <span class=\"token number\">56</span> GiB / <span class=\"token number\">60</span> GiB avail\n    pgs:     <span class=\"token number\">96</span> active+clean\n\n    id：集群ID\n    health：集群运行状态，这里有一个警告，说明是有问题，意思是pg数大于pgp数，通常此数值相等。\n    mon：Monitors运行状态。\n    osd：OSDs运行状态。\n    mgr：Managers运行状态。\n    mds：Metadatas运行状态。\n    pools：存储池与PGs的数量。\n    objects：存储对象的数量。\n    usage：存储的理论用量。\n    pgs：PGs的运行状态\n\n~<span class=\"token punctuation\">]</span>$ ceph <span class=\"token parameter variable\">-w</span>\n~<span class=\"token punctuation\">]</span>$ ceph health detail<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-PG-状态\"><a href=\"#2-PG-状态\" class=\"headerlink\" title=\"2.PG 状态\"></a>2.PG 状态</h2><blockquote>\n<p>查看 pg 状态查看通常使用下面两个命令即可，dump 可以查看更详细信息</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">~<span class=\"token punctuation\">]</span>$ ceph pg dump\n~<span class=\"token punctuation\">]</span>$ ceph pg <span class=\"token function\">stat</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-Pool-状态\"><a href=\"#3-Pool-状态\" class=\"headerlink\" title=\"3.Pool 状态\"></a>3.Pool 状态</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">~<span class=\"token punctuation\">]</span>$ ceph osd pool stats\n~<span class=\"token punctuation\">]</span>$ ceph osd pool stats<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-OSD-状态\"><a href=\"#4-OSD-状态\" class=\"headerlink\" title=\"4.OSD 状态\"></a>4.OSD 状态</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">~<span class=\"token punctuation\">]</span>$ ceph osd <span class=\"token function\">stat</span>\n~<span class=\"token punctuation\">]</span>$ ceph osd dump\n~<span class=\"token punctuation\">]</span>$ ceph osd tree\n~<span class=\"token punctuation\">]</span>$ ceph osd <span class=\"token function\">df</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-Monitor-状态和查看仲裁状态\"><a href=\"#5-Monitor-状态和查看仲裁状态\" class=\"headerlink\" title=\"5.Monitor 状态和查看仲裁状态\"></a>5.Monitor 状态和查看仲裁状态</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">~<span class=\"token punctuation\">]</span>$ ceph mon <span class=\"token function\">stat</span>\n~<span class=\"token punctuation\">]</span>$ ceph mon dump\n~<span class=\"token punctuation\">]</span>$ ceph quorum_status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"6-集群空间用量\"><a href=\"#6-集群空间用量\" class=\"headerlink\" title=\"6.集群空间用量\"></a>6.集群空间用量</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">~<span class=\"token punctuation\">]</span>$ ceph <span class=\"token function\">df</span>\n~<span class=\"token punctuation\">]</span>$ ceph <span class=\"token function\">df</span> detail<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"五、集群配置管理-临时和全局，服务平滑重启\"><a href=\"#五、集群配置管理-临时和全局，服务平滑重启\" class=\"headerlink\" title=\"五、集群配置管理(临时和全局，服务平滑重启)\"></a>五、集群配置管理(临时和全局，服务平滑重启)</h1><blockquote>\n<p>有时候需要更改服务的配置，但不想重启服务，或者是临时修改。这时候就可以使用 tell 和 daemon 子命令来完成此需求。</p>\n</blockquote>\n<h2 id=\"1-查看运行配置\"><a href=\"#1-查看运行配置\" class=\"headerlink\" title=\"1.查看运行配置\"></a>1.查看运行配置</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">命令格式：\n<span class=\"token comment\"># ceph daemon &#123;daemon-type&#125;.&#123;id&#125; config show</span>\n\n命令举例：\n<span class=\"token comment\"># ceph daemon osd.0 config show</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-tell-子命令格式\"><a href=\"#2-tell-子命令格式\" class=\"headerlink\" title=\"2.tell 子命令格式\"></a>2.tell 子命令格式</h2><blockquote>\n<p>使用 tell 的方式适合对整个集群进行设置，使用 * 号进行匹配，就可以对整个集群的角色进行设置。而出现节点异常无法设置时候，只会在命令行当中进行报错，不太便于查找。</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">命令格式：\n<span class=\"token comment\"># ceph tell &#123;daemon-type&#125;.&#123;daemon id or *&#125; injectargs --&#123;name&#125;=&#123;value&#125; [--&#123;name&#125;=&#123;value&#125;]</span>\n命令举例：\n<span class=\"token comment\"># ceph tell osd.0 injectargs --debug-osd 20 --debug-ms 1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>daemon-type：为要操作的对象类型如 osd、mon、mds 等。</li>\n<li>daemon id：该对象的名称，osd 通常为 0、1 等，mon 为 ceph -s 显示的名称，这里可以输入*表示全部。</li>\n<li>injectargs：表示参数注入，后面必须跟一个参数，也可以跟多个</li>\n</ul>\n<h2 id=\"3-daemon-子命令\"><a href=\"#3-daemon-子命令\" class=\"headerlink\" title=\"3.daemon 子命令\"></a>3.daemon 子命令</h2><ul>\n<li>使用 daemon 进行设置的方式就是一个个的去设置，这样可以比较好的反馈，此方法是需要在设置的角色所在的主机上进行设置。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">命令格式：\n<span class=\"token comment\"># ceph daemon &#123;daemon-type&#125;.&#123;id&#125; config set &#123;name&#125;=&#123;value&#125;</span>\n命令举例：\n<span class=\"token comment\"># ceph daemon mon.ceph-monitor-1 config set mon_allow_pool_delete false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-集群操作\"><a href=\"#4-集群操作\" class=\"headerlink\" title=\"4.集群操作\"></a>4.集群操作</h2><ul>\n<li>命令包含 start、restart、status</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#1.启动所有守护进程</span>\nsystemctl start ceph.target\n\n<span class=\"token comment\">#2.按类型启动守护进程</span>\nsystemctl start ceph-mgr.target\nsystemctl start ceph-osd@id\nsystemctl start ceph-mon.target\nsystemctl start ceph-mds.target\nsystemctl start ceph-radosgw.target<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-添加和删除-OSD\"><a href=\"#5-添加和删除-OSD\" class=\"headerlink\" title=\"5.添加和删除 OSD\"></a>5.添加和删除 OSD</h2><h3 id=\"1-添加-OSD\"><a href=\"#1-添加-OSD\" class=\"headerlink\" title=\"1).添加 OSD\"></a>1).添加 OSD</h3><ul>\n<li><p>纵向扩容(会导致数据的重分布)</p>\n</li>\n<li><p>生产环境下最好的做法就是不要一次性添加大量的 osd，最好逐步添加等待数据同步后再进行添加操作</p>\n<ul>\n<li>当影响生产数据时候临时可以停止同步：ceph osd set [nobackfill|norebalance],unset 取消对应的参数</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#1.格式化磁盘</span>\nceph-volume lvm zap /dev/sd<span class=\"token operator\">&lt;</span>id<span class=\"token operator\">></span>\n\n<span class=\"token comment\">#2.进入到ceph-deploy执行目录/my-cluster，添加OSD</span>\nceph-deploy osd create <span class=\"token parameter variable\">--data</span> /dev/sd<span class=\"token operator\">&lt;</span>id<span class=\"token operator\">></span> <span class=\"token variable\">$hostname</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-删除-OSD\"><a href=\"#2-删除-OSD\" class=\"headerlink\" title=\"2).删除 OSD\"></a>2).删除 OSD</h3><ul>\n<li><p>如果机器有盘坏了可以使用 dmdsg 查看坏盘</p>\n</li>\n<li><p>存在一种情况就是某 osd 的写入延迟大盘有坏道很大可能会拖垮 ceph 集群：</p>\n<ul>\n<li>ceph osd tree: 查看当前集群的 osd 状态</li>\n<li>ceph osd perf: 查看当前的 OSD 的延迟</li>\n</ul>\n</li>\n<li><p>当某一快 osd 踢出集群时候立即做数据重分布(默认 10 分钟)</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>、调整osd的crush weight为 <span class=\"token number\">0</span>\nceph osd crush reweight osd.<span class=\"token operator\">&lt;</span>ID<span class=\"token operator\">></span> <span class=\"token number\">0.0</span>\n\n<span class=\"token number\">2</span>、将osd进程stop\nsystemctl stop ceph-osd@<span class=\"token operator\">&lt;</span>ID<span class=\"token operator\">></span>\n\n<span class=\"token number\">3</span>、将osd设置out<span class=\"token punctuation\">(</span>将会出发数据重分布<span class=\"token punctuation\">)</span>\nceph osd out <span class=\"token operator\">&lt;</span>ID<span class=\"token operator\">></span>\n\n<span class=\"token number\">4</span>、从crushmap中踢出osd\n<span class=\"token comment\"># 查看运行视图的osd状态</span>\nceph osd crush dump<span class=\"token operator\">|</span><span class=\"token function\">less</span>\nceph osd crush <span class=\"token function\">rm</span> <span class=\"token operator\">&lt;</span>osd<span class=\"token operator\">></span>.id\n\n<span class=\"token number\">5</span>、从tree树中删除osd\nceph osd <span class=\"token function\">rm</span> <span class=\"token operator\">&lt;</span>osd<span class=\"token operator\">></span>.id\n\n<span class=\"token number\">6</span>、<span class=\"token punctuation\">(</span>选用<span class=\"token punctuation\">)</span>立即执行删除OSD中数据\nceph osd purge osd.<span class=\"token operator\">&lt;</span>ID<span class=\"token operator\">></span> --yes-i-really-mean-it\n\n<span class=\"token number\">7</span>、卸载磁盘\n<span class=\"token function\">umount</span> /var/lib/ceph/osd/ceph-？\n\n<span class=\"token number\">8</span>.从认证中删除磁盘对应的key\n<span class=\"token comment\"># 查看认证的列表</span>\nceph auth list\nceph auth <span class=\"token function\">rm</span> <span class=\"token operator\">&lt;</span>osd<span class=\"token operator\">></span>.id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"6-扩容-PG\"><a href=\"#6-扩容-PG\" class=\"headerlink\" title=\"6.扩容 PG\"></a>6.扩容 PG</h2><ul>\n<li>扩容大小取跟它接近的 2 的 N 次方</li>\n<li>在更改 pool 的 PG 数量时，需同时更改 PGP 的数量。PGP 是为了管理 placement 而存在的专门的 PG，它和 PG 的数量应该保持一致。如果你增加 pool 的 pg_num，就需要同时增加 pgp_num，保持它们大小一致，这样集群才能正常 rebalancing。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ceph osd pool <span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> pg_num <span class=\"token number\">128</span>\nceph osd pool <span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">&#123;</span>pool-name<span class=\"token punctuation\">&#125;</span> pgp_num <span class=\"token number\">128</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"六、调优\"><a href=\"#六、调优\" class=\"headerlink\" title=\"六、调优\"></a>六、调优</h1><h2 id=\"1-系统层面调优\"><a href=\"#1-系统层面调优\" class=\"headerlink\" title=\"1.系统层面调优\"></a>1.系统层面调优</h2><ul>\n<li><p>选择正确的 CPU 和内存。OSD、MON 和 MDS 节点具有不同的 CPU 和内存需求</p>\n<ul>\n<li>mon 的需求和 osd 的总个数有关需要的是计算力</li>\n<li>mds 对 CPU 和内存要求很高，会将大量的元数据缓存到自己的内存中，存储元数据的尽量的使用 ssd</li>\n<li>osd 最低要求 1H2G 的配置例如：24 块硬盘最少是 24H36G,磁盘方面必须高 I&#x2F;O 有多好上多好</li>\n</ul>\n</li>\n<li><p>尽可能关闭 NUMA</p>\n</li>\n<li><p>规划好存储节点的数据以及各节点的磁盘要求（不考虑钱忽略）</p>\n</li>\n<li><p>磁盘的选择尽可能在成本、吞吐量和延迟之间找到良好的平衡</p>\n</li>\n<li><p>journal 日志应该使用 SSD</p>\n</li>\n<li><p>如果交换机支持（MTU 9000），则启用巨型帧(减少数据的分片)，前提是 ceph 在一个单独的网络环境中切有独立交换机。</p>\n</li>\n<li><p>启用 ntp。Ceph 对时间敏感,集群网络至少 10GB 带宽</p>\n</li>\n</ul>\n<h3 id=\"1-系统调优工具\"><a href=\"#1-系统调优工具\" class=\"headerlink\" title=\"1).系统调优工具\"></a>1).系统调优工具</h3><ul>\n<li>使用 tuned-admin 工具，它可帮助系统管理员针对不同的工作负载进行系统调优</li>\n<li>tuned-admin 使用的 profile 默认存放在&#x2F;usr&#x2F;lib&#x2F;tuned&#x2F;目录中，可以参考其模板来自定义 profile</li>\n<li>对于 ceph 而言，network-latency 可以改进全局系统延迟，network-throughput 可以改进全局系统吞吐量,如果两个都开启可以使用 Custom 自定义模式</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 列出现有可用的profile</span>\ntuned-adm list\n\n<span class=\"token comment\"># 查看当前生效的profile</span>\ntuned-adm active\n\n<span class=\"token comment\"># 使用指定的profile</span>\ntuned-admin profile profile-name\n\n<span class=\"token comment\"># 禁用所有的profile</span>\ntuned-admin off<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-I-x2F-O-调度算法\"><a href=\"#2-I-x2F-O-调度算法\" class=\"headerlink\" title=\"2).I&#x2F;O 调度算法\"></a>2).I&#x2F;O 调度算法</h3><ul>\n<li>noop：电梯算法，实现了一个简单的 FIFO 队列。基于 SSD 的磁盘，推荐使用这种调度方式</li>\n<li>Deadline：截止时间调度算法，尽力为请求提供有保障的延迟。对于 Ceph，基于 sata 或者 sas 的驱动器，应该首选这种调度方式</li>\n<li>cfq：完全公平队列，适合有许多进程同时读取和写入大小不等的请求的磁盘，也是默认的通用调度算法</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看当前系统支持的调度算法：</span>\n    <span class=\"token function\">dmesg</span><span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-I</span> scheduler\n\n<span class=\"token comment\">#查看指定磁盘使用的调度算法：</span>\n    <span class=\"token function\">cat</span> /sys/block/磁盘设备号/queue/scheduler\n\n<span class=\"token comment\">#修改调度算法</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"deadline\"</span> <span class=\"token operator\">></span> /sys/block/vdb/queue/scheduler\n    <span class=\"token function\">vim</span> /etc/default/grub\n        <span class=\"token assign-left variable\">GRUB_CMDLINE_LINUX</span><span class=\"token operator\">=</span><span class=\"token string\">\"elevator=deadline numa=off\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-网络-IO-子系统调优\"><a href=\"#3-网络-IO-子系统调优\" class=\"headerlink\" title=\"3).网络 IO 子系统调优\"></a>3).网络 IO 子系统调优</h3><ul>\n<li>用于集群的网络建议尽可能使用 10Gb 网络</li>\n</ul>\n<p>以下参数用于缓冲区内存管理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#设置OS接收缓冲区的内存大小，第一个值告知内核一个TCP socket的最小缓冲区空间，第二值为默认缓冲区空间，第三个值是最大缓冲区空间</span>\nnet.ipv4.tcp_wmem\n\n<span class=\"token comment\">#设置Os发送缓冲区的内存大小</span>\nnet.ipv4.tcp_rmem\n\n<span class=\"token comment\">#定义TCP stack如何反应内存使用情况</span>\nnet.ipv4.tcp_mem<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>交换机启用大型帧</li>\n</ul>\n<blockquote>\n<p>默认情况下，以太网最大传输数据包大小为 1500 字节。为提高吞吐量并减少处理开销，一种策略是将以太网网络配置为允许设备发送和接收更大的巨型帧。</p>\n</blockquote>\n<ul>\n<li>在使用巨型帧的要谨慎，因为需要硬件支持，且全部以太网口配置为相同的巨型帧 MTU 大小。</li>\n</ul>\n<h3 id=\"4-虚拟内存调优\"><a href=\"#4-虚拟内存调优\" class=\"headerlink\" title=\"4).虚拟内存调优\"></a>4).虚拟内存调优</h3><p>设置较低的比率会导致高频但用时短的写操作，这适合 Ceph 等 I&#x2F;O 密集型应用。设置较高的比率会导致低频但用时长的写操作，这会产生较小的系统开销，但可能会造成应用响应时间变长</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#脏内存占总系统总内存的百分比，达到此比率时内核会开始在后台写出数据</span>\nvm.dirty_background_ratio\n\n<span class=\"token comment\">#脏内存占总系统总内存的百分比，达到此比率时写入进程停滞，而系统会将内存页清空到后端存储</span>\nvm.dirty_ratio\n\n<span class=\"token comment\">#控制交换分区的使用,生产中建议完全关闭，会拖慢系统运行速度</span>\nvm.swappiness\n\n<span class=\"token comment\">#系统尽力保持可用状态的RAM大小。在一个RAM大于48G的系统上，建议设置为4G</span>\nvm.min_free_kbytes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-Ceph-本身调优\"><a href=\"#2-Ceph-本身调优\" class=\"headerlink\" title=\"2.Ceph 本身调优\"></a>2.Ceph 本身调优</h2><h3 id=\"1-最佳实践\"><a href=\"#1-最佳实践\" class=\"headerlink\" title=\"1).最佳实践\"></a>1).最佳实践</h3><ul>\n<li>MON 的性能对集群总体性能至关重要，应用部署于专用节点，为确保正确仲裁，数量应为奇数个</li>\n<li>在 OSD 节点上，操作系统、OSD 数据、OSD 日志应当位于独立的磁盘上，以确保满意的吞吐量</li>\n<li>在集群安装后，需要监控集群、排除故障并维护，尽管 Ceph 具有自愈功能。如果发生性能问题，首先在磁盘、网络和硬件层面上调查。然后逐步转向 RADOS 块设备和 Ceph 对象网关</li>\n</ul>\n<h3 id=\"2-影响-I-x2F-O-的-6-大操作\"><a href=\"#2-影响-I-x2F-O-的-6-大操作\" class=\"headerlink\" title=\"2).影响 I&#x2F;O 的 6 大操作\"></a>2).影响 I&#x2F;O 的 6 大操作</h3><ul>\n<li>业务数据写入</li>\n<li>数据恢复</li>\n<li>数据回填</li>\n<li>数据重平衡</li>\n<li>数据一致性校验</li>\n<li>快照清理</li>\n</ul>\n<h3 id=\"3-OSD-生产建议\"><a href=\"#3-OSD-生产建议\" class=\"headerlink\" title=\"3).OSD 生产建议\"></a>3).OSD 生产建议</h3><ul>\n<li>更快的日志性能可以改进响应时间，建议将单独的低延迟 SSD 或者 NVMe 设备用于 OSD 日志。</li>\n<li>多个日志可以共享同一 SSD，以降低存储基础架构的成本。但是不能将过多 OSD 日志放在同一设备上。</li>\n<li>建议每个 SATA OSD 设备不超过 6 个 OSD 日志，每个 NVMe 设备不超过 12 个 OSD 日志。</li>\n<li>需要说明的是，当用于托管日志的 SSD 或者 NVMe 设备故障时，使用它托管其日志的所有 OSD 也都变得不可用</li>\n</ul>\n<h3 id=\"4-硬件建议\"><a href=\"#4-硬件建议\" class=\"headerlink\" title=\"4).硬件建议\"></a>4).硬件建议</h3><ul>\n<li>将一个 raid1 磁盘用于 ceph 操作系统</li>\n<li>每个 OSD 一块硬盘，尽量将 SSD 或者 NVMe 用于日志</li>\n<li>使用多个 10Gb 网卡，每个网络一个双链路绑定（建议生产环境 2 个网卡 4 个光模块，2 个万兆口做为数据的交换，2 个万兆口做业务流量）</li>\n<li>每个 OSD 预留 1 个 CPU,每个逻辑核心 1GHz，分配 16GB 内存，外加每个 OSD 2G 内存</li>\n</ul>\n<h3 id=\"5-RBD-生产建议\"><a href=\"#5-RBD-生产建议\" class=\"headerlink\" title=\"5).RBD 生产建议\"></a>5).RBD 生产建议</h3><ul>\n<li>块设备上的工作负载通常是 I&#x2F;O 密集型负载，例如在 OpenStack 中虚拟机上运行数据库。</li>\n<li>对于 RBD,OSD 日志应当位于 SSD 或者 NVMe 设备上</li>\n<li>对后端存储，可以使用不同的存储设备以提供不同级别的服务</li>\n</ul>\n<h3 id=\"6-对象网关生产建议\"><a href=\"#6-对象网关生产建议\" class=\"headerlink\" title=\"6).对象网关生产建议\"></a>6).对象网关生产建议</h3><ul>\n<li>Ceph 对象网关工作负载通常是吞吐密集型负载。但是其 bucket 索引池为 I&#x2F;O 密集型工作负载模式。应当将这个池存储在 SSD 设备上</li>\n<li>Ceph 对象网关为每个存储桶维护一个索引。Ceph 将这一索引存储在 RADOS 对象中。当存储桶存储数量巨大的对象时（超过 100000 个），索引性能会降低，因为只有一个 RADOS 对象参与所有索引操作。</li>\n<li>Ceph 可以在多个 RADOS 对象或分片中保存大型索引。可以在 ceph.conf 中设置 rgw_override_bucket_index_max_shards 配置参数来启用该功能。此参数的建议值是存储桶中预计对象数量除以 10000</li>\n<li>当索引变大，Ceph 通常需要重新划分存储桶。rgw_dynamic_resharding 配置控制该功能，默认为 true</li>\n</ul>\n<h3 id=\"7-CephFS-生产建议\"><a href=\"#7-CephFS-生产建议\" class=\"headerlink\" title=\"7).CephFS 生产建议\"></a>7).CephFS 生产建议</h3><ul>\n<li>存放目录结构和其他索引的元数据池可能会成为 CephFS 的瓶颈。因此，应该将 SSD 设备用于这个池</li>\n<li>每个 MDS 维护一个内存中缓存 ，用于索引节点等不同类型的项目。Ceph 使用 mds_cache_memory_limit 配置参数限制这一缓存的大小。其默认值为 1GB，可以在需要时调整，得不得超过系统总内存数</li>\n</ul>\n<h3 id=\"8-Monitor-生产建议\"><a href=\"#8-Monitor-生产建议\" class=\"headerlink\" title=\"8).Monitor 生产建议\"></a>8).Monitor 生产建议</h3><ul>\n<li>最好为每个 MON 一个独立的服务器&#x2F;虚拟机</li>\n<li>小型和中型集群，使用 10000RPM 的磁盘，大型集群使用 SSD</li>\n<li>CPU 使用方面：使用一个多核 CPU，最少 16G 内存，最好不要和 osd 存放在同一个服务器上</li>\n</ul>\n<h3 id=\"9-将-OSD-日志迁移到-SSD\"><a href=\"#9-将-OSD-日志迁移到-SSD\" class=\"headerlink\" title=\"9).将 OSD 日志迁移到 SSD\"></a>9).将 OSD 日志迁移到 SSD</h3><p>强烈建议生产中千万不要这么干，一定在集群初始化的时候就定制好</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#集群中设置标志位停止指定的osd使用</span>\nceph osd <span class=\"token builtin class-name\">set</span> noout\n\n<span class=\"token comment\">#停止osd的进程</span>\nsystemctl stop ceph-osd@3\n\n<span class=\"token comment\">#将所有的日志做刷盘处理，刷盘到osd中</span>\nceph-osd <span class=\"token parameter variable\">-i</span> <span class=\"token number\">3</span> --flush-journal\n\n<span class=\"token comment\">#删除该osd现有的日志</span>\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> /var/lib/ceph/osd/ceph-3/journal\n\n<span class=\"token comment\">#/dev/sdc1为SSD盘创建一个软连接</span>\n<span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /dev/sdc1 /var/lib/ceph/osd/ceph-3/journal\n\n<span class=\"token comment\">#刷出日志</span>\nceph-osd <span class=\"token parameter variable\">-i</span> <span class=\"token number\">3</span> <span class=\"token parameter variable\">--mkjournal</span>\n\n<span class=\"token comment\">#启动osd</span>\nsystemctl start ceph-osd@3\n\n<span class=\"token comment\">#移除标志位</span>\nceph osd <span class=\"token builtin class-name\">unset</span> noout<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"10-存储池中-PG-的计算方法\"><a href=\"#10-存储池中-PG-的计算方法\" class=\"headerlink\" title=\"10).存储池中 PG 的计算方法\"></a>10).存储池中 PG 的计算方法</h3><ul>\n<li><p>通常，计算一个池中应该有多少个归置组的计算方法 &#x3D; 100 * OSDs(个数) &#x2F; size(副本数)</p>\n</li>\n<li><p>一种比较通用的取值规则：</p>\n<ul>\n<li>少于 5 个 OSD 时可把 pg_num 设置为 128</li>\n<li>OSD 数量在 5 到 10 个时，可把 pg_num 设置为 512</li>\n<li>OSD 数量在 10 到 50 个时，可把 pg_num 设置为 4096</li>\n<li>OSD 数量大于 50 时，建议自行计算</li>\n</ul>\n</li>\n<li><p>自行计算 pg_num 聚会时的工具</p>\n<ul>\n<li>pgcalc：<a href=\"https://ceph.com/pgcalc/\">https://ceph.com/pgcalc/</a></li>\n<li>cephpgc：<a href=\"https://access.redhat.com/labs/cephpgc/\">https://access.redhat.com/labs/cephpgc/</a></li>\n</ul>\n</li>\n<li><p>注意：在实际的生产环境中我们很难去预估需要多少个 pool，每个 pool 所占用的数据大小的百分百。所以正常情况下需要在特定的情况选择动态扩缩容 pg 的大小</p>\n</li>\n</ul>\n<h3 id=\"11-PG-与-PGP\"><a href=\"#11-PG-与-PGP\" class=\"headerlink\" title=\"11).PG 与 PGP\"></a>11).PG 与 PGP</h3><blockquote>\n<p>通常而言，PG 与 PGP 是相同的当我们为一个池增加 PG 时，PG 会开始分裂，这个时候，OSD 上的数据开始移动到新的 PG，但总体而言，此时，数据还是在一个 OSD 的不同 PG 中迁移而我们一旦同时增加了 PGP，则 PG 开始在多个 OSD 上重平衡，这时会出现跨 OSD 的数据迁移</p>\n</blockquote>\n<ul>\n<li>ceph osd pool create poolName PgNum PgpNum</li>\n<li>当变动 pg 数量只是针对当前的特定池中的 osd 发生变动影响范围只是一个池的 pg 平衡</li>\n<li>正常情况下一个 osd 最多承载 100 个 pg</li>\n<li>当 pgp 发生大变动的时候会导致原本这个池中的 pg 变动导致池中 osd，过载或者有很大剩余性能，ceph 集群会将过大的性能均衡到各个性能使用小的 osd 上，这个时候就会发生数据的大规模迁移，大量的 i&#x2F;O 写入会占有网络带宽会严重影响使用中的 pg 性能导致阻塞发生。</li>\n<li>建议的做法是将 pg_num 直接设置为希望作为最终值的 PG 数量，而 PGP 的数量应当慢慢增加，以确保集群不会因为一段时间内的大量数据重平衡而导致的性能下降</li>\n</ul>\n<h3 id=\"12-Ceph-生产网络建议\"><a href=\"#12-Ceph-生产网络建议\" class=\"headerlink\" title=\"12).Ceph 生产网络建议\"></a>12).Ceph 生产网络建议</h3><ul>\n<li>尽可能使用 10Gb 网络带宽以上的万兆带宽(内网)</li>\n<li>尽可能使用不同的 cluster 网络和 public 网络</li>\n<li>做好必要的网络设备监控防止网络过载</li>\n</ul>\n<h3 id=\"13-OSD-和数据一致性校验\"><a href=\"#13-OSD-和数据一致性校验\" class=\"headerlink\" title=\"13).OSD 和数据一致性校验\"></a>13).OSD 和数据一致性校验</h3><blockquote>\n<p>清理会影响 ceph 集群性能，但建议不要禁用此功能，因为它能提供完数据的完整性</p>\n</blockquote>\n<ul>\n<li>清理：检查对象的存在性、校验和以及大小</li>\n<li>深度清理：检查对象的存在性和大小，重新计算并验证对象的校验和。(最好不开严重影响性能)</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#清理调优参数</span>\nosd_scrub_begin_hour <span class=\"token operator\">=</span>                    <span class=\"token comment\">#取值范围0-24</span>\nosd_scrub_end_hour <span class=\"token operator\">=</span> end_hbegin_hour our  <span class=\"token comment\">#取值范围0-24</span>\nosd_scrub_load_threshold                  <span class=\"token comment\">#当系统负载低于多少的时候可以清理，默认为0.5</span>\nosd_scrub_min_interval                    <span class=\"token comment\">#多久清理一次，默认是一天一次（前提是系统负载低于上一个参数的设定）</span>\nosd_scrub_interval_randomize_ratio        <span class=\"token comment\">#在清理的时候，随机延迟的值，默认是0.5</span>\nosd_scrub_max_interval                    <span class=\"token comment\">#清理的最大间隔时间，默认是一周（如果一周内没清理过，这次就必须清理，不管负载是多少）</span>\nosd_scrub_priority                        <span class=\"token comment\">#清理的优先级，默认是5</span>\nosd_deep_scrub_interal                    <span class=\"token comment\">#深度清理的时间间隔，默认是一周</span>\nosd_scrub_sleep                           <span class=\"token comment\">#当有磁盘读取时，则暂停清理，增加此值可减缓清理的速度以降低对客户端的影响，默认为0,范围0-1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#显示最近发生的清理和深度清理</span>\nceph pg dump all  <span class=\"token comment\"># 查看LAST_SCRUB和LAST_DEEP_SCRUB</span>\n<span class=\"token comment\">#-将清理调度到特定的pg</span>\nceph pg scrub pg-id\n<span class=\"token comment\">#将深度清理调度到特定的pg</span>\nceph pg deep-scrub pg-id\n<span class=\"token comment\">#为设定的池设定清理参数</span>\nceph osd pool <span class=\"token builtin class-name\">set</span> <span class=\"token operator\">&lt;</span>pool-name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>parameter<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>value<span class=\"token operator\">></span>\n    noscrub <span class=\"token comment\"># 不清理，默认为false</span>\n    nodeep-scrub <span class=\"token comment\"># 不深度清理，默认为false</span>\n    scrub_min_interval <span class=\"token comment\"># 如果设置为0，则应用全局配置osd_scrub_min_interval</span>\n    scrub_max_interval <span class=\"token comment\"># 如果设置为0，则应用全局配置osd_scrub_max_interval</span>\n    deep_scrub_interval <span class=\"token comment\"># 如果设置为0，则应用全局配置osd_scrub_interval</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"14-快照的生产建议\"><a href=\"#14-快照的生产建议\" class=\"headerlink\" title=\"14).快照的生产建议\"></a>14).快照的生产建议</h3><ul>\n<li>快照在池级别和 RBD 级别上提供。当快照被移除时，ceph 会以异步操作的形式删除快照数据，称为快照修剪进程</li>\n<li>为减轻快照修剪进程会影响集群总体性能。可以通过配置<code>osd_snap_trim_sleep</code>来在有客户端读写操作的时候暂停修剪，参数的值范围是<code>0</code>到<code>1</code></li>\n<li>快照修剪的优先级通过使用<code>osd_snap_trim_priority</code>参数控制，默认为<code>5</code></li>\n</ul>\n<h3 id=\"15-保护数据和-osd\"><a href=\"#15-保护数据和-osd\" class=\"headerlink\" title=\"15).保护数据和 osd\"></a>15).保护数据和 osd</h3><ul>\n<li><p>需要控制回填和恢复操作，以限制这些操作的影响</p>\n</li>\n<li><p>回填发生于新的 osd 加入集群时，或者 osd 死机并且 ceph 将其 pg 分配到其他 osd 时。在这种场景中，ceph 必须要在可用的 osd 之间复制对象副本</p>\n</li>\n<li><p>恢复发生于新的 osd 已有数据时，如出现短暂停机。在这种情形下，ceph 会简单的重放 pg 日志</p>\n<ul>\n<li>管理回填和恢复操作的配置项</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#用于限制每个osd上用于回填的并发操作数，默认为1</span>\nosd_max_backfills\n\n<span class=\"token comment\">#用于限制每个osd上用于恢复的并发操作数，默认为3</span>\nosd_recovery_max_active\n\n<span class=\"token comment\">#恢复操作的优先级，默认为3</span>\nosd_recovery_op_priority<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"16-OSD-数据存储后端\"><a href=\"#16-OSD-数据存储后端\" class=\"headerlink\" title=\"16).OSD 数据存储后端\"></a>16).OSD 数据存储后端</h3><blockquote>\n<p>BlueStore 管理一个，两个或（在某些情况下）三个存储设备。在最简单的情况下，BlueStore 使用单个（主）存储设备。存储设备通常作为一个整体使用，BlueStore 直接占用完整设备。该主设备通常由数据目录中的块符号链接标识。数据目录挂载成一个 tmpfs，它将填充（在启动时或 ceph-volume 激活它时）所有常用的 OSD 文件，其中包含有关 OSD 的信息，例如：其标识符，它所属的集群，以及它的私钥。还可以使用两个额外的设备部署 BlueStore</p>\n</blockquote>\n<ul>\n<li>WAL 设备（在数据目录中标识为 block.wal）可用于 BlueStore 的内部日志或预写日志。只有设备比主设备快（例如，当它在 SSD 上并且主设备是 HDD 时），使用 WAL 设备是有用的。</li>\n<li>数据库设备（在数据目录中标识为 block.db）可用于存储 BlueStore 的内部元数据。 BlueStore（或者更确切地说，嵌入式 RocksDB）将在数据库设备上放置尽可能多的元数据以提高性能。如果数据库设备填满，元数据将写到主设备。同样，数据库设备要比主设备更快，则提供数据库设备是有帮助的。</li>\n<li>如果只有少量快速存储可用（例如，小于 1GB），我们建议将其用作 WAL 设备。如果还有更多，配置数据库设备会更有意义。 BlueStore 日志将始终放在可用的最快设备上，因此使用数据库设备将提供与 WAL 设备相同的优势，同时还允许在其中存储其他元数据。</li>\n<li>正常 L 版本推荐使用 filestore，M 版本可以考虑使用 bluestore</li>\n<li>推荐优化文章：<a href=\"https://www.cnblogs.com/luxiaodai/p/10006036.html#_lab2_1_9\">https://www.cnblogs.com/luxiaodai/p/10006036.html#_lab2_1_9</a></li>\n</ul>\n<h3 id=\"17-关于性能测试\"><a href=\"#17-关于性能测试\" class=\"headerlink\" title=\"17).关于性能测试\"></a>17).关于性能测试</h3><ul>\n<li>推荐使用 fio 参考阿里云文档：<a href=\"https://help.aliyun.com/document_detail/95501.html?spm=a2c4g.11174283.6.659.38b44da2KZr2Sn\">https://help.aliyun.com/document_detail&#x2F;95501.html?spm&#x3D;a2c4g.11174283.6.659.38b44da2KZr2Sn</a></li>\n<li>dd</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">3</span> <span class=\"token operator\">></span> /proc/sys/vm/drop_caches\n<span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/dev/zero <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>/var/lib/ceph/osd/ceph-0/test.img <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>4M <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">1024</span> <span class=\"token assign-left variable\">oflag</span><span class=\"token operator\">=</span>direct\n<span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/var/lib/ceph/osd/ceph-0/test.img <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>/dev/null <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>4M <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">1024</span> <span class=\"token assign-left variable\">oflag</span><span class=\"token operator\">=</span>direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>rados bench 性能测试</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rados bench <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">&lt;</span>pool_name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>seconds<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>write<span class=\"token operator\">|</span><span class=\"token function\">seq</span><span class=\"token operator\">|</span>rand<span class=\"token operator\">></span> <span class=\"token parameter variable\">-b</span> <span class=\"token operator\">&lt;</span>block size<span class=\"token operator\">></span> <span class=\"token parameter variable\">-t</span> --no-cleanup\n    pool_name 测试所针对的池\n    seconds 测试所持续的时间，以秒为单位\n    <span class=\"token operator\">&lt;</span>write<span class=\"token operator\">|</span><span class=\"token function\">seq</span><span class=\"token operator\">|</span>rand<span class=\"token operator\">></span> 操作模式，分别是写、顺序读、随机读\n    <span class=\"token parameter variable\">-b</span> <span class=\"token operator\">&lt;</span>block_size<span class=\"token operator\">></span> 块大小，默认是4M\n    <span class=\"token parameter variable\">-t</span> 读/写的并行数，默认为16\n    --no-cleanup 表示测试完成后不删除测试用的数据。在做读测试之前，需要使用该参数来运行一遍写测试来产生测试数据，在全部测试完成以后，可以行rados <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">&lt;</span>pool_name<span class=\"token operator\">></span> cleanup来清理所有测试数据\n\n<span class=\"token comment\">#示例：</span>\nrados bench <span class=\"token parameter variable\">-p</span> rbd <span class=\"token number\">10</span> <span class=\"token function\">write</span> --no-cleanup\nrados bench <span class=\"token parameter variable\">-p</span> rbd <span class=\"token number\">10</span> <span class=\"token function\">seq</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>rbd bench 性能测试</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rbd bench <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">&lt;</span>pool_name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>image_name<span class=\"token operator\">></span> --io-type <span class=\"token operator\">&lt;</span>write<span class=\"token operator\">|</span>read<span class=\"token operator\">></span> --io-size <span class=\"token operator\">&lt;</span>size<span class=\"token operator\">></span> --io-threads <span class=\"token operator\">&lt;</span>num<span class=\"token operator\">></span> --io-total <span class=\"token operator\">&lt;</span>size<span class=\"token operator\">></span> --io-pattern <span class=\"token operator\">&lt;</span>seq<span class=\"token operator\">|</span>rand<span class=\"token operator\">></span>\n    --io-type 测试类型，读/写\n    --io-size 字节数，默认4096\n    --io-threads 线程数，默认16\n    --io-total  读/写的总大小，默认1GB\n    --io-pattern  读/写的方式，顺序还是随机\n\n<span class=\"token comment\">#示例：</span>\nhttps://edenmal.moe/post/2017/Ceph-rbd-bench-Commands/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-设置集群的标志\"><a href=\"#3-设置集群的标志\" class=\"headerlink\" title=\"3.设置集群的标志\"></a>3.设置集群的标志</h2><p><strong>flag 操作</strong></p>\n<ul>\n<li><p>只能对整个集群操作，不能针对单个 osd</p>\n<ul>\n<li>ceph osd set</li>\n<li>ceph osd unset</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#示例：</span>\nceph osd <span class=\"token builtin class-name\">set</span> nodown\nceph osd <span class=\"token builtin class-name\">unset</span> nodown\nceph <span class=\"token parameter variable\">-s</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">标志名称</th>\n<th align=\"left\">含义用法详解</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">noup</td>\n<td align=\"left\">OSD 启动时，会将自己在 MON 上标识为 UP 状态，设置该标志位，则 OSD 不会被自动标识为 up 状态</td>\n</tr>\n<tr>\n<td align=\"left\">nodown</td>\n<td align=\"left\">OSD 停止时，MON 会将 OSD 标识为 down 状态，设置该标志位，则 MON 不会将停止的 OSD 标识为 down 状态，设置 noup 和 nodown 可以防止网络抖动</td>\n</tr>\n<tr>\n<td align=\"left\">noout</td>\n<td align=\"left\">设置该标志位，则 mon 不会从 crush 映射中删除任何 OSD。对 OSD 作维护时，可设置该标志位，以防止 CRUSH 在 OSD 停止时自动重平衡数据。OSD 重新启动时，需要清除该 flag</td>\n</tr>\n<tr>\n<td align=\"left\">noin</td>\n<td align=\"left\">设置该标志位，可以防止数据被自动分配到 OSD 上</td>\n</tr>\n<tr>\n<td align=\"left\">norecover</td>\n<td align=\"left\">设置该 flag，禁止任何集群恢复操作。在执行维护和停机时，可设置该 flag</td>\n</tr>\n<tr>\n<td align=\"left\">nobackfill</td>\n<td align=\"left\">禁止数据回填</td>\n</tr>\n<tr>\n<td align=\"left\">noscrub</td>\n<td align=\"left\">禁止清理操作。清理 PG 会在短期内影响 OSD 的操作。在低带宽集群中，清理期间如果 OSD 的速度过慢，则会被标记为 down。可以该标记来防止这种情况发生</td>\n</tr>\n<tr>\n<td align=\"left\">nodeep-scrub</td>\n<td align=\"left\">禁止深度清理</td>\n</tr>\n<tr>\n<td align=\"left\">norebalance</td>\n<td align=\"left\">禁止重平衡数据。在执行集群维护或者停机时，可以使用该 flag</td>\n</tr>\n<tr>\n<td align=\"left\">pause</td>\n<td align=\"left\">设置该标志位，则集群停止读写，但不影响 osd 自检</td>\n</tr>\n<tr>\n<td align=\"left\">full</td>\n<td align=\"left\">标记集群已满，将拒绝任何数据写入，但可读</td>\n</tr>\n</tbody></table>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p><a href=\"https://poph163.com/category/%e5%88%86%e5%b8%83%e5%bc%8f%e5%ad%98%e5%82%a8/\">https://poph163.com/category/分布式存储/</a></p>"},{"title":"MetalLB 安装","date":"2023-12-27T16:00:00.000Z","updated":"2023-12-27T16:00:00.000Z","_content":"## MetalLB 安装\n\n### 下载 release 版本\n\n```bash\nwget https://github.com/metallb/metallb/archive/refs/tags/v0.12.1.tar.gz\ntar -zxvf v0.12.1.tar.gz\ncd metallb-0.12.1/manifests\n\nkubectl apply -f namespace.yaml\nkubectl apply -f metallb.yaml\n\n```\n\n### 查看 pod 状态\n\n```bash\nkubectl -n metallb-system get pods \n```\n\n### 查看 Deploy 状态\n\n```bash\nkubectl -n metallb-system get deploy\n```\n\n目前还没有宣布任何内容，因为我们没有提供ConfigMap，也没有提供负载均衡地址的服务。接下来要生成一个 Configmap 文件，为 Metallb 设置网址范围以及协议相关的选择和配置，这里以一个简单的二层配置为例。\n\n修改ip地址池，从集群IP地址段中为MetalLB分配部分IP地址：\n\n```bash\nvim example-layer2-config.yaml \n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  namespace: metallb-system\n  name: config\ndata:\n  config: |\n    address-pools:\n    - name: default\n      protocol: layer2\n      addresses:\n      - 192.168.72.200-192.168.72.250\n---\nkubectl apply -f example-layer2-config.yaml\n```\n\n\n\n### 创建后端应用和服务测试\n\n```bash\nkubectl apply -f tutorial-2.yaml \n```\n\n查看yaml文件配置，包含了一个deployment和一个LoadBalancer类型的service，默认即可。\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:latest\n        ports:\n        - name: http\n          containerPort: 80\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx\nspec:\n  ports:\n  - name: http\n    port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: nginx\n  type: LoadBalancer\n```\n\n### 查看service分配的EXTERNAL-IP\n\n```bash\nkubectl get service \n```\n\n","source":"_posts/k8s/MetaLib 安装.md","raw":"---\ntitle: MetalLB 安装\ndate: 2023-12-28\nupdated: 2023-12-28\ncategories: k8s\n---\n## MetalLB 安装\n\n### 下载 release 版本\n\n```bash\nwget https://github.com/metallb/metallb/archive/refs/tags/v0.12.1.tar.gz\ntar -zxvf v0.12.1.tar.gz\ncd metallb-0.12.1/manifests\n\nkubectl apply -f namespace.yaml\nkubectl apply -f metallb.yaml\n\n```\n\n### 查看 pod 状态\n\n```bash\nkubectl -n metallb-system get pods \n```\n\n### 查看 Deploy 状态\n\n```bash\nkubectl -n metallb-system get deploy\n```\n\n目前还没有宣布任何内容，因为我们没有提供ConfigMap，也没有提供负载均衡地址的服务。接下来要生成一个 Configmap 文件，为 Metallb 设置网址范围以及协议相关的选择和配置，这里以一个简单的二层配置为例。\n\n修改ip地址池，从集群IP地址段中为MetalLB分配部分IP地址：\n\n```bash\nvim example-layer2-config.yaml \n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  namespace: metallb-system\n  name: config\ndata:\n  config: |\n    address-pools:\n    - name: default\n      protocol: layer2\n      addresses:\n      - 192.168.72.200-192.168.72.250\n---\nkubectl apply -f example-layer2-config.yaml\n```\n\n\n\n### 创建后端应用和服务测试\n\n```bash\nkubectl apply -f tutorial-2.yaml \n```\n\n查看yaml文件配置，包含了一个deployment和一个LoadBalancer类型的service，默认即可。\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:latest\n        ports:\n        - name: http\n          containerPort: 80\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx\nspec:\n  ports:\n  - name: http\n    port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: nginx\n  type: LoadBalancer\n```\n\n### 查看service分配的EXTERNAL-IP\n\n```bash\nkubectl get service \n```\n\n","slug":"k8s/MetaLib 安装","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor7o000fzc7h37va2e25","content":"<h2 id=\"MetalLB-安装\"><a href=\"#MetalLB-安装\" class=\"headerlink\" title=\"MetalLB 安装\"></a>MetalLB 安装</h2><h3 id=\"下载-release-版本\"><a href=\"#下载-release-版本\" class=\"headerlink\" title=\"下载 release 版本\"></a>下载 release 版本</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://github.com/metallb/metallb/archive/refs/tags/v0.12.1.tar.gz\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> v0.12.1.tar.gz\n<span class=\"token builtin class-name\">cd</span> metallb-0.12.1/manifests\n\nkubectl apply <span class=\"token parameter variable\">-f</span> namespace.yaml\nkubectl apply <span class=\"token parameter variable\">-f</span> metallb.yaml\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"查看-pod-状态\"><a href=\"#查看-pod-状态\" class=\"headerlink\" title=\"查看 pod 状态\"></a>查看 pod 状态</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl <span class=\"token parameter variable\">-n</span> metallb-system get pods <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"查看-Deploy-状态\"><a href=\"#查看-Deploy-状态\" class=\"headerlink\" title=\"查看 Deploy 状态\"></a>查看 Deploy 状态</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl <span class=\"token parameter variable\">-n</span> metallb-system get deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>目前还没有宣布任何内容，因为我们没有提供ConfigMap，也没有提供负载均衡地址的服务。接下来要生成一个 Configmap 文件，为 Metallb 设置网址范围以及协议相关的选择和配置，这里以一个简单的二层配置为例。</p>\n<p>修改ip地址池，从集群IP地址段中为MetalLB分配部分IP地址：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> example-layer2-config.yaml \n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  namespace: metallb-system\n  name: config\ndata:\n  config: <span class=\"token operator\">|</span>\n    address-pools:\n    - name: default\n      protocol: layer2\n      addresses:\n      - <span class=\"token number\">192.168</span>.72.200-192.168.72.250\n---\nkubectl apply <span class=\"token parameter variable\">-f</span> example-layer2-config.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"创建后端应用和服务测试\"><a href=\"#创建后端应用和服务测试\" class=\"headerlink\" title=\"创建后端应用和服务测试\"></a>创建后端应用和服务测试</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> tutorial-2.yaml <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看yaml文件配置，包含了一个deployment和一个LoadBalancer类型的service，默认即可。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>latest\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n          <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> LoadBalancer<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"查看service分配的EXTERNAL-IP\"><a href=\"#查看service分配的EXTERNAL-IP\" class=\"headerlink\" title=\"查看service分配的EXTERNAL-IP\"></a>查看service分配的EXTERNAL-IP</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get <span class=\"token function\">service</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric10.png","cover_type":"img","excerpt":"","more":"<h2 id=\"MetalLB-安装\"><a href=\"#MetalLB-安装\" class=\"headerlink\" title=\"MetalLB 安装\"></a>MetalLB 安装</h2><h3 id=\"下载-release-版本\"><a href=\"#下载-release-版本\" class=\"headerlink\" title=\"下载 release 版本\"></a>下载 release 版本</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://github.com/metallb/metallb/archive/refs/tags/v0.12.1.tar.gz\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> v0.12.1.tar.gz\n<span class=\"token builtin class-name\">cd</span> metallb-0.12.1/manifests\n\nkubectl apply <span class=\"token parameter variable\">-f</span> namespace.yaml\nkubectl apply <span class=\"token parameter variable\">-f</span> metallb.yaml\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"查看-pod-状态\"><a href=\"#查看-pod-状态\" class=\"headerlink\" title=\"查看 pod 状态\"></a>查看 pod 状态</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl <span class=\"token parameter variable\">-n</span> metallb-system get pods <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"查看-Deploy-状态\"><a href=\"#查看-Deploy-状态\" class=\"headerlink\" title=\"查看 Deploy 状态\"></a>查看 Deploy 状态</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl <span class=\"token parameter variable\">-n</span> metallb-system get deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>目前还没有宣布任何内容，因为我们没有提供ConfigMap，也没有提供负载均衡地址的服务。接下来要生成一个 Configmap 文件，为 Metallb 设置网址范围以及协议相关的选择和配置，这里以一个简单的二层配置为例。</p>\n<p>修改ip地址池，从集群IP地址段中为MetalLB分配部分IP地址：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> example-layer2-config.yaml \n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  namespace: metallb-system\n  name: config\ndata:\n  config: <span class=\"token operator\">|</span>\n    address-pools:\n    - name: default\n      protocol: layer2\n      addresses:\n      - <span class=\"token number\">192.168</span>.72.200-192.168.72.250\n---\nkubectl apply <span class=\"token parameter variable\">-f</span> example-layer2-config.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"创建后端应用和服务测试\"><a href=\"#创建后端应用和服务测试\" class=\"headerlink\" title=\"创建后端应用和服务测试\"></a>创建后端应用和服务测试</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> tutorial-2.yaml <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看yaml文件配置，包含了一个deployment和一个LoadBalancer类型的service，默认即可。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>latest\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n          <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nginx\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> LoadBalancer<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"查看service分配的EXTERNAL-IP\"><a href=\"#查看service分配的EXTERNAL-IP\" class=\"headerlink\" title=\"查看service分配的EXTERNAL-IP\"></a>查看service分配的EXTERNAL-IP</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get <span class=\"token function\">service</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n"},{"title":"k8s 创建单节点 mysql 并持久化存储","date":"2023-10-10T05:00:00.000Z","updated":"2023-10-10T05:00:00.000Z","keywords":"k8s","copyright":false,"_content":"\n# k8s 创建单节点 mysql 并持久化存储\n\n## 配置示例\n\n1. 创建 pvc\n\n```yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mysql-data\n  namespace: dev\nspec:\n  accessModes:\n    - ReadWriteMany\n  storageClassName: csi-cephfs-sc-retain\n  resources:\n    requests:\n      storage: 50Gi\n```\n\n2. mysql 的一些资源配置\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mysql-config\n  namespace: dev\ndata:\n  rootPwd: \"d72a3dpe\"\n  config.cnf: \"\"\n\n---\n# deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mysql\n  namespace: dev\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n        - name: mysql\n          image: mysql:8.1.0\n          imagePullPolicy: IfNotPresent\n          args:\n            - --character-set-server=utf8mb4\n            - --collation-server=utf8mb4_unicode_ci\n          ports:\n            - containerPort: 3306\n            - containerPort: 33060\n          env:\n            - name: MYSQL_ROOT_PASSWORD\n              valueFrom:\n                configMapKeyRef:\n                  name: mysql-config\n                  key: rootPwd\n          volumeMounts:\n            - name: config-dir\n              mountPath: /etc/mysql/conf.d\n              readOnly: true\n            - name: data-dir\n              mountPath: /var/lib/mysql\n      volumes:\n        - name: config-dir\n          configMap:\n            name: mysql-config\n            items:\n              # name 是对应 secret 中的 key, path 是挂载 secret 后的子文件路径\n              - key: config.cnf\n                path: config.cnf\n        - name: data-dir\n          persistentVolumeClaim:\n            claimName: mysql-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql\n  namespace: dev\nspec:\n  selector:\n    app: mysql\n  ports:\n    - name: mysql\n      protocol: TCP\n      port: 3306\n      targetPort: 3306\n  type: NodePort\n```\n","source":"_posts/k8s/k8s 创建单节点 mysql 并持久化存储.md","raw":"---\ntitle: k8s 创建单节点 mysql 并持久化存储\ndate: 2023-10-10 13:00:00\nupdated: 2023-10-10 13:00:00\ntags: k8s\ncategories: 容器/虚拟化\nkeywords: k8s\ncopyright: false\n---\n\n# k8s 创建单节点 mysql 并持久化存储\n\n## 配置示例\n\n1. 创建 pvc\n\n```yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mysql-data\n  namespace: dev\nspec:\n  accessModes:\n    - ReadWriteMany\n  storageClassName: csi-cephfs-sc-retain\n  resources:\n    requests:\n      storage: 50Gi\n```\n\n2. mysql 的一些资源配置\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mysql-config\n  namespace: dev\ndata:\n  rootPwd: \"d72a3dpe\"\n  config.cnf: \"\"\n\n---\n# deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mysql\n  namespace: dev\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n        - name: mysql\n          image: mysql:8.1.0\n          imagePullPolicy: IfNotPresent\n          args:\n            - --character-set-server=utf8mb4\n            - --collation-server=utf8mb4_unicode_ci\n          ports:\n            - containerPort: 3306\n            - containerPort: 33060\n          env:\n            - name: MYSQL_ROOT_PASSWORD\n              valueFrom:\n                configMapKeyRef:\n                  name: mysql-config\n                  key: rootPwd\n          volumeMounts:\n            - name: config-dir\n              mountPath: /etc/mysql/conf.d\n              readOnly: true\n            - name: data-dir\n              mountPath: /var/lib/mysql\n      volumes:\n        - name: config-dir\n          configMap:\n            name: mysql-config\n            items:\n              # name 是对应 secret 中的 key, path 是挂载 secret 后的子文件路径\n              - key: config.cnf\n                path: config.cnf\n        - name: data-dir\n          persistentVolumeClaim:\n            claimName: mysql-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql\n  namespace: dev\nspec:\n  selector:\n    app: mysql\n  ports:\n    - name: mysql\n      protocol: TCP\n      port: 3306\n      targetPort: 3306\n  type: NodePort\n```\n","slug":"k8s/k8s 创建单节点 mysql 并持久化存储","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor7o000hzc7h0obnb4ks","content":"<h1 id=\"k8s-创建单节点-mysql-并持久化存储\"><a href=\"#k8s-创建单节点-mysql-并持久化存储\" class=\"headerlink\" title=\"k8s 创建单节点 mysql 并持久化存储\"></a>k8s 创建单节点 mysql 并持久化存储</h1><h2 id=\"配置示例\"><a href=\"#配置示例\" class=\"headerlink\" title=\"配置示例\"></a>配置示例</h2><ol>\n<li>创建 pvc</li>\n</ol>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>data\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ReadWriteMany\n  <span class=\"token key atrule\">storageClassName</span><span class=\"token punctuation\">:</span> csi<span class=\"token punctuation\">-</span>cephfs<span class=\"token punctuation\">-</span>sc<span class=\"token punctuation\">-</span>retain\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 50Gi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>mysql 的一些资源配置</li>\n</ol>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ConfigMap\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>config\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">rootPwd</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"d72a3dpe\"</span>\n  <span class=\"token key atrule\">config.cnf</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token comment\"># deployment.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> mysql\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> mysql\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span>8.1.0\n          <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n          <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>character<span class=\"token punctuation\">-</span>set<span class=\"token punctuation\">-</span>server=utf8mb4\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>collation<span class=\"token punctuation\">-</span>server=utf8mb4_unicode_ci\n          <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">33060</span>\n          <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> MYSQL_ROOT_PASSWORD\n              <span class=\"token key atrule\">valueFrom</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">configMapKeyRef</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>config\n                  <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> rootPwd\n          <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">-</span>dir\n              <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /etc/mysql/conf.d\n              <span class=\"token key atrule\">readOnly</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">-</span>dir\n              <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /var/lib/mysql\n      <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">-</span>dir\n          <span class=\"token key atrule\">configMap</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>config\n            <span class=\"token key atrule\">items</span><span class=\"token punctuation\">:</span>\n              <span class=\"token comment\"># name 是对应 secret 中的 key, path 是挂载 secret 后的子文件路径</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> config.cnf\n                <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> config.cnf\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">-</span>dir\n          <span class=\"token key atrule\">persistentVolumeClaim</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">claimName</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>data\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> mysql\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql\n      <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> NodePort<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric1.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"k8s-创建单节点-mysql-并持久化存储\"><a href=\"#k8s-创建单节点-mysql-并持久化存储\" class=\"headerlink\" title=\"k8s 创建单节点 mysql 并持久化存储\"></a>k8s 创建单节点 mysql 并持久化存储</h1><h2 id=\"配置示例\"><a href=\"#配置示例\" class=\"headerlink\" title=\"配置示例\"></a>配置示例</h2><ol>\n<li>创建 pvc</li>\n</ol>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>data\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ReadWriteMany\n  <span class=\"token key atrule\">storageClassName</span><span class=\"token punctuation\">:</span> csi<span class=\"token punctuation\">-</span>cephfs<span class=\"token punctuation\">-</span>sc<span class=\"token punctuation\">-</span>retain\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 50Gi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>mysql 的一些资源配置</li>\n</ol>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ConfigMap\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>config\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">rootPwd</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"d72a3dpe\"</span>\n  <span class=\"token key atrule\">config.cnf</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token comment\"># deployment.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> mysql\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> mysql\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span>8.1.0\n          <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n          <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>character<span class=\"token punctuation\">-</span>set<span class=\"token punctuation\">-</span>server=utf8mb4\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>collation<span class=\"token punctuation\">-</span>server=utf8mb4_unicode_ci\n          <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">33060</span>\n          <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> MYSQL_ROOT_PASSWORD\n              <span class=\"token key atrule\">valueFrom</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">configMapKeyRef</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>config\n                  <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> rootPwd\n          <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">-</span>dir\n              <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /etc/mysql/conf.d\n              <span class=\"token key atrule\">readOnly</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">-</span>dir\n              <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /var/lib/mysql\n      <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">-</span>dir\n          <span class=\"token key atrule\">configMap</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>config\n            <span class=\"token key atrule\">items</span><span class=\"token punctuation\">:</span>\n              <span class=\"token comment\"># name 是对应 secret 中的 key, path 是挂载 secret 后的子文件路径</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> config.cnf\n                <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> config.cnf\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">-</span>dir\n          <span class=\"token key atrule\">persistentVolumeClaim</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">claimName</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>data\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> mysql\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql\n      <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> NodePort<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"k8s 创建 ubuntu22.04 并暴露22端口","date":"2023-06-11T16:00:00.000Z","updated":"2023-06-11T16:00:00.000Z","keywords":"Java 面试","description":"Java 精选","copyright":false,"_content":"\n要在Kubernetes中创建一个Ubuntu 20.04容器暴露22端口并在后台永久运行，可以按照以下步骤进行操作：\n\n## 创建一个名为`ubuntu-ssh`的Deployment：\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ubuntu-ssh\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: ubuntu-ssh\n  template:\n    metadata:\n      labels:\n        app: ubuntu-ssh\n    spec:\n      containers:\n      - name: ubuntu-ssh\n        image: ubuntu:20.04\n        command: [\"/bin/bash\"]\n        args: [\"-c\", \"while true; do sleep 30; done\"]\n        ports:\n        - containerPort: 22\n```\n\n这将创建一个名为`ubuntu-ssh`的Deployment，该Deployment将在单个Pod中运行一个名为`ubuntu-ssh`的容器。容器将使用`ubuntu:20.04`作为基本镜像，运行一个无限循环的`sleep`命令来保持容器运行，并暴露22端口。\n\n## 创建一个名为`ubuntu-ssh`的Service：\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: ubuntu-ssh\nspec:\n  selector:\n    app: ubuntu-ssh\n  ports:\n  - name: ssh\n    protocol: TCP\n    port: 22\n    targetPort: 22\n  type: ClusterIP\n```\n\n\n\n这将创建一个名为`ubuntu-ssh`的Service，并将其连接到Deployment。Service将使用`ClusterIP`类型，并在22端口上公开SSH服务。\n\n## 在容器中安装SSH服务器：\n\n```bash\nkubectl exec -it <ubuntu-ssh-pod> -- /bin/bash\napt-get update\napt-get install -y openssh-server\n```\n\n这将在运行`ubuntu-ssh`容器的Pod中打开一个shell，并安装SSH服务器。\n\n## 在容器中配置SSH服务器：\n\n```bash\necho 'root:password' | chpasswd\nsed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\n    service ssh restart\n```\n\n这将设置root用户的密码为`password`，启用root用户的SSH登录，并重新启动SSH服务器。\n\n现在，您已经在Kubernetes中创建了一个Ubuntu 20.04容器，该容器暴露22端口并在后台永久运行。您可以使用SSH客户端连接到该容器，例如：\n\n```bash\nssh root@<service-ip>\n```\n\n其中，`<service-ip>`是在步骤2中创建的Service的IP地址。","source":"_posts/k8s/k8s创建ubuntu22.04并暴露22端口.md","raw":"---\n# 【必需】文章标题\ntitle: k8s 创建 ubuntu22.04 并暴露22端口\n# 【必需】文章创建日期\ndate: 2023-06-12\n# 【可选】文章更新日期\nupdated: 2023-06-12\n# 【可选】文章标签\ntags: k8s\n# 【可选】文章分类\ncategories: 容器/虚拟化\n# 【可选】文章关键字\nkeywords: Java 面试\n# 【可选】文章描述\ndescription: Java 精选\ncopyright: false\n---\n\n要在Kubernetes中创建一个Ubuntu 20.04容器暴露22端口并在后台永久运行，可以按照以下步骤进行操作：\n\n## 创建一个名为`ubuntu-ssh`的Deployment：\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ubuntu-ssh\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: ubuntu-ssh\n  template:\n    metadata:\n      labels:\n        app: ubuntu-ssh\n    spec:\n      containers:\n      - name: ubuntu-ssh\n        image: ubuntu:20.04\n        command: [\"/bin/bash\"]\n        args: [\"-c\", \"while true; do sleep 30; done\"]\n        ports:\n        - containerPort: 22\n```\n\n这将创建一个名为`ubuntu-ssh`的Deployment，该Deployment将在单个Pod中运行一个名为`ubuntu-ssh`的容器。容器将使用`ubuntu:20.04`作为基本镜像，运行一个无限循环的`sleep`命令来保持容器运行，并暴露22端口。\n\n## 创建一个名为`ubuntu-ssh`的Service：\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: ubuntu-ssh\nspec:\n  selector:\n    app: ubuntu-ssh\n  ports:\n  - name: ssh\n    protocol: TCP\n    port: 22\n    targetPort: 22\n  type: ClusterIP\n```\n\n\n\n这将创建一个名为`ubuntu-ssh`的Service，并将其连接到Deployment。Service将使用`ClusterIP`类型，并在22端口上公开SSH服务。\n\n## 在容器中安装SSH服务器：\n\n```bash\nkubectl exec -it <ubuntu-ssh-pod> -- /bin/bash\napt-get update\napt-get install -y openssh-server\n```\n\n这将在运行`ubuntu-ssh`容器的Pod中打开一个shell，并安装SSH服务器。\n\n## 在容器中配置SSH服务器：\n\n```bash\necho 'root:password' | chpasswd\nsed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\n    service ssh restart\n```\n\n这将设置root用户的密码为`password`，启用root用户的SSH登录，并重新启动SSH服务器。\n\n现在，您已经在Kubernetes中创建了一个Ubuntu 20.04容器，该容器暴露22端口并在后台永久运行。您可以使用SSH客户端连接到该容器，例如：\n\n```bash\nssh root@<service-ip>\n```\n\n其中，`<service-ip>`是在步骤2中创建的Service的IP地址。","slug":"k8s/k8s创建ubuntu22.04并暴露22端口","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor7p000kzc7h9591gi9z","content":"<p>要在Kubernetes中创建一个Ubuntu 20.04容器暴露22端口并在后台永久运行，可以按照以下步骤进行操作：</p>\n<h2 id=\"创建一个名为ubuntu-ssh的Deployment：\"><a href=\"#创建一个名为ubuntu-ssh的Deployment：\" class=\"headerlink\" title=\"创建一个名为ubuntu-ssh的Deployment：\"></a>创建一个名为<code>ubuntu-ssh</code>的Deployment：</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>ssh\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>ssh\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>ssh\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>ssh\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">20.04</span>\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/bash\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"while true; do sleep 30; done\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这将创建一个名为<code>ubuntu-ssh</code>的Deployment，该Deployment将在单个Pod中运行一个名为<code>ubuntu-ssh</code>的容器。容器将使用<code>ubuntu:20.04</code>作为基本镜像，运行一个无限循环的<code>sleep</code>命令来保持容器运行，并暴露22端口。</p>\n<h2 id=\"创建一个名为ubuntu-ssh的Service：\"><a href=\"#创建一个名为ubuntu-ssh的Service：\" class=\"headerlink\" title=\"创建一个名为ubuntu-ssh的Service：\"></a>创建一个名为<code>ubuntu-ssh</code>的Service：</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>ssh\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>ssh\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ssh\n    <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span>\n    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ClusterIP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>这将创建一个名为<code>ubuntu-ssh</code>的Service，并将其连接到Deployment。Service将使用<code>ClusterIP</code>类型，并在22端口上公开SSH服务。</p>\n<h2 id=\"在容器中安装SSH服务器：\"><a href=\"#在容器中安装SSH服务器：\" class=\"headerlink\" title=\"在容器中安装SSH服务器：\"></a>在容器中安装SSH服务器：</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> <span class=\"token operator\">&lt;</span>ubuntu-ssh-pod<span class=\"token operator\">></span> -- /bin/bash\n<span class=\"token function\">apt-get</span> update\n<span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> openssh-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这将在运行<code>ubuntu-ssh</code>容器的Pod中打开一个shell，并安装SSH服务器。</p>\n<h2 id=\"在容器中配置SSH服务器：\"><a href=\"#在容器中配置SSH服务器：\" class=\"headerlink\" title=\"在容器中配置SSH服务器：\"></a>在容器中配置SSH服务器：</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'root:password'</span> <span class=\"token operator\">|</span> chpasswd\n<span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s/#PermitRootLogin prohibit-password/PermitRootLogin yes/'</span> /etc/ssh/sshd_config\n    <span class=\"token function\">service</span> <span class=\"token function\">ssh</span> restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这将设置root用户的密码为<code>password</code>，启用root用户的SSH登录，并重新启动SSH服务器。</p>\n<p>现在，您已经在Kubernetes中创建了一个Ubuntu 20.04容器，该容器暴露22端口并在后台永久运行。您可以使用SSH客户端连接到该容器，例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> root@<span class=\"token operator\">&lt;</span>service-ip<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>其中，<code>&lt;service-ip&gt;</code>是在步骤2中创建的Service的IP地址。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric3.png","cover_type":"img","excerpt":"","more":"<p>要在Kubernetes中创建一个Ubuntu 20.04容器暴露22端口并在后台永久运行，可以按照以下步骤进行操作：</p>\n<h2 id=\"创建一个名为ubuntu-ssh的Deployment：\"><a href=\"#创建一个名为ubuntu-ssh的Deployment：\" class=\"headerlink\" title=\"创建一个名为ubuntu-ssh的Deployment：\"></a>创建一个名为<code>ubuntu-ssh</code>的Deployment：</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>ssh\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>ssh\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>ssh\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>ssh\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">20.04</span>\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/bash\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"while true; do sleep 30; done\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这将创建一个名为<code>ubuntu-ssh</code>的Deployment，该Deployment将在单个Pod中运行一个名为<code>ubuntu-ssh</code>的容器。容器将使用<code>ubuntu:20.04</code>作为基本镜像，运行一个无限循环的<code>sleep</code>命令来保持容器运行，并暴露22端口。</p>\n<h2 id=\"创建一个名为ubuntu-ssh的Service：\"><a href=\"#创建一个名为ubuntu-ssh的Service：\" class=\"headerlink\" title=\"创建一个名为ubuntu-ssh的Service：\"></a>创建一个名为<code>ubuntu-ssh</code>的Service：</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>ssh\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>ssh\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ssh\n    <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span>\n    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ClusterIP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>这将创建一个名为<code>ubuntu-ssh</code>的Service，并将其连接到Deployment。Service将使用<code>ClusterIP</code>类型，并在22端口上公开SSH服务。</p>\n<h2 id=\"在容器中安装SSH服务器：\"><a href=\"#在容器中安装SSH服务器：\" class=\"headerlink\" title=\"在容器中安装SSH服务器：\"></a>在容器中安装SSH服务器：</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> <span class=\"token operator\">&lt;</span>ubuntu-ssh-pod<span class=\"token operator\">></span> -- /bin/bash\n<span class=\"token function\">apt-get</span> update\n<span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> openssh-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这将在运行<code>ubuntu-ssh</code>容器的Pod中打开一个shell，并安装SSH服务器。</p>\n<h2 id=\"在容器中配置SSH服务器：\"><a href=\"#在容器中配置SSH服务器：\" class=\"headerlink\" title=\"在容器中配置SSH服务器：\"></a>在容器中配置SSH服务器：</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'root:password'</span> <span class=\"token operator\">|</span> chpasswd\n<span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s/#PermitRootLogin prohibit-password/PermitRootLogin yes/'</span> /etc/ssh/sshd_config\n    <span class=\"token function\">service</span> <span class=\"token function\">ssh</span> restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这将设置root用户的密码为<code>password</code>，启用root用户的SSH登录，并重新启动SSH服务器。</p>\n<p>现在，您已经在Kubernetes中创建了一个Ubuntu 20.04容器，该容器暴露22端口并在后台永久运行。您可以使用SSH客户端连接到该容器，例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> root@<span class=\"token operator\">&lt;</span>service-ip<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>其中，<code>&lt;service-ip&gt;</code>是在步骤2中创建的Service的IP地址。</p>\n"},{"title":"安装 longhorn 出现的坑","date":"2023-11-03T05:00:00.000Z","updated":"2023-11-03T05:00:00.000Z","keywords":"k8s","copyright":false,"_content":"\n# 安装 longhorn 出现的坑\n## 安装 longhorn\n```bash\nkubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v1.5.1/deploy/longhorn.yaml\n```\n观察安装情况\n```bash\nkubectl get pods \\\n--namespace longhorn-system \\\n--watch\n```\n## 出现的坑\n![Alt text](/img/image.png)\nlonghorn-manager 一直处于 CrashLoopBackOff 状态，查看日志\n```bash\nkubectl logs longhorn-manager-6f8c6f4f5f-8q9q8 -n longhorn-system\n```\n发现是因为缺少 iscsiadm/open-iscsi\n```bash\nroot@dev:~/k8s/kubevirt# kubectl logs -f longhorn-manager-4xgcq -n longhorn-system \ntime=\"2023-11-03T05:41:17Z\" level=fatal msg=\"Error starting manager: Failed environment check, please make sure you have iscsiadm/open-iscsi installed on the host: failed to execute: nsenter [--mount=/host/proc/53233/ns/mnt --net=/host/proc/53233/ns/net iscsiadm --version], output , stderr nsenter: failed to execute iscsiadm: No such file or directory\\n: exit status 127\"\n```\n\n## 解决办法\n```bash\napt install open-iscsi -y\n```\n解决后，longhorn-manager 会自动重启，然后就可以正常使用了\n再次查看状态\n```bash\nroot@dev:~/k8s/kubevirt# kubectl get po -n longhorn-system -o wide\nNAME                                                READY   STATUS    RESTARTS        AGE     IP              NODE   NOMINATED NODE   READINESS GATES\ncsi-attacher-759f487c5-46wrf                        1/1     Running   0               3m19s   10.233.113.63   dev    <none>           <none>\ncsi-attacher-759f487c5-bpdvw                        1/1     Running   0               3m19s   10.233.113.64   dev    <none>           <none>\ncsi-attacher-759f487c5-zmdhw                        1/1     Running   0               3m19s   10.233.113.62   dev    <none>           <none>\ncsi-provisioner-6df8547696-gxp2d                    1/1     Running   0               3m19s   10.233.113.66   dev    <none>           <none>\ncsi-provisioner-6df8547696-mljmk                    1/1     Running   0               3m19s   10.233.113.67   dev    <none>           <none>\ncsi-provisioner-6df8547696-x2ght                    1/1     Running   0               3m19s   10.233.113.65   dev    <none>           <none>\ncsi-resizer-6bf6dbcb4-6t6wt                         1/1     Running   0               3m19s   10.233.113.69   dev    <none>           <none>\ncsi-resizer-6bf6dbcb4-hcwvg                         1/1     Running   0               3m19s   10.233.113.70   dev    <none>           <none>\ncsi-resizer-6bf6dbcb4-shqnc                         1/1     Running   0               3m19s   10.233.113.68   dev    <none>           <none>\ncsi-snapshotter-69d7b7b84-5hspz                     1/1     Running   0               3m18s   10.233.113.72   dev    <none>           <none>\ncsi-snapshotter-69d7b7b84-892jt                     1/1     Running   0               3m18s   10.233.113.73   dev    <none>           <none>\ncsi-snapshotter-69d7b7b84-nv6rx                     1/1     Running   0               3m18s   10.233.113.71   dev    <none>           <none>\nengine-image-ei-74783864-5b96k                      1/1     Running   0               3m27s   10.233.113.59   dev    <none>           <none>\ninstance-manager-9ef5cfc110a5361efb832fc0c716ace1   1/1     Running   0               3m27s   10.233.113.60   dev    <none>           <none>\nlonghorn-csi-plugin-xfmsg                           3/3     Running   0               3m18s   10.233.113.74   dev    <none>           <none>\nlonghorn-driver-deployer-794f4fb6bb-nwdgt           1/1     Running   0               15m     10.233.113.55   dev    <none>           <none>\nlonghorn-manager-4xgcq                              1/1     Running   7 (8m46s ago)   15m     10.233.113.56   dev    <none>           <none>\nlonghorn-ui-79fbb99d7d-hh9ml                        1/1     Running   0               15m     10.233.113.58   dev    <none>           <none>\nlonghorn-ui-79fbb99d7d-kd7mk                        1/1     Running   0               15m     10.233.113.57   dev    <none>           <none>\n```\n正常了","source":"_posts/k8s/安装 longhorn 出现的坑.md","raw":"---\ntitle: 安装 longhorn 出现的坑\ndate: 2023-11-03 13:00:00\nupdated: 2023-11-03 13:00:00\ntags: k8s\ncategories: 容器/虚拟化\nkeywords: k8s\ncopyright: false\n---\n\n# 安装 longhorn 出现的坑\n## 安装 longhorn\n```bash\nkubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v1.5.1/deploy/longhorn.yaml\n```\n观察安装情况\n```bash\nkubectl get pods \\\n--namespace longhorn-system \\\n--watch\n```\n## 出现的坑\n![Alt text](/img/image.png)\nlonghorn-manager 一直处于 CrashLoopBackOff 状态，查看日志\n```bash\nkubectl logs longhorn-manager-6f8c6f4f5f-8q9q8 -n longhorn-system\n```\n发现是因为缺少 iscsiadm/open-iscsi\n```bash\nroot@dev:~/k8s/kubevirt# kubectl logs -f longhorn-manager-4xgcq -n longhorn-system \ntime=\"2023-11-03T05:41:17Z\" level=fatal msg=\"Error starting manager: Failed environment check, please make sure you have iscsiadm/open-iscsi installed on the host: failed to execute: nsenter [--mount=/host/proc/53233/ns/mnt --net=/host/proc/53233/ns/net iscsiadm --version], output , stderr nsenter: failed to execute iscsiadm: No such file or directory\\n: exit status 127\"\n```\n\n## 解决办法\n```bash\napt install open-iscsi -y\n```\n解决后，longhorn-manager 会自动重启，然后就可以正常使用了\n再次查看状态\n```bash\nroot@dev:~/k8s/kubevirt# kubectl get po -n longhorn-system -o wide\nNAME                                                READY   STATUS    RESTARTS        AGE     IP              NODE   NOMINATED NODE   READINESS GATES\ncsi-attacher-759f487c5-46wrf                        1/1     Running   0               3m19s   10.233.113.63   dev    <none>           <none>\ncsi-attacher-759f487c5-bpdvw                        1/1     Running   0               3m19s   10.233.113.64   dev    <none>           <none>\ncsi-attacher-759f487c5-zmdhw                        1/1     Running   0               3m19s   10.233.113.62   dev    <none>           <none>\ncsi-provisioner-6df8547696-gxp2d                    1/1     Running   0               3m19s   10.233.113.66   dev    <none>           <none>\ncsi-provisioner-6df8547696-mljmk                    1/1     Running   0               3m19s   10.233.113.67   dev    <none>           <none>\ncsi-provisioner-6df8547696-x2ght                    1/1     Running   0               3m19s   10.233.113.65   dev    <none>           <none>\ncsi-resizer-6bf6dbcb4-6t6wt                         1/1     Running   0               3m19s   10.233.113.69   dev    <none>           <none>\ncsi-resizer-6bf6dbcb4-hcwvg                         1/1     Running   0               3m19s   10.233.113.70   dev    <none>           <none>\ncsi-resizer-6bf6dbcb4-shqnc                         1/1     Running   0               3m19s   10.233.113.68   dev    <none>           <none>\ncsi-snapshotter-69d7b7b84-5hspz                     1/1     Running   0               3m18s   10.233.113.72   dev    <none>           <none>\ncsi-snapshotter-69d7b7b84-892jt                     1/1     Running   0               3m18s   10.233.113.73   dev    <none>           <none>\ncsi-snapshotter-69d7b7b84-nv6rx                     1/1     Running   0               3m18s   10.233.113.71   dev    <none>           <none>\nengine-image-ei-74783864-5b96k                      1/1     Running   0               3m27s   10.233.113.59   dev    <none>           <none>\ninstance-manager-9ef5cfc110a5361efb832fc0c716ace1   1/1     Running   0               3m27s   10.233.113.60   dev    <none>           <none>\nlonghorn-csi-plugin-xfmsg                           3/3     Running   0               3m18s   10.233.113.74   dev    <none>           <none>\nlonghorn-driver-deployer-794f4fb6bb-nwdgt           1/1     Running   0               15m     10.233.113.55   dev    <none>           <none>\nlonghorn-manager-4xgcq                              1/1     Running   7 (8m46s ago)   15m     10.233.113.56   dev    <none>           <none>\nlonghorn-ui-79fbb99d7d-hh9ml                        1/1     Running   0               15m     10.233.113.58   dev    <none>           <none>\nlonghorn-ui-79fbb99d7d-kd7mk                        1/1     Running   0               15m     10.233.113.57   dev    <none>           <none>\n```\n正常了","slug":"k8s/安装 longhorn 出现的坑","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor7q000ozc7hf0gr2lsf","content":"<h1 id=\"安装-longhorn-出现的坑\"><a href=\"#安装-longhorn-出现的坑\" class=\"headerlink\" title=\"安装 longhorn 出现的坑\"></a>安装 longhorn 出现的坑</h1><h2 id=\"安装-longhorn\"><a href=\"#安装-longhorn\" class=\"headerlink\" title=\"安装 longhorn\"></a>安装 longhorn</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> https://raw.githubusercontent.com/longhorn/longhorn/v1.5.1/deploy/longhorn.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>观察安装情况</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get pods <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--namespace</span> longhorn-system <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--watch</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"出现的坑\"><a href=\"#出现的坑\" class=\"headerlink\" title=\"出现的坑\"></a>出现的坑</h2><p><img src=\"/img/image.png\" alt=\"Alt text\"><br>longhorn-manager 一直处于 CrashLoopBackOff 状态，查看日志</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl logs longhorn-manager-6f8c6f4f5f-8q9q8 <span class=\"token parameter variable\">-n</span> longhorn-system<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>发现是因为缺少 iscsiadm&#x2F;open-iscsi</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">root@dev:~/k8s/kubevirt<span class=\"token comment\"># kubectl logs -f longhorn-manager-4xgcq -n longhorn-system </span>\n<span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token string\">\"2023-11-03T05:41:17Z\"</span> <span class=\"token assign-left variable\">level</span><span class=\"token operator\">=</span>fatal <span class=\"token assign-left variable\">msg</span><span class=\"token operator\">=</span><span class=\"token string\">\"Error starting manager: Failed environment check, please make sure you have iscsiadm/open-iscsi installed on the host: failed to execute: nsenter [--mount=/host/proc/53233/ns/mnt --net=/host/proc/53233/ns/net iscsiadm --version], output , stderr nsenter: failed to execute iscsiadm: No such file or directory<span class=\"token entity\" title=\"\\n\">\\n</span>: exit status 127\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> open-iscsi <span class=\"token parameter variable\">-y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>解决后，longhorn-manager 会自动重启，然后就可以正常使用了<br>再次查看状态</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">root@dev:~/k8s/kubevirt<span class=\"token comment\"># kubectl get po -n longhorn-system -o wide</span>\nNAME                                                READY   STATUS    RESTARTS        AGE     IP              NODE   NOMINATED NODE   READINESS GATES\ncsi-attacher-759f487c5-46wrf                        <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.63   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-attacher-759f487c5-bpdvw                        <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.64   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-attacher-759f487c5-zmdhw                        <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.62   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-provisioner-6df8547696-gxp2d                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.66   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-provisioner-6df8547696-mljmk                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.67   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-provisioner-6df8547696-x2ght                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.65   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-resizer-6bf6dbcb4-6t6wt                         <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.69   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-resizer-6bf6dbcb4-hcwvg                         <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.70   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-resizer-6bf6dbcb4-shqnc                         <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.68   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-snapshotter-69d7b7b84-5hspz                     <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m18s   <span class=\"token number\">10.233</span>.113.72   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-snapshotter-69d7b7b84-892jt                     <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m18s   <span class=\"token number\">10.233</span>.113.73   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-snapshotter-69d7b7b84-nv6rx                     <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m18s   <span class=\"token number\">10.233</span>.113.71   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nengine-image-ei-74783864-5b96k                      <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m27s   <span class=\"token number\">10.233</span>.113.59   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ninstance-manager-9ef5cfc110a5361efb832fc0c716ace1   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m27s   <span class=\"token number\">10.233</span>.113.60   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nlonghorn-csi-plugin-xfmsg                           <span class=\"token number\">3</span>/3     Running   <span class=\"token number\">0</span>               3m18s   <span class=\"token number\">10.233</span>.113.74   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nlonghorn-driver-deployer-794f4fb6bb-nwdgt           <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               15m     <span class=\"token number\">10.233</span>.113.55   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nlonghorn-manager-4xgcq                              <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">7</span> <span class=\"token punctuation\">(</span>8m46s ago<span class=\"token punctuation\">)</span>   15m     <span class=\"token number\">10.233</span>.113.56   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nlonghorn-ui-79fbb99d7d-hh9ml                        <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               15m     <span class=\"token number\">10.233</span>.113.58   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nlonghorn-ui-79fbb99d7d-kd7mk                        <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               15m     <span class=\"token number\">10.233</span>.113.57   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>正常了</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric4.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"安装-longhorn-出现的坑\"><a href=\"#安装-longhorn-出现的坑\" class=\"headerlink\" title=\"安装 longhorn 出现的坑\"></a>安装 longhorn 出现的坑</h1><h2 id=\"安装-longhorn\"><a href=\"#安装-longhorn\" class=\"headerlink\" title=\"安装 longhorn\"></a>安装 longhorn</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> https://raw.githubusercontent.com/longhorn/longhorn/v1.5.1/deploy/longhorn.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>观察安装情况</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get pods <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--namespace</span> longhorn-system <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--watch</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"出现的坑\"><a href=\"#出现的坑\" class=\"headerlink\" title=\"出现的坑\"></a>出现的坑</h2><p><img src=\"/img/image.png\" alt=\"Alt text\"><br>longhorn-manager 一直处于 CrashLoopBackOff 状态，查看日志</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl logs longhorn-manager-6f8c6f4f5f-8q9q8 <span class=\"token parameter variable\">-n</span> longhorn-system<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>发现是因为缺少 iscsiadm&#x2F;open-iscsi</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">root@dev:~/k8s/kubevirt<span class=\"token comment\"># kubectl logs -f longhorn-manager-4xgcq -n longhorn-system </span>\n<span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token string\">\"2023-11-03T05:41:17Z\"</span> <span class=\"token assign-left variable\">level</span><span class=\"token operator\">=</span>fatal <span class=\"token assign-left variable\">msg</span><span class=\"token operator\">=</span><span class=\"token string\">\"Error starting manager: Failed environment check, please make sure you have iscsiadm/open-iscsi installed on the host: failed to execute: nsenter [--mount=/host/proc/53233/ns/mnt --net=/host/proc/53233/ns/net iscsiadm --version], output , stderr nsenter: failed to execute iscsiadm: No such file or directory<span class=\"token entity\" title=\"\\n\">\\n</span>: exit status 127\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> open-iscsi <span class=\"token parameter variable\">-y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>解决后，longhorn-manager 会自动重启，然后就可以正常使用了<br>再次查看状态</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">root@dev:~/k8s/kubevirt<span class=\"token comment\"># kubectl get po -n longhorn-system -o wide</span>\nNAME                                                READY   STATUS    RESTARTS        AGE     IP              NODE   NOMINATED NODE   READINESS GATES\ncsi-attacher-759f487c5-46wrf                        <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.63   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-attacher-759f487c5-bpdvw                        <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.64   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-attacher-759f487c5-zmdhw                        <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.62   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-provisioner-6df8547696-gxp2d                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.66   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-provisioner-6df8547696-mljmk                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.67   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-provisioner-6df8547696-x2ght                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.65   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-resizer-6bf6dbcb4-6t6wt                         <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.69   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-resizer-6bf6dbcb4-hcwvg                         <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.70   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-resizer-6bf6dbcb4-shqnc                         <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m19s   <span class=\"token number\">10.233</span>.113.68   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-snapshotter-69d7b7b84-5hspz                     <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m18s   <span class=\"token number\">10.233</span>.113.72   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-snapshotter-69d7b7b84-892jt                     <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m18s   <span class=\"token number\">10.233</span>.113.73   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ncsi-snapshotter-69d7b7b84-nv6rx                     <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m18s   <span class=\"token number\">10.233</span>.113.71   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nengine-image-ei-74783864-5b96k                      <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m27s   <span class=\"token number\">10.233</span>.113.59   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\ninstance-manager-9ef5cfc110a5361efb832fc0c716ace1   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               3m27s   <span class=\"token number\">10.233</span>.113.60   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nlonghorn-csi-plugin-xfmsg                           <span class=\"token number\">3</span>/3     Running   <span class=\"token number\">0</span>               3m18s   <span class=\"token number\">10.233</span>.113.74   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nlonghorn-driver-deployer-794f4fb6bb-nwdgt           <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               15m     <span class=\"token number\">10.233</span>.113.55   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nlonghorn-manager-4xgcq                              <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">7</span> <span class=\"token punctuation\">(</span>8m46s ago<span class=\"token punctuation\">)</span>   15m     <span class=\"token number\">10.233</span>.113.56   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nlonghorn-ui-79fbb99d7d-hh9ml                        <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               15m     <span class=\"token number\">10.233</span>.113.58   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nlonghorn-ui-79fbb99d7d-kd7mk                        <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>               15m     <span class=\"token number\">10.233</span>.113.57   dev    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>正常了</p>\n"},{"title":"Linux 根目录扩容操作","date":"2023-12-28T16:00:00.000Z","updated":"2023-12-28T16:00:00.000Z","_content":"\n# Linux 根目录扩容操作\n\n## 需求描述\n\n由于测试环境需要，虚拟机根目录需要扩容至120G。\n\n## 查看本机磁盘环境\n\n```bash\n[root@localhost ~]# df -h\n文件系统                 容量  已用  可用 已用% 挂载点\n/dev/mapper/centos-root   35G  5.5G   30G   16% /\ndevtmpfs                 3.9G     0  3.9G    0% /dev\ntmpfs                    3.9G     0  3.9G    0% /dev/shm\ntmpfs                    3.9G   11M  3.9G    1% /run\ntmpfs                    3.9G     0  3.9G    0% /sys/fs/cgroup\n/dev/sda1               1014M  275M  740M   28% /boot\ntmpfs                    783M   52K  783M    1% /run/user/0\n[root@localhost ~]# lsblk\nNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nfd0               2:0    1    4K  0 disk\nsda               8:0    0  500G  0 disk\n├─sda1            8:1    0    1G  0 part /boot\n└─sda2            8:2    0   39G  0 part\n  ├─centos-root 253:0    0   35G  0 lvm  /\n  └─centos-swap 253:1    0    4G  0 lvm  [SWAP]\n```\n\n可以看到根目录总容量为35G, 设备sda 的总容量为500G。\n\n## 添加磁盘分区\n\n需要120G 容量，已有35G, 还需添加85G 容量。\n\n```bash\n[root@localhost ~]# fdisk /dev/sda\n欢迎使用 fdisk (util-linux 2.23.2)。\n\n更改将停留在内存中，直到您决定将更改写入磁盘。\n使用写入命令前请三思。\n\n命令(输入 m 获取帮助)：n\nPartition type:\n   p   primary (2 primary, 0 extended, 2 free)\n   e   extended\nSelect (default p):\nUsing default response p\n分区号 (3,4，默认 3)：\n起始 扇区 (83886080-1048575999，默认为 83886080)：\n将使用默认值 83886080\nLast 扇区, +扇区 or +size{K,M,G} (83886080-1048575999，默认为 1048575999)：+85G\n分区 3 已设置为 Linux 类型，大小设为 85 GiB\n\n命令(输入 m 获取帮助)：w\nThe partition table has been altered!\n\nCalling ioctl() to re-read partition table.\n\n[root@localhost ~]# partprobe\n```\n\n然后查看分区是否创建：\n\n```bash\n[root@localhost ~]# lsblk\nNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nfd0               2:0    1    4K  0 disk\nsda               8:0    0  500G  0 disk\n├─sda1            8:1    0    1G  0 part /boot\n├─sda2            8:2    0   39G  0 part\n│ ├─centos-root 253:0    0   35G  0 lvm  /\n│ └─centos-swap 253:1    0    4G  0 lvm  [SWAP]\n└─sda3            8:3    0   85G  0 part\nsr0              11:0    1 1024M  0 rom\n```\n\n可以看到sda2 分区已创建。\n\n## 开始扩容\n\n### 创建物理卷\n\n```bash\n[root@localhost ~]# lvm\nlvm> pvcreate /dev/sda3\n  Physical volume \"/dev/sda3\" successfully created.\n```\n\n### 查看物理卷和卷组\n\n```bash\nlvm> pvdisplay\n  --- Physical volume ---\n  PV Name               /dev/sda2\n  VG Name               centos\n  PV Size               <39.00 GiB / not usable 3.00 MiB\n  Allocatable           yes (but full)\n  PE Size               4.00 MiB\n  Total PE              9983\n  Free PE               0\n  Allocated PE          9983\n  PV UUID               twmUZh-Vnqq-W5Pd-v3ms-6OkH-sSTs-nv8aA8\n\n  \"/dev/sda3\" is a new physical volume of \"85.00 GiB\"\n  --- NEW Physical volume ---\n  PV Name               /dev/sda3\n  VG Name\n  PV Size               85.00 GiB\n  Allocatable           NO\n  PE Size               0\n  Total PE              0\n  Free PE               0\n  Allocated PE          0\n  PV UUID               vTD91f-b28E-GgL0-XsqI-ipQ5-rscT-GcQbT6\n\nlvm> vgdisplay\n  --- Volume group ---\n  VG Name               centos\n  System ID\n  Format                lvm2\n  Metadata Areas        1\n  Metadata Sequence No  3\n  VG Access             read/write\n  VG Status             resizable\n  MAX LV                0\n  Cur LV                2\n  Open LV               2\n  Max PV                0\n  Cur PV                1\n  Act PV                1\n  VG Size               <39.00 GiB\n  PE Size               4.00 MiB\n  Total PE              9983\n  Alloc PE / Size       9983 / <39.00 GiB\n  Free  PE / Size       0 / 0\n  VG UUID               238Yz8-MEQa-NT6a-3aHC-J3TZ-mGux-e9vqPf\n```\n\n### 将物理卷加入到卷组\n\n```bash\nlvm> vgextend centos /dev/sda3\n  Volume group \"centos\" successfully extended\nlvm> vgdisplay\n  --- Volume group ---\n  VG Name               centos\n  System ID\n  Format                lvm2\n  Metadata Areas        2\n  Metadata Sequence No  4\n  VG Access             read/write\n  VG Status             resizable\n  MAX LV                0\n  Cur LV                2\n  Open LV               2\n  Max PV                0\n  Cur PV                2\n  Act PV                2\n  VG Size               123.99 GiB\n  PE Size               4.00 MiB\n  Total PE              31742\n  Alloc PE / Size       9983 / <39.00 GiB\n  Free  PE / Size       21759 / <85.00 GiB\n  VG UUID               238Yz8-MEQa-NT6a-3aHC-J3TZ-mGux-e9vqPf\n```\n\n可以看到卷组的Free size 增加了\n将卷组剩余空间(刚添加的85G)添加到逻辑卷/dev/centos/root :\n\n```bash\nlvm> lvextend -l +100%FREE /dev/centos/root\n  Size of logical volume centos/root changed from <35.00 GiB (8959 extents) to 119.99 GiB (30718 extents).\n  Logical volume centos/root successfully resized.\n```\n\n### 同步到文件系统\n\n之前只是对逻辑卷扩容，还要同步到文件系统，实现对根目录的扩容。\n\n```bash\n[root@localhost ~]# xfs_growfs /dev/centos/root\nmeta-data=/dev/mapper/centos-root isize=512    agcount=4, agsize=2293504 blks\n         =                       sectsz=512   attr=2, projid32bit=1\n         =                       crc=1        finobt=0 spinodes=0\ndata     =                       bsize=4096   blocks=9174016, imaxpct=25\n         =                       sunit=0      swidth=0 blks\nnaming   =version 2              bsize=4096   ascii-ci=0 ftype=1\nlog      =internal               bsize=4096   blocks=4479, version=2\n         =                       sectsz=512   sunit=0 blks, lazy-count=1\nrealtime =none                   extsz=4096   blocks=0, rtextents=0\ndata blocks changed from 9174016 to 31455232\n```\n\ndebian/ubuntu 系统则使用以下命令对根目录扩容\n\n```bash\nresize2fs /dev/debian-vg/root\n```\n\n然后再查看挂载情况：\n\n```bash\n[root@localhost ~]# df -h\n文件系统                 容量  已用  可用 已用% 挂载点\n/dev/mapper/centos-root  120G  5.5G  115G    5% /\ndevtmpfs                 3.9G     0  3.9G    0% /dev\ntmpfs                    3.9G     0  3.9G    0% /dev/shm\ntmpfs                    3.9G   11M  3.9G    1% /run\ntmpfs                    3.9G     0  3.9G    0% /sys/fs/cgroup\n/dev/sda1               1014M  275M  740M   28% /boot\ntmpfs                    783M   52K  783M    1% /run/user/0\n```\n\n可以发现有120G的空间挂载在根目录上。\nover !!!\n参考内容\n<https://blog.csdn.net/harryxxxxx/article/details/81114613>\n<https://blog.csdn.net/nimasike/article/details/53729499>\n[\n](https://blog.csdn.net/qq_24871519/article/details/86243571)\n","source":"_posts/linux/Linux 根目录扩容操作.md","raw":"---\ntitle: Linux 根目录扩容操作\ntags: linux\ncategories: linux\ndate: 2023-12-29\nupdated: 2023-12-29\n---\n\n# Linux 根目录扩容操作\n\n## 需求描述\n\n由于测试环境需要，虚拟机根目录需要扩容至120G。\n\n## 查看本机磁盘环境\n\n```bash\n[root@localhost ~]# df -h\n文件系统                 容量  已用  可用 已用% 挂载点\n/dev/mapper/centos-root   35G  5.5G   30G   16% /\ndevtmpfs                 3.9G     0  3.9G    0% /dev\ntmpfs                    3.9G     0  3.9G    0% /dev/shm\ntmpfs                    3.9G   11M  3.9G    1% /run\ntmpfs                    3.9G     0  3.9G    0% /sys/fs/cgroup\n/dev/sda1               1014M  275M  740M   28% /boot\ntmpfs                    783M   52K  783M    1% /run/user/0\n[root@localhost ~]# lsblk\nNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nfd0               2:0    1    4K  0 disk\nsda               8:0    0  500G  0 disk\n├─sda1            8:1    0    1G  0 part /boot\n└─sda2            8:2    0   39G  0 part\n  ├─centos-root 253:0    0   35G  0 lvm  /\n  └─centos-swap 253:1    0    4G  0 lvm  [SWAP]\n```\n\n可以看到根目录总容量为35G, 设备sda 的总容量为500G。\n\n## 添加磁盘分区\n\n需要120G 容量，已有35G, 还需添加85G 容量。\n\n```bash\n[root@localhost ~]# fdisk /dev/sda\n欢迎使用 fdisk (util-linux 2.23.2)。\n\n更改将停留在内存中，直到您决定将更改写入磁盘。\n使用写入命令前请三思。\n\n命令(输入 m 获取帮助)：n\nPartition type:\n   p   primary (2 primary, 0 extended, 2 free)\n   e   extended\nSelect (default p):\nUsing default response p\n分区号 (3,4，默认 3)：\n起始 扇区 (83886080-1048575999，默认为 83886080)：\n将使用默认值 83886080\nLast 扇区, +扇区 or +size{K,M,G} (83886080-1048575999，默认为 1048575999)：+85G\n分区 3 已设置为 Linux 类型，大小设为 85 GiB\n\n命令(输入 m 获取帮助)：w\nThe partition table has been altered!\n\nCalling ioctl() to re-read partition table.\n\n[root@localhost ~]# partprobe\n```\n\n然后查看分区是否创建：\n\n```bash\n[root@localhost ~]# lsblk\nNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nfd0               2:0    1    4K  0 disk\nsda               8:0    0  500G  0 disk\n├─sda1            8:1    0    1G  0 part /boot\n├─sda2            8:2    0   39G  0 part\n│ ├─centos-root 253:0    0   35G  0 lvm  /\n│ └─centos-swap 253:1    0    4G  0 lvm  [SWAP]\n└─sda3            8:3    0   85G  0 part\nsr0              11:0    1 1024M  0 rom\n```\n\n可以看到sda2 分区已创建。\n\n## 开始扩容\n\n### 创建物理卷\n\n```bash\n[root@localhost ~]# lvm\nlvm> pvcreate /dev/sda3\n  Physical volume \"/dev/sda3\" successfully created.\n```\n\n### 查看物理卷和卷组\n\n```bash\nlvm> pvdisplay\n  --- Physical volume ---\n  PV Name               /dev/sda2\n  VG Name               centos\n  PV Size               <39.00 GiB / not usable 3.00 MiB\n  Allocatable           yes (but full)\n  PE Size               4.00 MiB\n  Total PE              9983\n  Free PE               0\n  Allocated PE          9983\n  PV UUID               twmUZh-Vnqq-W5Pd-v3ms-6OkH-sSTs-nv8aA8\n\n  \"/dev/sda3\" is a new physical volume of \"85.00 GiB\"\n  --- NEW Physical volume ---\n  PV Name               /dev/sda3\n  VG Name\n  PV Size               85.00 GiB\n  Allocatable           NO\n  PE Size               0\n  Total PE              0\n  Free PE               0\n  Allocated PE          0\n  PV UUID               vTD91f-b28E-GgL0-XsqI-ipQ5-rscT-GcQbT6\n\nlvm> vgdisplay\n  --- Volume group ---\n  VG Name               centos\n  System ID\n  Format                lvm2\n  Metadata Areas        1\n  Metadata Sequence No  3\n  VG Access             read/write\n  VG Status             resizable\n  MAX LV                0\n  Cur LV                2\n  Open LV               2\n  Max PV                0\n  Cur PV                1\n  Act PV                1\n  VG Size               <39.00 GiB\n  PE Size               4.00 MiB\n  Total PE              9983\n  Alloc PE / Size       9983 / <39.00 GiB\n  Free  PE / Size       0 / 0\n  VG UUID               238Yz8-MEQa-NT6a-3aHC-J3TZ-mGux-e9vqPf\n```\n\n### 将物理卷加入到卷组\n\n```bash\nlvm> vgextend centos /dev/sda3\n  Volume group \"centos\" successfully extended\nlvm> vgdisplay\n  --- Volume group ---\n  VG Name               centos\n  System ID\n  Format                lvm2\n  Metadata Areas        2\n  Metadata Sequence No  4\n  VG Access             read/write\n  VG Status             resizable\n  MAX LV                0\n  Cur LV                2\n  Open LV               2\n  Max PV                0\n  Cur PV                2\n  Act PV                2\n  VG Size               123.99 GiB\n  PE Size               4.00 MiB\n  Total PE              31742\n  Alloc PE / Size       9983 / <39.00 GiB\n  Free  PE / Size       21759 / <85.00 GiB\n  VG UUID               238Yz8-MEQa-NT6a-3aHC-J3TZ-mGux-e9vqPf\n```\n\n可以看到卷组的Free size 增加了\n将卷组剩余空间(刚添加的85G)添加到逻辑卷/dev/centos/root :\n\n```bash\nlvm> lvextend -l +100%FREE /dev/centos/root\n  Size of logical volume centos/root changed from <35.00 GiB (8959 extents) to 119.99 GiB (30718 extents).\n  Logical volume centos/root successfully resized.\n```\n\n### 同步到文件系统\n\n之前只是对逻辑卷扩容，还要同步到文件系统，实现对根目录的扩容。\n\n```bash\n[root@localhost ~]# xfs_growfs /dev/centos/root\nmeta-data=/dev/mapper/centos-root isize=512    agcount=4, agsize=2293504 blks\n         =                       sectsz=512   attr=2, projid32bit=1\n         =                       crc=1        finobt=0 spinodes=0\ndata     =                       bsize=4096   blocks=9174016, imaxpct=25\n         =                       sunit=0      swidth=0 blks\nnaming   =version 2              bsize=4096   ascii-ci=0 ftype=1\nlog      =internal               bsize=4096   blocks=4479, version=2\n         =                       sectsz=512   sunit=0 blks, lazy-count=1\nrealtime =none                   extsz=4096   blocks=0, rtextents=0\ndata blocks changed from 9174016 to 31455232\n```\n\ndebian/ubuntu 系统则使用以下命令对根目录扩容\n\n```bash\nresize2fs /dev/debian-vg/root\n```\n\n然后再查看挂载情况：\n\n```bash\n[root@localhost ~]# df -h\n文件系统                 容量  已用  可用 已用% 挂载点\n/dev/mapper/centos-root  120G  5.5G  115G    5% /\ndevtmpfs                 3.9G     0  3.9G    0% /dev\ntmpfs                    3.9G     0  3.9G    0% /dev/shm\ntmpfs                    3.9G   11M  3.9G    1% /run\ntmpfs                    3.9G     0  3.9G    0% /sys/fs/cgroup\n/dev/sda1               1014M  275M  740M   28% /boot\ntmpfs                    783M   52K  783M    1% /run/user/0\n```\n\n可以发现有120G的空间挂载在根目录上。\nover !!!\n参考内容\n<https://blog.csdn.net/harryxxxxx/article/details/81114613>\n<https://blog.csdn.net/nimasike/article/details/53729499>\n[\n](https://blog.csdn.net/qq_24871519/article/details/86243571)\n","slug":"linux/Linux 根目录扩容操作","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor7q000rzc7hg5izcd4c","content":"<h1 id=\"Linux-根目录扩容操作\"><a href=\"#Linux-根目录扩容操作\" class=\"headerlink\" title=\"Linux 根目录扩容操作\"></a>Linux 根目录扩容操作</h1><h2 id=\"需求描述\"><a href=\"#需求描述\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h2><p>由于测试环境需要，虚拟机根目录需要扩容至120G。</p>\n<h2 id=\"查看本机磁盘环境\"><a href=\"#查看本机磁盘环境\" class=\"headerlink\" title=\"查看本机磁盘环境\"></a>查看本机磁盘环境</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># df -h</span>\n文件系统                 容量  已用  可用 已用% 挂载点\n/dev/mapper/centos-root   35G  <span class=\"token number\">5</span>.5G   30G   <span class=\"token number\">16</span>% /\ndevtmpfs                 <span class=\"token number\">3</span>.9G     <span class=\"token number\">0</span>  <span class=\"token number\">3</span>.9G    <span class=\"token number\">0</span>% /dev\ntmpfs                    <span class=\"token number\">3</span>.9G     <span class=\"token number\">0</span>  <span class=\"token number\">3</span>.9G    <span class=\"token number\">0</span>% /dev/shm\ntmpfs                    <span class=\"token number\">3</span>.9G   11M  <span class=\"token number\">3</span>.9G    <span class=\"token number\">1</span>% /run\ntmpfs                    <span class=\"token number\">3</span>.9G     <span class=\"token number\">0</span>  <span class=\"token number\">3</span>.9G    <span class=\"token number\">0</span>% /sys/fs/cgroup\n/dev/sda1               1014M  275M  740M   <span class=\"token number\">28</span>% /boot\ntmpfs                    783M   52K  783M    <span class=\"token number\">1</span>% /run/user/0\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># lsblk</span>\nNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nfd0               <span class=\"token number\">2</span>:0    <span class=\"token number\">1</span>    4K  <span class=\"token number\">0</span> disk\nsda               <span class=\"token number\">8</span>:0    <span class=\"token number\">0</span>  500G  <span class=\"token number\">0</span> disk\n├─sda1            <span class=\"token number\">8</span>:1    <span class=\"token number\">0</span>    1G  <span class=\"token number\">0</span> part /boot\n└─sda2            <span class=\"token number\">8</span>:2    <span class=\"token number\">0</span>   39G  <span class=\"token number\">0</span> part\n  ├─centos-root <span class=\"token number\">253</span>:0    <span class=\"token number\">0</span>   35G  <span class=\"token number\">0</span> lvm  /\n  └─centos-swap <span class=\"token number\">253</span>:1    <span class=\"token number\">0</span>    4G  <span class=\"token number\">0</span> lvm  <span class=\"token punctuation\">[</span>SWAP<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到根目录总容量为35G, 设备sda 的总容量为500G。</p>\n<h2 id=\"添加磁盘分区\"><a href=\"#添加磁盘分区\" class=\"headerlink\" title=\"添加磁盘分区\"></a>添加磁盘分区</h2><p>需要120G 容量，已有35G, 还需添加85G 容量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># fdisk /dev/sda</span>\n欢迎使用 <span class=\"token function\">fdisk</span> <span class=\"token punctuation\">(</span>util-linux <span class=\"token number\">2.23</span>.2<span class=\"token punctuation\">)</span>。\n\n更改将停留在内存中，直到您决定将更改写入磁盘。\n使用写入命令前请三思。\n\n命令<span class=\"token punctuation\">(</span>输入 m 获取帮助<span class=\"token punctuation\">)</span>：n\nPartition type:\n   p   primary <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> primary, <span class=\"token number\">0</span> extended, <span class=\"token number\">2</span> <span class=\"token function\">free</span><span class=\"token punctuation\">)</span>\n   e   extended\nSelect <span class=\"token punctuation\">(</span>default p<span class=\"token punctuation\">)</span>:\nUsing default response p\n分区号 <span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span>，默认 <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>：\n起始 扇区 <span class=\"token punctuation\">(</span><span class=\"token number\">83886080</span>-1048575999，默认为 <span class=\"token number\">83886080</span><span class=\"token punctuation\">)</span>：\n将使用默认值 <span class=\"token number\">83886080</span>\nLast 扇区, +扇区 or +size<span class=\"token punctuation\">&#123;</span>K,M,G<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">83886080</span>-1048575999，默认为 <span class=\"token number\">1048575999</span><span class=\"token punctuation\">)</span>：+85G\n分区 <span class=\"token number\">3</span> 已设置为 Linux 类型，大小设为 <span class=\"token number\">85</span> GiB\n\n命令<span class=\"token punctuation\">(</span>输入 m 获取帮助<span class=\"token punctuation\">)</span>：w\nThe partition table has been altered<span class=\"token operator\">!</span>\n\nCalling ioctl<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> to re-read partition table.\n\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># partprobe</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后查看分区是否创建：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># lsblk</span>\nNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nfd0               <span class=\"token number\">2</span>:0    <span class=\"token number\">1</span>    4K  <span class=\"token number\">0</span> disk\nsda               <span class=\"token number\">8</span>:0    <span class=\"token number\">0</span>  500G  <span class=\"token number\">0</span> disk\n├─sda1            <span class=\"token number\">8</span>:1    <span class=\"token number\">0</span>    1G  <span class=\"token number\">0</span> part /boot\n├─sda2            <span class=\"token number\">8</span>:2    <span class=\"token number\">0</span>   39G  <span class=\"token number\">0</span> part\n│ ├─centos-root <span class=\"token number\">253</span>:0    <span class=\"token number\">0</span>   35G  <span class=\"token number\">0</span> lvm  /\n│ └─centos-swap <span class=\"token number\">253</span>:1    <span class=\"token number\">0</span>    4G  <span class=\"token number\">0</span> lvm  <span class=\"token punctuation\">[</span>SWAP<span class=\"token punctuation\">]</span>\n└─sda3            <span class=\"token number\">8</span>:3    <span class=\"token number\">0</span>   85G  <span class=\"token number\">0</span> part\nsr0              <span class=\"token number\">11</span>:0    <span class=\"token number\">1</span> 1024M  <span class=\"token number\">0</span> rom<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到sda2 分区已创建。</p>\n<h2 id=\"开始扩容\"><a href=\"#开始扩容\" class=\"headerlink\" title=\"开始扩容\"></a>开始扩容</h2><h3 id=\"创建物理卷\"><a href=\"#创建物理卷\" class=\"headerlink\" title=\"创建物理卷\"></a>创建物理卷</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># lvm</span>\nlvm<span class=\"token operator\">></span> pvcreate /dev/sda3\n  Physical volume <span class=\"token string\">\"/dev/sda3\"</span> successfully created.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"查看物理卷和卷组\"><a href=\"#查看物理卷和卷组\" class=\"headerlink\" title=\"查看物理卷和卷组\"></a>查看物理卷和卷组</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lvm<span class=\"token operator\">></span> pvdisplay\n  --- Physical volume ---\n  PV Name               /dev/sda2\n  VG Name               centos\n  PV Size               <span class=\"token operator\">&lt;</span><span class=\"token number\">39.00</span> GiB / not usable <span class=\"token number\">3.00</span> MiB\n  Allocatable           <span class=\"token function\">yes</span> <span class=\"token punctuation\">(</span>but full<span class=\"token punctuation\">)</span>\n  PE Size               <span class=\"token number\">4.00</span> MiB\n  Total PE              <span class=\"token number\">9983</span>\n  Free PE               <span class=\"token number\">0</span>\n  Allocated PE          <span class=\"token number\">9983</span>\n  PV UUID               twmUZh-Vnqq-W5Pd-v3ms-6OkH-sSTs-nv8aA8\n\n  <span class=\"token string\">\"/dev/sda3\"</span> is a new physical volume of <span class=\"token string\">\"85.00 GiB\"</span>\n  --- NEW Physical volume ---\n  PV Name               /dev/sda3\n  VG Name\n  PV Size               <span class=\"token number\">85.00</span> GiB\n  Allocatable           NO\n  PE Size               <span class=\"token number\">0</span>\n  Total PE              <span class=\"token number\">0</span>\n  Free PE               <span class=\"token number\">0</span>\n  Allocated PE          <span class=\"token number\">0</span>\n  PV UUID               vTD91f-b28E-GgL0-XsqI-ipQ5-rscT-GcQbT6\n\nlvm<span class=\"token operator\">></span> vgdisplay\n  --- Volume group ---\n  VG Name               centos\n  System ID\n  Format                lvm2\n  Metadata Areas        <span class=\"token number\">1</span>\n  Metadata Sequence No  <span class=\"token number\">3</span>\n  VG Access             read/write\n  VG Status             resizable\n  MAX LV                <span class=\"token number\">0</span>\n  Cur LV                <span class=\"token number\">2</span>\n  Open LV               <span class=\"token number\">2</span>\n  Max PV                <span class=\"token number\">0</span>\n  Cur PV                <span class=\"token number\">1</span>\n  Act PV                <span class=\"token number\">1</span>\n  VG Size               <span class=\"token operator\">&lt;</span><span class=\"token number\">39.00</span> GiB\n  PE Size               <span class=\"token number\">4.00</span> MiB\n  Total PE              <span class=\"token number\">9983</span>\n  Alloc PE / Size       <span class=\"token number\">9983</span> / <span class=\"token operator\">&lt;</span><span class=\"token number\">39.00</span> GiB\n  Free  PE / Size       <span class=\"token number\">0</span> / <span class=\"token number\">0</span>\n  VG UUID               238Yz8-MEQa-NT6a-3aHC-J3TZ-mGux-e9vqPf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"将物理卷加入到卷组\"><a href=\"#将物理卷加入到卷组\" class=\"headerlink\" title=\"将物理卷加入到卷组\"></a>将物理卷加入到卷组</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lvm<span class=\"token operator\">></span> vgextend centos /dev/sda3\n  Volume group <span class=\"token string\">\"centos\"</span> successfully extended\nlvm<span class=\"token operator\">></span> vgdisplay\n  --- Volume group ---\n  VG Name               centos\n  System ID\n  Format                lvm2\n  Metadata Areas        <span class=\"token number\">2</span>\n  Metadata Sequence No  <span class=\"token number\">4</span>\n  VG Access             read/write\n  VG Status             resizable\n  MAX LV                <span class=\"token number\">0</span>\n  Cur LV                <span class=\"token number\">2</span>\n  Open LV               <span class=\"token number\">2</span>\n  Max PV                <span class=\"token number\">0</span>\n  Cur PV                <span class=\"token number\">2</span>\n  Act PV                <span class=\"token number\">2</span>\n  VG Size               <span class=\"token number\">123.99</span> GiB\n  PE Size               <span class=\"token number\">4.00</span> MiB\n  Total PE              <span class=\"token number\">31742</span>\n  Alloc PE / Size       <span class=\"token number\">9983</span> / <span class=\"token operator\">&lt;</span><span class=\"token number\">39.00</span> GiB\n  Free  PE / Size       <span class=\"token number\">21759</span> / <span class=\"token operator\">&lt;</span><span class=\"token number\">85.00</span> GiB\n  VG UUID               238Yz8-MEQa-NT6a-3aHC-J3TZ-mGux-e9vqPf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到卷组的Free size 增加了<br>将卷组剩余空间(刚添加的85G)添加到逻辑卷&#x2F;dev&#x2F;centos&#x2F;root :</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lvm<span class=\"token operator\">></span> lvextend <span class=\"token parameter variable\">-l</span> +100%FREE /dev/centos/root\n  Size of logical volume centos/root changed from <span class=\"token operator\">&lt;</span><span class=\"token number\">35.00</span> GiB <span class=\"token punctuation\">(</span><span class=\"token number\">8959</span> extents<span class=\"token punctuation\">)</span> to <span class=\"token number\">119.99</span> GiB <span class=\"token punctuation\">(</span><span class=\"token number\">30718</span> extents<span class=\"token punctuation\">)</span>.\n  Logical volume centos/root successfully resized.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"同步到文件系统\"><a href=\"#同步到文件系统\" class=\"headerlink\" title=\"同步到文件系统\"></a>同步到文件系统</h3><p>之前只是对逻辑卷扩容，还要同步到文件系统，实现对根目录的扩容。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># xfs_growfs /dev/centos/root</span>\nmeta-data<span class=\"token operator\">=</span>/dev/mapper/centos-root <span class=\"token assign-left variable\">isize</span><span class=\"token operator\">=</span><span class=\"token number\">512</span>    <span class=\"token assign-left variable\">agcount</span><span class=\"token operator\">=</span><span class=\"token number\">4</span>, <span class=\"token assign-left variable\">agsize</span><span class=\"token operator\">=</span><span class=\"token number\">2293504</span> blks\n         <span class=\"token operator\">=</span>                       <span class=\"token assign-left variable\">sectsz</span><span class=\"token operator\">=</span><span class=\"token number\">512</span>   <span class=\"token assign-left variable\">attr</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>, <span class=\"token assign-left variable\">projid32bit</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n         <span class=\"token operator\">=</span>                       <span class=\"token assign-left variable\">crc</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>        <span class=\"token assign-left variable\">finobt</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">spinodes</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\ndata     <span class=\"token operator\">=</span>                       <span class=\"token assign-left variable\">bsize</span><span class=\"token operator\">=</span><span class=\"token number\">4096</span>   <span class=\"token assign-left variable\">blocks</span><span class=\"token operator\">=</span><span class=\"token number\">9174016</span>, <span class=\"token assign-left variable\">imaxpct</span><span class=\"token operator\">=</span><span class=\"token number\">25</span>\n         <span class=\"token operator\">=</span>                       <span class=\"token assign-left variable\">sunit</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>      <span class=\"token assign-left variable\">swidth</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> blks\nnaming   <span class=\"token operator\">=</span>version <span class=\"token number\">2</span>              <span class=\"token assign-left variable\">bsize</span><span class=\"token operator\">=</span><span class=\"token number\">4096</span>   ascii-ci<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">ftype</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\nlog      <span class=\"token operator\">=</span>internal               <span class=\"token assign-left variable\">bsize</span><span class=\"token operator\">=</span><span class=\"token number\">4096</span>   <span class=\"token assign-left variable\">blocks</span><span class=\"token operator\">=</span><span class=\"token number\">4479</span>, <span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\n         <span class=\"token operator\">=</span>                       <span class=\"token assign-left variable\">sectsz</span><span class=\"token operator\">=</span><span class=\"token number\">512</span>   <span class=\"token assign-left variable\">sunit</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> blks, lazy-count<span class=\"token operator\">=</span><span class=\"token number\">1</span>\nrealtime <span class=\"token operator\">=</span>none                   <span class=\"token assign-left variable\">extsz</span><span class=\"token operator\">=</span><span class=\"token number\">4096</span>   <span class=\"token assign-left variable\">blocks</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>, <span class=\"token assign-left variable\">rtextents</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\ndata blocks changed from <span class=\"token number\">9174016</span> to <span class=\"token number\">31455232</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>debian&#x2F;ubuntu 系统则使用以下命令对根目录扩容</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">resize2fs /dev/debian-vg/root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后再查看挂载情况：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># df -h</span>\n文件系统                 容量  已用  可用 已用% 挂载点\n/dev/mapper/centos-root  120G  <span class=\"token number\">5</span>.5G  115G    <span class=\"token number\">5</span>% /\ndevtmpfs                 <span class=\"token number\">3</span>.9G     <span class=\"token number\">0</span>  <span class=\"token number\">3</span>.9G    <span class=\"token number\">0</span>% /dev\ntmpfs                    <span class=\"token number\">3</span>.9G     <span class=\"token number\">0</span>  <span class=\"token number\">3</span>.9G    <span class=\"token number\">0</span>% /dev/shm\ntmpfs                    <span class=\"token number\">3</span>.9G   11M  <span class=\"token number\">3</span>.9G    <span class=\"token number\">1</span>% /run\ntmpfs                    <span class=\"token number\">3</span>.9G     <span class=\"token number\">0</span>  <span class=\"token number\">3</span>.9G    <span class=\"token number\">0</span>% /sys/fs/cgroup\n/dev/sda1               1014M  275M  740M   <span class=\"token number\">28</span>% /boot\ntmpfs                    783M   52K  783M    <span class=\"token number\">1</span>% /run/user/0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以发现有120G的空间挂载在根目录上。<br>over !!!<br>参考内容<br><a href=\"https://blog.csdn.net/harryxxxxx/article/details/81114613\">https://blog.csdn.net/harryxxxxx/article/details/81114613</a><br><a href=\"https://blog.csdn.net/nimasike/article/details/53729499\">https://blog.csdn.net/nimasike/article/details/53729499</a><br><a href=\"https://blog.csdn.net/qq_24871519/article/details/86243571\">\n</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric3.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Linux-根目录扩容操作\"><a href=\"#Linux-根目录扩容操作\" class=\"headerlink\" title=\"Linux 根目录扩容操作\"></a>Linux 根目录扩容操作</h1><h2 id=\"需求描述\"><a href=\"#需求描述\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h2><p>由于测试环境需要，虚拟机根目录需要扩容至120G。</p>\n<h2 id=\"查看本机磁盘环境\"><a href=\"#查看本机磁盘环境\" class=\"headerlink\" title=\"查看本机磁盘环境\"></a>查看本机磁盘环境</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># df -h</span>\n文件系统                 容量  已用  可用 已用% 挂载点\n/dev/mapper/centos-root   35G  <span class=\"token number\">5</span>.5G   30G   <span class=\"token number\">16</span>% /\ndevtmpfs                 <span class=\"token number\">3</span>.9G     <span class=\"token number\">0</span>  <span class=\"token number\">3</span>.9G    <span class=\"token number\">0</span>% /dev\ntmpfs                    <span class=\"token number\">3</span>.9G     <span class=\"token number\">0</span>  <span class=\"token number\">3</span>.9G    <span class=\"token number\">0</span>% /dev/shm\ntmpfs                    <span class=\"token number\">3</span>.9G   11M  <span class=\"token number\">3</span>.9G    <span class=\"token number\">1</span>% /run\ntmpfs                    <span class=\"token number\">3</span>.9G     <span class=\"token number\">0</span>  <span class=\"token number\">3</span>.9G    <span class=\"token number\">0</span>% /sys/fs/cgroup\n/dev/sda1               1014M  275M  740M   <span class=\"token number\">28</span>% /boot\ntmpfs                    783M   52K  783M    <span class=\"token number\">1</span>% /run/user/0\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># lsblk</span>\nNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nfd0               <span class=\"token number\">2</span>:0    <span class=\"token number\">1</span>    4K  <span class=\"token number\">0</span> disk\nsda               <span class=\"token number\">8</span>:0    <span class=\"token number\">0</span>  500G  <span class=\"token number\">0</span> disk\n├─sda1            <span class=\"token number\">8</span>:1    <span class=\"token number\">0</span>    1G  <span class=\"token number\">0</span> part /boot\n└─sda2            <span class=\"token number\">8</span>:2    <span class=\"token number\">0</span>   39G  <span class=\"token number\">0</span> part\n  ├─centos-root <span class=\"token number\">253</span>:0    <span class=\"token number\">0</span>   35G  <span class=\"token number\">0</span> lvm  /\n  └─centos-swap <span class=\"token number\">253</span>:1    <span class=\"token number\">0</span>    4G  <span class=\"token number\">0</span> lvm  <span class=\"token punctuation\">[</span>SWAP<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到根目录总容量为35G, 设备sda 的总容量为500G。</p>\n<h2 id=\"添加磁盘分区\"><a href=\"#添加磁盘分区\" class=\"headerlink\" title=\"添加磁盘分区\"></a>添加磁盘分区</h2><p>需要120G 容量，已有35G, 还需添加85G 容量。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># fdisk /dev/sda</span>\n欢迎使用 <span class=\"token function\">fdisk</span> <span class=\"token punctuation\">(</span>util-linux <span class=\"token number\">2.23</span>.2<span class=\"token punctuation\">)</span>。\n\n更改将停留在内存中，直到您决定将更改写入磁盘。\n使用写入命令前请三思。\n\n命令<span class=\"token punctuation\">(</span>输入 m 获取帮助<span class=\"token punctuation\">)</span>：n\nPartition type:\n   p   primary <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> primary, <span class=\"token number\">0</span> extended, <span class=\"token number\">2</span> <span class=\"token function\">free</span><span class=\"token punctuation\">)</span>\n   e   extended\nSelect <span class=\"token punctuation\">(</span>default p<span class=\"token punctuation\">)</span>:\nUsing default response p\n分区号 <span class=\"token punctuation\">(</span><span class=\"token number\">3,4</span>，默认 <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>：\n起始 扇区 <span class=\"token punctuation\">(</span><span class=\"token number\">83886080</span>-1048575999，默认为 <span class=\"token number\">83886080</span><span class=\"token punctuation\">)</span>：\n将使用默认值 <span class=\"token number\">83886080</span>\nLast 扇区, +扇区 or +size<span class=\"token punctuation\">&#123;</span>K,M,G<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">83886080</span>-1048575999，默认为 <span class=\"token number\">1048575999</span><span class=\"token punctuation\">)</span>：+85G\n分区 <span class=\"token number\">3</span> 已设置为 Linux 类型，大小设为 <span class=\"token number\">85</span> GiB\n\n命令<span class=\"token punctuation\">(</span>输入 m 获取帮助<span class=\"token punctuation\">)</span>：w\nThe partition table has been altered<span class=\"token operator\">!</span>\n\nCalling ioctl<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> to re-read partition table.\n\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># partprobe</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后查看分区是否创建：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># lsblk</span>\nNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nfd0               <span class=\"token number\">2</span>:0    <span class=\"token number\">1</span>    4K  <span class=\"token number\">0</span> disk\nsda               <span class=\"token number\">8</span>:0    <span class=\"token number\">0</span>  500G  <span class=\"token number\">0</span> disk\n├─sda1            <span class=\"token number\">8</span>:1    <span class=\"token number\">0</span>    1G  <span class=\"token number\">0</span> part /boot\n├─sda2            <span class=\"token number\">8</span>:2    <span class=\"token number\">0</span>   39G  <span class=\"token number\">0</span> part\n│ ├─centos-root <span class=\"token number\">253</span>:0    <span class=\"token number\">0</span>   35G  <span class=\"token number\">0</span> lvm  /\n│ └─centos-swap <span class=\"token number\">253</span>:1    <span class=\"token number\">0</span>    4G  <span class=\"token number\">0</span> lvm  <span class=\"token punctuation\">[</span>SWAP<span class=\"token punctuation\">]</span>\n└─sda3            <span class=\"token number\">8</span>:3    <span class=\"token number\">0</span>   85G  <span class=\"token number\">0</span> part\nsr0              <span class=\"token number\">11</span>:0    <span class=\"token number\">1</span> 1024M  <span class=\"token number\">0</span> rom<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到sda2 分区已创建。</p>\n<h2 id=\"开始扩容\"><a href=\"#开始扩容\" class=\"headerlink\" title=\"开始扩容\"></a>开始扩容</h2><h3 id=\"创建物理卷\"><a href=\"#创建物理卷\" class=\"headerlink\" title=\"创建物理卷\"></a>创建物理卷</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># lvm</span>\nlvm<span class=\"token operator\">></span> pvcreate /dev/sda3\n  Physical volume <span class=\"token string\">\"/dev/sda3\"</span> successfully created.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"查看物理卷和卷组\"><a href=\"#查看物理卷和卷组\" class=\"headerlink\" title=\"查看物理卷和卷组\"></a>查看物理卷和卷组</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lvm<span class=\"token operator\">></span> pvdisplay\n  --- Physical volume ---\n  PV Name               /dev/sda2\n  VG Name               centos\n  PV Size               <span class=\"token operator\">&lt;</span><span class=\"token number\">39.00</span> GiB / not usable <span class=\"token number\">3.00</span> MiB\n  Allocatable           <span class=\"token function\">yes</span> <span class=\"token punctuation\">(</span>but full<span class=\"token punctuation\">)</span>\n  PE Size               <span class=\"token number\">4.00</span> MiB\n  Total PE              <span class=\"token number\">9983</span>\n  Free PE               <span class=\"token number\">0</span>\n  Allocated PE          <span class=\"token number\">9983</span>\n  PV UUID               twmUZh-Vnqq-W5Pd-v3ms-6OkH-sSTs-nv8aA8\n\n  <span class=\"token string\">\"/dev/sda3\"</span> is a new physical volume of <span class=\"token string\">\"85.00 GiB\"</span>\n  --- NEW Physical volume ---\n  PV Name               /dev/sda3\n  VG Name\n  PV Size               <span class=\"token number\">85.00</span> GiB\n  Allocatable           NO\n  PE Size               <span class=\"token number\">0</span>\n  Total PE              <span class=\"token number\">0</span>\n  Free PE               <span class=\"token number\">0</span>\n  Allocated PE          <span class=\"token number\">0</span>\n  PV UUID               vTD91f-b28E-GgL0-XsqI-ipQ5-rscT-GcQbT6\n\nlvm<span class=\"token operator\">></span> vgdisplay\n  --- Volume group ---\n  VG Name               centos\n  System ID\n  Format                lvm2\n  Metadata Areas        <span class=\"token number\">1</span>\n  Metadata Sequence No  <span class=\"token number\">3</span>\n  VG Access             read/write\n  VG Status             resizable\n  MAX LV                <span class=\"token number\">0</span>\n  Cur LV                <span class=\"token number\">2</span>\n  Open LV               <span class=\"token number\">2</span>\n  Max PV                <span class=\"token number\">0</span>\n  Cur PV                <span class=\"token number\">1</span>\n  Act PV                <span class=\"token number\">1</span>\n  VG Size               <span class=\"token operator\">&lt;</span><span class=\"token number\">39.00</span> GiB\n  PE Size               <span class=\"token number\">4.00</span> MiB\n  Total PE              <span class=\"token number\">9983</span>\n  Alloc PE / Size       <span class=\"token number\">9983</span> / <span class=\"token operator\">&lt;</span><span class=\"token number\">39.00</span> GiB\n  Free  PE / Size       <span class=\"token number\">0</span> / <span class=\"token number\">0</span>\n  VG UUID               238Yz8-MEQa-NT6a-3aHC-J3TZ-mGux-e9vqPf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"将物理卷加入到卷组\"><a href=\"#将物理卷加入到卷组\" class=\"headerlink\" title=\"将物理卷加入到卷组\"></a>将物理卷加入到卷组</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lvm<span class=\"token operator\">></span> vgextend centos /dev/sda3\n  Volume group <span class=\"token string\">\"centos\"</span> successfully extended\nlvm<span class=\"token operator\">></span> vgdisplay\n  --- Volume group ---\n  VG Name               centos\n  System ID\n  Format                lvm2\n  Metadata Areas        <span class=\"token number\">2</span>\n  Metadata Sequence No  <span class=\"token number\">4</span>\n  VG Access             read/write\n  VG Status             resizable\n  MAX LV                <span class=\"token number\">0</span>\n  Cur LV                <span class=\"token number\">2</span>\n  Open LV               <span class=\"token number\">2</span>\n  Max PV                <span class=\"token number\">0</span>\n  Cur PV                <span class=\"token number\">2</span>\n  Act PV                <span class=\"token number\">2</span>\n  VG Size               <span class=\"token number\">123.99</span> GiB\n  PE Size               <span class=\"token number\">4.00</span> MiB\n  Total PE              <span class=\"token number\">31742</span>\n  Alloc PE / Size       <span class=\"token number\">9983</span> / <span class=\"token operator\">&lt;</span><span class=\"token number\">39.00</span> GiB\n  Free  PE / Size       <span class=\"token number\">21759</span> / <span class=\"token operator\">&lt;</span><span class=\"token number\">85.00</span> GiB\n  VG UUID               238Yz8-MEQa-NT6a-3aHC-J3TZ-mGux-e9vqPf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到卷组的Free size 增加了<br>将卷组剩余空间(刚添加的85G)添加到逻辑卷&#x2F;dev&#x2F;centos&#x2F;root :</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lvm<span class=\"token operator\">></span> lvextend <span class=\"token parameter variable\">-l</span> +100%FREE /dev/centos/root\n  Size of logical volume centos/root changed from <span class=\"token operator\">&lt;</span><span class=\"token number\">35.00</span> GiB <span class=\"token punctuation\">(</span><span class=\"token number\">8959</span> extents<span class=\"token punctuation\">)</span> to <span class=\"token number\">119.99</span> GiB <span class=\"token punctuation\">(</span><span class=\"token number\">30718</span> extents<span class=\"token punctuation\">)</span>.\n  Logical volume centos/root successfully resized.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"同步到文件系统\"><a href=\"#同步到文件系统\" class=\"headerlink\" title=\"同步到文件系统\"></a>同步到文件系统</h3><p>之前只是对逻辑卷扩容，还要同步到文件系统，实现对根目录的扩容。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># xfs_growfs /dev/centos/root</span>\nmeta-data<span class=\"token operator\">=</span>/dev/mapper/centos-root <span class=\"token assign-left variable\">isize</span><span class=\"token operator\">=</span><span class=\"token number\">512</span>    <span class=\"token assign-left variable\">agcount</span><span class=\"token operator\">=</span><span class=\"token number\">4</span>, <span class=\"token assign-left variable\">agsize</span><span class=\"token operator\">=</span><span class=\"token number\">2293504</span> blks\n         <span class=\"token operator\">=</span>                       <span class=\"token assign-left variable\">sectsz</span><span class=\"token operator\">=</span><span class=\"token number\">512</span>   <span class=\"token assign-left variable\">attr</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>, <span class=\"token assign-left variable\">projid32bit</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n         <span class=\"token operator\">=</span>                       <span class=\"token assign-left variable\">crc</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>        <span class=\"token assign-left variable\">finobt</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">spinodes</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\ndata     <span class=\"token operator\">=</span>                       <span class=\"token assign-left variable\">bsize</span><span class=\"token operator\">=</span><span class=\"token number\">4096</span>   <span class=\"token assign-left variable\">blocks</span><span class=\"token operator\">=</span><span class=\"token number\">9174016</span>, <span class=\"token assign-left variable\">imaxpct</span><span class=\"token operator\">=</span><span class=\"token number\">25</span>\n         <span class=\"token operator\">=</span>                       <span class=\"token assign-left variable\">sunit</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>      <span class=\"token assign-left variable\">swidth</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> blks\nnaming   <span class=\"token operator\">=</span>version <span class=\"token number\">2</span>              <span class=\"token assign-left variable\">bsize</span><span class=\"token operator\">=</span><span class=\"token number\">4096</span>   ascii-ci<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">ftype</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\nlog      <span class=\"token operator\">=</span>internal               <span class=\"token assign-left variable\">bsize</span><span class=\"token operator\">=</span><span class=\"token number\">4096</span>   <span class=\"token assign-left variable\">blocks</span><span class=\"token operator\">=</span><span class=\"token number\">4479</span>, <span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\n         <span class=\"token operator\">=</span>                       <span class=\"token assign-left variable\">sectsz</span><span class=\"token operator\">=</span><span class=\"token number\">512</span>   <span class=\"token assign-left variable\">sunit</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> blks, lazy-count<span class=\"token operator\">=</span><span class=\"token number\">1</span>\nrealtime <span class=\"token operator\">=</span>none                   <span class=\"token assign-left variable\">extsz</span><span class=\"token operator\">=</span><span class=\"token number\">4096</span>   <span class=\"token assign-left variable\">blocks</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>, <span class=\"token assign-left variable\">rtextents</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\ndata blocks changed from <span class=\"token number\">9174016</span> to <span class=\"token number\">31455232</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>debian&#x2F;ubuntu 系统则使用以下命令对根目录扩容</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">resize2fs /dev/debian-vg/root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后再查看挂载情况：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># df -h</span>\n文件系统                 容量  已用  可用 已用% 挂载点\n/dev/mapper/centos-root  120G  <span class=\"token number\">5</span>.5G  115G    <span class=\"token number\">5</span>% /\ndevtmpfs                 <span class=\"token number\">3</span>.9G     <span class=\"token number\">0</span>  <span class=\"token number\">3</span>.9G    <span class=\"token number\">0</span>% /dev\ntmpfs                    <span class=\"token number\">3</span>.9G     <span class=\"token number\">0</span>  <span class=\"token number\">3</span>.9G    <span class=\"token number\">0</span>% /dev/shm\ntmpfs                    <span class=\"token number\">3</span>.9G   11M  <span class=\"token number\">3</span>.9G    <span class=\"token number\">1</span>% /run\ntmpfs                    <span class=\"token number\">3</span>.9G     <span class=\"token number\">0</span>  <span class=\"token number\">3</span>.9G    <span class=\"token number\">0</span>% /sys/fs/cgroup\n/dev/sda1               1014M  275M  740M   <span class=\"token number\">28</span>% /boot\ntmpfs                    783M   52K  783M    <span class=\"token number\">1</span>% /run/user/0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以发现有120G的空间挂载在根目录上。<br>over !!!<br>参考内容<br><a href=\"https://blog.csdn.net/harryxxxxx/article/details/81114613\">https://blog.csdn.net/harryxxxxx/article/details/81114613</a><br><a href=\"https://blog.csdn.net/nimasike/article/details/53729499\">https://blog.csdn.net/nimasike/article/details/53729499</a><br><a href=\"https://blog.csdn.net/qq_24871519/article/details/86243571\">\n</a></p>\n"},{"title":"mysql 创建用户并赋予管理员权限","date":"2023-12-28T16:00:00.000Z","updated":"2023-12-28T16:00:00.000Z","keywords":null,"copyright":false,"_content":"\n# mysql 创建用户并赋予管理员权限\n\n```sql\n-- 创建新用户，将new_username替换为你想要创建的新用户名，将password替换为用户的密码。\nCREATE USER 'new_username'@'localhost' IDENTIFIED BY 'password';\n\n-- 授予new_username用户在所有数据库和所有表上的所有权限，并且WITH GRANT OPTION选项允许该用户授予其他用户权限\nGRANT ALL PRIVILEGES ON *.* TO 'new_username'@'localhost' WITH GRANT OPTION;\n\n-- 刷新权限以使更改生效\nFLUSH PRIVILEGES;\n```","source":"_posts/mysql/mysql 创建用户并赋予管理员权限.md","raw":"---\ntitle: mysql 创建用户并赋予管理员权限\ndate: 2023-12-29\nupdated: 2023-12-29\ntags:\n  - mysql\ncategories: mysql\nkeywords:\ncopyright: false\n---\n\n# mysql 创建用户并赋予管理员权限\n\n```sql\n-- 创建新用户，将new_username替换为你想要创建的新用户名，将password替换为用户的密码。\nCREATE USER 'new_username'@'localhost' IDENTIFIED BY 'password';\n\n-- 授予new_username用户在所有数据库和所有表上的所有权限，并且WITH GRANT OPTION选项允许该用户授予其他用户权限\nGRANT ALL PRIVILEGES ON *.* TO 'new_username'@'localhost' WITH GRANT OPTION;\n\n-- 刷新权限以使更改生效\nFLUSH PRIVILEGES;\n```","slug":"mysql/mysql 创建用户并赋予管理员权限","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor7r000szc7h1uoa2mcj","content":"<h1 id=\"mysql-创建用户并赋予管理员权限\"><a href=\"#mysql-创建用户并赋予管理员权限\" class=\"headerlink\" title=\"mysql 创建用户并赋予管理员权限\"></a>mysql 创建用户并赋予管理员权限</h1><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 创建新用户，将new_username替换为你想要创建的新用户名，将password替换为用户的密码。</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'new_username'</span><span class=\"token variable\">@'localhost'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 授予new_username用户在所有数据库和所有表上的所有权限，并且WITH GRANT OPTION选项允许该用户授予其他用户权限</span>\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'new_username'</span><span class=\"token variable\">@'localhost'</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 刷新权限以使更改生效</span>\nFLUSH <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric2.png","cover_type":"img","excerpt":"","more":"<h1 id=\"mysql-创建用户并赋予管理员权限\"><a href=\"#mysql-创建用户并赋予管理员权限\" class=\"headerlink\" title=\"mysql 创建用户并赋予管理员权限\"></a>mysql 创建用户并赋予管理员权限</h1><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 创建新用户，将new_username替换为你想要创建的新用户名，将password替换为用户的密码。</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'new_username'</span><span class=\"token variable\">@'localhost'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 授予new_username用户在所有数据库和所有表上的所有权限，并且WITH GRANT OPTION选项允许该用户授予其他用户权限</span>\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'new_username'</span><span class=\"token variable\">@'localhost'</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 刷新权限以使更改生效</span>\nFLUSH <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"vi 常用命令","toc":true,"date":"2021-07-31T11:21:00.000Z","updated":"2021-07-31T11:21:00.000Z","cover":"/img/default_cover/geomeric7.jpg","_content":"\n## Vi 常用命令\n\n### 进入 vi 的命令\n\n|         命令          | 描述                                              |\n| :-------------------: | ------------------------------------------------- |\n|      vi filename      | 打开或新建文件，并将光标置于第一行首              |\n|    vi +n filename     | 打开文件，并将光标置于第 n 行首                   |\n|     vi + filename     | 打开文件，并将光标置于最后一行首                  |\n| vi +/pattern filename | 打开文件，并将光标置于第一个与 pattern 匹配的串处 |\n|    vi -r filename     | 在上次正用 vi 编辑时发生系统崩溃，恢复 filename   |\n| vi filename….filename | 打开多个文件，依次进行编辑                        |\n\n<!-- more -->\n\n### 移动光标类命令\n\n|    命令     | 描述                             |\n| :---------: | -------------------------------- |\n|      h      | 光标左移一个字符                 |\n|      l      | 光标右移一个字符                 |\n|    space    | 光标右移一个字符                 |\n|  Backspace  | 光标左移一个字符                 |\n| k 或 Ctrl+p | 光标上移一行                     |\n| j 或 Ctrl+n | 光标下移一行                     |\n|    Enter    | 光标下移一行                     |\n|   w 或 W    | 光标右移一个字至字首             |\n|   b 或 B    | 光标左移一个字至字首             |\n|   e 或 E    | 光标右移一个字至字尾             |\n|      (      | 光标移至句首                     |\n|      )      | 光标移至句尾                     |\n|      {      | 光标移至段落开头                 |\n|      }      | 光标移至段落结尾                 |\n|     nG      | 光标移至第 n 行首                |\n|      G      | 到最后一行                       |\n|     n+      | 光标下移 n 行                    |\n|     n-      | 光标上移 n 行                    |\n|     n$      | 光标移至第 n 行尾                |\n|      H      | 光标移至屏幕顶行                 |\n|      M      | 光标移至屏幕中间行               |\n|      L      | 光标移至屏幕最后行               |\n|      0      | （注意是数字零）光标移至当前行首 |\n|      $      | 光标移至当前行尾                 |\n\n### 屏幕翻滚类命令\n\n|   命令    | 描述                                                   |\n| :-------: | ------------------------------------------------------ |\n|  Ctrl+u   | 向文件首翻半屏                                         |\n| Ctrl ＋ b | 向文件首翻一屏                                         |\n|  Ctrl+d   | 向文件尾翻半屏                                         |\n|  Ctrl+f   | 向文件尾翻一屏                                         |\n|    nz     | 将第 n 行滚至屏幕顶部，不指定 n 时将当前行滚至屏幕顶部 |\n\n### 插入文本类命令\n\n|    命令    | 描述                                                 |\n| :--------: | ---------------------------------------------------- |\n|     i      | 在光标前                                             |\n|     I      | 在当前行首                                           |\n|     a      | 光标后                                               |\n|     A      | 在当前行尾                                           |\n|     o      | 在当前行之下新开一行                                 |\n|     O      | 在当前行之上新开一行                                 |\n|     r      | 替换当前字符                                         |\n|     R      | 替换当前字符及其后的字符，直至按 ESC 键              |\n|     s      | 从当前光标位置处开始，以输入的文本替代指定数目的字符 |\n|     S      | 删除指定数目的行，并以所输入文本代替之               |\n| ncw 或 nCW | 修改指定数目的字                                     |\n|    nCC     | 修改指定数目的行                                     |\n\n### 删除命令\n\n|    命令    | 描述                                            |\n| :--------: | ----------------------------------------------- |\n| ndw 或 ndW | 删除光标处开始及其后的 n-1 个字                 |\n|     do     | 删至行首                                        |\n|     d$     | 删至行尾                                        |\n|    ndd     | 删除当前行及其后 n-1 行                         |\n|   x 或 X   | 删除一个字符，x 删除光标后的，而 X 删除光标前的 |\n|   Ctrl+u   | 删除输入方式下所输入的文本                      |\n\n### 搜索及替换命令\n\n|       命令       | 描述                                   |\n| :--------------: | -------------------------------------- |\n|     /pattern     | 从光标开始处向文件尾搜索 pattern       |\n|     ?pattern     | 从光标开始处向文件首搜索 pattern       |\n|        n         | 在同一方向重复上一次搜索命令           |\n|        N         | 在反方向上重复上一次搜索命令           |\n|   ：s/p1/p2/g    | 将当前行中所有 p1 均用 p2 替代         |\n| ：n1,n2s/p1/p2/g | 将第 n1 至 n2 行中所有 p1 均用 p2 替代 |\n|  ：g/p1/s//p2/g  | 将文件中所有 p1 均用 p2 替换           |\n\n### 选项设置\n\n|    命令    | 描述                                                 |\n| :--------: | ---------------------------------------------------- |\n|    all     | 列出所有选项设置情况                                 |\n|    term    | 设置终端类型                                         |\n| ignorance  | 在搜索中忽略大小写                                   |\n|    list    | 显示制表位(Ctrl+I)和行尾标志（$)                     |\n|   number   | 显示行号                                             |\n|   report   | 显示由面向行的命令修改过的数目                       |\n|   terse    | 显示简短的警告信息                                   |\n|    warn    | 在转到别的文件时若没保存当前文件则显示 NO write 信息 |\n|  nomagic   | 允许在搜索模式中，使用前面不带“\\”的特殊字符          |\n| nowrapscan | 禁止 vi 在搜索到达文件两端时，又从另一端开始         |\n|    mesg    | 允许 vi 显示其他用户用 write 写到自己终端上的信息    |\n\n### 最后行方式命令\n\n|       命令        | 描述                                                                                                              |\n| :---------------: | ----------------------------------------------------------------------------------------------------------------- |\n|   ：n1,n2 co n3   | 将 n1 行到 n2 行之间的内容拷贝到第 n3 行下                                                                        |\n|   ：n1,n2 m n3    | 将 n1 行到 n2 行之间的内容移至到第 n3 行下                                                                        |\n|     ：n1,n2 d     | 将 n1 行到 n2 行之间的内容删除                                                                                    |\n|        ：w        | 保存当前文件                                                                                                      |\n|   ：e filename    | 打开文件 filename 进行编辑                                                                                        |\n|        ：x        | 保存当前文件并退出                                                                                                |\n|        ：q        | 退出 vi                                                                                                           |\n|       ：q!        | 不保存文件并退出 vi                                                                                               |\n|    ：!command     | 执行 shell 命令 command                                                                                           |\n| ：n1,n2 w!command | 将文件中 n1 行至 n2 行的内容作为 command 的输入并执行之，若不指定 n1，n2，则表示将整个文件内容作为 command 的输入 |\n|    ：r!command    | 将命令 command 的输出结果放到当前行                                                                               |\n\n### 寄存器操作\n\n| 命令  | 描述                                                                             |\n| :---: | -------------------------------------------------------------------------------- |\n| “?nyy | 将当前行及其下 n 行的内容保存到寄存器？中，其中?为一个字母，n 为一个数字         |\n| “?nyw | 将当前行及其下 n 个字保存到寄存器？中，其中?为一个字母，n 为一个数字             |\n| “?nyl | 将当前行及其下 n 个字符保存到寄存器？中，其中?为一个字母，n 为一个数字           |\n|  “?p  | 取出寄存器？中的内容并将其放到光标位置处。这里？可以是一个字母，也可以是一个数字 |\n|  ndd  | 将当前行及其下共 n 行文本删除，并将所删内容放到 1 号删除寄存器中                 |\n\n### 保存退出\n\n|    命令     | 描述                           |\n| :---------: | ------------------------------ |\n|     zz      | 保存并退出                     |\n| :w filename | 写入文件                       |\n|     :W      | 写入文件                       |\n|     :x      | 保存(如果当前文件修改过)并退出 |\n|     :q!     | 不保存文件，直接退出           |\n|     :q      | 退出 vi                        |\n","source":"_posts/linux/vi 常用命令.md","raw":"---\ntitle: vi 常用命令\ntags: vi\ncategories: linux\ntoc: true\ndate: 2021-07-31 19:21:00\nupdated: 2021-07-31 19:21:00\ncover:\n---\n\n## Vi 常用命令\n\n### 进入 vi 的命令\n\n|         命令          | 描述                                              |\n| :-------------------: | ------------------------------------------------- |\n|      vi filename      | 打开或新建文件，并将光标置于第一行首              |\n|    vi +n filename     | 打开文件，并将光标置于第 n 行首                   |\n|     vi + filename     | 打开文件，并将光标置于最后一行首                  |\n| vi +/pattern filename | 打开文件，并将光标置于第一个与 pattern 匹配的串处 |\n|    vi -r filename     | 在上次正用 vi 编辑时发生系统崩溃，恢复 filename   |\n| vi filename….filename | 打开多个文件，依次进行编辑                        |\n\n<!-- more -->\n\n### 移动光标类命令\n\n|    命令     | 描述                             |\n| :---------: | -------------------------------- |\n|      h      | 光标左移一个字符                 |\n|      l      | 光标右移一个字符                 |\n|    space    | 光标右移一个字符                 |\n|  Backspace  | 光标左移一个字符                 |\n| k 或 Ctrl+p | 光标上移一行                     |\n| j 或 Ctrl+n | 光标下移一行                     |\n|    Enter    | 光标下移一行                     |\n|   w 或 W    | 光标右移一个字至字首             |\n|   b 或 B    | 光标左移一个字至字首             |\n|   e 或 E    | 光标右移一个字至字尾             |\n|      (      | 光标移至句首                     |\n|      )      | 光标移至句尾                     |\n|      {      | 光标移至段落开头                 |\n|      }      | 光标移至段落结尾                 |\n|     nG      | 光标移至第 n 行首                |\n|      G      | 到最后一行                       |\n|     n+      | 光标下移 n 行                    |\n|     n-      | 光标上移 n 行                    |\n|     n$      | 光标移至第 n 行尾                |\n|      H      | 光标移至屏幕顶行                 |\n|      M      | 光标移至屏幕中间行               |\n|      L      | 光标移至屏幕最后行               |\n|      0      | （注意是数字零）光标移至当前行首 |\n|      $      | 光标移至当前行尾                 |\n\n### 屏幕翻滚类命令\n\n|   命令    | 描述                                                   |\n| :-------: | ------------------------------------------------------ |\n|  Ctrl+u   | 向文件首翻半屏                                         |\n| Ctrl ＋ b | 向文件首翻一屏                                         |\n|  Ctrl+d   | 向文件尾翻半屏                                         |\n|  Ctrl+f   | 向文件尾翻一屏                                         |\n|    nz     | 将第 n 行滚至屏幕顶部，不指定 n 时将当前行滚至屏幕顶部 |\n\n### 插入文本类命令\n\n|    命令    | 描述                                                 |\n| :--------: | ---------------------------------------------------- |\n|     i      | 在光标前                                             |\n|     I      | 在当前行首                                           |\n|     a      | 光标后                                               |\n|     A      | 在当前行尾                                           |\n|     o      | 在当前行之下新开一行                                 |\n|     O      | 在当前行之上新开一行                                 |\n|     r      | 替换当前字符                                         |\n|     R      | 替换当前字符及其后的字符，直至按 ESC 键              |\n|     s      | 从当前光标位置处开始，以输入的文本替代指定数目的字符 |\n|     S      | 删除指定数目的行，并以所输入文本代替之               |\n| ncw 或 nCW | 修改指定数目的字                                     |\n|    nCC     | 修改指定数目的行                                     |\n\n### 删除命令\n\n|    命令    | 描述                                            |\n| :--------: | ----------------------------------------------- |\n| ndw 或 ndW | 删除光标处开始及其后的 n-1 个字                 |\n|     do     | 删至行首                                        |\n|     d$     | 删至行尾                                        |\n|    ndd     | 删除当前行及其后 n-1 行                         |\n|   x 或 X   | 删除一个字符，x 删除光标后的，而 X 删除光标前的 |\n|   Ctrl+u   | 删除输入方式下所输入的文本                      |\n\n### 搜索及替换命令\n\n|       命令       | 描述                                   |\n| :--------------: | -------------------------------------- |\n|     /pattern     | 从光标开始处向文件尾搜索 pattern       |\n|     ?pattern     | 从光标开始处向文件首搜索 pattern       |\n|        n         | 在同一方向重复上一次搜索命令           |\n|        N         | 在反方向上重复上一次搜索命令           |\n|   ：s/p1/p2/g    | 将当前行中所有 p1 均用 p2 替代         |\n| ：n1,n2s/p1/p2/g | 将第 n1 至 n2 行中所有 p1 均用 p2 替代 |\n|  ：g/p1/s//p2/g  | 将文件中所有 p1 均用 p2 替换           |\n\n### 选项设置\n\n|    命令    | 描述                                                 |\n| :--------: | ---------------------------------------------------- |\n|    all     | 列出所有选项设置情况                                 |\n|    term    | 设置终端类型                                         |\n| ignorance  | 在搜索中忽略大小写                                   |\n|    list    | 显示制表位(Ctrl+I)和行尾标志（$)                     |\n|   number   | 显示行号                                             |\n|   report   | 显示由面向行的命令修改过的数目                       |\n|   terse    | 显示简短的警告信息                                   |\n|    warn    | 在转到别的文件时若没保存当前文件则显示 NO write 信息 |\n|  nomagic   | 允许在搜索模式中，使用前面不带“\\”的特殊字符          |\n| nowrapscan | 禁止 vi 在搜索到达文件两端时，又从另一端开始         |\n|    mesg    | 允许 vi 显示其他用户用 write 写到自己终端上的信息    |\n\n### 最后行方式命令\n\n|       命令        | 描述                                                                                                              |\n| :---------------: | ----------------------------------------------------------------------------------------------------------------- |\n|   ：n1,n2 co n3   | 将 n1 行到 n2 行之间的内容拷贝到第 n3 行下                                                                        |\n|   ：n1,n2 m n3    | 将 n1 行到 n2 行之间的内容移至到第 n3 行下                                                                        |\n|     ：n1,n2 d     | 将 n1 行到 n2 行之间的内容删除                                                                                    |\n|        ：w        | 保存当前文件                                                                                                      |\n|   ：e filename    | 打开文件 filename 进行编辑                                                                                        |\n|        ：x        | 保存当前文件并退出                                                                                                |\n|        ：q        | 退出 vi                                                                                                           |\n|       ：q!        | 不保存文件并退出 vi                                                                                               |\n|    ：!command     | 执行 shell 命令 command                                                                                           |\n| ：n1,n2 w!command | 将文件中 n1 行至 n2 行的内容作为 command 的输入并执行之，若不指定 n1，n2，则表示将整个文件内容作为 command 的输入 |\n|    ：r!command    | 将命令 command 的输出结果放到当前行                                                                               |\n\n### 寄存器操作\n\n| 命令  | 描述                                                                             |\n| :---: | -------------------------------------------------------------------------------- |\n| “?nyy | 将当前行及其下 n 行的内容保存到寄存器？中，其中?为一个字母，n 为一个数字         |\n| “?nyw | 将当前行及其下 n 个字保存到寄存器？中，其中?为一个字母，n 为一个数字             |\n| “?nyl | 将当前行及其下 n 个字符保存到寄存器？中，其中?为一个字母，n 为一个数字           |\n|  “?p  | 取出寄存器？中的内容并将其放到光标位置处。这里？可以是一个字母，也可以是一个数字 |\n|  ndd  | 将当前行及其下共 n 行文本删除，并将所删内容放到 1 号删除寄存器中                 |\n\n### 保存退出\n\n|    命令     | 描述                           |\n| :---------: | ------------------------------ |\n|     zz      | 保存并退出                     |\n| :w filename | 写入文件                       |\n|     :W      | 写入文件                       |\n|     :x      | 保存(如果当前文件修改过)并退出 |\n|     :q!     | 不保存文件，直接退出           |\n|     :q      | 退出 vi                        |\n","slug":"linux/vi 常用命令","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor7s000xzc7hge8c0cnq","content":"<h2 id=\"Vi-常用命令\"><a href=\"#Vi-常用命令\" class=\"headerlink\" title=\"Vi 常用命令\"></a>Vi 常用命令</h2><h3 id=\"进入-vi-的命令\"><a href=\"#进入-vi-的命令\" class=\"headerlink\" title=\"进入 vi 的命令\"></a>进入 vi 的命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">vi filename</td>\n<td>打开或新建文件，并将光标置于第一行首</td>\n</tr>\n<tr>\n<td align=\"center\">vi +n filename</td>\n<td>打开文件，并将光标置于第 n 行首</td>\n</tr>\n<tr>\n<td align=\"center\">vi + filename</td>\n<td>打开文件，并将光标置于最后一行首</td>\n</tr>\n<tr>\n<td align=\"center\">vi +&#x2F;pattern filename</td>\n<td>打开文件，并将光标置于第一个与 pattern 匹配的串处</td>\n</tr>\n<tr>\n<td align=\"center\">vi -r filename</td>\n<td>在上次正用 vi 编辑时发生系统崩溃，恢复 filename</td>\n</tr>\n<tr>\n<td align=\"center\">vi filename….filename</td>\n<td>打开多个文件，依次进行编辑</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n\n<h3 id=\"移动光标类命令\"><a href=\"#移动光标类命令\" class=\"headerlink\" title=\"移动光标类命令\"></a>移动光标类命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">h</td>\n<td>光标左移一个字符</td>\n</tr>\n<tr>\n<td align=\"center\">l</td>\n<td>光标右移一个字符</td>\n</tr>\n<tr>\n<td align=\"center\">space</td>\n<td>光标右移一个字符</td>\n</tr>\n<tr>\n<td align=\"center\">Backspace</td>\n<td>光标左移一个字符</td>\n</tr>\n<tr>\n<td align=\"center\">k 或 Ctrl+p</td>\n<td>光标上移一行</td>\n</tr>\n<tr>\n<td align=\"center\">j 或 Ctrl+n</td>\n<td>光标下移一行</td>\n</tr>\n<tr>\n<td align=\"center\">Enter</td>\n<td>光标下移一行</td>\n</tr>\n<tr>\n<td align=\"center\">w 或 W</td>\n<td>光标右移一个字至字首</td>\n</tr>\n<tr>\n<td align=\"center\">b 或 B</td>\n<td>光标左移一个字至字首</td>\n</tr>\n<tr>\n<td align=\"center\">e 或 E</td>\n<td>光标右移一个字至字尾</td>\n</tr>\n<tr>\n<td align=\"center\">(</td>\n<td>光标移至句首</td>\n</tr>\n<tr>\n<td align=\"center\">)</td>\n<td>光标移至句尾</td>\n</tr>\n<tr>\n<td align=\"center\">{</td>\n<td>光标移至段落开头</td>\n</tr>\n<tr>\n<td align=\"center\">}</td>\n<td>光标移至段落结尾</td>\n</tr>\n<tr>\n<td align=\"center\">nG</td>\n<td>光标移至第 n 行首</td>\n</tr>\n<tr>\n<td align=\"center\">G</td>\n<td>到最后一行</td>\n</tr>\n<tr>\n<td align=\"center\">n+</td>\n<td>光标下移 n 行</td>\n</tr>\n<tr>\n<td align=\"center\">n-</td>\n<td>光标上移 n 行</td>\n</tr>\n<tr>\n<td align=\"center\">n$</td>\n<td>光标移至第 n 行尾</td>\n</tr>\n<tr>\n<td align=\"center\">H</td>\n<td>光标移至屏幕顶行</td>\n</tr>\n<tr>\n<td align=\"center\">M</td>\n<td>光标移至屏幕中间行</td>\n</tr>\n<tr>\n<td align=\"center\">L</td>\n<td>光标移至屏幕最后行</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td>（注意是数字零）光标移至当前行首</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td>光标移至当前行尾</td>\n</tr>\n</tbody></table>\n<h3 id=\"屏幕翻滚类命令\"><a href=\"#屏幕翻滚类命令\" class=\"headerlink\" title=\"屏幕翻滚类命令\"></a>屏幕翻滚类命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Ctrl+u</td>\n<td>向文件首翻半屏</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl ＋ b</td>\n<td>向文件首翻一屏</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl+d</td>\n<td>向文件尾翻半屏</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl+f</td>\n<td>向文件尾翻一屏</td>\n</tr>\n<tr>\n<td align=\"center\">nz</td>\n<td>将第 n 行滚至屏幕顶部，不指定 n 时将当前行滚至屏幕顶部</td>\n</tr>\n</tbody></table>\n<h3 id=\"插入文本类命令\"><a href=\"#插入文本类命令\" class=\"headerlink\" title=\"插入文本类命令\"></a>插入文本类命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">i</td>\n<td>在光标前</td>\n</tr>\n<tr>\n<td align=\"center\">I</td>\n<td>在当前行首</td>\n</tr>\n<tr>\n<td align=\"center\">a</td>\n<td>光标后</td>\n</tr>\n<tr>\n<td align=\"center\">A</td>\n<td>在当前行尾</td>\n</tr>\n<tr>\n<td align=\"center\">o</td>\n<td>在当前行之下新开一行</td>\n</tr>\n<tr>\n<td align=\"center\">O</td>\n<td>在当前行之上新开一行</td>\n</tr>\n<tr>\n<td align=\"center\">r</td>\n<td>替换当前字符</td>\n</tr>\n<tr>\n<td align=\"center\">R</td>\n<td>替换当前字符及其后的字符，直至按 ESC 键</td>\n</tr>\n<tr>\n<td align=\"center\">s</td>\n<td>从当前光标位置处开始，以输入的文本替代指定数目的字符</td>\n</tr>\n<tr>\n<td align=\"center\">S</td>\n<td>删除指定数目的行，并以所输入文本代替之</td>\n</tr>\n<tr>\n<td align=\"center\">ncw 或 nCW</td>\n<td>修改指定数目的字</td>\n</tr>\n<tr>\n<td align=\"center\">nCC</td>\n<td>修改指定数目的行</td>\n</tr>\n</tbody></table>\n<h3 id=\"删除命令\"><a href=\"#删除命令\" class=\"headerlink\" title=\"删除命令\"></a>删除命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">ndw 或 ndW</td>\n<td>删除光标处开始及其后的 n-1 个字</td>\n</tr>\n<tr>\n<td align=\"center\">do</td>\n<td>删至行首</td>\n</tr>\n<tr>\n<td align=\"center\">d$</td>\n<td>删至行尾</td>\n</tr>\n<tr>\n<td align=\"center\">ndd</td>\n<td>删除当前行及其后 n-1 行</td>\n</tr>\n<tr>\n<td align=\"center\">x 或 X</td>\n<td>删除一个字符，x 删除光标后的，而 X 删除光标前的</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl+u</td>\n<td>删除输入方式下所输入的文本</td>\n</tr>\n</tbody></table>\n<h3 id=\"搜索及替换命令\"><a href=\"#搜索及替换命令\" class=\"headerlink\" title=\"搜索及替换命令\"></a>搜索及替换命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&#x2F;pattern</td>\n<td>从光标开始处向文件尾搜索 pattern</td>\n</tr>\n<tr>\n<td align=\"center\">?pattern</td>\n<td>从光标开始处向文件首搜索 pattern</td>\n</tr>\n<tr>\n<td align=\"center\">n</td>\n<td>在同一方向重复上一次搜索命令</td>\n</tr>\n<tr>\n<td align=\"center\">N</td>\n<td>在反方向上重复上一次搜索命令</td>\n</tr>\n<tr>\n<td align=\"center\">：s&#x2F;p1&#x2F;p2&#x2F;g</td>\n<td>将当前行中所有 p1 均用 p2 替代</td>\n</tr>\n<tr>\n<td align=\"center\">：n1,n2s&#x2F;p1&#x2F;p2&#x2F;g</td>\n<td>将第 n1 至 n2 行中所有 p1 均用 p2 替代</td>\n</tr>\n<tr>\n<td align=\"center\">：g&#x2F;p1&#x2F;s&#x2F;&#x2F;p2&#x2F;g</td>\n<td>将文件中所有 p1 均用 p2 替换</td>\n</tr>\n</tbody></table>\n<h3 id=\"选项设置\"><a href=\"#选项设置\" class=\"headerlink\" title=\"选项设置\"></a>选项设置</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">all</td>\n<td>列出所有选项设置情况</td>\n</tr>\n<tr>\n<td align=\"center\">term</td>\n<td>设置终端类型</td>\n</tr>\n<tr>\n<td align=\"center\">ignorance</td>\n<td>在搜索中忽略大小写</td>\n</tr>\n<tr>\n<td align=\"center\">list</td>\n<td>显示制表位(Ctrl+I)和行尾标志（$)</td>\n</tr>\n<tr>\n<td align=\"center\">number</td>\n<td>显示行号</td>\n</tr>\n<tr>\n<td align=\"center\">report</td>\n<td>显示由面向行的命令修改过的数目</td>\n</tr>\n<tr>\n<td align=\"center\">terse</td>\n<td>显示简短的警告信息</td>\n</tr>\n<tr>\n<td align=\"center\">warn</td>\n<td>在转到别的文件时若没保存当前文件则显示 NO write 信息</td>\n</tr>\n<tr>\n<td align=\"center\">nomagic</td>\n<td>允许在搜索模式中，使用前面不带“\\”的特殊字符</td>\n</tr>\n<tr>\n<td align=\"center\">nowrapscan</td>\n<td>禁止 vi 在搜索到达文件两端时，又从另一端开始</td>\n</tr>\n<tr>\n<td align=\"center\">mesg</td>\n<td>允许 vi 显示其他用户用 write 写到自己终端上的信息</td>\n</tr>\n</tbody></table>\n<h3 id=\"最后行方式命令\"><a href=\"#最后行方式命令\" class=\"headerlink\" title=\"最后行方式命令\"></a>最后行方式命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">：n1,n2 co n3</td>\n<td>将 n1 行到 n2 行之间的内容拷贝到第 n3 行下</td>\n</tr>\n<tr>\n<td align=\"center\">：n1,n2 m n3</td>\n<td>将 n1 行到 n2 行之间的内容移至到第 n3 行下</td>\n</tr>\n<tr>\n<td align=\"center\">：n1,n2 d</td>\n<td>将 n1 行到 n2 行之间的内容删除</td>\n</tr>\n<tr>\n<td align=\"center\">：w</td>\n<td>保存当前文件</td>\n</tr>\n<tr>\n<td align=\"center\">：e filename</td>\n<td>打开文件 filename 进行编辑</td>\n</tr>\n<tr>\n<td align=\"center\">：x</td>\n<td>保存当前文件并退出</td>\n</tr>\n<tr>\n<td align=\"center\">：q</td>\n<td>退出 vi</td>\n</tr>\n<tr>\n<td align=\"center\">：q!</td>\n<td>不保存文件并退出 vi</td>\n</tr>\n<tr>\n<td align=\"center\">：!command</td>\n<td>执行 shell 命令 command</td>\n</tr>\n<tr>\n<td align=\"center\">：n1,n2 w!command</td>\n<td>将文件中 n1 行至 n2 行的内容作为 command 的输入并执行之，若不指定 n1，n2，则表示将整个文件内容作为 command 的输入</td>\n</tr>\n<tr>\n<td align=\"center\">：r!command</td>\n<td>将命令 command 的输出结果放到当前行</td>\n</tr>\n</tbody></table>\n<h3 id=\"寄存器操作\"><a href=\"#寄存器操作\" class=\"headerlink\" title=\"寄存器操作\"></a>寄存器操作</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">“?nyy</td>\n<td>将当前行及其下 n 行的内容保存到寄存器？中，其中?为一个字母，n 为一个数字</td>\n</tr>\n<tr>\n<td align=\"center\">“?nyw</td>\n<td>将当前行及其下 n 个字保存到寄存器？中，其中?为一个字母，n 为一个数字</td>\n</tr>\n<tr>\n<td align=\"center\">“?nyl</td>\n<td>将当前行及其下 n 个字符保存到寄存器？中，其中?为一个字母，n 为一个数字</td>\n</tr>\n<tr>\n<td align=\"center\">“?p</td>\n<td>取出寄存器？中的内容并将其放到光标位置处。这里？可以是一个字母，也可以是一个数字</td>\n</tr>\n<tr>\n<td align=\"center\">ndd</td>\n<td>将当前行及其下共 n 行文本删除，并将所删内容放到 1 号删除寄存器中</td>\n</tr>\n</tbody></table>\n<h3 id=\"保存退出\"><a href=\"#保存退出\" class=\"headerlink\" title=\"保存退出\"></a>保存退出</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">zz</td>\n<td>保存并退出</td>\n</tr>\n<tr>\n<td align=\"center\">:w filename</td>\n<td>写入文件</td>\n</tr>\n<tr>\n<td align=\"center\">:W</td>\n<td>写入文件</td>\n</tr>\n<tr>\n<td align=\"center\">:x</td>\n<td>保存(如果当前文件修改过)并退出</td>\n</tr>\n<tr>\n<td align=\"center\">:q!</td>\n<td>不保存文件，直接退出</td>\n</tr>\n<tr>\n<td align=\"center\">:q</td>\n<td>退出 vi</td>\n</tr>\n</tbody></table>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover_type":"img","excerpt":"<h2 id=\"Vi-常用命令\"><a href=\"#Vi-常用命令\" class=\"headerlink\" title=\"Vi 常用命令\"></a>Vi 常用命令</h2><h3 id=\"进入-vi-的命令\"><a href=\"#进入-vi-的命令\" class=\"headerlink\" title=\"进入 vi 的命令\"></a>进入 vi 的命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">vi filename</td>\n<td>打开或新建文件，并将光标置于第一行首</td>\n</tr>\n<tr>\n<td align=\"center\">vi +n filename</td>\n<td>打开文件，并将光标置于第 n 行首</td>\n</tr>\n<tr>\n<td align=\"center\">vi + filename</td>\n<td>打开文件，并将光标置于最后一行首</td>\n</tr>\n<tr>\n<td align=\"center\">vi +&#x2F;pattern filename</td>\n<td>打开文件，并将光标置于第一个与 pattern 匹配的串处</td>\n</tr>\n<tr>\n<td align=\"center\">vi -r filename</td>\n<td>在上次正用 vi 编辑时发生系统崩溃，恢复 filename</td>\n</tr>\n<tr>\n<td align=\"center\">vi filename….filename</td>\n<td>打开多个文件，依次进行编辑</td>\n</tr>\n</tbody></table>","more":"<h3 id=\"移动光标类命令\"><a href=\"#移动光标类命令\" class=\"headerlink\" title=\"移动光标类命令\"></a>移动光标类命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">h</td>\n<td>光标左移一个字符</td>\n</tr>\n<tr>\n<td align=\"center\">l</td>\n<td>光标右移一个字符</td>\n</tr>\n<tr>\n<td align=\"center\">space</td>\n<td>光标右移一个字符</td>\n</tr>\n<tr>\n<td align=\"center\">Backspace</td>\n<td>光标左移一个字符</td>\n</tr>\n<tr>\n<td align=\"center\">k 或 Ctrl+p</td>\n<td>光标上移一行</td>\n</tr>\n<tr>\n<td align=\"center\">j 或 Ctrl+n</td>\n<td>光标下移一行</td>\n</tr>\n<tr>\n<td align=\"center\">Enter</td>\n<td>光标下移一行</td>\n</tr>\n<tr>\n<td align=\"center\">w 或 W</td>\n<td>光标右移一个字至字首</td>\n</tr>\n<tr>\n<td align=\"center\">b 或 B</td>\n<td>光标左移一个字至字首</td>\n</tr>\n<tr>\n<td align=\"center\">e 或 E</td>\n<td>光标右移一个字至字尾</td>\n</tr>\n<tr>\n<td align=\"center\">(</td>\n<td>光标移至句首</td>\n</tr>\n<tr>\n<td align=\"center\">)</td>\n<td>光标移至句尾</td>\n</tr>\n<tr>\n<td align=\"center\">{</td>\n<td>光标移至段落开头</td>\n</tr>\n<tr>\n<td align=\"center\">}</td>\n<td>光标移至段落结尾</td>\n</tr>\n<tr>\n<td align=\"center\">nG</td>\n<td>光标移至第 n 行首</td>\n</tr>\n<tr>\n<td align=\"center\">G</td>\n<td>到最后一行</td>\n</tr>\n<tr>\n<td align=\"center\">n+</td>\n<td>光标下移 n 行</td>\n</tr>\n<tr>\n<td align=\"center\">n-</td>\n<td>光标上移 n 行</td>\n</tr>\n<tr>\n<td align=\"center\">n$</td>\n<td>光标移至第 n 行尾</td>\n</tr>\n<tr>\n<td align=\"center\">H</td>\n<td>光标移至屏幕顶行</td>\n</tr>\n<tr>\n<td align=\"center\">M</td>\n<td>光标移至屏幕中间行</td>\n</tr>\n<tr>\n<td align=\"center\">L</td>\n<td>光标移至屏幕最后行</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td>（注意是数字零）光标移至当前行首</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td>光标移至当前行尾</td>\n</tr>\n</tbody></table>\n<h3 id=\"屏幕翻滚类命令\"><a href=\"#屏幕翻滚类命令\" class=\"headerlink\" title=\"屏幕翻滚类命令\"></a>屏幕翻滚类命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Ctrl+u</td>\n<td>向文件首翻半屏</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl ＋ b</td>\n<td>向文件首翻一屏</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl+d</td>\n<td>向文件尾翻半屏</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl+f</td>\n<td>向文件尾翻一屏</td>\n</tr>\n<tr>\n<td align=\"center\">nz</td>\n<td>将第 n 行滚至屏幕顶部，不指定 n 时将当前行滚至屏幕顶部</td>\n</tr>\n</tbody></table>\n<h3 id=\"插入文本类命令\"><a href=\"#插入文本类命令\" class=\"headerlink\" title=\"插入文本类命令\"></a>插入文本类命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">i</td>\n<td>在光标前</td>\n</tr>\n<tr>\n<td align=\"center\">I</td>\n<td>在当前行首</td>\n</tr>\n<tr>\n<td align=\"center\">a</td>\n<td>光标后</td>\n</tr>\n<tr>\n<td align=\"center\">A</td>\n<td>在当前行尾</td>\n</tr>\n<tr>\n<td align=\"center\">o</td>\n<td>在当前行之下新开一行</td>\n</tr>\n<tr>\n<td align=\"center\">O</td>\n<td>在当前行之上新开一行</td>\n</tr>\n<tr>\n<td align=\"center\">r</td>\n<td>替换当前字符</td>\n</tr>\n<tr>\n<td align=\"center\">R</td>\n<td>替换当前字符及其后的字符，直至按 ESC 键</td>\n</tr>\n<tr>\n<td align=\"center\">s</td>\n<td>从当前光标位置处开始，以输入的文本替代指定数目的字符</td>\n</tr>\n<tr>\n<td align=\"center\">S</td>\n<td>删除指定数目的行，并以所输入文本代替之</td>\n</tr>\n<tr>\n<td align=\"center\">ncw 或 nCW</td>\n<td>修改指定数目的字</td>\n</tr>\n<tr>\n<td align=\"center\">nCC</td>\n<td>修改指定数目的行</td>\n</tr>\n</tbody></table>\n<h3 id=\"删除命令\"><a href=\"#删除命令\" class=\"headerlink\" title=\"删除命令\"></a>删除命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">ndw 或 ndW</td>\n<td>删除光标处开始及其后的 n-1 个字</td>\n</tr>\n<tr>\n<td align=\"center\">do</td>\n<td>删至行首</td>\n</tr>\n<tr>\n<td align=\"center\">d$</td>\n<td>删至行尾</td>\n</tr>\n<tr>\n<td align=\"center\">ndd</td>\n<td>删除当前行及其后 n-1 行</td>\n</tr>\n<tr>\n<td align=\"center\">x 或 X</td>\n<td>删除一个字符，x 删除光标后的，而 X 删除光标前的</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl+u</td>\n<td>删除输入方式下所输入的文本</td>\n</tr>\n</tbody></table>\n<h3 id=\"搜索及替换命令\"><a href=\"#搜索及替换命令\" class=\"headerlink\" title=\"搜索及替换命令\"></a>搜索及替换命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&#x2F;pattern</td>\n<td>从光标开始处向文件尾搜索 pattern</td>\n</tr>\n<tr>\n<td align=\"center\">?pattern</td>\n<td>从光标开始处向文件首搜索 pattern</td>\n</tr>\n<tr>\n<td align=\"center\">n</td>\n<td>在同一方向重复上一次搜索命令</td>\n</tr>\n<tr>\n<td align=\"center\">N</td>\n<td>在反方向上重复上一次搜索命令</td>\n</tr>\n<tr>\n<td align=\"center\">：s&#x2F;p1&#x2F;p2&#x2F;g</td>\n<td>将当前行中所有 p1 均用 p2 替代</td>\n</tr>\n<tr>\n<td align=\"center\">：n1,n2s&#x2F;p1&#x2F;p2&#x2F;g</td>\n<td>将第 n1 至 n2 行中所有 p1 均用 p2 替代</td>\n</tr>\n<tr>\n<td align=\"center\">：g&#x2F;p1&#x2F;s&#x2F;&#x2F;p2&#x2F;g</td>\n<td>将文件中所有 p1 均用 p2 替换</td>\n</tr>\n</tbody></table>\n<h3 id=\"选项设置\"><a href=\"#选项设置\" class=\"headerlink\" title=\"选项设置\"></a>选项设置</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">all</td>\n<td>列出所有选项设置情况</td>\n</tr>\n<tr>\n<td align=\"center\">term</td>\n<td>设置终端类型</td>\n</tr>\n<tr>\n<td align=\"center\">ignorance</td>\n<td>在搜索中忽略大小写</td>\n</tr>\n<tr>\n<td align=\"center\">list</td>\n<td>显示制表位(Ctrl+I)和行尾标志（$)</td>\n</tr>\n<tr>\n<td align=\"center\">number</td>\n<td>显示行号</td>\n</tr>\n<tr>\n<td align=\"center\">report</td>\n<td>显示由面向行的命令修改过的数目</td>\n</tr>\n<tr>\n<td align=\"center\">terse</td>\n<td>显示简短的警告信息</td>\n</tr>\n<tr>\n<td align=\"center\">warn</td>\n<td>在转到别的文件时若没保存当前文件则显示 NO write 信息</td>\n</tr>\n<tr>\n<td align=\"center\">nomagic</td>\n<td>允许在搜索模式中，使用前面不带“\\”的特殊字符</td>\n</tr>\n<tr>\n<td align=\"center\">nowrapscan</td>\n<td>禁止 vi 在搜索到达文件两端时，又从另一端开始</td>\n</tr>\n<tr>\n<td align=\"center\">mesg</td>\n<td>允许 vi 显示其他用户用 write 写到自己终端上的信息</td>\n</tr>\n</tbody></table>\n<h3 id=\"最后行方式命令\"><a href=\"#最后行方式命令\" class=\"headerlink\" title=\"最后行方式命令\"></a>最后行方式命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">：n1,n2 co n3</td>\n<td>将 n1 行到 n2 行之间的内容拷贝到第 n3 行下</td>\n</tr>\n<tr>\n<td align=\"center\">：n1,n2 m n3</td>\n<td>将 n1 行到 n2 行之间的内容移至到第 n3 行下</td>\n</tr>\n<tr>\n<td align=\"center\">：n1,n2 d</td>\n<td>将 n1 行到 n2 行之间的内容删除</td>\n</tr>\n<tr>\n<td align=\"center\">：w</td>\n<td>保存当前文件</td>\n</tr>\n<tr>\n<td align=\"center\">：e filename</td>\n<td>打开文件 filename 进行编辑</td>\n</tr>\n<tr>\n<td align=\"center\">：x</td>\n<td>保存当前文件并退出</td>\n</tr>\n<tr>\n<td align=\"center\">：q</td>\n<td>退出 vi</td>\n</tr>\n<tr>\n<td align=\"center\">：q!</td>\n<td>不保存文件并退出 vi</td>\n</tr>\n<tr>\n<td align=\"center\">：!command</td>\n<td>执行 shell 命令 command</td>\n</tr>\n<tr>\n<td align=\"center\">：n1,n2 w!command</td>\n<td>将文件中 n1 行至 n2 行的内容作为 command 的输入并执行之，若不指定 n1，n2，则表示将整个文件内容作为 command 的输入</td>\n</tr>\n<tr>\n<td align=\"center\">：r!command</td>\n<td>将命令 command 的输出结果放到当前行</td>\n</tr>\n</tbody></table>\n<h3 id=\"寄存器操作\"><a href=\"#寄存器操作\" class=\"headerlink\" title=\"寄存器操作\"></a>寄存器操作</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">“?nyy</td>\n<td>将当前行及其下 n 行的内容保存到寄存器？中，其中?为一个字母，n 为一个数字</td>\n</tr>\n<tr>\n<td align=\"center\">“?nyw</td>\n<td>将当前行及其下 n 个字保存到寄存器？中，其中?为一个字母，n 为一个数字</td>\n</tr>\n<tr>\n<td align=\"center\">“?nyl</td>\n<td>将当前行及其下 n 个字符保存到寄存器？中，其中?为一个字母，n 为一个数字</td>\n</tr>\n<tr>\n<td align=\"center\">“?p</td>\n<td>取出寄存器？中的内容并将其放到光标位置处。这里？可以是一个字母，也可以是一个数字</td>\n</tr>\n<tr>\n<td align=\"center\">ndd</td>\n<td>将当前行及其下共 n 行文本删除，并将所删内容放到 1 号删除寄存器中</td>\n</tr>\n</tbody></table>\n<h3 id=\"保存退出\"><a href=\"#保存退出\" class=\"headerlink\" title=\"保存退出\"></a>保存退出</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">zz</td>\n<td>保存并退出</td>\n</tr>\n<tr>\n<td align=\"center\">:w filename</td>\n<td>写入文件</td>\n</tr>\n<tr>\n<td align=\"center\">:W</td>\n<td>写入文件</td>\n</tr>\n<tr>\n<td align=\"center\">:x</td>\n<td>保存(如果当前文件修改过)并退出</td>\n</tr>\n<tr>\n<td align=\"center\">:q!</td>\n<td>不保存文件，直接退出</td>\n</tr>\n<tr>\n<td align=\"center\">:q</td>\n<td>退出 vi</td>\n</tr>\n</tbody></table>"},{"title":"MySQL ORDER BY 有索引却不用？揭秘 `EXPLAIN` 中的“索引失效”真相","date":"2025-09-23T16:00:00.000Z","updated":"2025-09-23T16:00:00.000Z","keywords":null,"copyright":false,"_content":"\n# MySQL ORDER BY 有索引却不用？揭秘 `EXPLAIN` 中的“索引失效”真相\n\n\n在日常的 MySQL 性能优化中，我们常常会遇到一个令人困惑的现象：**明明为 `ORDER BY` 的字段创建了索引，但使用 `EXPLAIN` 查看执行计划时，却发现 `key` 为 `NULL`，`Extra` 中出现了 `Using filesort`，索引似乎“失效”了。**\n\n这究竟是怎么回事？是索引没建好？还是 MySQL 优化器“抽风”了？今天，我们就来深入剖析这一现象背后的真正原因，并提供切实可行的解决方案。\n\n\n### 一、问题重现\n\n假设我们有一个用户表 `users`，并为 `created_at` 字段创建了索引：\n\n```sql\nCREATE INDEX idx_created_at ON users(created_at)\n```\n\n执行查询：\n\n```sql\nEXPLAIN SELECT * FROM users ORDER BY created_at;\n```\n\n\n你可能会惊讶地发现，执行计划中并未使用 `idx_created_at` 索引，而是进行了全表扫描和 `filesort`。\n\n这到底是为什么？\n\n\n### 二、核心原因：回表成本过高\n\n要理解这个问题，我们必须先了解 MySQL 索引的底层机制。\n\n1. **二级索引的结构**：在 InnoDB 存储引擎中，除了主键索引（聚簇索引）外，其他索引都是**二级索引**。二级索引的叶子节点存储的是**索引字段的值 + 主键值**，而不是完整的数据行。\n\n2. **`SELECT *` 带来的“回表”问题**：\n   * 当执行 `SELECT * FROM users ORDER BY created_at` 时，MySQL 可以利用 `idx_created_at` 索引快速获取按 `created_at` 排序的主键列表。\n   * 但为了获取 `*` 所代表的所有字段数据，MySQL 必须拿着这些主键，**逐个回到主键索引中查找完整的数据行**。这个过程称为“**回表**”（Bookmark Lookup）。\n\n3. **优化器的权衡**：\n   * 如果表中有成千上万条数据，`ORDER BY` 又需要返回大部分或全部数据，那么这个“回表”过程就会产生**大量的随机 I/O 操作**。\n   * 随机 I/O 的成本远高于顺序 I/O。\n   * 因此，MySQL 优化器会进行成本估算：与其进行上万次随机 I/O（回表），不如直接进行一次**全表扫描**（顺序 I/O），然后在内存中对结果集进行排序（`filesort`）。\n   * 在大多数情况下，**全表扫描 + 内存排序**的总成本低于**遍历二级索引 + 大量回表**的成本。\n\n这就是为什么 `EXPLAIN` 显示未使用索引的根本原因——**优化器认为全表扫描更高效**。\n\n\n### 三、常见场景与解决方案\n\n除了上述核心原因，还有其他几种常见情况会导致 `ORDER BY` 索引未被使用：\n\n#### 1. `WHERE` 条件优先级更高\n\n* **场景**：`SELECT * FROM users WHERE status = 'active' ORDER BY created_at;`\n* **原因**：如果 `status` 字段的过滤性很强（如只有少量用户是 'active'），优化器可能优先选择 `status` 上的索引，然后对少量结果进行 `filesort`。\n* **方案**：创建**复合索引** `idx_status_created(status, created_at)`，让查询既能高效过滤，又能避免排序。\n\n#### 2. 范围查询阻断索引排序\n\n* **场景**：`WHERE age > 18 ORDER BY created_at`，索引为 `(age, created_at)`。\n* **原因**：“最左前缀原则”下，`age > 18` 是范围查询，其后的 `created_at` 无法再利用索引排序。\n* **方案**：调整查询逻辑，或接受 `filesort` 的存在。\n\n#### 3. 数据量过大或分布不均\n\n* **场景**：表数据量极大，或 `ORDER BY` 字段值重复率高。\n* **原因**：索引优势减弱，优化器可能选择全表扫描。\n* **方案**：优化查询条件，减少结果集。\n\n\n\n### 四、终极解决方案：覆盖索引\n\n要让 `ORDER BY` 索引真正发挥作用，最有效的方法是避免“回表”。\n\n#### ✅ 方案一：避免 `SELECT *`\n\n永远不要在生产环境使用 `SELECT *`！只查询必要的字段：\n\n```sql\n-- 好的做法\nSELECT id, name, created_at FROM users ORDER BY created_at;</code></pre>\n```\n如果查询的字段恰好都在索引中，就可能实现“覆盖索引”。\n\n#### ✅ 方案二：创建覆盖索引（Covering Index）\n\n将查询中用到的所有字段都包含在索引中，使索引“覆盖”查询需求。\n\n```sql\n-- 创建覆盖索引\nCREATE INDEX idx_cover ON users(created_at, id, name, email, status);\n```\n\n此时，`EXPLAIN` 的 `Extra` 列会显示 `Using index`，表示索引覆盖，无需回表，性能极佳。\n\n> **注意**：覆盖索引会增加索引大小和写入开销，需根据读写比和业务场景权衡。\n\n\n\n### 五、如何验证？\n\n使用 `EXPLAIN` 或 `EXPLAIN FORMAT=JSON` 观察执行计划：\n\n* `key`：实际使用的索引。\n* `Extra`：\n  * `Using index`：覆盖索引，最佳。\n  * `Using filesort`：进行了排序，可能未用索引。\n  * `Using index condition`：索引条件下推，部分优化。\n\n\n\n### 六、总结\n\n| 原因 | 解决方案 |\n|------|----------|\n| `SELECT *` 导致回表成本高 | 避免 `SELECT *`，只查必要字段 |\n| 未使用复合索引 | 创建 `(where_col, order_by_col)` 复合索引 |\n| 无法避免回表 | 创建覆盖索引，包含所有查询字段 |\n| 优化器误判 | 使用 `ANALYZE TABLE` 更新统计信息，或 `FORCE INDEX`（慎用） |\n\n**核心思想**：MySQL 优化器的目标是**总成本最低**，而不是“必须用索引”。理解索引结构（尤其是回表机制）和优化器的决策逻辑，才能写出真正高效的 SQL。\n","source":"_posts/mysql/20250924.md","raw":"---\ntitle: MySQL ORDER BY 有索引却不用？揭秘 `EXPLAIN` 中的“索引失效”真相\ndate: 2025-09-24\nupdated: 2025-09-24\ntags:\n  - mysql\ncategories: mysql\nkeywords:\ncopyright: false\n---\n\n# MySQL ORDER BY 有索引却不用？揭秘 `EXPLAIN` 中的“索引失效”真相\n\n\n在日常的 MySQL 性能优化中，我们常常会遇到一个令人困惑的现象：**明明为 `ORDER BY` 的字段创建了索引，但使用 `EXPLAIN` 查看执行计划时，却发现 `key` 为 `NULL`，`Extra` 中出现了 `Using filesort`，索引似乎“失效”了。**\n\n这究竟是怎么回事？是索引没建好？还是 MySQL 优化器“抽风”了？今天，我们就来深入剖析这一现象背后的真正原因，并提供切实可行的解决方案。\n\n\n### 一、问题重现\n\n假设我们有一个用户表 `users`，并为 `created_at` 字段创建了索引：\n\n```sql\nCREATE INDEX idx_created_at ON users(created_at)\n```\n\n执行查询：\n\n```sql\nEXPLAIN SELECT * FROM users ORDER BY created_at;\n```\n\n\n你可能会惊讶地发现，执行计划中并未使用 `idx_created_at` 索引，而是进行了全表扫描和 `filesort`。\n\n这到底是为什么？\n\n\n### 二、核心原因：回表成本过高\n\n要理解这个问题，我们必须先了解 MySQL 索引的底层机制。\n\n1. **二级索引的结构**：在 InnoDB 存储引擎中，除了主键索引（聚簇索引）外，其他索引都是**二级索引**。二级索引的叶子节点存储的是**索引字段的值 + 主键值**，而不是完整的数据行。\n\n2. **`SELECT *` 带来的“回表”问题**：\n   * 当执行 `SELECT * FROM users ORDER BY created_at` 时，MySQL 可以利用 `idx_created_at` 索引快速获取按 `created_at` 排序的主键列表。\n   * 但为了获取 `*` 所代表的所有字段数据，MySQL 必须拿着这些主键，**逐个回到主键索引中查找完整的数据行**。这个过程称为“**回表**”（Bookmark Lookup）。\n\n3. **优化器的权衡**：\n   * 如果表中有成千上万条数据，`ORDER BY` 又需要返回大部分或全部数据，那么这个“回表”过程就会产生**大量的随机 I/O 操作**。\n   * 随机 I/O 的成本远高于顺序 I/O。\n   * 因此，MySQL 优化器会进行成本估算：与其进行上万次随机 I/O（回表），不如直接进行一次**全表扫描**（顺序 I/O），然后在内存中对结果集进行排序（`filesort`）。\n   * 在大多数情况下，**全表扫描 + 内存排序**的总成本低于**遍历二级索引 + 大量回表**的成本。\n\n这就是为什么 `EXPLAIN` 显示未使用索引的根本原因——**优化器认为全表扫描更高效**。\n\n\n### 三、常见场景与解决方案\n\n除了上述核心原因，还有其他几种常见情况会导致 `ORDER BY` 索引未被使用：\n\n#### 1. `WHERE` 条件优先级更高\n\n* **场景**：`SELECT * FROM users WHERE status = 'active' ORDER BY created_at;`\n* **原因**：如果 `status` 字段的过滤性很强（如只有少量用户是 'active'），优化器可能优先选择 `status` 上的索引，然后对少量结果进行 `filesort`。\n* **方案**：创建**复合索引** `idx_status_created(status, created_at)`，让查询既能高效过滤，又能避免排序。\n\n#### 2. 范围查询阻断索引排序\n\n* **场景**：`WHERE age > 18 ORDER BY created_at`，索引为 `(age, created_at)`。\n* **原因**：“最左前缀原则”下，`age > 18` 是范围查询，其后的 `created_at` 无法再利用索引排序。\n* **方案**：调整查询逻辑，或接受 `filesort` 的存在。\n\n#### 3. 数据量过大或分布不均\n\n* **场景**：表数据量极大，或 `ORDER BY` 字段值重复率高。\n* **原因**：索引优势减弱，优化器可能选择全表扫描。\n* **方案**：优化查询条件，减少结果集。\n\n\n\n### 四、终极解决方案：覆盖索引\n\n要让 `ORDER BY` 索引真正发挥作用，最有效的方法是避免“回表”。\n\n#### ✅ 方案一：避免 `SELECT *`\n\n永远不要在生产环境使用 `SELECT *`！只查询必要的字段：\n\n```sql\n-- 好的做法\nSELECT id, name, created_at FROM users ORDER BY created_at;</code></pre>\n```\n如果查询的字段恰好都在索引中，就可能实现“覆盖索引”。\n\n#### ✅ 方案二：创建覆盖索引（Covering Index）\n\n将查询中用到的所有字段都包含在索引中，使索引“覆盖”查询需求。\n\n```sql\n-- 创建覆盖索引\nCREATE INDEX idx_cover ON users(created_at, id, name, email, status);\n```\n\n此时，`EXPLAIN` 的 `Extra` 列会显示 `Using index`，表示索引覆盖，无需回表，性能极佳。\n\n> **注意**：覆盖索引会增加索引大小和写入开销，需根据读写比和业务场景权衡。\n\n\n\n### 五、如何验证？\n\n使用 `EXPLAIN` 或 `EXPLAIN FORMAT=JSON` 观察执行计划：\n\n* `key`：实际使用的索引。\n* `Extra`：\n  * `Using index`：覆盖索引，最佳。\n  * `Using filesort`：进行了排序，可能未用索引。\n  * `Using index condition`：索引条件下推，部分优化。\n\n\n\n### 六、总结\n\n| 原因 | 解决方案 |\n|------|----------|\n| `SELECT *` 导致回表成本高 | 避免 `SELECT *`，只查必要字段 |\n| 未使用复合索引 | 创建 `(where_col, order_by_col)` 复合索引 |\n| 无法避免回表 | 创建覆盖索引，包含所有查询字段 |\n| 优化器误判 | 使用 `ANALYZE TABLE` 更新统计信息，或 `FORCE INDEX`（慎用） |\n\n**核心思想**：MySQL 优化器的目标是**总成本最低**，而不是“必须用索引”。理解索引结构（尤其是回表机制）和优化器的决策逻辑，才能写出真正高效的 SQL。\n","slug":"mysql/20250924","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor7t000yzc7hgob7b2h1","content":"<h1 id=\"MySQL-ORDER-BY-有索引却不用？揭秘-EXPLAIN-中的“索引失效”真相\"><a href=\"#MySQL-ORDER-BY-有索引却不用？揭秘-EXPLAIN-中的“索引失效”真相\" class=\"headerlink\" title=\"MySQL ORDER BY 有索引却不用？揭秘 EXPLAIN 中的“索引失效”真相\"></a>MySQL ORDER BY 有索引却不用？揭秘 <code>EXPLAIN</code> 中的“索引失效”真相</h1><p>在日常的 MySQL 性能优化中，我们常常会遇到一个令人困惑的现象：<strong>明明为 <code>ORDER BY</code> 的字段创建了索引，但使用 <code>EXPLAIN</code> 查看执行计划时，却发现 <code>key</code> 为 <code>NULL</code>，<code>Extra</code> 中出现了 <code>Using filesort</code>，索引似乎“失效”了。</strong></p>\n<p>这究竟是怎么回事？是索引没建好？还是 MySQL 优化器“抽风”了？今天，我们就来深入剖析这一现象背后的真正原因，并提供切实可行的解决方案。</p>\n<h3 id=\"一、问题重现\"><a href=\"#一、问题重现\" class=\"headerlink\" title=\"一、问题重现\"></a>一、问题重现</h3><p>假设我们有一个用户表 <code>users</code>，并为 <code>created_at</code> 字段创建了索引：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> idx_created_at <span class=\"token keyword\">ON</span> users<span class=\"token punctuation\">(</span>created_at<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行查询：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> created_at<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>你可能会惊讶地发现，执行计划中并未使用 <code>idx_created_at</code> 索引，而是进行了全表扫描和 <code>filesort</code>。</p>\n<p>这到底是为什么？</p>\n<h3 id=\"二、核心原因：回表成本过高\"><a href=\"#二、核心原因：回表成本过高\" class=\"headerlink\" title=\"二、核心原因：回表成本过高\"></a>二、核心原因：回表成本过高</h3><p>要理解这个问题，我们必须先了解 MySQL 索引的底层机制。</p>\n<ol>\n<li><p><strong>二级索引的结构</strong>：在 InnoDB 存储引擎中，除了主键索引（聚簇索引）外，其他索引都是<strong>二级索引</strong>。二级索引的叶子节点存储的是<strong>索引字段的值 + 主键值</strong>，而不是完整的数据行。</p>\n</li>\n<li><p><strong><code>SELECT *</code> 带来的“回表”问题</strong>：</p>\n<ul>\n<li>当执行 <code>SELECT * FROM users ORDER BY created_at</code> 时，MySQL 可以利用 <code>idx_created_at</code> 索引快速获取按 <code>created_at</code> 排序的主键列表。</li>\n<li>但为了获取 <code>*</code> 所代表的所有字段数据，MySQL 必须拿着这些主键，<strong>逐个回到主键索引中查找完整的数据行</strong>。这个过程称为“<strong>回表</strong>”（Bookmark Lookup）。</li>\n</ul>\n</li>\n<li><p><strong>优化器的权衡</strong>：</p>\n<ul>\n<li>如果表中有成千上万条数据，<code>ORDER BY</code> 又需要返回大部分或全部数据，那么这个“回表”过程就会产生<strong>大量的随机 I&#x2F;O 操作</strong>。</li>\n<li>随机 I&#x2F;O 的成本远高于顺序 I&#x2F;O。</li>\n<li>因此，MySQL 优化器会进行成本估算：与其进行上万次随机 I&#x2F;O（回表），不如直接进行一次<strong>全表扫描</strong>（顺序 I&#x2F;O），然后在内存中对结果集进行排序（<code>filesort</code>）。</li>\n<li>在大多数情况下，<strong>全表扫描 + 内存排序</strong>的总成本低于<strong>遍历二级索引 + 大量回表</strong>的成本。</li>\n</ul>\n</li>\n</ol>\n<p>这就是为什么 <code>EXPLAIN</code> 显示未使用索引的根本原因——<strong>优化器认为全表扫描更高效</strong>。</p>\n<h3 id=\"三、常见场景与解决方案\"><a href=\"#三、常见场景与解决方案\" class=\"headerlink\" title=\"三、常见场景与解决方案\"></a>三、常见场景与解决方案</h3><p>除了上述核心原因，还有其他几种常见情况会导致 <code>ORDER BY</code> 索引未被使用：</p>\n<h4 id=\"1-WHERE-条件优先级更高\"><a href=\"#1-WHERE-条件优先级更高\" class=\"headerlink\" title=\"1. WHERE 条件优先级更高\"></a>1. <code>WHERE</code> 条件优先级更高</h4><ul>\n<li><strong>场景</strong>：<code>SELECT * FROM users WHERE status = &#39;active&#39; ORDER BY created_at;</code></li>\n<li><strong>原因</strong>：如果 <code>status</code> 字段的过滤性很强（如只有少量用户是 ‘active’），优化器可能优先选择 <code>status</code> 上的索引，然后对少量结果进行 <code>filesort</code>。</li>\n<li><strong>方案</strong>：创建<strong>复合索引</strong> <code>idx_status_created(status, created_at)</code>，让查询既能高效过滤，又能避免排序。</li>\n</ul>\n<h4 id=\"2-范围查询阻断索引排序\"><a href=\"#2-范围查询阻断索引排序\" class=\"headerlink\" title=\"2. 范围查询阻断索引排序\"></a>2. 范围查询阻断索引排序</h4><ul>\n<li><strong>场景</strong>：<code>WHERE age &gt; 18 ORDER BY created_at</code>，索引为 <code>(age, created_at)</code>。</li>\n<li><strong>原因</strong>：“最左前缀原则”下，<code>age &gt; 18</code> 是范围查询，其后的 <code>created_at</code> 无法再利用索引排序。</li>\n<li><strong>方案</strong>：调整查询逻辑，或接受 <code>filesort</code> 的存在。</li>\n</ul>\n<h4 id=\"3-数据量过大或分布不均\"><a href=\"#3-数据量过大或分布不均\" class=\"headerlink\" title=\"3. 数据量过大或分布不均\"></a>3. 数据量过大或分布不均</h4><ul>\n<li><strong>场景</strong>：表数据量极大，或 <code>ORDER BY</code> 字段值重复率高。</li>\n<li><strong>原因</strong>：索引优势减弱，优化器可能选择全表扫描。</li>\n<li><strong>方案</strong>：优化查询条件，减少结果集。</li>\n</ul>\n<h3 id=\"四、终极解决方案：覆盖索引\"><a href=\"#四、终极解决方案：覆盖索引\" class=\"headerlink\" title=\"四、终极解决方案：覆盖索引\"></a>四、终极解决方案：覆盖索引</h3><p>要让 <code>ORDER BY</code> 索引真正发挥作用，最有效的方法是避免“回表”。</p>\n<h4 id=\"✅-方案一：避免-SELECT\"><a href=\"#✅-方案一：避免-SELECT\" class=\"headerlink\" title=\"✅ 方案一：避免 SELECT *\"></a>✅ 方案一：避免 <code>SELECT *</code></h4><p>永远不要在生产环境使用 <code>SELECT *</code>！只查询必要的字段：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 好的做法</span>\n<span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> created_at <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> created_at<span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>code<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pre<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>如果查询的字段恰好都在索引中，就可能实现“覆盖索引”。</p>\n<h4 id=\"✅-方案二：创建覆盖索引（Covering-Index）\"><a href=\"#✅-方案二：创建覆盖索引（Covering-Index）\" class=\"headerlink\" title=\"✅ 方案二：创建覆盖索引（Covering Index）\"></a>✅ 方案二：创建覆盖索引（Covering Index）</h4><p>将查询中用到的所有字段都包含在索引中，使索引“覆盖”查询需求。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 创建覆盖索引</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> idx_cover <span class=\"token keyword\">ON</span> users<span class=\"token punctuation\">(</span>created_at<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> <span class=\"token keyword\">status</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>此时，<code>EXPLAIN</code> 的 <code>Extra</code> 列会显示 <code>Using index</code>，表示索引覆盖，无需回表，性能极佳。</p>\n<blockquote>\n<p><strong>注意</strong>：覆盖索引会增加索引大小和写入开销，需根据读写比和业务场景权衡。</p>\n</blockquote>\n<h3 id=\"五、如何验证？\"><a href=\"#五、如何验证？\" class=\"headerlink\" title=\"五、如何验证？\"></a>五、如何验证？</h3><p>使用 <code>EXPLAIN</code> 或 <code>EXPLAIN FORMAT=JSON</code> 观察执行计划：</p>\n<ul>\n<li><code>key</code>：实际使用的索引。</li>\n<li><code>Extra</code>：<ul>\n<li><code>Using index</code>：覆盖索引，最佳。</li>\n<li><code>Using filesort</code>：进行了排序，可能未用索引。</li>\n<li><code>Using index condition</code>：索引条件下推，部分优化。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"六、总结\"><a href=\"#六、总结\" class=\"headerlink\" title=\"六、总结\"></a>六、总结</h3><table>\n<thead>\n<tr>\n<th>原因</th>\n<th>解决方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>SELECT *</code> 导致回表成本高</td>\n<td>避免 <code>SELECT *</code>，只查必要字段</td>\n</tr>\n<tr>\n<td>未使用复合索引</td>\n<td>创建 <code>(where_col, order_by_col)</code> 复合索引</td>\n</tr>\n<tr>\n<td>无法避免回表</td>\n<td>创建覆盖索引，包含所有查询字段</td>\n</tr>\n<tr>\n<td>优化器误判</td>\n<td>使用 <code>ANALYZE TABLE</code> 更新统计信息，或 <code>FORCE INDEX</code>（慎用）</td>\n</tr>\n</tbody></table>\n<p><strong>核心思想</strong>：MySQL 优化器的目标是<strong>总成本最低</strong>，而不是“必须用索引”。理解索引结构（尤其是回表机制）和优化器的决策逻辑，才能写出真正高效的 SQL。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric3.png","cover_type":"img","excerpt":"","more":"<h1 id=\"MySQL-ORDER-BY-有索引却不用？揭秘-EXPLAIN-中的“索引失效”真相\"><a href=\"#MySQL-ORDER-BY-有索引却不用？揭秘-EXPLAIN-中的“索引失效”真相\" class=\"headerlink\" title=\"MySQL ORDER BY 有索引却不用？揭秘 EXPLAIN 中的“索引失效”真相\"></a>MySQL ORDER BY 有索引却不用？揭秘 <code>EXPLAIN</code> 中的“索引失效”真相</h1><p>在日常的 MySQL 性能优化中，我们常常会遇到一个令人困惑的现象：<strong>明明为 <code>ORDER BY</code> 的字段创建了索引，但使用 <code>EXPLAIN</code> 查看执行计划时，却发现 <code>key</code> 为 <code>NULL</code>，<code>Extra</code> 中出现了 <code>Using filesort</code>，索引似乎“失效”了。</strong></p>\n<p>这究竟是怎么回事？是索引没建好？还是 MySQL 优化器“抽风”了？今天，我们就来深入剖析这一现象背后的真正原因，并提供切实可行的解决方案。</p>\n<h3 id=\"一、问题重现\"><a href=\"#一、问题重现\" class=\"headerlink\" title=\"一、问题重现\"></a>一、问题重现</h3><p>假设我们有一个用户表 <code>users</code>，并为 <code>created_at</code> 字段创建了索引：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> idx_created_at <span class=\"token keyword\">ON</span> users<span class=\"token punctuation\">(</span>created_at<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行查询：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> created_at<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<p>你可能会惊讶地发现，执行计划中并未使用 <code>idx_created_at</code> 索引，而是进行了全表扫描和 <code>filesort</code>。</p>\n<p>这到底是为什么？</p>\n<h3 id=\"二、核心原因：回表成本过高\"><a href=\"#二、核心原因：回表成本过高\" class=\"headerlink\" title=\"二、核心原因：回表成本过高\"></a>二、核心原因：回表成本过高</h3><p>要理解这个问题，我们必须先了解 MySQL 索引的底层机制。</p>\n<ol>\n<li><p><strong>二级索引的结构</strong>：在 InnoDB 存储引擎中，除了主键索引（聚簇索引）外，其他索引都是<strong>二级索引</strong>。二级索引的叶子节点存储的是<strong>索引字段的值 + 主键值</strong>，而不是完整的数据行。</p>\n</li>\n<li><p><strong><code>SELECT *</code> 带来的“回表”问题</strong>：</p>\n<ul>\n<li>当执行 <code>SELECT * FROM users ORDER BY created_at</code> 时，MySQL 可以利用 <code>idx_created_at</code> 索引快速获取按 <code>created_at</code> 排序的主键列表。</li>\n<li>但为了获取 <code>*</code> 所代表的所有字段数据，MySQL 必须拿着这些主键，<strong>逐个回到主键索引中查找完整的数据行</strong>。这个过程称为“<strong>回表</strong>”（Bookmark Lookup）。</li>\n</ul>\n</li>\n<li><p><strong>优化器的权衡</strong>：</p>\n<ul>\n<li>如果表中有成千上万条数据，<code>ORDER BY</code> 又需要返回大部分或全部数据，那么这个“回表”过程就会产生<strong>大量的随机 I&#x2F;O 操作</strong>。</li>\n<li>随机 I&#x2F;O 的成本远高于顺序 I&#x2F;O。</li>\n<li>因此，MySQL 优化器会进行成本估算：与其进行上万次随机 I&#x2F;O（回表），不如直接进行一次<strong>全表扫描</strong>（顺序 I&#x2F;O），然后在内存中对结果集进行排序（<code>filesort</code>）。</li>\n<li>在大多数情况下，<strong>全表扫描 + 内存排序</strong>的总成本低于<strong>遍历二级索引 + 大量回表</strong>的成本。</li>\n</ul>\n</li>\n</ol>\n<p>这就是为什么 <code>EXPLAIN</code> 显示未使用索引的根本原因——<strong>优化器认为全表扫描更高效</strong>。</p>\n<h3 id=\"三、常见场景与解决方案\"><a href=\"#三、常见场景与解决方案\" class=\"headerlink\" title=\"三、常见场景与解决方案\"></a>三、常见场景与解决方案</h3><p>除了上述核心原因，还有其他几种常见情况会导致 <code>ORDER BY</code> 索引未被使用：</p>\n<h4 id=\"1-WHERE-条件优先级更高\"><a href=\"#1-WHERE-条件优先级更高\" class=\"headerlink\" title=\"1. WHERE 条件优先级更高\"></a>1. <code>WHERE</code> 条件优先级更高</h4><ul>\n<li><strong>场景</strong>：<code>SELECT * FROM users WHERE status = &#39;active&#39; ORDER BY created_at;</code></li>\n<li><strong>原因</strong>：如果 <code>status</code> 字段的过滤性很强（如只有少量用户是 ‘active’），优化器可能优先选择 <code>status</code> 上的索引，然后对少量结果进行 <code>filesort</code>。</li>\n<li><strong>方案</strong>：创建<strong>复合索引</strong> <code>idx_status_created(status, created_at)</code>，让查询既能高效过滤，又能避免排序。</li>\n</ul>\n<h4 id=\"2-范围查询阻断索引排序\"><a href=\"#2-范围查询阻断索引排序\" class=\"headerlink\" title=\"2. 范围查询阻断索引排序\"></a>2. 范围查询阻断索引排序</h4><ul>\n<li><strong>场景</strong>：<code>WHERE age &gt; 18 ORDER BY created_at</code>，索引为 <code>(age, created_at)</code>。</li>\n<li><strong>原因</strong>：“最左前缀原则”下，<code>age &gt; 18</code> 是范围查询，其后的 <code>created_at</code> 无法再利用索引排序。</li>\n<li><strong>方案</strong>：调整查询逻辑，或接受 <code>filesort</code> 的存在。</li>\n</ul>\n<h4 id=\"3-数据量过大或分布不均\"><a href=\"#3-数据量过大或分布不均\" class=\"headerlink\" title=\"3. 数据量过大或分布不均\"></a>3. 数据量过大或分布不均</h4><ul>\n<li><strong>场景</strong>：表数据量极大，或 <code>ORDER BY</code> 字段值重复率高。</li>\n<li><strong>原因</strong>：索引优势减弱，优化器可能选择全表扫描。</li>\n<li><strong>方案</strong>：优化查询条件，减少结果集。</li>\n</ul>\n<h3 id=\"四、终极解决方案：覆盖索引\"><a href=\"#四、终极解决方案：覆盖索引\" class=\"headerlink\" title=\"四、终极解决方案：覆盖索引\"></a>四、终极解决方案：覆盖索引</h3><p>要让 <code>ORDER BY</code> 索引真正发挥作用，最有效的方法是避免“回表”。</p>\n<h4 id=\"✅-方案一：避免-SELECT\"><a href=\"#✅-方案一：避免-SELECT\" class=\"headerlink\" title=\"✅ 方案一：避免 SELECT *\"></a>✅ 方案一：避免 <code>SELECT *</code></h4><p>永远不要在生产环境使用 <code>SELECT *</code>！只查询必要的字段：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 好的做法</span>\n<span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> created_at <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> created_at<span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>code<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pre<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>如果查询的字段恰好都在索引中，就可能实现“覆盖索引”。</p>\n<h4 id=\"✅-方案二：创建覆盖索引（Covering-Index）\"><a href=\"#✅-方案二：创建覆盖索引（Covering-Index）\" class=\"headerlink\" title=\"✅ 方案二：创建覆盖索引（Covering Index）\"></a>✅ 方案二：创建覆盖索引（Covering Index）</h4><p>将查询中用到的所有字段都包含在索引中，使索引“覆盖”查询需求。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 创建覆盖索引</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> idx_cover <span class=\"token keyword\">ON</span> users<span class=\"token punctuation\">(</span>created_at<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> <span class=\"token keyword\">status</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>此时，<code>EXPLAIN</code> 的 <code>Extra</code> 列会显示 <code>Using index</code>，表示索引覆盖，无需回表，性能极佳。</p>\n<blockquote>\n<p><strong>注意</strong>：覆盖索引会增加索引大小和写入开销，需根据读写比和业务场景权衡。</p>\n</blockquote>\n<h3 id=\"五、如何验证？\"><a href=\"#五、如何验证？\" class=\"headerlink\" title=\"五、如何验证？\"></a>五、如何验证？</h3><p>使用 <code>EXPLAIN</code> 或 <code>EXPLAIN FORMAT=JSON</code> 观察执行计划：</p>\n<ul>\n<li><code>key</code>：实际使用的索引。</li>\n<li><code>Extra</code>：<ul>\n<li><code>Using index</code>：覆盖索引，最佳。</li>\n<li><code>Using filesort</code>：进行了排序，可能未用索引。</li>\n<li><code>Using index condition</code>：索引条件下推，部分优化。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"六、总结\"><a href=\"#六、总结\" class=\"headerlink\" title=\"六、总结\"></a>六、总结</h3><table>\n<thead>\n<tr>\n<th>原因</th>\n<th>解决方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>SELECT *</code> 导致回表成本高</td>\n<td>避免 <code>SELECT *</code>，只查必要字段</td>\n</tr>\n<tr>\n<td>未使用复合索引</td>\n<td>创建 <code>(where_col, order_by_col)</code> 复合索引</td>\n</tr>\n<tr>\n<td>无法避免回表</td>\n<td>创建覆盖索引，包含所有查询字段</td>\n</tr>\n<tr>\n<td>优化器误判</td>\n<td>使用 <code>ANALYZE TABLE</code> 更新统计信息，或 <code>FORCE INDEX</code>（慎用）</td>\n</tr>\n</tbody></table>\n<p><strong>核心思想</strong>：MySQL 优化器的目标是<strong>总成本最低</strong>，而不是“必须用索引”。理解索引结构（尤其是回表机制）和优化器的决策逻辑，才能写出真正高效的 SQL。</p>\n"},{"title":"mysql 查看表字段注释","date":"2023-12-26T16:00:00.000Z","updated":"2023-12-26T16:00:00.000Z","keywords":null,"copyright":false,"_content":"\n1. **查看列注释**：\n\n   - 您可以通过两种方式查看 MySQL 列的注释：\n\n     - 使用`SHOW FULL COLUMNS`查询：\n\n       ```sql\n       SHOW FULL COLUMNS FROM employee_designation;\n       ```\n     - 使用 MySQL Workbench：\n       - 在 SCHEMAS 部分选择表，然后点击信息图标。\n       - 切换到 COLUMNS 标签，即可查看列的注释。","source":"_posts/mysql/mysql 查看表字段注释.md","raw":"---\ntitle: mysql 查看表字段注释\ndate: 2023-12-27\nupdated: 2023-12-27\ntags:\n  - mysql\ncategories: mysql\nkeywords:\ncopyright: false\n---\n\n1. **查看列注释**：\n\n   - 您可以通过两种方式查看 MySQL 列的注释：\n\n     - 使用`SHOW FULL COLUMNS`查询：\n\n       ```sql\n       SHOW FULL COLUMNS FROM employee_designation;\n       ```\n     - 使用 MySQL Workbench：\n       - 在 SCHEMAS 部分选择表，然后点击信息图标。\n       - 切换到 COLUMNS 标签，即可查看列的注释。","slug":"mysql/mysql 查看表字段注释","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor7t0012zc7hfock4p7k","content":"<ol>\n<li><p><strong>查看列注释</strong>：</p>\n<ul>\n<li><p>您可以通过两种方式查看 MySQL 列的注释：</p>\n<ul>\n<li><p>使用<code>SHOW FULL COLUMNS</code>查询：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">FULL</span> <span class=\"token keyword\">COLUMNS</span> <span class=\"token keyword\">FROM</span> employee_designation<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>使用 MySQL Workbench：</p>\n<ul>\n<li>在 SCHEMAS 部分选择表，然后点击信息图标。</li>\n<li>切换到 COLUMNS 标签，即可查看列的注释。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric2.png","cover_type":"img","excerpt":"","more":"<ol>\n<li><p><strong>查看列注释</strong>：</p>\n<ul>\n<li><p>您可以通过两种方式查看 MySQL 列的注释：</p>\n<ul>\n<li><p>使用<code>SHOW FULL COLUMNS</code>查询：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">FULL</span> <span class=\"token keyword\">COLUMNS</span> <span class=\"token keyword\">FROM</span> employee_designation<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>使用 MySQL Workbench：</p>\n<ul>\n<li>在 SCHEMAS 部分选择表，然后点击信息图标。</li>\n<li>切换到 COLUMNS 标签，即可查看列的注释。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"HashMap 与 TreeMap","date":"2019-12-31T16:00:00.000Z","updated":"2019-12-31T16:00:00.000Z","keywords":"HashMap TreeMap","description":"Java 常见面试题汇总 - 基础篇","copyright":true,"_content":"\n## HashMap 和 TreeMap 的实现\n\n**HashMap**：基于**哈希表**实现。使用 `HashMap` 要求添加的键类明确定义了 `hashCode()`和 `equals()` _[可以重写 hashCode()和 equals()]_ ，为了优化 `HashMap` 空间的使用，您可以调优**初始容量**和**负载因子**。\n\n- `HashMap()`: 构建一个空的哈希映像\n- `HashMap(Map m)`: 构建一个哈希映像，并且添加映像 m 的所有映射\n- `HashMap(int initialCapacity)`: 构建一个拥有特定容量的空的哈希映像\n- `HashMap(int initialCapacity, float loadFactor)`: 构建一个拥有特定容量和加载因子的空的哈希映像\n\n**TreeMap**：基于红黑树实现。`TreeMap` 没有调优选项，因为该树总处于平衡状态。\n\n- `TreeMap()`：构建一个空的映像树\n- `TreeMap(Map m)`: 构建一个映像树，并且添加映像 m 中所有元素\n- `TreeMap(Comparator c)`: 构建一个映像树，并且使用特定的比较器对关键字进行排序\n- `TreeMap(SortedMap s)`: 构建一个映像树，添加映像树 s 中所有映射，并且使用与有序映像 s 相同的比较器排序\n\n## HashMap 和 TreeMap 都是非线程安全\n\n`HashMap` 继承 `AbstractMap` 抽象类，`TreeMap` 继承自 `SortedMap` 接口。\n\n`AbstractMap` 抽象类：覆盖了 `equals()`和 `hashCode()`方法以确保两个相等映射返回相同的哈希码。**如果两个映射大小相等、包含同样的键且每个键在这两个映射中对应的值都相同，则这两个映射相等**。映射的哈希码是映射元素哈希码的总和，其中每个元素是 `Map.Entry` 接口的一个实现。因此，不论映射内部顺序如何，两个相等映射会报告相同的哈希码。\n\n`SortedMap` 接口：它用来保持键的**有序顺序**。`SortedMap` 接口为映像的视图(子集)，包括两个端点提供了访问方法。除了排序是作用于映射的键以外，处理 `SortedMap` 和处理 `SortedSet` 一样。添加到 `SortedMap` 实现类的元素必须实现 `Comparable` 接口，否则您必须给它的构造函数提供一个 `Comparator` 接口的实现。`TreeMap` 类是它的唯一一个实现。\n","source":"_posts/java/note/HashMap 与 TreeMap.md","raw":"---\n# 【必需】文章标题\ntitle: HashMap 与 TreeMap\n# 【必需】文章创建日期\ndate: 2020-01-01\n# 【可选】文章更新日期\nupdated: 2020-01-01\n# 【可选】文章标签\ntags: Java 笔记\n# 【可选】文章分类\ncategories: Java\n# 【可选】文章关键字\nkeywords: HashMap TreeMap\n# 【可选】文章描述\ndescription: Java 常见面试题汇总 - 基础篇\ncopyright: true\n---\n\n## HashMap 和 TreeMap 的实现\n\n**HashMap**：基于**哈希表**实现。使用 `HashMap` 要求添加的键类明确定义了 `hashCode()`和 `equals()` _[可以重写 hashCode()和 equals()]_ ，为了优化 `HashMap` 空间的使用，您可以调优**初始容量**和**负载因子**。\n\n- `HashMap()`: 构建一个空的哈希映像\n- `HashMap(Map m)`: 构建一个哈希映像，并且添加映像 m 的所有映射\n- `HashMap(int initialCapacity)`: 构建一个拥有特定容量的空的哈希映像\n- `HashMap(int initialCapacity, float loadFactor)`: 构建一个拥有特定容量和加载因子的空的哈希映像\n\n**TreeMap**：基于红黑树实现。`TreeMap` 没有调优选项，因为该树总处于平衡状态。\n\n- `TreeMap()`：构建一个空的映像树\n- `TreeMap(Map m)`: 构建一个映像树，并且添加映像 m 中所有元素\n- `TreeMap(Comparator c)`: 构建一个映像树，并且使用特定的比较器对关键字进行排序\n- `TreeMap(SortedMap s)`: 构建一个映像树，添加映像树 s 中所有映射，并且使用与有序映像 s 相同的比较器排序\n\n## HashMap 和 TreeMap 都是非线程安全\n\n`HashMap` 继承 `AbstractMap` 抽象类，`TreeMap` 继承自 `SortedMap` 接口。\n\n`AbstractMap` 抽象类：覆盖了 `equals()`和 `hashCode()`方法以确保两个相等映射返回相同的哈希码。**如果两个映射大小相等、包含同样的键且每个键在这两个映射中对应的值都相同，则这两个映射相等**。映射的哈希码是映射元素哈希码的总和，其中每个元素是 `Map.Entry` 接口的一个实现。因此，不论映射内部顺序如何，两个相等映射会报告相同的哈希码。\n\n`SortedMap` 接口：它用来保持键的**有序顺序**。`SortedMap` 接口为映像的视图(子集)，包括两个端点提供了访问方法。除了排序是作用于映射的键以外，处理 `SortedMap` 和处理 `SortedSet` 一样。添加到 `SortedMap` 实现类的元素必须实现 `Comparable` 接口，否则您必须给它的构造函数提供一个 `Comparator` 接口的实现。`TreeMap` 类是它的唯一一个实现。\n","slug":"java/note/HashMap 与 TreeMap","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor7u0014zc7h5fd86b7e","content":"<h2 id=\"HashMap-和-TreeMap-的实现\"><a href=\"#HashMap-和-TreeMap-的实现\" class=\"headerlink\" title=\"HashMap 和 TreeMap 的实现\"></a>HashMap 和 TreeMap 的实现</h2><p><strong>HashMap</strong>：基于<strong>哈希表</strong>实现。使用 <code>HashMap</code> 要求添加的键类明确定义了 <code>hashCode()</code>和 <code>equals()</code> <em>[可以重写 hashCode()和 equals()]</em> ，为了优化 <code>HashMap</code> 空间的使用，您可以调优<strong>初始容量</strong>和<strong>负载因子</strong>。</p>\n<ul>\n<li><code>HashMap()</code>: 构建一个空的哈希映像</li>\n<li><code>HashMap(Map m)</code>: 构建一个哈希映像，并且添加映像 m 的所有映射</li>\n<li><code>HashMap(int initialCapacity)</code>: 构建一个拥有特定容量的空的哈希映像</li>\n<li><code>HashMap(int initialCapacity, float loadFactor)</code>: 构建一个拥有特定容量和加载因子的空的哈希映像</li>\n</ul>\n<p><strong>TreeMap</strong>：基于红黑树实现。<code>TreeMap</code> 没有调优选项，因为该树总处于平衡状态。</p>\n<ul>\n<li><code>TreeMap()</code>：构建一个空的映像树</li>\n<li><code>TreeMap(Map m)</code>: 构建一个映像树，并且添加映像 m 中所有元素</li>\n<li><code>TreeMap(Comparator c)</code>: 构建一个映像树，并且使用特定的比较器对关键字进行排序</li>\n<li><code>TreeMap(SortedMap s)</code>: 构建一个映像树，添加映像树 s 中所有映射，并且使用与有序映像 s 相同的比较器排序</li>\n</ul>\n<h2 id=\"HashMap-和-TreeMap-都是非线程安全\"><a href=\"#HashMap-和-TreeMap-都是非线程安全\" class=\"headerlink\" title=\"HashMap 和 TreeMap 都是非线程安全\"></a>HashMap 和 TreeMap 都是非线程安全</h2><p><code>HashMap</code> 继承 <code>AbstractMap</code> 抽象类，<code>TreeMap</code> 继承自 <code>SortedMap</code> 接口。</p>\n<p><code>AbstractMap</code> 抽象类：覆盖了 <code>equals()</code>和 <code>hashCode()</code>方法以确保两个相等映射返回相同的哈希码。<strong>如果两个映射大小相等、包含同样的键且每个键在这两个映射中对应的值都相同，则这两个映射相等</strong>。映射的哈希码是映射元素哈希码的总和，其中每个元素是 <code>Map.Entry</code> 接口的一个实现。因此，不论映射内部顺序如何，两个相等映射会报告相同的哈希码。</p>\n<p><code>SortedMap</code> 接口：它用来保持键的<strong>有序顺序</strong>。<code>SortedMap</code> 接口为映像的视图(子集)，包括两个端点提供了访问方法。除了排序是作用于映射的键以外，处理 <code>SortedMap</code> 和处理 <code>SortedSet</code> 一样。添加到 <code>SortedMap</code> 实现类的元素必须实现 <code>Comparable</code> 接口，否则您必须给它的构造函数提供一个 <code>Comparator</code> 接口的实现。<code>TreeMap</code> 类是它的唯一一个实现。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric5.png","cover_type":"img","excerpt":"","more":"<h2 id=\"HashMap-和-TreeMap-的实现\"><a href=\"#HashMap-和-TreeMap-的实现\" class=\"headerlink\" title=\"HashMap 和 TreeMap 的实现\"></a>HashMap 和 TreeMap 的实现</h2><p><strong>HashMap</strong>：基于<strong>哈希表</strong>实现。使用 <code>HashMap</code> 要求添加的键类明确定义了 <code>hashCode()</code>和 <code>equals()</code> <em>[可以重写 hashCode()和 equals()]</em> ，为了优化 <code>HashMap</code> 空间的使用，您可以调优<strong>初始容量</strong>和<strong>负载因子</strong>。</p>\n<ul>\n<li><code>HashMap()</code>: 构建一个空的哈希映像</li>\n<li><code>HashMap(Map m)</code>: 构建一个哈希映像，并且添加映像 m 的所有映射</li>\n<li><code>HashMap(int initialCapacity)</code>: 构建一个拥有特定容量的空的哈希映像</li>\n<li><code>HashMap(int initialCapacity, float loadFactor)</code>: 构建一个拥有特定容量和加载因子的空的哈希映像</li>\n</ul>\n<p><strong>TreeMap</strong>：基于红黑树实现。<code>TreeMap</code> 没有调优选项，因为该树总处于平衡状态。</p>\n<ul>\n<li><code>TreeMap()</code>：构建一个空的映像树</li>\n<li><code>TreeMap(Map m)</code>: 构建一个映像树，并且添加映像 m 中所有元素</li>\n<li><code>TreeMap(Comparator c)</code>: 构建一个映像树，并且使用特定的比较器对关键字进行排序</li>\n<li><code>TreeMap(SortedMap s)</code>: 构建一个映像树，添加映像树 s 中所有映射，并且使用与有序映像 s 相同的比较器排序</li>\n</ul>\n<h2 id=\"HashMap-和-TreeMap-都是非线程安全\"><a href=\"#HashMap-和-TreeMap-都是非线程安全\" class=\"headerlink\" title=\"HashMap 和 TreeMap 都是非线程安全\"></a>HashMap 和 TreeMap 都是非线程安全</h2><p><code>HashMap</code> 继承 <code>AbstractMap</code> 抽象类，<code>TreeMap</code> 继承自 <code>SortedMap</code> 接口。</p>\n<p><code>AbstractMap</code> 抽象类：覆盖了 <code>equals()</code>和 <code>hashCode()</code>方法以确保两个相等映射返回相同的哈希码。<strong>如果两个映射大小相等、包含同样的键且每个键在这两个映射中对应的值都相同，则这两个映射相等</strong>。映射的哈希码是映射元素哈希码的总和，其中每个元素是 <code>Map.Entry</code> 接口的一个实现。因此，不论映射内部顺序如何，两个相等映射会报告相同的哈希码。</p>\n<p><code>SortedMap</code> 接口：它用来保持键的<strong>有序顺序</strong>。<code>SortedMap</code> 接口为映像的视图(子集)，包括两个端点提供了访问方法。除了排序是作用于映射的键以外，处理 <code>SortedMap</code> 和处理 <code>SortedSet</code> 一样。添加到 <code>SortedMap</code> 实现类的元素必须实现 <code>Comparable</code> 接口，否则您必须给它的构造函数提供一个 <code>Comparator</code> 接口的实现。<code>TreeMap</code> 类是它的唯一一个实现。</p>\n"},{"title":"MySQL 8.0 Public Key Retrieval is not allowed 错误的解决方法","date":"2023-06-11T16:00:00.000Z","updated":"2023-06-11T16:00:00.000Z","keywords":"Public Key Retrieval is not allowed","copyright":false,"_content":"\n在使用 MySQL 8.0 时重启应用后提示 com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Public Key Retrieval is not allowed\n\n最简单的解决方法是在连接后面添加 `allowPublicKeyRetrieval=true`\n\n文档中(https://mysql-net.github.io/MySqlConnector/connection-options/)给出的解释是：\n\n如果用户使用了 sha256_password 认证，密码在传输过程中必须使用 TLS 协议保护，但是如果 RSA 公钥不可用，可以使用服务器提供的公钥；可以在连接中通过 ServerRSAPublicKeyFile 指定服务器的 RSA 公钥，或者AllowPublicKeyRetrieval=True参数以允许客户端从服务器获取公钥；但是需要注意的是 AllowPublicKeyRetrieval=True可能会导致恶意的代理通过中间人攻击(MITM)获取到明文密码，所以默认是关闭的，必须显式开启\n\n![img](https://raw.githubusercontent.com/JasonDong97/blog_pics/master/img/20190406221957566.png)","source":"_posts/java/debug/MySQL 8.0 Public Key Retrieval is not allowed 错误的解决方法.md","raw":"---\ntitle: MySQL 8.0 Public Key Retrieval is not allowed 错误的解决方法\ndate: 2023-06-12\nupdated: 2023-06-12\ntags: java, 遇坑记录，mysql\ncategories: 遇坑记录\nkeywords: Public Key Retrieval is not allowed\ncopyright: false\n---\n\n在使用 MySQL 8.0 时重启应用后提示 com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Public Key Retrieval is not allowed\n\n最简单的解决方法是在连接后面添加 `allowPublicKeyRetrieval=true`\n\n文档中(https://mysql-net.github.io/MySqlConnector/connection-options/)给出的解释是：\n\n如果用户使用了 sha256_password 认证，密码在传输过程中必须使用 TLS 协议保护，但是如果 RSA 公钥不可用，可以使用服务器提供的公钥；可以在连接中通过 ServerRSAPublicKeyFile 指定服务器的 RSA 公钥，或者AllowPublicKeyRetrieval=True参数以允许客户端从服务器获取公钥；但是需要注意的是 AllowPublicKeyRetrieval=True可能会导致恶意的代理通过中间人攻击(MITM)获取到明文密码，所以默认是关闭的，必须显式开启\n\n![img](https://raw.githubusercontent.com/JasonDong97/blog_pics/master/img/20190406221957566.png)","slug":"java/debug/MySQL 8.0 Public Key Retrieval is not allowed 错误的解决方法","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor800020zc7hbe3rdb2q","content":"<p>在使用 MySQL 8.0 时重启应用后提示 com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Public Key Retrieval is not allowed</p>\n<p>最简单的解决方法是在连接后面添加 <code>allowPublicKeyRetrieval=true</code></p>\n<p>文档中(<a href=\"https://mysql-net.github.io/MySqlConnector/connection-options/)%E7%BB%99%E5%87%BA%E7%9A%84%E8%A7%A3%E9%87%8A%E6%98%AF%EF%BC%9A\">https://mysql-net.github.io/MySqlConnector/connection-options/)给出的解释是：</a></p>\n<p>如果用户使用了 sha256_password 认证，密码在传输过程中必须使用 TLS 协议保护，但是如果 RSA 公钥不可用，可以使用服务器提供的公钥；可以在连接中通过 ServerRSAPublicKeyFile 指定服务器的 RSA 公钥，或者AllowPublicKeyRetrieval&#x3D;True参数以允许客户端从服务器获取公钥；但是需要注意的是 AllowPublicKeyRetrieval&#x3D;True可能会导致恶意的代理通过中间人攻击(MITM)获取到明文密码，所以默认是关闭的，必须显式开启</p>\n<p><img src=\"https://raw.githubusercontent.com/JasonDong97/blog_pics/master/img/20190406221957566.png\" alt=\"img\"></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric9.png","cover_type":"img","excerpt":"","more":"<p>在使用 MySQL 8.0 时重启应用后提示 com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Public Key Retrieval is not allowed</p>\n<p>最简单的解决方法是在连接后面添加 <code>allowPublicKeyRetrieval=true</code></p>\n<p>文档中(<a href=\"https://mysql-net.github.io/MySqlConnector/connection-options/)%E7%BB%99%E5%87%BA%E7%9A%84%E8%A7%A3%E9%87%8A%E6%98%AF%EF%BC%9A\">https://mysql-net.github.io/MySqlConnector/connection-options/)给出的解释是：</a></p>\n<p>如果用户使用了 sha256_password 认证，密码在传输过程中必须使用 TLS 协议保护，但是如果 RSA 公钥不可用，可以使用服务器提供的公钥；可以在连接中通过 ServerRSAPublicKeyFile 指定服务器的 RSA 公钥，或者AllowPublicKeyRetrieval&#x3D;True参数以允许客户端从服务器获取公钥；但是需要注意的是 AllowPublicKeyRetrieval&#x3D;True可能会导致恶意的代理通过中间人攻击(MITM)获取到明文密码，所以默认是关闭的，必须显式开启</p>\n<p><img src=\"https://raw.githubusercontent.com/JasonDong97/blog_pics/master/img/20190406221957566.png\" alt=\"img\"></p>\n"},{"title":"cloud-init 无法调整分区大小：当 LANG 不是 en_US 时，growpart 不起作用","date":"2023-06-13T16:00:00.000Z","updated":"2023-06-13T16:00:00.000Z","keywords":["k8s","NetworkPolicy"],"copyright":false,"_content":"\n## 起因\n\n起初是想验证一下 kubevirt 动态扩展磁盘功能，发现在 kubevirt 资源定义上已经配置了 `ExpandDisks` 功能门，\n且 cephfs 的动态存储的 pvc 也已经配置了 `allowVolumeExpansion: true`，但是在 kubevirt 虚拟机中的 cloud-init 执行 `growpart` 报错，发现并没有生效。\nkubevirt 的版本是 0.56.0\ncr 资源定义如下：\n\n```yaml\napiVersion: kubevirt.io/v1\nkind: KubeVirt\nmetadata:\n    name: kubevirt\n    namespace: kubevirt\nspec:\n  ...\n  configuration:\n    developerConfiguration:\n      featureGates:\n      - LiveMigration\n      - DataVolumes\n      - ExpandDisks\n      - GPU\n    imagePullPolicy: IfNotPresent\n    permittedHostDevices:\n      pciHostDevices:\n      - externalResourceProvider: true\n        pciVendorSelector: 10DE:1DB4\n        resourceName: nvidia.com/GV100GL_TESLA_V100_PCIE_16GB\n      - externalResourceProvider: true\n        pciVendorSelector: 10DE:20F1\n        resourceName: nvidia.com/GA100_A100_PCIE_40GB\n      - externalResourceProvider: true\n        pciVendorSelector: 10DE:1EB8\n        resourceName: nvidia.com/TU104GL_TESLA_T4\n  imagePullPolicy: IfNotPresent\n    ...\n\n```\n\ncephfs 的动态存储的 pvc 的定义如下：\n\n```yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: drug\n  namespace: default\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 120Gi\n  storageClassName: csi-cephfs-sc-delete\n```\n\n## 排查\n\n经过排查，发现kubevirt 虚拟机中的 cloud-init 服务有个日志报错：\n\n![image-20230614205248005](https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614205248005.png)\n\n于是 google 了一下，在 Red Hat 官网中找到了答案：\n\n![image-20230614205357544](https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614205357544.png)\n\n链接地址为：https://access.redhat.com/solutions/5775351\n\n也就是说, 当虚拟机中的 `/etc/default/locale` 中的LANG 不为 `en_US`， 则 cloud-init 无法修改磁盘分区大小。。。。\n\n发现果然 `/etc/default/locale` 的 LANG 属性值不是 `en_US`, 而是：\n\n![image-20230614210156279](https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614210156279.png)\n\n\n\n\n\n于是我把 `LANG` 属性改为 `en_US.UTF-8`\n\n![image-20230614210257832](https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614210257832.png)\n\n最后重启虚拟机，看了下 `cloud-init` 服务，发现已经正常了。 kubevirt 虚拟机磁盘也可以正常扩容了\n\n![image-20230614210503666](https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614210503666.png)\n\n \n","source":"_posts/k8s/kubevirt/cloud-init 无法调整分区大小：当 LANG 不是 en_US 时，growpart 不起作用.md","raw":"---\ntitle: cloud-init 无法调整分区大小：当 LANG 不是 en_US 时，growpart 不起作用\ndate: 2023-06-14\nupdated: 2023-06-14\ntags:\n  - k8s\n  - kubevirt\ncategories: 容器/虚拟化\nkeywords:\n  - k8s\n  - NetworkPolicy\ncopyright: false\n---\n\n## 起因\n\n起初是想验证一下 kubevirt 动态扩展磁盘功能，发现在 kubevirt 资源定义上已经配置了 `ExpandDisks` 功能门，\n且 cephfs 的动态存储的 pvc 也已经配置了 `allowVolumeExpansion: true`，但是在 kubevirt 虚拟机中的 cloud-init 执行 `growpart` 报错，发现并没有生效。\nkubevirt 的版本是 0.56.0\ncr 资源定义如下：\n\n```yaml\napiVersion: kubevirt.io/v1\nkind: KubeVirt\nmetadata:\n    name: kubevirt\n    namespace: kubevirt\nspec:\n  ...\n  configuration:\n    developerConfiguration:\n      featureGates:\n      - LiveMigration\n      - DataVolumes\n      - ExpandDisks\n      - GPU\n    imagePullPolicy: IfNotPresent\n    permittedHostDevices:\n      pciHostDevices:\n      - externalResourceProvider: true\n        pciVendorSelector: 10DE:1DB4\n        resourceName: nvidia.com/GV100GL_TESLA_V100_PCIE_16GB\n      - externalResourceProvider: true\n        pciVendorSelector: 10DE:20F1\n        resourceName: nvidia.com/GA100_A100_PCIE_40GB\n      - externalResourceProvider: true\n        pciVendorSelector: 10DE:1EB8\n        resourceName: nvidia.com/TU104GL_TESLA_T4\n  imagePullPolicy: IfNotPresent\n    ...\n\n```\n\ncephfs 的动态存储的 pvc 的定义如下：\n\n```yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: drug\n  namespace: default\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 120Gi\n  storageClassName: csi-cephfs-sc-delete\n```\n\n## 排查\n\n经过排查，发现kubevirt 虚拟机中的 cloud-init 服务有个日志报错：\n\n![image-20230614205248005](https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614205248005.png)\n\n于是 google 了一下，在 Red Hat 官网中找到了答案：\n\n![image-20230614205357544](https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614205357544.png)\n\n链接地址为：https://access.redhat.com/solutions/5775351\n\n也就是说, 当虚拟机中的 `/etc/default/locale` 中的LANG 不为 `en_US`， 则 cloud-init 无法修改磁盘分区大小。。。。\n\n发现果然 `/etc/default/locale` 的 LANG 属性值不是 `en_US`, 而是：\n\n![image-20230614210156279](https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614210156279.png)\n\n\n\n\n\n于是我把 `LANG` 属性改为 `en_US.UTF-8`\n\n![image-20230614210257832](https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614210257832.png)\n\n最后重启虚拟机，看了下 `cloud-init` 服务，发现已经正常了。 kubevirt 虚拟机磁盘也可以正常扩容了\n\n![image-20230614210503666](https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614210503666.png)\n\n \n","slug":"k8s/kubevirt/cloud-init 无法调整分区大小：当 LANG 不是 en_US 时，growpart 不起作用","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor810021zc7hdgjpc9mj","content":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>起初是想验证一下 kubevirt 动态扩展磁盘功能，发现在 kubevirt 资源定义上已经配置了 <code>ExpandDisks</code> 功能门，<br>且 cephfs 的动态存储的 pvc 也已经配置了 <code>allowVolumeExpansion: true</code>，但是在 kubevirt 虚拟机中的 cloud-init 执行 <code>growpart</code> 报错，发现并没有生效。<br>kubevirt 的版本是 0.56.0<br>cr 资源定义如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> kubevirt.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> KubeVirt\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> kubevirt\n    <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> kubevirt\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">...</span>\n  <span class=\"token key atrule\">configuration</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">developerConfiguration</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">featureGates</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> LiveMigration\n      <span class=\"token punctuation\">-</span> DataVolumes\n      <span class=\"token punctuation\">-</span> ExpandDisks\n      <span class=\"token punctuation\">-</span> GPU\n    <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n    <span class=\"token key atrule\">permittedHostDevices</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">pciHostDevices</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">externalResourceProvider</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n        <span class=\"token key atrule\">pciVendorSelector</span><span class=\"token punctuation\">:</span> 10DE<span class=\"token punctuation\">:</span>1DB4\n        <span class=\"token key atrule\">resourceName</span><span class=\"token punctuation\">:</span> nvidia.com/GV100GL_TESLA_V100_PCIE_16GB\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">externalResourceProvider</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n        <span class=\"token key atrule\">pciVendorSelector</span><span class=\"token punctuation\">:</span> 10DE<span class=\"token punctuation\">:</span>20F1\n        <span class=\"token key atrule\">resourceName</span><span class=\"token punctuation\">:</span> nvidia.com/GA100_A100_PCIE_40GB\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">externalResourceProvider</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n        <span class=\"token key atrule\">pciVendorSelector</span><span class=\"token punctuation\">:</span> 10DE<span class=\"token punctuation\">:</span>1EB8\n        <span class=\"token key atrule\">resourceName</span><span class=\"token punctuation\">:</span> nvidia.com/TU104GL_TESLA_T4\n  <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n    <span class=\"token punctuation\">...</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>cephfs 的动态存储的 pvc 的定义如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> drug\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ReadWriteMany\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 120Gi\n  <span class=\"token key atrule\">storageClassName</span><span class=\"token punctuation\">:</span> csi<span class=\"token punctuation\">-</span>cephfs<span class=\"token punctuation\">-</span>sc<span class=\"token punctuation\">-</span>delete<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"排查\"><a href=\"#排查\" class=\"headerlink\" title=\"排查\"></a>排查</h2><p>经过排查，发现kubevirt 虚拟机中的 cloud-init 服务有个日志报错：</p>\n<p><img src=\"https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614205248005.png\" alt=\"image-20230614205248005\"></p>\n<p>于是 google 了一下，在 Red Hat 官网中找到了答案：</p>\n<p><img src=\"https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614205357544.png\" alt=\"image-20230614205357544\"></p>\n<p>链接地址为：<a href=\"https://access.redhat.com/solutions/5775351\">https://access.redhat.com/solutions/5775351</a></p>\n<p>也就是说, 当虚拟机中的 <code>/etc/default/locale</code> 中的LANG 不为 <code>en_US</code>， 则 cloud-init 无法修改磁盘分区大小。。。。</p>\n<p>发现果然 <code>/etc/default/locale</code> 的 LANG 属性值不是 <code>en_US</code>, 而是：</p>\n<p><img src=\"https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614210156279.png\" alt=\"image-20230614210156279\"></p>\n<p>于是我把 <code>LANG</code> 属性改为 <code>en_US.UTF-8</code></p>\n<p><img src=\"https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614210257832.png\" alt=\"image-20230614210257832\"></p>\n<p>最后重启虚拟机，看了下 <code>cloud-init</code> 服务，发现已经正常了。 kubevirt 虚拟机磁盘也可以正常扩容了</p>\n<p><img src=\"https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614210503666.png\" alt=\"image-20230614210503666\"></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric7.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>起初是想验证一下 kubevirt 动态扩展磁盘功能，发现在 kubevirt 资源定义上已经配置了 <code>ExpandDisks</code> 功能门，<br>且 cephfs 的动态存储的 pvc 也已经配置了 <code>allowVolumeExpansion: true</code>，但是在 kubevirt 虚拟机中的 cloud-init 执行 <code>growpart</code> 报错，发现并没有生效。<br>kubevirt 的版本是 0.56.0<br>cr 资源定义如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> kubevirt.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> KubeVirt\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> kubevirt\n    <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> kubevirt\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">...</span>\n  <span class=\"token key atrule\">configuration</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">developerConfiguration</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">featureGates</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> LiveMigration\n      <span class=\"token punctuation\">-</span> DataVolumes\n      <span class=\"token punctuation\">-</span> ExpandDisks\n      <span class=\"token punctuation\">-</span> GPU\n    <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n    <span class=\"token key atrule\">permittedHostDevices</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">pciHostDevices</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">externalResourceProvider</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n        <span class=\"token key atrule\">pciVendorSelector</span><span class=\"token punctuation\">:</span> 10DE<span class=\"token punctuation\">:</span>1DB4\n        <span class=\"token key atrule\">resourceName</span><span class=\"token punctuation\">:</span> nvidia.com/GV100GL_TESLA_V100_PCIE_16GB\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">externalResourceProvider</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n        <span class=\"token key atrule\">pciVendorSelector</span><span class=\"token punctuation\">:</span> 10DE<span class=\"token punctuation\">:</span>20F1\n        <span class=\"token key atrule\">resourceName</span><span class=\"token punctuation\">:</span> nvidia.com/GA100_A100_PCIE_40GB\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">externalResourceProvider</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n        <span class=\"token key atrule\">pciVendorSelector</span><span class=\"token punctuation\">:</span> 10DE<span class=\"token punctuation\">:</span>1EB8\n        <span class=\"token key atrule\">resourceName</span><span class=\"token punctuation\">:</span> nvidia.com/TU104GL_TESLA_T4\n  <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n    <span class=\"token punctuation\">...</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>cephfs 的动态存储的 pvc 的定义如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> drug\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ReadWriteMany\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 120Gi\n  <span class=\"token key atrule\">storageClassName</span><span class=\"token punctuation\">:</span> csi<span class=\"token punctuation\">-</span>cephfs<span class=\"token punctuation\">-</span>sc<span class=\"token punctuation\">-</span>delete<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"排查\"><a href=\"#排查\" class=\"headerlink\" title=\"排查\"></a>排查</h2><p>经过排查，发现kubevirt 虚拟机中的 cloud-init 服务有个日志报错：</p>\n<p><img src=\"https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614205248005.png\" alt=\"image-20230614205248005\"></p>\n<p>于是 google 了一下，在 Red Hat 官网中找到了答案：</p>\n<p><img src=\"https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614205357544.png\" alt=\"image-20230614205357544\"></p>\n<p>链接地址为：<a href=\"https://access.redhat.com/solutions/5775351\">https://access.redhat.com/solutions/5775351</a></p>\n<p>也就是说, 当虚拟机中的 <code>/etc/default/locale</code> 中的LANG 不为 <code>en_US</code>， 则 cloud-init 无法修改磁盘分区大小。。。。</p>\n<p>发现果然 <code>/etc/default/locale</code> 的 LANG 属性值不是 <code>en_US</code>, 而是：</p>\n<p><img src=\"https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614210156279.png\" alt=\"image-20230614210156279\"></p>\n<p>于是我把 <code>LANG</code> 属性改为 <code>en_US.UTF-8</code></p>\n<p><img src=\"https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614210257832.png\" alt=\"image-20230614210257832\"></p>\n<p>最后重启虚拟机，看了下 <code>cloud-init</code> 服务，发现已经正常了。 kubevirt 虚拟机磁盘也可以正常扩容了</p>\n<p><img src=\"https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614210503666.png\" alt=\"image-20230614210503666\"></p>\n"},{"title":"Java 精选面试题 (持续更新)","date":"2020-01-01T04:00:00.000Z","updated":"2020-01-01T04:00:00.000Z","keywords":"Java 面试","description":"Java 精选","copyright":false,"_content":"\n## Java 基础\n\n### 为什么 HashMap 是线程不安全的？\n\n在 jdk1.8 中，在多线程环境下，会发生数据覆盖的情况。\n\n#### jdk1.8 中 HashMap\n\n在 jdk1.8 中对 HashMap 进行了优化，在发生 hash 碰撞，不再采用头插法方式，而是直接插入链表尾部，因此不会出现环形链表的情况，但是在多线程的情况下仍然不安全，这里我们看 jdk1.8 中 HashMap 的 put 操作源码：\n\n```java\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n        if ((p = tab[i = (n - 1) & hash]) == null) // 如果没有hash碰撞则直接插入元素\n            tab[i] = newNode(hash, key, value, null);\n        else {\n            Node<K,V> e; K k;\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n            else if (p instanceof TreeNode)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n            else {\n                for (int binCount = 0; ; ++binCount) {\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        ++modCount;\n        if (++size > threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n```\n\n这是 jdk1.8 中 HashMap 中 put 操作的主函数， 注意第 6 行代码，如果没有 hash 碰撞则会直接插入元素。如果线程 A 和线程 B 同时进行 put 操作，刚好这两条不同的数据 hash 值一样，并且该位置数据为 null，所以这线程 A、B 都会进入第 6 行代码中。\n\n假设一种情况，线程 A 进入后还未进行数据插入时挂起，而线程 B 正常执行，从而正常插入数据，然后线程 A 获取 CPU 时间片，此时线程 A 不用再进行 hash 判断了，问题出现：线程 A 会把线程 B 插入的数据给覆盖，发生线程不安全。\n\n### 单例模式一共有几种写法？\n\n大体可分为 4 类，下面分别介绍他们的基本形式、变种及特点。\n\n#### 饱汉模式\n\n饱汉是变种最多的单例模式。我们从饱汉出发，通过其变种逐渐了解实现单例模式时需要关注的问题。\n\n##### 基础的饱汉\n\n饱汉，即已经吃饱，不着急再吃，饿的时候再吃。所以他就先不初始化单例，等第一次使用的时候再初始化，即“懒加载”。\n\n```java\n// 饱汉\n// UnThreadSafe\npublic class Singleton1 {\n  private static Singleton1 singleton = null;\n  private Singleton1() {\n  }\n  public static Singleton1 getInstance() {\n    if (singleton == null) {\n      singleton = new Singleton1();\n    }\n    return singleton;\n  }\n}\n```\n\n饱汉模式的核心就是懒加载。好处是更启动速度快、节省资源，一直到实例被第一次访问，才需要初始化单例；小坏处是写起来麻烦，大坏处是线程不安全，if 语句存在竞态条件。\n\n写起来麻烦不是大问题，可读性好啊。因此，单线程环境下，基础饱汉是笔者最喜欢的写法。但多线程环境下，基础饱汉就彻底不可用了。下面的几种变种都在试图解决基础饱汉线程不安全的问题。\n\n##### 饱汉 - 变种 1\n\n最粗暴的犯法是用 synchronized 关键字修饰 getInstance()方法，这样能达到绝对的线程安全。\n\n```java\n// 饱汉\n// ThreadSafe\npublic class Singleton1_1 {\n  private static Singleton1_1 singleton = null;\n  private Singleton1_1() {\n  }\n  public synchronized static Singleton1_1 getInstance() {\n    if (singleton == null) {\n      singleton = new Singleton1_1();\n    }\n    return singleton;\n  }\n}\n```\n\n变种 1 的好处是写起来简单，且绝对线程安全；坏处是并发性能极差，事实上完全退化到了串行。单例只需要初始化一次，但就算初始化以后，synchronized 的锁也无法避开，从而 getInstance()完全变成了串行操作。性能不敏感的场景建议使用。\n\n##### 饱汉 - 变种 2\n\n变种 2 是“臭名昭著”的 DCL 1.0。\n\n针对变种 1 中单例初始化后锁仍然无法避开的问题，变种 2 在变种 1 的外层又套了一层 check，加上 synchronized 内层的 check，即所谓“双重检查锁”（Double Check Lock，简称 DCL）。\n\n```java\n// 饱汉\n// UnThreadSafe\npublic class Singleton1_2 {\n  private static Singleton1_2 singleton = null;\n\n  public int f1 = 1;   // 触发部分初始化问题\n  public int f2 = 2;\n  private Singleton1_2() {\n  }\n  public static Singleton1_2 getInstance() {\n    // may get half object\n    if (singleton == null) {\n      synchronized (Singleton1_2.class) {\n        if (singleton == null) {\n          singleton = new Singleton1_2();\n        }\n      }\n    }\n    return singleton;\n  }\n}\n```\n\n变种 2 的核心是 DCL，看起来变种 2 似乎已经达到了理想的效果：懒加载+线程安全。可惜的是，正如注释中所说，DCL 仍然是线程不安全的，由于指令重排序，你可能会得到“半个对象”，即”部分初始化“问题。详细在看完变种 3 后，可参考下面这篇文章，这里不再赘述。\n\n> https://monkeysayhi.github.io/2016/11/29/volatile关键字的作用、原理/\n\n##### 饱汉 - 变种 3\n\n变种 3 专门针对变种 2，可谓 DCL 2.0。\n\n针对变种 3 的“半个对象”问题，变种 3 在 instance 上增加了 volatile 关键字，原理见上述参考。\n\n```java\n// 饱汉\n// ThreadSafe\npublic class Singleton1_3 {\n  private static volatile Singleton1_3 singleton = null;\n\n  public int f1 = 1;   // 触发部分初始化问题\n  public int f2 = 2;\n  private Singleton1_3() {\n  }\n  public static Singleton1_3 getInstance() {\n    if (singleton == null) {\n      synchronized (Singleton1_3.class) {\n        // must be a complete instance\n        if (singleton == null) {\n          singleton = new Singleton1_3();\n        }\n      }\n    }\n    return singleton;\n  }\n}\n```\n\n多线程环境下，变种 3 更适用于性能敏感的场景。但后面我们将了解到，就算是线程安全的，还有一些办法能破坏单例。\n\n当然，还有很多方式，能通过与 volatile 类似的方式防止部分初始化。读者可自行阅读内存屏障相关内容，但面试时不建议主动装逼。\n\n#### 饿汉模式\n\n与饱汉相对，饿汉很饿，只想着尽早吃到。所以他就在最早的时机，即类加载时初始化单例，以后访问时直接返回即可。\n\n```java\n// 饿汉\n// ThreadSafe\npublic class Singleton2 {\n  private static final Singleton2 singleton = new Singleton2();\n  private Singleton2() {\n  }\n  public static Singleton2 getInstance() {\n    return singleton;\n  }\n}\n```\n\n饿汉的好处是天生的线程安全（得益于类加载机制），写起来超级简单，使用时没有延迟；坏处是有可能造成资源浪费（如果类加载后就一直不使用单例的话）。\n\n> 值得注意的时，单线程环境下，饿汉与饱汉在性能上没什么差别；但多线程环境下，由于饱汉需要加锁，饿汉的性能反而更优。\n\n#### Holder 模式\n\n我们既希望利用饿汉模式中静态变量的方便和线程安全；又希望通过懒加载规避资源浪费。Holder 模式满足了这两点要求：核心仍然是静态变量，足够方便和线程安全；通过静态的 Holder 类持有真正实例，间接实现了懒加载。\n\n```java\n// Holder模式\n// ThreadSafe\npublic class Singleton3 {\n  private static class SingletonHolder {\n    private static final Singleton3 singleton = new Singleton3();\n    private SingletonHolder() {\n    }\n  }\n  private Singleton3() {\n  }\n\n  /**\n  * 勘误：多写了个synchronized。。\n  public synchronized static Singleton3 getInstance() {\n    return SingletonHolder.singleton;\n  }\n  */\n  public static Singleton3 getInstance() {\n    return SingletonHolder.singleton;\n  }\n}\n```\n\n相对于饿汉模式，Holder 模式仅增加了一个静态内部类的成本，与饱汉的变种 3 效果相当（略优），都是比较受欢迎的实现方式。同样建议考虑。\n\n#### 枚举模式\n\n用枚举实现单例模式，相当好用，但可读性是不存在的。\n\n##### 基础的枚举\n\n将枚举的静态成员变量作为单例的实例：\n\n```java\n// 枚举\n// ThreadSafe\npublic enum Singleton4 {\n  SINGLETON;\n}\n```\n\n代码量比饿汉模式更少。但用户只能直接访问实例 Singleton4.SINGLETON——事实上，这样的访问方式作为单例使用也是恰当的，只是牺牲了静态工厂方法的优点，如无法实现懒加载。\n\n##### 丑陋但好用的语法糖\n\nJava 的枚举是一个“丑陋但好用的语法糖”。\n\n##### 枚举型单例模式的本质\n\n通过反编译打开语法糖，就看到了枚举类型的本质，简化如下：\n\n```java\n// 枚举\n// ThreadSafe\npublic class Singleton4 extends Enum<Singleton4> {\n  ...\n  public static final Singleton4 SINGLETON = new Singleton4();\n  ...\n}\n```\n\n本质上和饿汉模式相同，区别仅在于公有的静态成员变量。\n\n##### 用枚举实现一些 trick\n\n> 这一部分与单例没什么关系，可以跳过。如果选择阅读也请认清这样的事实：虽然枚举相当灵活，但如何恰当的使用枚举有一定难度。一个足够简单的典型例子是 TimeUnit 类，建议有时间耐心阅读。\n\n上面已经看到，枚举型单例的本质仍然是一个普通的类。实际上，我们可以在枚举型型单例上增加任何普通类可以完成的功能。要点在于枚举实例的初始化，可以理解为实例化了一个匿名内部类。为了更明显，我们在 Singleton4_1 中定义一个普通的私有成员变量，一个普通的公有成员方法，和一个公有的抽象成员方法，如下：\n\n```java\n// 枚举\n// ThreadSafe\npublic enum Singleton4_1 {\n  SINGLETON(\"enum is the easiest singleton pattern, but not the most readable\") {\n    public void testAbsMethod() {\n      print();\n      System.out.println(\"enum is ugly, but so flexible to make lots of trick\");\n    }\n  };\n  private String comment = null;\n  Singleton4_1(String comment) {\n    this.comment = comment;\n  }\n  public void print() {\n    System.out.println(\"comment=\" + comment);\n  }\n  abstract public void testAbsMethod();\n  public static Singleton4_1 getInstance() {\n    return SINGLETON;\n  }\n}\n```\n\n这样，枚举类 Singleton4_1 中的每一个枚举实例不仅继承了父类 Singleton4_1 的成员方法 print()，还必须实现父类 Singleton4_1 的抽象成员方法 testAbsMethod()。\n\n#### 总结\n\n上面的分析都忽略了反射和序列化的问题。通过反射或序列化，我们仍然能够访问到私有构造器，创建新的实例破坏单例模式。此时，只有枚举模式能天然防范这一问题。反射和序列化笔者还不太了解，但基本原理并不难，可以在其他模式上手动实现。\n\n下面继续忽略反射和序列化的问题，做个总结回味一下：\n\n![图片](/img/posts/java/interview/5.png)\n\n### 你能说说进程与线程的区别吗\n\n#### 两者的定义\n\n进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。\n\n线程是进程的一个实体，是 CPU 调度和分派的基本单位，它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈)，但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。\n\n#### 进程与线程的区别\n\n1. 进程是资源分配最小单位，线程是程序执行的最小单位；\n2. 进程有自己独立的地址空间，每启动一个进程，系统都会为其分配地址空间，建立数据表来维护代码段、堆栈段和数据段，线程没有独立的地址空间，它使用相同的地址空间共享数据；\n3. CPU 切换一个线程比切换进程花费小；\n4. 创建一个线程比进程开销小；\n5. 线程占用的资源要⽐进程少很多。\n6. 线程之间通信更方便，同一个进程下，线程共享全局变量，静态变量等数据，进程之间的通信需要以通信的方式（IPC）进行；（但多线程程序处理好同步与互斥是个难点）\n7. 多进程程序更安全，生命力更强，一个进程死掉不会对另一个进程造成影响（源于有独立的地址空间），多线程程序更不易维护，一个线程死掉，整个进程就死掉了（因为共享地址空间）；\n8. 进程对资源保护要求高，开销大，效率相对较低，线程资源保护要求不高，但开销小，效率高，可频繁切换；\n\n### 创建线程有几种不同的方式？你喜欢哪一种？为什么？\n\n有三种方式可以用来创建线程：\n\n- 继承 Thread 类\n- 实现 Runnable 接口\n- 应用程序可以使用 Executor 框架来创建线程池\n\n实现 Runnable 接口这种方式更受欢迎，因为这不需要继承 Thread 类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而 Java 不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。\n\n### 概括的解释下线程的几种可用状态。\n\n**新建( new )：**新创建了一个线程对象；\n\n**可运行( runnable )：**线程对象创建后，其他线程(比如 main 线程）调用了该对象的 start ()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取 CPU 的使用权；\n\n**运行( running )：**可运行状态( runnable )的线程获得了 CPU 时间片（ timeslice ） ，执行程序代码；\n\n**阻塞( block )：**阻塞状态是指线程因为某种原因放弃了 CPU 使用权，也即让出了 CPU timeslice ，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 cpu timeslice 转到运行( running )状态。\n\n阻塞的情况分三种：\n\n1. 等待阻塞：运行( running )的线程执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中。\n2. 同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中。\n3. 其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I / O 请求时， JVM 会把该线程置为阻塞状态。当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I / O 处理完毕时，线程重新转入可运行( runnable )状态。\n\n**死亡( dead )：**线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生。\n\n### 同步方法和同步代码块的区别是什么？\n\n**区别：**\n\n- 同步方法默认用 this 或者当前类 class 对象作为锁；\n- 同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法；\n\n### 在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？\n\n监视器和锁在 Java 虚拟机中是一块使用的。监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块。每一个监视器都和一个对象引用相关联。线程在获取锁之前不允许执行同步代码。\n\njava 还提供了显式监视器( Lock )和隐式监视器( synchronized )两种锁方案。\n\n### 什么是死锁(deadlock)？\n\n两个线程或两个以上线程都在等待对方执行完毕才能继续往下执行的时候就发生了死锁。结果就是这些线程都陷入了无限的等待中。\n\n### 如何确保 N 个线程可以访问 N 个资源同时又不导致死锁？\n\n多线程产生死锁的四个必要条件：\n\n- **互斥条件：**一个资源每次只能被一个进程使用。\n- **保持和请求条件：**一个进程因请求资源而阻塞时，对已获得资源保持不放。\n- **不可剥夺性：**进程已获得资源，在未使用完成前，不能被剥夺。\n- **循环等待条件（闭环）：**若干进程之间形成一种头尾相接的循环等待资源关系。\n\n只要破坏其中任意一个条件，就可以避免死锁\n\n一种非常简单的避免死锁的方式就是：**指定获取锁的顺序，并强制线程按照指定的顺序获取锁。**因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。\n\n### Java 序列化与反序列化三连问：是什么？为什么要？如何做？\n\n#### Java 序列化与反序列化是什么？\n\nJava 序列化是指把 Java 对象转换为字节序列的过程，而 Java 反序列化是指把字节序列恢复为 Java 对象的过程：\n\n- **序列化**：对象序列化的最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性。序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。核心作用是对象状态的保存与重建。\n- **反序列化**：客户端从文件中或网络上获得序列化后的对象字节流，根据字节流中所保存的对象状态及描述信息，通过反序列化重建对象。\n\n#### 为什么需要序列化与反序列化？\n\n为什么要序列化，那就是说一下序列化的好处喽，序列化有什么什么优点，所以我们要序列化。\n\n**一：对象序列化可以实现分布式对象。**\n\n主要应用例如：RMI(即远程调用 Remote Method Invocation)要利用对象序列化运行远程主机上的服务，就像在本地机上运行对象时一样。\n\n**二：java 对象序列化不仅保留一个对象的数据，而且递归保存对象引用的每个对象的数据。**\n\n可以将整个对象层次写入字节流中，可以保存在文件中或在网络连接上传递。利用对象序列化可以进行对象的\"深复制\"，即复制对象本身及引用的对象本身。序列化一个对象可能得到整个对象序列。\n\n**三：序列化可以将内存中的类写入文件或数据库中。**\n\n比如：将某个类序列化后存为文件，下次读取时只需将文件中的数据反序列化就可以将原先的类还原到内存中。也可以将类序列化为流数据进行传输。\n\n总的来说就是将一个已经实例化的类转成文件存储，下次需要实例化的时候只要反序列化即可将类实例化到内存中并保留序列化时类中的所有变量和状态。\n\n**四：对象、文件、数据，有许多不同的格式，很难统一传输和保存。**\n\n序列化以后就都是字节流了，无论原来是什么东西，都能变成一样的东西，就可以进行通用的格式传输或保存，传输结束以后，要再次使用，就进行反序列化还原，这样对象还是对象，文件还是文件。\n\n#### 如何实现 Java 序列化与反序列化?\n\n首先我们要把准备要序列化类，实现 Serializabel 接口\n\n例如：我们要 Person 类里的 name 和 age 都序列化\n\n```java\nimport java.io.Serializable;\n\n\npublic class Person implements Serializable { //本类可以序列化\n\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String toString() {\n        return \"姓名：\" + this.name + \"，年龄\" + this.age;\n    }\n}\n```\n\n然后：我们将 name 和 age 序列化（也就是把这 2 个对象转为二进制，理解为“打碎”）\n\n```java\npackage org.lxh.SerDemo;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.ObjectOutputStream;\n\n\npublic class ObjectOutputStreamDemo { //序列化\n    public static void main(String[] args) throws Exception {\n        //序列化后生成指定文件路径\n        File file = new File(\"D:\" + File.separator + \"person.ser\");\n        ObjectOutputStream oos = null;\n        //装饰流（流）\n        oos = new ObjectOutputStream(new FileOutputStream(file));\n\n        //实例化类\n        Person per = new Person(\"张三\", 30);\n        oos.writeObject(per); //把类对象序列化\n        oos.close();\n    }\n}\n```\n\n> 《Java 对象的序列化（Serialization）和反序列化详解》\n> https://blog.csdn.net/yaomingyang/article/details/79321939\n\n> 《Java 序列化的高级认识》\n> https://www.ibm.com/developerworks/cn/java/j-lo-serial/\n\n\n\n###  什么情况用ArrayList or LinkedList呢?\n\n列表（list）是元素的有序集合，也称为序列。它提供了基于元素位置的操作，有助于快速访问、添加和删除列表中特定索引位置的元素。List 接口实现了 `Collection `和 `Iterable `作为父接口。它允许存储重复值和空值，支持通过索引访问元素。\n\n#### ArrayList 和 LinkedList 的不同之处\n\n#####  增加元素到列表尾端\n\n在 `ArrayList` 中增加元素到队列尾端的代码如下：\n\n```java\npublic boolean add(E e){\n   ensureCapacity(size+1);//确保内部数组有足够的空间\n   elementData[size++]=e;//将元素加入到数组的末尾，完成添加\n   return true;      \n} \n```\n\n`ArrayList`中 `add()` 方法的性能决定于`ensureCapacity()`方法。`ensureCapacity()`的实现如下：\n\n```java\npublic vod ensureCapacity(int minCapacity){\n  modCount++;\n  int oldCapacity=elementData.length;\n  if(minCapacity>oldCapacity){    //如果数组容量不足，进行扩容\n      Object[] oldData=elementData;\n      int newCapacity=(oldCapacity*3)/2+1;  //扩容到原始容量的1.5倍\n      if(newCapacitty<minCapacity)   //如果新容量小于最小需要的容量，则使用最小\n                                                    //需要的容量大小\n         newCapacity=minCapacity ;  //进行扩容的数组复制\n         elementData=Arrays.copyof(elementData,newCapacity);\n  }\n}\n```\n\n可以看到，只要`ArrayList`的当前容量足够大，`a  dd()`操作的效率非常高的。只有当`ArrayList`对容量的需求超出当前数组大小时，才需要进行扩容。扩容的过程中，会进行大量的数组复制操作。而数组复制时，最终将调用`System.arraycopy()`方法，因此`add()`操作的效率还是相当高的。\n\n`LinkedList` 的`add()`操作实现如下，它也将任意元素增加到队列的尾端：\n\n```java\npublic boolean add(E e){\n   addBefore(e,header);//将元素增加到header的前面\n   return true;\n}\n```\n\n其中`addBefore()`的方法实现如下：\n\n```java\nprivate Entry<E> addBefore(E e,Entry<E> entry){\n     Entry<E> newEntry = new Entry<E>(e,entry,entry.previous);\n     newEntry.provious.next=newEntry;\n     newEntry.next.previous=newEntry;\n     size++;\n     modCount++;\n     return newEntry;\n}\n```\n\n可见，**LinkeList由于使用了链表的结构，因此不需要维护容量的大小。从这点上说，它比ArrayList有一定的性能优势，然而，每次的元素增加都需要新建一个Entry对象，并进行更多的赋值操作。在频繁的系统调用中，对性能会产生一定的影响。**\n\n##### 增加元素到列表任意位置\n\n除了提供元素到List的尾端，List接口还提供了在任意位置插入元素的方法：`void add(int index,E element);`\n\n**由于实现的不同，ArrayList和LinkedList在这个方法上存在一定的性能差异，由于ArrayList是基于数组实现的，而数组是一块连续的内存空间，如果在数组的任意位置插入元素，必然导致在该位置后的所有元素需要重新排列，因此，其效率相对会比较低。**\n\n以下代码是ArrayList中的实现：\n\n```java\npublic void add(int index,E element){\n   if(index>size||index<0)\n      throw new IndexOutOfBoundsException(\n        \"Index:\"+index+\",size: \"+size);\n         ensureCapacity(size+1);\n         System.arraycopy(elementData,index,elementData,index+1,size-index);\n         elementData[index] = element;\n         size++;\n}\n```\n\n可以看到每次插入操作，都会进行一次数组复制。而这个操作在增加元素到List尾端的时候是不存在的，大量的数组重组操作会导致系统性能低下。并且插入元素在List中的位置越是靠前，数组重组的开销也越大。\n\n而LinkedList此时显示了优势：\n\n```java\npublic void add(int index,E element){\n   addBefore(element,(index==size?header:entry(index)));\n}\n```\n\n可见，**对LinkedList来说，在List的尾端插入数据与在任意位置插入数据是一样的，不会因为插入的位置靠前而导致插入的方法性能降低。**\n\n##### 删除任意位置元素\n\n对于元素的删除，List接口提供了在任意位置删除元素的方法：\n\n```java\npublic E remove(int index);\n```\n\n对ArrayList来说，remove()方法和add()方法是雷同的。在任意位置移除元素后，都要进行数组的重组。ArrayList的实现如下：\n\n```java\npublic E remove(int index){\n   RangeCheck(index);\n   modCount++;\n   E oldValue=(E) elementData[index];\n  int numMoved=size-index-1;\n  if(numMoved>0)\n     System.arraycopy(elementData,index+1,elementData,index,numMoved);\n     elementData[--size]=null;\n     return oldValue;\n}\n```\n\n可以看到，**在ArrayList的每一次有效的元素删除操作后，都要进行数组的重组。并且删除的位置越靠前，数组重组时的开销越大。**\n\n```java\npublic E remove(int index){\n  return remove(entry(index));         \n}\nprivate Entry<E> entry(int index){\n  if(index<0 || index>=size)\n      throw new IndexOutBoundsException(\"Index:\"+index+\",size:\"+size);\n      Entry<E> e= header;\n      if(index<(size>>1)){//要删除的元素位于前半段\n         for(int i=0;i<=index;i++)\n             e=e.next;\n     }else{\n         for(int i=size;i>index;i--)\n             e=e.previous;\n     }\n         return e;\n}\n```\n\n在LinkedList的实现中，首先要通过循环找到要删除的元素。如果要删除的位置处于List的前半段，则从前往后找；若其位置处于后半段，则从后往前找。因此无论要删除较为靠前或者靠后的元素都是非常高效的；但要移除List中间的元素却几乎要遍历完半个List，在List拥有大量元素的情况下，效率很低。\n\n##### 容量参数\n\n容量参数是ArrayList和Vector等基于数组的List的特有性能参数。它表示初始化的数组大小。当ArrayList所存储的元素数量超过其已有大小时。它便会进行扩容，数组的扩容会导致整个数组进行一次内存复制。因此合理的数组大小有助于减少数组扩容的次数，从而提高系统性能。\n\n```java\npublic  ArrayList(){\n  this(10);  \n}\npublic ArrayList (int initialCapacity){\n   super();\n   if(initialCapacity<0)\n       throw new IllegalArgumentException(\"Illegal Capacity:\"+initialCapacity)\n      this.elementData=new Object[initialCapacity];\n}\n```\n\nArrayList提供了一个可以制定初始数组大小的构造函数：\n\n```java\npublic ArrayList(int initialCapacity) \n```\n\n现以构造一个拥有100万元素的List为例，当使用默认初始化大小时，其消耗的相对时间为125ms左右，当直接制定数组大小为100万时，构造相同的ArrayList仅相对耗时16ms。\n\n##### 遍历列表\n\n遍历列表操作是最常用的列表操作之一，在JDK1.5之后，至少有3中常用的列表遍历方式：\n\n> - forEach操作\n> - 迭代器\n> - for循环。\n\n```java\nString tmp;\nlong start=System.currentTimeMills();    //ForEach \nfor(String s:list){\n    tmp=s;\n}\nSystem.out.println(\"foreach spend:\"+(System.currentTimeMills()-start));\nstart = System.currentTimeMills();\nfor(Iterator<String> it=list.iterator();it.hasNext();){    \n   tmp=it.next();\n}\nSystem.out.println(\"Iterator spend;\"+(System.currentTimeMills()-start));\nstart=System.currentTimeMills();\nint size=;list.size();\nfor(int i=0;i<size;i++){                     \n    tmp=list.get(i);\n}\nSystem.out.println(\"for spend;\"+(System.currentTimeMills()-start));\n```\n\n构造一个拥有100万数据的ArrayList和等价的LinkedList，使用以上代码进行测试，测试结果：\n\n![图片](https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/11.png)\n\n可以看到，**最简便的ForEach循环并没有很好的性能表现，综合性能不如普通的迭代器，而是用for循环通过随机访问遍历列表时，ArrayList表项很好，但是LinkedList的表现却无法让人接受，甚至没有办法等待程序的结束。这是因为对LinkedList进行随机访问时，总会进行一次列表的遍历操作。性能非常差，应避免使用。**\n\n\n\n## Java 进阶\n\n### 你能说说 Spring 框架中 Bean 的生命周期吗？\n\n1. 实例化一个 `Bean` , 也就是我们常说的 `new`；\n2. 按照 `Spring` 上下文对实例化的 `Bean` 进行配置－－也就是 `IOC` 注入；\n3. 如果这个 `Bean` 已经实现了 `BeanNameAware` 接口，会调用它实现的 `setBeanName(String)`方法，此处传递的就是 `Spring` 配置文件中 `Bean` 的 `id` 值\n4. 如果这个 `Bean` 已经实现了 `BeanFactoryAware` 接口，会调用它实现的 `setBeanFactory(setBeanFactory(BeanFactory)`传递的是 Spring 工厂自身（可以用这个方式来获取其它 Bean，只需在 Spring 配置文件中配置一个普通的 Bean 就可以）；\n5. 如果这个 `Bean` 已经实现了 `ApplicationContextAware` 接口，会调用 `setApplicationContext(ApplicationContext)`方法，传入 Spring 上下文（同样这个方式也可以实现步骤 4 的内容，但比 4 更好，因为 `ApplicationContext` 是 `BeanFactory` 的子接口，有更多的实现方法）；\n6. 如果这个 `Bean` 关联了 `BeanPostProcessor` 接口，将会调用 `postProcessBeforeInitialization(Object obj, String s)`方法，`BeanPostProcessor` 经常被用作是 `Bean` 内容的更改，并且由于这个是在 `Bean` 初始化结束时调用那个的方法，也可以被应用于内存或缓存技术；\n7. 如果 `Bean` 在 `Spring` 配置文件中配置了 `init-method` 属性会自动调用其配置的初始化方法。\n8. 如果这个 `Bean` 关联了 `BeanPostProcessor` 接口，将会调用 `postProcessAfterInitialization(Object obj, String s)`方法、；\n\n   > 注：以上工作完成以后就可以应用这个 `Bean` 了，那这个 `Bean` 是一个 `Singleton` 的，所以一般情况下我们调用同一个 `id` 的 `Bean` 会是在内容地址相同的实例，当然在 `Spring` 配置文件中也可以配置非 `Singleton`，这里我们不做赘述。\n\n9. 当 `Bean` 不再需要时，会经过清理阶段，如果 `Bean` 实现了 `DisposableBean` 这个接口，会调用那个其实现的 `destroy()`方法；\n10. 最后，如果这个 `Bean` 的 `Spring` 配置中配置了 `destroy-method` 属性，会自动调用其配置的销毁方法。\n\n### Spring，SpringMVC，SpringBoot，SpringCloud 有什么区别和联系？\n\n#### 简单介绍\n\n- `Spring` 是一个轻量级的控制反转(`IoC`)和面向切面(`AOP`)的容器框架。Spring 使你能够编写更干净、更可管理、并且更易于测试的代码。\n- `Spring MVC` 是 Spring 的一个模块，一个 web 框架。通过 `Dispatcher Servlet`, `ModelAndView` 和 `View Resolver`，开发 web 应用变得很容易。主要针对的是网站应用程序或者服务开发——`URL 路由`、`Session`、`模板引擎`、`静态 Web 资源`等等。\n- `Spring` 配置复杂，繁琐，所以推出了 `Spring boot`，约定优于配置，简化了 spring 的配置流程。\n- `Spring Cloud` 构建于 `Spring Boot` 之上，是一个关注全局的服务治理框架。\n\n#### Spring VS SpringMVC\n\n- `Spring` 是一个一站式的轻量级的 java 开发框架，核心是`控制反转（IOC）`和`面向切面（AOP）`，针对于开发的 WEB 层 (`springMvc`)、业务层(`Ioc`)、持久层(`jdbcTemplate`)等都提供了多种配置解决方案；\n- `SpringMVC` 是 `Spring` 基础之上的一个 `MVC` 框架，主要处理 `web` 开发的路径映射和视图渲染，属于 `Spring` 框架中 `WEB` 层开发的一部分；\n\n#### SpringMVC VS SpringBoot\n\n- `SpringMVC`属于一个企业 WEB 开发的 MVC 框架，涵盖面包括前端**视图开发**、**文件配置**、**后台接口逻辑开发**等，XML、config 等配置相对比较繁琐复杂；\n- `SpringBoot`框架相对于 SpringMVC 框架来说，更**专注于开发微服务后台接口**，不开发前端视图；\n\n#### SpringBoot VS SpringCloud\n\n- `SpringBoot` 使用了**默认大于配置**的理念，集成了快速开发的 `Spring` 多个插件，同时**自动过滤不需要配置的多余的插件**，**简化了项目的开发配置流程**，一定程度上**取消 xml 配置**，是一套**快速配置开发的脚手架**，能快速开发**单个微服务**；\n- `SpringCloud` 大部分的功能插件都是基于 `SpringBoot` 去实现的，`SpringCloud` 关注于**全局的微服务整合和管理**，将多个 `SpringBoot` 单体微服务进行整合以及管理；`SpringCloud` 依赖于 `SpringBoot` 开发，而 - `SpringBoot` 可以独立开发；\n\n#### 总结\n\n- Spring 是核心，提供了基础功能；\n- Spring MVC 是基于 Spring 的一个 MVC 框架 ；\n- Spring Boot 是为简化 Spring 配置的快速开发整合包；\n- Spring Cloud 是构建在 Spring Boot 之上的服务治理框架。\n\n### 如何保证消息的顺序性？\n\n#### 面试官心理分析\n\n其实这个也是用 MQ 的时候必问的话题，第一看看你了不了解顺序这个事儿？第二看看你有没有办法保证消息是有顺序的？这是生产系统中常见的问题。\n\n#### 面试题剖析\n\n我举个例子，我们以前做过一个 mysql `binlog` 同步的系统，压力还是非常大的，日同步数据要达到上亿，就是说数据从一个 mysql 库原封不动地同步到另一个 mysql 库里面去（mysql -> mysql）。常见的一点在于说比如大数据 team，就需要同步一个 mysql 库过来，对公司的业务系统的数据做各种复杂的操作。\n\n你在 mysql 里增删改一条数据，对应出来了增删改 3 条 `binlog` 日志，接着这三条 `binlog` 发送到 MQ 里面，再消费出来依次执行，起码得保证人家是按照顺序来的吧？不然本来是：增加、修改、删除；你楞是换了顺序给执行成删除、修改、增加，不全错了么。\n\n本来这个数据同步过来，应该最后这个数据被删除了；结果你搞错了这个顺序，最后这个数据保留下来了，数据同步就出错了。\n\n先看看顺序会错乱的俩场景：\n\n- **RabbitMQ**：一个 queue，多个 consumer。比如，生产者向 RabbitMQ 里发送了三条数据，顺序依次是 data1/data2/data3，压入的是 RabbitMQ 的一个内存队列。有三个消费者分别从 MQ 中消费这三条数据中的一条，结果消费者 2 先执行完操作，把 data2 存入数据库，然后是 data1/data3。这不明显乱了。\n\n![图片](/img/posts/java/interview/1.png)\n\n- **Kafka**：比如说我们建了一个 topic，有三个 partition。生产者在写的时候，其实可以指定一个 key，比如说我们指定了某个订单 id 作为 key，那么这个订单相关的数据，一定会被分发到同一个 partition 中去，而且这个 partition 中的数据一定是有顺序的。\n\n  消费者从 partition 中取出来数据的时候，也一定是有顺序的。到这里，顺序还是 ok 的，没有错乱。接着，我们在消费者里可能会搞**多个线程来并发处理消息**。因为如果消费者是单线程消费处理，而处理比较耗时的话，比如处理一条消息耗时几十 ms，那么 1 秒钟只能处理几十条消息，这吞吐量太低了。而多个线程并发跑的话，顺序可能就乱掉了。\n\n![图片](/img/posts/java/interview/2.png)\n\n#### 解决方案\n\n#### RabbitMQ\n\n拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点；或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。\n\n![图片](/img/posts/java/interview/3.png)\n\n#### Kafka\n\n- 一个 topic，一个 partition，一个 consumer，内部单线程消费，单线程吞吐量太低，一般不会用这个。\n- 写 N 个内存 queue，具有相同 key 的数据都到同一个内存 queue；然后对于 N 个线程，每个线程分别消费一个内存 queue 即可，这样就能保证顺序性。\n\n![图片](/img/posts/java/interview/4.png)\n\n\n## Redis\n\n### Redis 是如何实现分布式锁的？\n\n分布式锁常见的三种实现方式：\n\n1. 数据库乐观锁；\n2. 基于 Redis 的分布式锁；\n3. 基于 ZooKeeper 的分布式锁。\n\n本面试考点是，你对 Redis 使用熟悉吗？Redis 中是如何实现分布式锁的。\n\n#### 要点\n\nRedis 要实现分布式锁，以下条件应该得到满足\n\n#### 互斥性\n\n- 在任意时刻，只有一个客户端能持有锁。\n\n#### 不能死锁\n\n- 客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。\n\n#### 容错性\n\n- 只要大部分的 Redis 节点正常运行，客户端就可以加锁和解锁。\n\n#### 实现\n\n可以直接通过 `set key value px milliseconds nx` 命令实现加锁， 通过 Lua 脚本实现解锁。\n\n```lua\n//获取锁（unique_value可以是UUID等）\nSET resource_name unique_value NX PX  30000\n\n//释放锁（lua脚本中，一定要比较value，防止误解锁）\nif redis.call(\"get\",KEYS[1]) == ARGV[1] then\n    return redis.call(\"del\",KEYS[1])\nelse\n    return 0\nend\n```\n\n#### 代码解释\n\n- set 命令要用 `set key value px milliseconds nx`，替代 `setnx + expire` 需要分两次执行命令的方式，保证了原子性，\n- value 要具有唯一性，可以使用`UUID.randomUUID().toString()`方法生成，用来标识这把锁是属于哪个请求加的，在解锁的时候就可以有依据；\n- 释放锁时要验证 value 值，防止误解锁；\n- 通过 Lua 脚本来避免 Check And Set 模型的并发问题，因为在释放锁的时候因为涉及到多个 Redis 操作 （利用了 eval 命令执行 Lua 脚本的原子性）；\n\n#### 加锁代码分析\n\n首先，set()加入了 NX 参数，可以保证如果已有 key 存在，则函数不会调用成功，也就是只有一个客户端能持有锁，满足互斥性。其次，由于我们对锁设置了过期时间，即使锁的持有者后续发生崩溃而没有解锁，锁也会因为到了过期时间而自动解锁（即 key 被删除），不会发生死锁。最后，因为我们将 value 赋值为 requestId，用来标识这把锁是属于哪个请求加的，那么在客户端在解锁的时候就可以进行校验是否是同一个客户端。\n\n#### 解锁代码分析\n\n将 Lua 代码传到 jedis.eval()方法里，并使参数 KEYS[1]赋值为 lockKey，ARGV[1]赋值为 requestId。在执行的时候，首先会获取锁对应的 value 值，检查是否与 requestId 相等，如果相等则解锁（删除 key）。\n\n#### 存在的风险\n\n如果存储锁对应 key 的那个节点挂了的话，就可能存在丢失锁的风险，导致出现多个客户端持有锁的情况，这样就不能实现资源的独享了。\n\n1. 客户端 A 从 master 获取到锁\n2. 在 master 将锁同步到 slave 之前，master 宕掉了（Redis 的主从同步通常是异步的）。\n   主从切换，slave 节点被晋级为 master 节点\n3. 客户端 B 取得了同一个资源被客户端 A 已经获取到的另外一个锁。导致存在同一时刻存不止一个线程获取到锁的情况。\n\n#### redlock 算法出现\n\n这个场景是假设有一个 redis cluster，有 5 个 redis master 实例。然后执行如下步骤获取一把锁：\n\n1. 获取当前时间戳，单位是毫秒；\n2. 跟上面类似，轮流尝试在每个 master 节点上创建锁，过期时间较短，一般就几十毫秒；\n3. 尝试在大多数节点上建立一个锁，比如 5 个节点就要求是 3 个节点 n / 2 + 1；\n4. 客户端计算建立好锁的时间，如果建立锁的时间小于超时时间，就算建立成功了；\n5. 要是锁建立失败了，那么就依次之前建立过的锁删除；\n6. 只要别人建立了一把分布式锁，你就得不断轮询去尝试获取锁。\n\n![图片](/img/posts/java/interview/6.png)\n\nRedis 官方给出了以上两种基于 Redis 实现分布式锁的方法，详细说明可以查看：\n\n> https://redis.io/topics/distlock 。\n\n#### Redisson 实现\n\nRedisson 是一个在 Redis 的基础上实现的 Java 驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的 Java 常用对象，还实现了可重入锁（Reentrant Lock）、公平锁（Fair Lock、联锁（MultiLock）、 红锁（RedLock）、 读写锁（ReadWriteLock）等，还提供了许多分布式服务。\n\nRedisson 提供了使用 Redis 的最简单和最便捷的方法。Redisson 的宗旨是促进使用者对 Redis 的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。\n\n**Redisson 分布式重入锁用法**\n\nRedisson 支持单点模式、主从模式、哨兵模式、集群模式，这里以单点模式为例：\n\n```lua\n// 1.构造redisson实现分布式锁必要的Config\nConfig config = new Config();\nconfig.useSingleServer().setAddress(\"redis://127.0.0.1:5379\").setPassword(\"123456\").setDatabase(0);\n// 2.构造RedissonClient\nRedissonClient redissonClient = Redisson.create(config);\n// 3.获取锁对象实例（无法保证是按线程的顺序获取到）\nRLock rLock = redissonClient.getLock(lockKey);\ntry {\n    /**\n     * 4.尝试获取锁\n     * waitTimeout 尝试获取锁的最大等待时间，超过这个值，则认为获取锁失败\n     * leaseTime   锁的持有时间,超过这个时间锁会自动失效（值应设置为大于业务处理的时间，确保在锁有效期内业务能处理完）\n     */\n    boolean res = rLock.tryLock((long)waitTimeout, (long)leaseTime, TimeUnit.SECONDS);\n    if (res) {\n        //成功获得锁，在这里处理业务\n    }\n} catch (Exception e) {\n    throw new RuntimeException(\"aquire lock fail\");\n}finally{\n    //无论如何, 最后都要解锁\n    rLock.unlock();\n}\n```\n\n加锁流程图\n\n![图片](/img/posts/java/interview/7.png)\n\n解锁流程图\n\n![图片](/img/posts/java/interview/8.png)\n\n我们可以看到，RedissonLock 是可重入的，并且考虑了失败重试，可以设置锁的最大等待时间， 在实现上也做了一些优化，减少了无效的锁申请，提升了资源的利用率。\n\n需要特别注意的是，RedissonLock 同样没有解决 节点挂掉的时候，存在丢失锁的风险的问题。而现实情况是有一些场景无法容忍的，所以 Redisson 提供了实现了 redlock 算法的 RedissonRedLock，RedissonRedLock 真正解决了单点失败的问题，代价是需要额外的为 RedissonRedLock 搭建 Redis 环境。\n\n所以，如果业务场景可以容忍这种小概率的错误，则推荐使用 RedissonLock， 如果无法容忍，则推荐使用 RedissonRedLock。\n\n### Redis 面试常见问答\n\n#### 什么是缓存雪崩？怎么解决？\n\n![图片](/img/posts/java/interview/9.png)\n\n通常，我们会使用缓存用于缓冲对 DB 的冲击，如果缓存宕机，所有请求将直接打在 DB，造成 DB 宕机——从而导致整个系统宕机。\n\n**如何解决呢？**\n\n![图片](/img/posts/java/interview/10.png)\n\n**2 种策略（同时使用）：**\n\n- 对缓存做高可用，防止缓存宕机\n- 使用断路器，如果缓存宕机，为了防止系统全部宕机，限制部分流量进入 DB，保证部分可用，其余的请求返回断路器的默认值。\n\n#### 什么是缓存穿透？怎么解决？\n\n**解释 1：**缓存查询一个没有的 key，同时数据库也没有，如果黑客大量的使用这种方式，那么就会导致 DB 宕机。\n\n**解决方案：**我们可以使用一个默认值来防止，例如，当访问一个不存在的 key，然后再去访问数据库，还是没有，那么就在缓存里放一个占位符，下次来的时候，检查这个占位符，如果发生时占位符，就不去数据库查询了，防止 DB 宕机。\n\n**解释 2：**大量请求查询一个刚刚失效的 key，导致 DB 压力倍增，可能导致宕机，但实际上，查询的都是相同的数据。\n\n**解决方案：**可以在这些请求代码加上双重检查锁。但是那个阶段的请求会变慢。不过总比 DB 宕机好。\n\n#### 什么是缓存并发竞争？怎么解决？\n\n**解释：**多个客户端写一个 key，如果顺序错了，数据就不对了。但是顺序我们无法控制。\n\n**解决方案：**使用分布式锁，例如 zk，同时加入数据的时间戳。同一时刻，只有抢到锁的客户端才能写入，同时，写入时，比较当前数据的时间戳和缓存中数据的时间戳。\n\n####什么是缓存和数据库双写不一致？怎么解决？\n\n解释：连续写数据库和缓存，但是操作期间，出现并发了，数据不一致了。\n\n通常，更新缓存和数据库有以下几种顺序：\n\n- 先更新数据库，再更新缓存。\n- 先删缓存，再更新数据库。\n- 先更新数据库，再删除缓存。\n\n_三种方式的优劣来看一下：_\n\n#### 先更新数据库，再更新缓存\n\n这么做的问题是：当有 2 个请求同时更新数据，那么如果不使用分布式锁，将无法控制最后缓存的值到底是多少。也就是并发写的时候有问题。\n\n#### 先删缓存，Redis 面试常见问答再更新数据库\n\n这么做的问题：如果在删除缓存后，有客户端读数据，将可能读到旧数据，并有可能设置到缓存中，导致缓存中的数据一直是老数据。\n\n有 2 种解决方案：\n\n- 使用“双删”，即删更删，最后一步的删除作为异步操作，就是防止有客户端读取的时候设置了旧值。\n- 使用队列，当这个 key 不存在时，将其放入队列，串行执行，必须等到更新数据库完毕才能读取数据。\n\n总的来讲，比较麻烦。\n\n#### 先更新数据库，再删除缓存\n\n这个实际是常用的方案，但是有很多人不知道，这里介绍一下，这个叫 Cache Aside Pattern，老外发明的。如果先更新数据库，再删除缓存，那么就会出现更新数据库之前有瞬间数据不是很及时。\n\n同时，如果在更新之前，缓存刚好失效了，读客户端有可能读到旧值，然后在写客户端删除结束后再次设置了旧值，非常巧合的情况。\n\n有 2 个前提条件：\n\n- 缓存在写之前的时候失效，同时，在写客户度删除操作结束后，放置旧数据 —— 也就是读比写慢。\n- 设置有的写操作还会锁表\n\n所以，这个很难出现，但是如果出现了怎么办？使用双删！！！记录更新期间有没有客户端读数据库，如果有，在更新完数据库之后，执行延迟删除。\n还有一种可能，如果执行更新数据库，准备执行删除缓存时，服务挂了，执行删除失败怎么办？？？\n这就坑了！！！不过可以通过订阅数据库的 binlog 来删除。\n\n### 谈谈 Redis 的过期策略\n\n在日常开发中，我们使用 Redis 存储 key 时通常会设置一个过期时间，但是 Redis 是怎么删除过期的 key，而且 Redis 是单线程的，删除 key 会不会造成阻塞。要搞清楚这些，就要了解 Redis 的过期策略和内存淘汰机制。\n\n**Redis 采用的是定期删除 + 懒惰删除策略。**\n\n#### 定期删除策略\n\nRedis 会将每个设置了过期时间的 key 放入到一个独立的字典中，默认每 100ms 进行一次过期扫描：\n\n1. 随机抽取 20 个 key\n2. 删除这 20 个 key 中过期的 key\n3. 如果过期的 key 比例超过 1/4，就重复步骤 1，继续删除。\n\n**为什不扫描所有的 key？**\n\nRedis 是单线程，全部扫描岂不是卡死了。而且为了防止每次扫描过期的 key 比例都超过 1/4，导致不停循环卡死线程，Redis 为每次扫描添加了上限时间，默认是 25ms。\n\n如果客户端将超时时间设置的比较短，比如 10ms，那么就会出现大量的链接因为超时而关闭，业务端就会出现很多异常。而且这时你还无法从 Redis 的 slowlog 中看到慢查询记录，因为慢查询指的是逻辑处理过程慢，不包含等待时间。\n\n如果在同一时间出现大面积 key 过期，Redis 循环多次扫描过期词典，直到过期的 key 比例小于 1/4。这会导致卡顿，而且在高并发的情况下，可能会导致缓存雪崩。\n\n**为什么 Redis 为每次扫描添的上限时间是 25ms，还会出现上面的情况？**\n\n因为 Redis 是单线程，每个请求处理都需要排队，而且由于 Redis 每次扫描都是 25ms，也就是每个请求最多 25ms，100 个请求就是 2500ms。\n\n如果有大批量的 key 过期，要给过期时间设置一个随机范围，而不宜全部在同一时间过期，分散过期处理的压力。\n\n#### 从库的过期策略\n\n从库不会进行过期扫描，从库对过期的处理是被动的。主库在 key 到期时，会在 AOF 文件里增加一条 del 指令，同步到所有的从库，从库通过执行这条 del 指令来删除过期的 key。\n\n因为指令同步是异步进行的，所以主库过期的 key 的 del 指令没有及时同步到从库的话，会出现主从数据的不一致，主库没有的数据在从库里还存在。\n\n#### 懒惰删除策略\n\n**Redis 为什么要懒惰删除(lazy free)？**\n\n删除指令 del 会直接释放对象的内存，大部分情况下，这个指令非常快，没有明显延迟。不过如果删除的 key 是一个非常大的对象，比如一个包含了千万元素的 hash，又或者在使用 FLUSHDB 和 FLUSHALL 删除包含大量键的数据库时，那么删除操作就会导致单线程卡顿。\n\nredis 4.0 引入了 lazyfree 的机制，它可以将删除键或数据库的操作放在后台线程里执行， 从而尽可能地避免服务器阻塞。\n\n#### unlink\n\nunlink 指令，它能对删除操作进行懒处理，丢给后台线程来异步回收内存。\n\n```bash\n> unlink key\nOK\n```\n\n#### flush\n\nflushdb 和 flushall 指令，用来清空数据库，这也是极其缓慢的操作。Redis 4.0 同样给这两个指令也带来了异步化，在指令后面增加 async 参数就可以将整棵大树连根拔起，扔给后台线程慢慢焚烧。\n\n```bash\n> flushall async\nOK\n```\n\n#### 异步队列\n\n主线程将对象的引用从「大树」中摘除后，会将这个 key 的内存回收操作包装成一个任务，塞进异步任务队列，后台线程会从这个异步队列中取任务。任务队列被主线程和异步线程同时操作，所以必须是一个线程安全的队列。\n\n不是所有的 unlink 操作都会延后处理，如果对应 key 所占用的内存很小，延后处理就没有必要了，这时候 Redis 会将对应的 key 内存立即回收，跟 del 指令一样。\n\n#### 更多异步删除点\n\nRedis 回收内存除了 del 指令和 flush 之外，还会存在于在 key 的过期、LRU 淘汰、rename 指令以及从库全量同步时接受完 rdb 文件后会立即进行的 flush 操作。\n\nRedis4.0 为这些删除点也带来了异步删除机制，打开这些点需要额外的配置选项。\n\n- slave-lazy-flush 从库接受完 rdb 文件后的 flush 操作\n- lazyfree-lazy-eviction 内存达到 maxmemory 时进行淘汰\n- lazyfree-lazy-expire key 过期删除\n- lazyfree-lazy-server-del rename 指令删除 destKey\n\n#### 内存淘汰机制\n\nRedis 的内存占用会越来越高。Redis 为了限制最大使用内存，提供了 redis.conf 中的\n配置参数 maxmemory。当内存超出 maxmemory，**Redis 提供了几种内存淘汰机制让用户选择，配置 maxmemory-policy：**\n\n- **noeviction：**当内存超出 maxmemory，写入请求会报错，但是删除和读请求可以继续。（使用这个策略，疯了吧）\n- **allkeys-lru：**当内存超出 maxmemory，在所有的 key 中，移除最少使用的 key。只把 Redis 既当缓存是使用这种策略。（推荐）。\n- **allkeys-random：**当内存超出 maxmemory，在所有的 key 中，随机移除某个 key。（应该没人用吧）\n- **volatile-lru：**当内存超出 maxmemory，在设置了过期时间 key 的字典中，移除最少使用的 key。把 Redis 既当缓存，又做持久化的时候使用这种策略。\n- **volatile-random：**当内存超出 maxmemory，在设置了过期时间 key 的字典中，随机移除某个 key。\n- **volatile-ttl：**当内存超出 maxmemory，在设置了过期时间 key 的字典中，优先移除 ttl 小的。\n\n#### LRU 算法\n\n实现 LRU 算法除了需要 key/value 字典外，还需要附加一个链表，链表中的元素按照一定的顺序进行排列。当空间满的时候，会踢掉链表尾部的元素。当字典的某个元素被访问时，它在链表中的位置会被移动到表头。所以链表的元素排列顺序就是元素最近被访问的时间顺序。\n\n使用 Python 的 OrderedDict(双向链表 + 字典) 来实现一个简单的 LRU 算法：\n\n```python\nfrom collections import OrderedDict\n\nclass LRUDict(OrderedDict):\n\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.items = OrderedDict()\n\n    def __setitem__(self, key, value):\n        old_value = self.items.get(key)\n        if old_value is not None:\n            self.items.pop(key)\n            self.items[key] = value\n        elif len(self.items) < self.capacity:\n            self.items[key] = value\n        else:\n            self.items.popitem(last=True)\n            self.items[key] = value\n\n    def __getitem__(self, key):\n        value = self.items.get(key)\n        if value is not None:\n            self.items.pop(key)\n            self.items[key] = value\n        return value\n\n    def __repr__(self):\n        return repr(self.items)\n\n\nd = LRUDict(10)\n\nfor i in range(15):\n    d[i] = i\nprint d\n```\n\n#### 近似 LRU 算法\n\nRedis 使用的并不是完全 LRU 算法。不使用 LRU 算法，是为了节省内存，Redis 采用的是随机 LRU 算法，Redis 为每一个 key 增加了一个 24 bit 的字段，用来记录这个 key 最后一次被访问的时间戳。\n\n注意 Redis 的 LRU 淘汰策略是懒惰处理，也就是不会主动执行淘汰策略，当 Redis 执行写操作时，发现内存超出 maxmemory，就会执行 LRU 淘汰算法。这个算法就是随机采样出 5(默认值)个 key，然后移除最旧的 key，如果移除后内存还是超出 maxmemory，那就继续随机采样淘汰，直到内存低于 maxmemory 为止。\n\n如何采样就是看 maxmemory-policy 的配置，如果是 allkeys 就是从所有的 key 字典中随机，如果是 volatile 就从带过期时间的 key 字典中随机。每次采样多少个 key 看的是 maxmemory_samples 的配置，默认为 5。\n\n#### LFU\n\nRedis 4.0 里引入了一个新的淘汰策略 —— LFU（Least Frequently Used） 模式，作者认为它比 LRU 更加优秀。\n\nLFU 表示按最近的访问频率进行淘汰，它比 LRU 更加精准地表示了一个 key 被访问的热度。\n\n如果一个 key 长时间不被访问，只是刚刚偶然被用户访问了一下，那么在使用 LRU 算法下它是不容易被淘汰的，因为 LRU 算法认为当前这个 key 是很热的。而 LFU 是需要追踪最近一段时间的访问频率，如果某个 key 只是偶然被访问一次是不足以变得很热的，它需要在近期一段时间内被访问很多次才有机会被认为很热。\n\n**Redis 对象的热度**\n\nRedis 的所有对象结构头中都有一个 24bit 的字段，这个字段用来记录对象的热度。\n\n```lua\n// redis 的对象头\ntypedef struct redisObject {\n    unsigned type:4; // 对象类型如 zset/set/hash 等等\n    unsigned encoding:4; // 对象编码如 ziplist/intset/skiplist 等等\n    unsigned lru:24; // 对象的「热度」\n    int refcount; // 引用计数\n    void *ptr; // 对象的 body\n} robj;\n```\n\n**LRU 模式**\n\n在 LRU 模式下，lru 字段存储的是 Redis 时钟 server.lruclock，Redis 时钟是一个 24bit 的整数，默认是 Unix 时间戳对 2^24 取模的结果，大约 97 天清零一次。当某个 key 被访问一次，它的对象头的 lru 字段值就会被更新为 server.lruclock。\n\n**LFU 模式**\n\n在 LFU 模式下，lru 字段 24 个 bit 用来存储两个值，分别是 ldt(last decrement time) 和 logc(logistic counter)。\n\nlogc 是 8 个 bit，用来存储访问频次，因为 8 个 bit 能表示的最大整数值为 255，存储频次肯定远远不够，所以这 8 个 bit 存储的是频次的对数值，并且这个值还会随时间衰减。如果它的值比较小，那么就很容易被回收。为了确保新创建的对象不被回收，新对象的这 8 个 bit 会初始化为一个大于零的值，默认是 LFU_INIT_VAL=5。\n\nldt 是 16 个位，用来存储上一次 logc 的更新时间，因为只有 16 位，所以精度不可能很高。它取的是分钟时间戳对 2^16 进行取模，大约每隔 45 天就会折返。\n\n同 LRU 模式一样，我们也可以使用这个逻辑计算出对象的空闲时间，只不过精度是分钟级别的。图中的 server.unixtime 是当前 redis 记录的系统时间戳，和 server.lruclock 一样，它也是每毫秒更新一次。\n\n\n\n\n\n","source":"_posts/java/interview/index.md","raw":"---\n# 【必需】文章标题\ntitle: Java 精选面试题 (持续更新)\n# 【必需】文章创建日期\ndate: 2020-01-01 12:00:00\n# 【可选】文章更新日期\nupdated: 2020-01-01 12:00:00\n# 【可选】文章标签\ntags: Java 面试\n# 【可选】文章分类\ncategories: Java\n# 【可选】文章关键字\nkeywords: Java 面试\n# 【可选】文章描述\ndescription: Java 精选\ncopyright: false\n---\n\n## Java 基础\n\n### 为什么 HashMap 是线程不安全的？\n\n在 jdk1.8 中，在多线程环境下，会发生数据覆盖的情况。\n\n#### jdk1.8 中 HashMap\n\n在 jdk1.8 中对 HashMap 进行了优化，在发生 hash 碰撞，不再采用头插法方式，而是直接插入链表尾部，因此不会出现环形链表的情况，但是在多线程的情况下仍然不安全，这里我们看 jdk1.8 中 HashMap 的 put 操作源码：\n\n```java\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n        if ((p = tab[i = (n - 1) & hash]) == null) // 如果没有hash碰撞则直接插入元素\n            tab[i] = newNode(hash, key, value, null);\n        else {\n            Node<K,V> e; K k;\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n            else if (p instanceof TreeNode)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n            else {\n                for (int binCount = 0; ; ++binCount) {\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        ++modCount;\n        if (++size > threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n```\n\n这是 jdk1.8 中 HashMap 中 put 操作的主函数， 注意第 6 行代码，如果没有 hash 碰撞则会直接插入元素。如果线程 A 和线程 B 同时进行 put 操作，刚好这两条不同的数据 hash 值一样，并且该位置数据为 null，所以这线程 A、B 都会进入第 6 行代码中。\n\n假设一种情况，线程 A 进入后还未进行数据插入时挂起，而线程 B 正常执行，从而正常插入数据，然后线程 A 获取 CPU 时间片，此时线程 A 不用再进行 hash 判断了，问题出现：线程 A 会把线程 B 插入的数据给覆盖，发生线程不安全。\n\n### 单例模式一共有几种写法？\n\n大体可分为 4 类，下面分别介绍他们的基本形式、变种及特点。\n\n#### 饱汉模式\n\n饱汉是变种最多的单例模式。我们从饱汉出发，通过其变种逐渐了解实现单例模式时需要关注的问题。\n\n##### 基础的饱汉\n\n饱汉，即已经吃饱，不着急再吃，饿的时候再吃。所以他就先不初始化单例，等第一次使用的时候再初始化，即“懒加载”。\n\n```java\n// 饱汉\n// UnThreadSafe\npublic class Singleton1 {\n  private static Singleton1 singleton = null;\n  private Singleton1() {\n  }\n  public static Singleton1 getInstance() {\n    if (singleton == null) {\n      singleton = new Singleton1();\n    }\n    return singleton;\n  }\n}\n```\n\n饱汉模式的核心就是懒加载。好处是更启动速度快、节省资源，一直到实例被第一次访问，才需要初始化单例；小坏处是写起来麻烦，大坏处是线程不安全，if 语句存在竞态条件。\n\n写起来麻烦不是大问题，可读性好啊。因此，单线程环境下，基础饱汉是笔者最喜欢的写法。但多线程环境下，基础饱汉就彻底不可用了。下面的几种变种都在试图解决基础饱汉线程不安全的问题。\n\n##### 饱汉 - 变种 1\n\n最粗暴的犯法是用 synchronized 关键字修饰 getInstance()方法，这样能达到绝对的线程安全。\n\n```java\n// 饱汉\n// ThreadSafe\npublic class Singleton1_1 {\n  private static Singleton1_1 singleton = null;\n  private Singleton1_1() {\n  }\n  public synchronized static Singleton1_1 getInstance() {\n    if (singleton == null) {\n      singleton = new Singleton1_1();\n    }\n    return singleton;\n  }\n}\n```\n\n变种 1 的好处是写起来简单，且绝对线程安全；坏处是并发性能极差，事实上完全退化到了串行。单例只需要初始化一次，但就算初始化以后，synchronized 的锁也无法避开，从而 getInstance()完全变成了串行操作。性能不敏感的场景建议使用。\n\n##### 饱汉 - 变种 2\n\n变种 2 是“臭名昭著”的 DCL 1.0。\n\n针对变种 1 中单例初始化后锁仍然无法避开的问题，变种 2 在变种 1 的外层又套了一层 check，加上 synchronized 内层的 check，即所谓“双重检查锁”（Double Check Lock，简称 DCL）。\n\n```java\n// 饱汉\n// UnThreadSafe\npublic class Singleton1_2 {\n  private static Singleton1_2 singleton = null;\n\n  public int f1 = 1;   // 触发部分初始化问题\n  public int f2 = 2;\n  private Singleton1_2() {\n  }\n  public static Singleton1_2 getInstance() {\n    // may get half object\n    if (singleton == null) {\n      synchronized (Singleton1_2.class) {\n        if (singleton == null) {\n          singleton = new Singleton1_2();\n        }\n      }\n    }\n    return singleton;\n  }\n}\n```\n\n变种 2 的核心是 DCL，看起来变种 2 似乎已经达到了理想的效果：懒加载+线程安全。可惜的是，正如注释中所说，DCL 仍然是线程不安全的，由于指令重排序，你可能会得到“半个对象”，即”部分初始化“问题。详细在看完变种 3 后，可参考下面这篇文章，这里不再赘述。\n\n> https://monkeysayhi.github.io/2016/11/29/volatile关键字的作用、原理/\n\n##### 饱汉 - 变种 3\n\n变种 3 专门针对变种 2，可谓 DCL 2.0。\n\n针对变种 3 的“半个对象”问题，变种 3 在 instance 上增加了 volatile 关键字，原理见上述参考。\n\n```java\n// 饱汉\n// ThreadSafe\npublic class Singleton1_3 {\n  private static volatile Singleton1_3 singleton = null;\n\n  public int f1 = 1;   // 触发部分初始化问题\n  public int f2 = 2;\n  private Singleton1_3() {\n  }\n  public static Singleton1_3 getInstance() {\n    if (singleton == null) {\n      synchronized (Singleton1_3.class) {\n        // must be a complete instance\n        if (singleton == null) {\n          singleton = new Singleton1_3();\n        }\n      }\n    }\n    return singleton;\n  }\n}\n```\n\n多线程环境下，变种 3 更适用于性能敏感的场景。但后面我们将了解到，就算是线程安全的，还有一些办法能破坏单例。\n\n当然，还有很多方式，能通过与 volatile 类似的方式防止部分初始化。读者可自行阅读内存屏障相关内容，但面试时不建议主动装逼。\n\n#### 饿汉模式\n\n与饱汉相对，饿汉很饿，只想着尽早吃到。所以他就在最早的时机，即类加载时初始化单例，以后访问时直接返回即可。\n\n```java\n// 饿汉\n// ThreadSafe\npublic class Singleton2 {\n  private static final Singleton2 singleton = new Singleton2();\n  private Singleton2() {\n  }\n  public static Singleton2 getInstance() {\n    return singleton;\n  }\n}\n```\n\n饿汉的好处是天生的线程安全（得益于类加载机制），写起来超级简单，使用时没有延迟；坏处是有可能造成资源浪费（如果类加载后就一直不使用单例的话）。\n\n> 值得注意的时，单线程环境下，饿汉与饱汉在性能上没什么差别；但多线程环境下，由于饱汉需要加锁，饿汉的性能反而更优。\n\n#### Holder 模式\n\n我们既希望利用饿汉模式中静态变量的方便和线程安全；又希望通过懒加载规避资源浪费。Holder 模式满足了这两点要求：核心仍然是静态变量，足够方便和线程安全；通过静态的 Holder 类持有真正实例，间接实现了懒加载。\n\n```java\n// Holder模式\n// ThreadSafe\npublic class Singleton3 {\n  private static class SingletonHolder {\n    private static final Singleton3 singleton = new Singleton3();\n    private SingletonHolder() {\n    }\n  }\n  private Singleton3() {\n  }\n\n  /**\n  * 勘误：多写了个synchronized。。\n  public synchronized static Singleton3 getInstance() {\n    return SingletonHolder.singleton;\n  }\n  */\n  public static Singleton3 getInstance() {\n    return SingletonHolder.singleton;\n  }\n}\n```\n\n相对于饿汉模式，Holder 模式仅增加了一个静态内部类的成本，与饱汉的变种 3 效果相当（略优），都是比较受欢迎的实现方式。同样建议考虑。\n\n#### 枚举模式\n\n用枚举实现单例模式，相当好用，但可读性是不存在的。\n\n##### 基础的枚举\n\n将枚举的静态成员变量作为单例的实例：\n\n```java\n// 枚举\n// ThreadSafe\npublic enum Singleton4 {\n  SINGLETON;\n}\n```\n\n代码量比饿汉模式更少。但用户只能直接访问实例 Singleton4.SINGLETON——事实上，这样的访问方式作为单例使用也是恰当的，只是牺牲了静态工厂方法的优点，如无法实现懒加载。\n\n##### 丑陋但好用的语法糖\n\nJava 的枚举是一个“丑陋但好用的语法糖”。\n\n##### 枚举型单例模式的本质\n\n通过反编译打开语法糖，就看到了枚举类型的本质，简化如下：\n\n```java\n// 枚举\n// ThreadSafe\npublic class Singleton4 extends Enum<Singleton4> {\n  ...\n  public static final Singleton4 SINGLETON = new Singleton4();\n  ...\n}\n```\n\n本质上和饿汉模式相同，区别仅在于公有的静态成员变量。\n\n##### 用枚举实现一些 trick\n\n> 这一部分与单例没什么关系，可以跳过。如果选择阅读也请认清这样的事实：虽然枚举相当灵活，但如何恰当的使用枚举有一定难度。一个足够简单的典型例子是 TimeUnit 类，建议有时间耐心阅读。\n\n上面已经看到，枚举型单例的本质仍然是一个普通的类。实际上，我们可以在枚举型型单例上增加任何普通类可以完成的功能。要点在于枚举实例的初始化，可以理解为实例化了一个匿名内部类。为了更明显，我们在 Singleton4_1 中定义一个普通的私有成员变量，一个普通的公有成员方法，和一个公有的抽象成员方法，如下：\n\n```java\n// 枚举\n// ThreadSafe\npublic enum Singleton4_1 {\n  SINGLETON(\"enum is the easiest singleton pattern, but not the most readable\") {\n    public void testAbsMethod() {\n      print();\n      System.out.println(\"enum is ugly, but so flexible to make lots of trick\");\n    }\n  };\n  private String comment = null;\n  Singleton4_1(String comment) {\n    this.comment = comment;\n  }\n  public void print() {\n    System.out.println(\"comment=\" + comment);\n  }\n  abstract public void testAbsMethod();\n  public static Singleton4_1 getInstance() {\n    return SINGLETON;\n  }\n}\n```\n\n这样，枚举类 Singleton4_1 中的每一个枚举实例不仅继承了父类 Singleton4_1 的成员方法 print()，还必须实现父类 Singleton4_1 的抽象成员方法 testAbsMethod()。\n\n#### 总结\n\n上面的分析都忽略了反射和序列化的问题。通过反射或序列化，我们仍然能够访问到私有构造器，创建新的实例破坏单例模式。此时，只有枚举模式能天然防范这一问题。反射和序列化笔者还不太了解，但基本原理并不难，可以在其他模式上手动实现。\n\n下面继续忽略反射和序列化的问题，做个总结回味一下：\n\n![图片](/img/posts/java/interview/5.png)\n\n### 你能说说进程与线程的区别吗\n\n#### 两者的定义\n\n进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。\n\n线程是进程的一个实体，是 CPU 调度和分派的基本单位，它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈)，但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。\n\n#### 进程与线程的区别\n\n1. 进程是资源分配最小单位，线程是程序执行的最小单位；\n2. 进程有自己独立的地址空间，每启动一个进程，系统都会为其分配地址空间，建立数据表来维护代码段、堆栈段和数据段，线程没有独立的地址空间，它使用相同的地址空间共享数据；\n3. CPU 切换一个线程比切换进程花费小；\n4. 创建一个线程比进程开销小；\n5. 线程占用的资源要⽐进程少很多。\n6. 线程之间通信更方便，同一个进程下，线程共享全局变量，静态变量等数据，进程之间的通信需要以通信的方式（IPC）进行；（但多线程程序处理好同步与互斥是个难点）\n7. 多进程程序更安全，生命力更强，一个进程死掉不会对另一个进程造成影响（源于有独立的地址空间），多线程程序更不易维护，一个线程死掉，整个进程就死掉了（因为共享地址空间）；\n8. 进程对资源保护要求高，开销大，效率相对较低，线程资源保护要求不高，但开销小，效率高，可频繁切换；\n\n### 创建线程有几种不同的方式？你喜欢哪一种？为什么？\n\n有三种方式可以用来创建线程：\n\n- 继承 Thread 类\n- 实现 Runnable 接口\n- 应用程序可以使用 Executor 框架来创建线程池\n\n实现 Runnable 接口这种方式更受欢迎，因为这不需要继承 Thread 类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而 Java 不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。\n\n### 概括的解释下线程的几种可用状态。\n\n**新建( new )：**新创建了一个线程对象；\n\n**可运行( runnable )：**线程对象创建后，其他线程(比如 main 线程）调用了该对象的 start ()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取 CPU 的使用权；\n\n**运行( running )：**可运行状态( runnable )的线程获得了 CPU 时间片（ timeslice ） ，执行程序代码；\n\n**阻塞( block )：**阻塞状态是指线程因为某种原因放弃了 CPU 使用权，也即让出了 CPU timeslice ，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 cpu timeslice 转到运行( running )状态。\n\n阻塞的情况分三种：\n\n1. 等待阻塞：运行( running )的线程执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中。\n2. 同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中。\n3. 其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I / O 请求时， JVM 会把该线程置为阻塞状态。当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I / O 处理完毕时，线程重新转入可运行( runnable )状态。\n\n**死亡( dead )：**线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生。\n\n### 同步方法和同步代码块的区别是什么？\n\n**区别：**\n\n- 同步方法默认用 this 或者当前类 class 对象作为锁；\n- 同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法；\n\n### 在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？\n\n监视器和锁在 Java 虚拟机中是一块使用的。监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块。每一个监视器都和一个对象引用相关联。线程在获取锁之前不允许执行同步代码。\n\njava 还提供了显式监视器( Lock )和隐式监视器( synchronized )两种锁方案。\n\n### 什么是死锁(deadlock)？\n\n两个线程或两个以上线程都在等待对方执行完毕才能继续往下执行的时候就发生了死锁。结果就是这些线程都陷入了无限的等待中。\n\n### 如何确保 N 个线程可以访问 N 个资源同时又不导致死锁？\n\n多线程产生死锁的四个必要条件：\n\n- **互斥条件：**一个资源每次只能被一个进程使用。\n- **保持和请求条件：**一个进程因请求资源而阻塞时，对已获得资源保持不放。\n- **不可剥夺性：**进程已获得资源，在未使用完成前，不能被剥夺。\n- **循环等待条件（闭环）：**若干进程之间形成一种头尾相接的循环等待资源关系。\n\n只要破坏其中任意一个条件，就可以避免死锁\n\n一种非常简单的避免死锁的方式就是：**指定获取锁的顺序，并强制线程按照指定的顺序获取锁。**因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。\n\n### Java 序列化与反序列化三连问：是什么？为什么要？如何做？\n\n#### Java 序列化与反序列化是什么？\n\nJava 序列化是指把 Java 对象转换为字节序列的过程，而 Java 反序列化是指把字节序列恢复为 Java 对象的过程：\n\n- **序列化**：对象序列化的最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性。序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。核心作用是对象状态的保存与重建。\n- **反序列化**：客户端从文件中或网络上获得序列化后的对象字节流，根据字节流中所保存的对象状态及描述信息，通过反序列化重建对象。\n\n#### 为什么需要序列化与反序列化？\n\n为什么要序列化，那就是说一下序列化的好处喽，序列化有什么什么优点，所以我们要序列化。\n\n**一：对象序列化可以实现分布式对象。**\n\n主要应用例如：RMI(即远程调用 Remote Method Invocation)要利用对象序列化运行远程主机上的服务，就像在本地机上运行对象时一样。\n\n**二：java 对象序列化不仅保留一个对象的数据，而且递归保存对象引用的每个对象的数据。**\n\n可以将整个对象层次写入字节流中，可以保存在文件中或在网络连接上传递。利用对象序列化可以进行对象的\"深复制\"，即复制对象本身及引用的对象本身。序列化一个对象可能得到整个对象序列。\n\n**三：序列化可以将内存中的类写入文件或数据库中。**\n\n比如：将某个类序列化后存为文件，下次读取时只需将文件中的数据反序列化就可以将原先的类还原到内存中。也可以将类序列化为流数据进行传输。\n\n总的来说就是将一个已经实例化的类转成文件存储，下次需要实例化的时候只要反序列化即可将类实例化到内存中并保留序列化时类中的所有变量和状态。\n\n**四：对象、文件、数据，有许多不同的格式，很难统一传输和保存。**\n\n序列化以后就都是字节流了，无论原来是什么东西，都能变成一样的东西，就可以进行通用的格式传输或保存，传输结束以后，要再次使用，就进行反序列化还原，这样对象还是对象，文件还是文件。\n\n#### 如何实现 Java 序列化与反序列化?\n\n首先我们要把准备要序列化类，实现 Serializabel 接口\n\n例如：我们要 Person 类里的 name 和 age 都序列化\n\n```java\nimport java.io.Serializable;\n\n\npublic class Person implements Serializable { //本类可以序列化\n\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String toString() {\n        return \"姓名：\" + this.name + \"，年龄\" + this.age;\n    }\n}\n```\n\n然后：我们将 name 和 age 序列化（也就是把这 2 个对象转为二进制，理解为“打碎”）\n\n```java\npackage org.lxh.SerDemo;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.ObjectOutputStream;\n\n\npublic class ObjectOutputStreamDemo { //序列化\n    public static void main(String[] args) throws Exception {\n        //序列化后生成指定文件路径\n        File file = new File(\"D:\" + File.separator + \"person.ser\");\n        ObjectOutputStream oos = null;\n        //装饰流（流）\n        oos = new ObjectOutputStream(new FileOutputStream(file));\n\n        //实例化类\n        Person per = new Person(\"张三\", 30);\n        oos.writeObject(per); //把类对象序列化\n        oos.close();\n    }\n}\n```\n\n> 《Java 对象的序列化（Serialization）和反序列化详解》\n> https://blog.csdn.net/yaomingyang/article/details/79321939\n\n> 《Java 序列化的高级认识》\n> https://www.ibm.com/developerworks/cn/java/j-lo-serial/\n\n\n\n###  什么情况用ArrayList or LinkedList呢?\n\n列表（list）是元素的有序集合，也称为序列。它提供了基于元素位置的操作，有助于快速访问、添加和删除列表中特定索引位置的元素。List 接口实现了 `Collection `和 `Iterable `作为父接口。它允许存储重复值和空值，支持通过索引访问元素。\n\n#### ArrayList 和 LinkedList 的不同之处\n\n#####  增加元素到列表尾端\n\n在 `ArrayList` 中增加元素到队列尾端的代码如下：\n\n```java\npublic boolean add(E e){\n   ensureCapacity(size+1);//确保内部数组有足够的空间\n   elementData[size++]=e;//将元素加入到数组的末尾，完成添加\n   return true;      \n} \n```\n\n`ArrayList`中 `add()` 方法的性能决定于`ensureCapacity()`方法。`ensureCapacity()`的实现如下：\n\n```java\npublic vod ensureCapacity(int minCapacity){\n  modCount++;\n  int oldCapacity=elementData.length;\n  if(minCapacity>oldCapacity){    //如果数组容量不足，进行扩容\n      Object[] oldData=elementData;\n      int newCapacity=(oldCapacity*3)/2+1;  //扩容到原始容量的1.5倍\n      if(newCapacitty<minCapacity)   //如果新容量小于最小需要的容量，则使用最小\n                                                    //需要的容量大小\n         newCapacity=minCapacity ;  //进行扩容的数组复制\n         elementData=Arrays.copyof(elementData,newCapacity);\n  }\n}\n```\n\n可以看到，只要`ArrayList`的当前容量足够大，`a  dd()`操作的效率非常高的。只有当`ArrayList`对容量的需求超出当前数组大小时，才需要进行扩容。扩容的过程中，会进行大量的数组复制操作。而数组复制时，最终将调用`System.arraycopy()`方法，因此`add()`操作的效率还是相当高的。\n\n`LinkedList` 的`add()`操作实现如下，它也将任意元素增加到队列的尾端：\n\n```java\npublic boolean add(E e){\n   addBefore(e,header);//将元素增加到header的前面\n   return true;\n}\n```\n\n其中`addBefore()`的方法实现如下：\n\n```java\nprivate Entry<E> addBefore(E e,Entry<E> entry){\n     Entry<E> newEntry = new Entry<E>(e,entry,entry.previous);\n     newEntry.provious.next=newEntry;\n     newEntry.next.previous=newEntry;\n     size++;\n     modCount++;\n     return newEntry;\n}\n```\n\n可见，**LinkeList由于使用了链表的结构，因此不需要维护容量的大小。从这点上说，它比ArrayList有一定的性能优势，然而，每次的元素增加都需要新建一个Entry对象，并进行更多的赋值操作。在频繁的系统调用中，对性能会产生一定的影响。**\n\n##### 增加元素到列表任意位置\n\n除了提供元素到List的尾端，List接口还提供了在任意位置插入元素的方法：`void add(int index,E element);`\n\n**由于实现的不同，ArrayList和LinkedList在这个方法上存在一定的性能差异，由于ArrayList是基于数组实现的，而数组是一块连续的内存空间，如果在数组的任意位置插入元素，必然导致在该位置后的所有元素需要重新排列，因此，其效率相对会比较低。**\n\n以下代码是ArrayList中的实现：\n\n```java\npublic void add(int index,E element){\n   if(index>size||index<0)\n      throw new IndexOutOfBoundsException(\n        \"Index:\"+index+\",size: \"+size);\n         ensureCapacity(size+1);\n         System.arraycopy(elementData,index,elementData,index+1,size-index);\n         elementData[index] = element;\n         size++;\n}\n```\n\n可以看到每次插入操作，都会进行一次数组复制。而这个操作在增加元素到List尾端的时候是不存在的，大量的数组重组操作会导致系统性能低下。并且插入元素在List中的位置越是靠前，数组重组的开销也越大。\n\n而LinkedList此时显示了优势：\n\n```java\npublic void add(int index,E element){\n   addBefore(element,(index==size?header:entry(index)));\n}\n```\n\n可见，**对LinkedList来说，在List的尾端插入数据与在任意位置插入数据是一样的，不会因为插入的位置靠前而导致插入的方法性能降低。**\n\n##### 删除任意位置元素\n\n对于元素的删除，List接口提供了在任意位置删除元素的方法：\n\n```java\npublic E remove(int index);\n```\n\n对ArrayList来说，remove()方法和add()方法是雷同的。在任意位置移除元素后，都要进行数组的重组。ArrayList的实现如下：\n\n```java\npublic E remove(int index){\n   RangeCheck(index);\n   modCount++;\n   E oldValue=(E) elementData[index];\n  int numMoved=size-index-1;\n  if(numMoved>0)\n     System.arraycopy(elementData,index+1,elementData,index,numMoved);\n     elementData[--size]=null;\n     return oldValue;\n}\n```\n\n可以看到，**在ArrayList的每一次有效的元素删除操作后，都要进行数组的重组。并且删除的位置越靠前，数组重组时的开销越大。**\n\n```java\npublic E remove(int index){\n  return remove(entry(index));         \n}\nprivate Entry<E> entry(int index){\n  if(index<0 || index>=size)\n      throw new IndexOutBoundsException(\"Index:\"+index+\",size:\"+size);\n      Entry<E> e= header;\n      if(index<(size>>1)){//要删除的元素位于前半段\n         for(int i=0;i<=index;i++)\n             e=e.next;\n     }else{\n         for(int i=size;i>index;i--)\n             e=e.previous;\n     }\n         return e;\n}\n```\n\n在LinkedList的实现中，首先要通过循环找到要删除的元素。如果要删除的位置处于List的前半段，则从前往后找；若其位置处于后半段，则从后往前找。因此无论要删除较为靠前或者靠后的元素都是非常高效的；但要移除List中间的元素却几乎要遍历完半个List，在List拥有大量元素的情况下，效率很低。\n\n##### 容量参数\n\n容量参数是ArrayList和Vector等基于数组的List的特有性能参数。它表示初始化的数组大小。当ArrayList所存储的元素数量超过其已有大小时。它便会进行扩容，数组的扩容会导致整个数组进行一次内存复制。因此合理的数组大小有助于减少数组扩容的次数，从而提高系统性能。\n\n```java\npublic  ArrayList(){\n  this(10);  \n}\npublic ArrayList (int initialCapacity){\n   super();\n   if(initialCapacity<0)\n       throw new IllegalArgumentException(\"Illegal Capacity:\"+initialCapacity)\n      this.elementData=new Object[initialCapacity];\n}\n```\n\nArrayList提供了一个可以制定初始数组大小的构造函数：\n\n```java\npublic ArrayList(int initialCapacity) \n```\n\n现以构造一个拥有100万元素的List为例，当使用默认初始化大小时，其消耗的相对时间为125ms左右，当直接制定数组大小为100万时，构造相同的ArrayList仅相对耗时16ms。\n\n##### 遍历列表\n\n遍历列表操作是最常用的列表操作之一，在JDK1.5之后，至少有3中常用的列表遍历方式：\n\n> - forEach操作\n> - 迭代器\n> - for循环。\n\n```java\nString tmp;\nlong start=System.currentTimeMills();    //ForEach \nfor(String s:list){\n    tmp=s;\n}\nSystem.out.println(\"foreach spend:\"+(System.currentTimeMills()-start));\nstart = System.currentTimeMills();\nfor(Iterator<String> it=list.iterator();it.hasNext();){    \n   tmp=it.next();\n}\nSystem.out.println(\"Iterator spend;\"+(System.currentTimeMills()-start));\nstart=System.currentTimeMills();\nint size=;list.size();\nfor(int i=0;i<size;i++){                     \n    tmp=list.get(i);\n}\nSystem.out.println(\"for spend;\"+(System.currentTimeMills()-start));\n```\n\n构造一个拥有100万数据的ArrayList和等价的LinkedList，使用以上代码进行测试，测试结果：\n\n![图片](https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/11.png)\n\n可以看到，**最简便的ForEach循环并没有很好的性能表现，综合性能不如普通的迭代器，而是用for循环通过随机访问遍历列表时，ArrayList表项很好，但是LinkedList的表现却无法让人接受，甚至没有办法等待程序的结束。这是因为对LinkedList进行随机访问时，总会进行一次列表的遍历操作。性能非常差，应避免使用。**\n\n\n\n## Java 进阶\n\n### 你能说说 Spring 框架中 Bean 的生命周期吗？\n\n1. 实例化一个 `Bean` , 也就是我们常说的 `new`；\n2. 按照 `Spring` 上下文对实例化的 `Bean` 进行配置－－也就是 `IOC` 注入；\n3. 如果这个 `Bean` 已经实现了 `BeanNameAware` 接口，会调用它实现的 `setBeanName(String)`方法，此处传递的就是 `Spring` 配置文件中 `Bean` 的 `id` 值\n4. 如果这个 `Bean` 已经实现了 `BeanFactoryAware` 接口，会调用它实现的 `setBeanFactory(setBeanFactory(BeanFactory)`传递的是 Spring 工厂自身（可以用这个方式来获取其它 Bean，只需在 Spring 配置文件中配置一个普通的 Bean 就可以）；\n5. 如果这个 `Bean` 已经实现了 `ApplicationContextAware` 接口，会调用 `setApplicationContext(ApplicationContext)`方法，传入 Spring 上下文（同样这个方式也可以实现步骤 4 的内容，但比 4 更好，因为 `ApplicationContext` 是 `BeanFactory` 的子接口，有更多的实现方法）；\n6. 如果这个 `Bean` 关联了 `BeanPostProcessor` 接口，将会调用 `postProcessBeforeInitialization(Object obj, String s)`方法，`BeanPostProcessor` 经常被用作是 `Bean` 内容的更改，并且由于这个是在 `Bean` 初始化结束时调用那个的方法，也可以被应用于内存或缓存技术；\n7. 如果 `Bean` 在 `Spring` 配置文件中配置了 `init-method` 属性会自动调用其配置的初始化方法。\n8. 如果这个 `Bean` 关联了 `BeanPostProcessor` 接口，将会调用 `postProcessAfterInitialization(Object obj, String s)`方法、；\n\n   > 注：以上工作完成以后就可以应用这个 `Bean` 了，那这个 `Bean` 是一个 `Singleton` 的，所以一般情况下我们调用同一个 `id` 的 `Bean` 会是在内容地址相同的实例，当然在 `Spring` 配置文件中也可以配置非 `Singleton`，这里我们不做赘述。\n\n9. 当 `Bean` 不再需要时，会经过清理阶段，如果 `Bean` 实现了 `DisposableBean` 这个接口，会调用那个其实现的 `destroy()`方法；\n10. 最后，如果这个 `Bean` 的 `Spring` 配置中配置了 `destroy-method` 属性，会自动调用其配置的销毁方法。\n\n### Spring，SpringMVC，SpringBoot，SpringCloud 有什么区别和联系？\n\n#### 简单介绍\n\n- `Spring` 是一个轻量级的控制反转(`IoC`)和面向切面(`AOP`)的容器框架。Spring 使你能够编写更干净、更可管理、并且更易于测试的代码。\n- `Spring MVC` 是 Spring 的一个模块，一个 web 框架。通过 `Dispatcher Servlet`, `ModelAndView` 和 `View Resolver`，开发 web 应用变得很容易。主要针对的是网站应用程序或者服务开发——`URL 路由`、`Session`、`模板引擎`、`静态 Web 资源`等等。\n- `Spring` 配置复杂，繁琐，所以推出了 `Spring boot`，约定优于配置，简化了 spring 的配置流程。\n- `Spring Cloud` 构建于 `Spring Boot` 之上，是一个关注全局的服务治理框架。\n\n#### Spring VS SpringMVC\n\n- `Spring` 是一个一站式的轻量级的 java 开发框架，核心是`控制反转（IOC）`和`面向切面（AOP）`，针对于开发的 WEB 层 (`springMvc`)、业务层(`Ioc`)、持久层(`jdbcTemplate`)等都提供了多种配置解决方案；\n- `SpringMVC` 是 `Spring` 基础之上的一个 `MVC` 框架，主要处理 `web` 开发的路径映射和视图渲染，属于 `Spring` 框架中 `WEB` 层开发的一部分；\n\n#### SpringMVC VS SpringBoot\n\n- `SpringMVC`属于一个企业 WEB 开发的 MVC 框架，涵盖面包括前端**视图开发**、**文件配置**、**后台接口逻辑开发**等，XML、config 等配置相对比较繁琐复杂；\n- `SpringBoot`框架相对于 SpringMVC 框架来说，更**专注于开发微服务后台接口**，不开发前端视图；\n\n#### SpringBoot VS SpringCloud\n\n- `SpringBoot` 使用了**默认大于配置**的理念，集成了快速开发的 `Spring` 多个插件，同时**自动过滤不需要配置的多余的插件**，**简化了项目的开发配置流程**，一定程度上**取消 xml 配置**，是一套**快速配置开发的脚手架**，能快速开发**单个微服务**；\n- `SpringCloud` 大部分的功能插件都是基于 `SpringBoot` 去实现的，`SpringCloud` 关注于**全局的微服务整合和管理**，将多个 `SpringBoot` 单体微服务进行整合以及管理；`SpringCloud` 依赖于 `SpringBoot` 开发，而 - `SpringBoot` 可以独立开发；\n\n#### 总结\n\n- Spring 是核心，提供了基础功能；\n- Spring MVC 是基于 Spring 的一个 MVC 框架 ；\n- Spring Boot 是为简化 Spring 配置的快速开发整合包；\n- Spring Cloud 是构建在 Spring Boot 之上的服务治理框架。\n\n### 如何保证消息的顺序性？\n\n#### 面试官心理分析\n\n其实这个也是用 MQ 的时候必问的话题，第一看看你了不了解顺序这个事儿？第二看看你有没有办法保证消息是有顺序的？这是生产系统中常见的问题。\n\n#### 面试题剖析\n\n我举个例子，我们以前做过一个 mysql `binlog` 同步的系统，压力还是非常大的，日同步数据要达到上亿，就是说数据从一个 mysql 库原封不动地同步到另一个 mysql 库里面去（mysql -> mysql）。常见的一点在于说比如大数据 team，就需要同步一个 mysql 库过来，对公司的业务系统的数据做各种复杂的操作。\n\n你在 mysql 里增删改一条数据，对应出来了增删改 3 条 `binlog` 日志，接着这三条 `binlog` 发送到 MQ 里面，再消费出来依次执行，起码得保证人家是按照顺序来的吧？不然本来是：增加、修改、删除；你楞是换了顺序给执行成删除、修改、增加，不全错了么。\n\n本来这个数据同步过来，应该最后这个数据被删除了；结果你搞错了这个顺序，最后这个数据保留下来了，数据同步就出错了。\n\n先看看顺序会错乱的俩场景：\n\n- **RabbitMQ**：一个 queue，多个 consumer。比如，生产者向 RabbitMQ 里发送了三条数据，顺序依次是 data1/data2/data3，压入的是 RabbitMQ 的一个内存队列。有三个消费者分别从 MQ 中消费这三条数据中的一条，结果消费者 2 先执行完操作，把 data2 存入数据库，然后是 data1/data3。这不明显乱了。\n\n![图片](/img/posts/java/interview/1.png)\n\n- **Kafka**：比如说我们建了一个 topic，有三个 partition。生产者在写的时候，其实可以指定一个 key，比如说我们指定了某个订单 id 作为 key，那么这个订单相关的数据，一定会被分发到同一个 partition 中去，而且这个 partition 中的数据一定是有顺序的。\n\n  消费者从 partition 中取出来数据的时候，也一定是有顺序的。到这里，顺序还是 ok 的，没有错乱。接着，我们在消费者里可能会搞**多个线程来并发处理消息**。因为如果消费者是单线程消费处理，而处理比较耗时的话，比如处理一条消息耗时几十 ms，那么 1 秒钟只能处理几十条消息，这吞吐量太低了。而多个线程并发跑的话，顺序可能就乱掉了。\n\n![图片](/img/posts/java/interview/2.png)\n\n#### 解决方案\n\n#### RabbitMQ\n\n拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点；或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。\n\n![图片](/img/posts/java/interview/3.png)\n\n#### Kafka\n\n- 一个 topic，一个 partition，一个 consumer，内部单线程消费，单线程吞吐量太低，一般不会用这个。\n- 写 N 个内存 queue，具有相同 key 的数据都到同一个内存 queue；然后对于 N 个线程，每个线程分别消费一个内存 queue 即可，这样就能保证顺序性。\n\n![图片](/img/posts/java/interview/4.png)\n\n\n## Redis\n\n### Redis 是如何实现分布式锁的？\n\n分布式锁常见的三种实现方式：\n\n1. 数据库乐观锁；\n2. 基于 Redis 的分布式锁；\n3. 基于 ZooKeeper 的分布式锁。\n\n本面试考点是，你对 Redis 使用熟悉吗？Redis 中是如何实现分布式锁的。\n\n#### 要点\n\nRedis 要实现分布式锁，以下条件应该得到满足\n\n#### 互斥性\n\n- 在任意时刻，只有一个客户端能持有锁。\n\n#### 不能死锁\n\n- 客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。\n\n#### 容错性\n\n- 只要大部分的 Redis 节点正常运行，客户端就可以加锁和解锁。\n\n#### 实现\n\n可以直接通过 `set key value px milliseconds nx` 命令实现加锁， 通过 Lua 脚本实现解锁。\n\n```lua\n//获取锁（unique_value可以是UUID等）\nSET resource_name unique_value NX PX  30000\n\n//释放锁（lua脚本中，一定要比较value，防止误解锁）\nif redis.call(\"get\",KEYS[1]) == ARGV[1] then\n    return redis.call(\"del\",KEYS[1])\nelse\n    return 0\nend\n```\n\n#### 代码解释\n\n- set 命令要用 `set key value px milliseconds nx`，替代 `setnx + expire` 需要分两次执行命令的方式，保证了原子性，\n- value 要具有唯一性，可以使用`UUID.randomUUID().toString()`方法生成，用来标识这把锁是属于哪个请求加的，在解锁的时候就可以有依据；\n- 释放锁时要验证 value 值，防止误解锁；\n- 通过 Lua 脚本来避免 Check And Set 模型的并发问题，因为在释放锁的时候因为涉及到多个 Redis 操作 （利用了 eval 命令执行 Lua 脚本的原子性）；\n\n#### 加锁代码分析\n\n首先，set()加入了 NX 参数，可以保证如果已有 key 存在，则函数不会调用成功，也就是只有一个客户端能持有锁，满足互斥性。其次，由于我们对锁设置了过期时间，即使锁的持有者后续发生崩溃而没有解锁，锁也会因为到了过期时间而自动解锁（即 key 被删除），不会发生死锁。最后，因为我们将 value 赋值为 requestId，用来标识这把锁是属于哪个请求加的，那么在客户端在解锁的时候就可以进行校验是否是同一个客户端。\n\n#### 解锁代码分析\n\n将 Lua 代码传到 jedis.eval()方法里，并使参数 KEYS[1]赋值为 lockKey，ARGV[1]赋值为 requestId。在执行的时候，首先会获取锁对应的 value 值，检查是否与 requestId 相等，如果相等则解锁（删除 key）。\n\n#### 存在的风险\n\n如果存储锁对应 key 的那个节点挂了的话，就可能存在丢失锁的风险，导致出现多个客户端持有锁的情况，这样就不能实现资源的独享了。\n\n1. 客户端 A 从 master 获取到锁\n2. 在 master 将锁同步到 slave 之前，master 宕掉了（Redis 的主从同步通常是异步的）。\n   主从切换，slave 节点被晋级为 master 节点\n3. 客户端 B 取得了同一个资源被客户端 A 已经获取到的另外一个锁。导致存在同一时刻存不止一个线程获取到锁的情况。\n\n#### redlock 算法出现\n\n这个场景是假设有一个 redis cluster，有 5 个 redis master 实例。然后执行如下步骤获取一把锁：\n\n1. 获取当前时间戳，单位是毫秒；\n2. 跟上面类似，轮流尝试在每个 master 节点上创建锁，过期时间较短，一般就几十毫秒；\n3. 尝试在大多数节点上建立一个锁，比如 5 个节点就要求是 3 个节点 n / 2 + 1；\n4. 客户端计算建立好锁的时间，如果建立锁的时间小于超时时间，就算建立成功了；\n5. 要是锁建立失败了，那么就依次之前建立过的锁删除；\n6. 只要别人建立了一把分布式锁，你就得不断轮询去尝试获取锁。\n\n![图片](/img/posts/java/interview/6.png)\n\nRedis 官方给出了以上两种基于 Redis 实现分布式锁的方法，详细说明可以查看：\n\n> https://redis.io/topics/distlock 。\n\n#### Redisson 实现\n\nRedisson 是一个在 Redis 的基础上实现的 Java 驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的 Java 常用对象，还实现了可重入锁（Reentrant Lock）、公平锁（Fair Lock、联锁（MultiLock）、 红锁（RedLock）、 读写锁（ReadWriteLock）等，还提供了许多分布式服务。\n\nRedisson 提供了使用 Redis 的最简单和最便捷的方法。Redisson 的宗旨是促进使用者对 Redis 的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。\n\n**Redisson 分布式重入锁用法**\n\nRedisson 支持单点模式、主从模式、哨兵模式、集群模式，这里以单点模式为例：\n\n```lua\n// 1.构造redisson实现分布式锁必要的Config\nConfig config = new Config();\nconfig.useSingleServer().setAddress(\"redis://127.0.0.1:5379\").setPassword(\"123456\").setDatabase(0);\n// 2.构造RedissonClient\nRedissonClient redissonClient = Redisson.create(config);\n// 3.获取锁对象实例（无法保证是按线程的顺序获取到）\nRLock rLock = redissonClient.getLock(lockKey);\ntry {\n    /**\n     * 4.尝试获取锁\n     * waitTimeout 尝试获取锁的最大等待时间，超过这个值，则认为获取锁失败\n     * leaseTime   锁的持有时间,超过这个时间锁会自动失效（值应设置为大于业务处理的时间，确保在锁有效期内业务能处理完）\n     */\n    boolean res = rLock.tryLock((long)waitTimeout, (long)leaseTime, TimeUnit.SECONDS);\n    if (res) {\n        //成功获得锁，在这里处理业务\n    }\n} catch (Exception e) {\n    throw new RuntimeException(\"aquire lock fail\");\n}finally{\n    //无论如何, 最后都要解锁\n    rLock.unlock();\n}\n```\n\n加锁流程图\n\n![图片](/img/posts/java/interview/7.png)\n\n解锁流程图\n\n![图片](/img/posts/java/interview/8.png)\n\n我们可以看到，RedissonLock 是可重入的，并且考虑了失败重试，可以设置锁的最大等待时间， 在实现上也做了一些优化，减少了无效的锁申请，提升了资源的利用率。\n\n需要特别注意的是，RedissonLock 同样没有解决 节点挂掉的时候，存在丢失锁的风险的问题。而现实情况是有一些场景无法容忍的，所以 Redisson 提供了实现了 redlock 算法的 RedissonRedLock，RedissonRedLock 真正解决了单点失败的问题，代价是需要额外的为 RedissonRedLock 搭建 Redis 环境。\n\n所以，如果业务场景可以容忍这种小概率的错误，则推荐使用 RedissonLock， 如果无法容忍，则推荐使用 RedissonRedLock。\n\n### Redis 面试常见问答\n\n#### 什么是缓存雪崩？怎么解决？\n\n![图片](/img/posts/java/interview/9.png)\n\n通常，我们会使用缓存用于缓冲对 DB 的冲击，如果缓存宕机，所有请求将直接打在 DB，造成 DB 宕机——从而导致整个系统宕机。\n\n**如何解决呢？**\n\n![图片](/img/posts/java/interview/10.png)\n\n**2 种策略（同时使用）：**\n\n- 对缓存做高可用，防止缓存宕机\n- 使用断路器，如果缓存宕机，为了防止系统全部宕机，限制部分流量进入 DB，保证部分可用，其余的请求返回断路器的默认值。\n\n#### 什么是缓存穿透？怎么解决？\n\n**解释 1：**缓存查询一个没有的 key，同时数据库也没有，如果黑客大量的使用这种方式，那么就会导致 DB 宕机。\n\n**解决方案：**我们可以使用一个默认值来防止，例如，当访问一个不存在的 key，然后再去访问数据库，还是没有，那么就在缓存里放一个占位符，下次来的时候，检查这个占位符，如果发生时占位符，就不去数据库查询了，防止 DB 宕机。\n\n**解释 2：**大量请求查询一个刚刚失效的 key，导致 DB 压力倍增，可能导致宕机，但实际上，查询的都是相同的数据。\n\n**解决方案：**可以在这些请求代码加上双重检查锁。但是那个阶段的请求会变慢。不过总比 DB 宕机好。\n\n#### 什么是缓存并发竞争？怎么解决？\n\n**解释：**多个客户端写一个 key，如果顺序错了，数据就不对了。但是顺序我们无法控制。\n\n**解决方案：**使用分布式锁，例如 zk，同时加入数据的时间戳。同一时刻，只有抢到锁的客户端才能写入，同时，写入时，比较当前数据的时间戳和缓存中数据的时间戳。\n\n####什么是缓存和数据库双写不一致？怎么解决？\n\n解释：连续写数据库和缓存，但是操作期间，出现并发了，数据不一致了。\n\n通常，更新缓存和数据库有以下几种顺序：\n\n- 先更新数据库，再更新缓存。\n- 先删缓存，再更新数据库。\n- 先更新数据库，再删除缓存。\n\n_三种方式的优劣来看一下：_\n\n#### 先更新数据库，再更新缓存\n\n这么做的问题是：当有 2 个请求同时更新数据，那么如果不使用分布式锁，将无法控制最后缓存的值到底是多少。也就是并发写的时候有问题。\n\n#### 先删缓存，Redis 面试常见问答再更新数据库\n\n这么做的问题：如果在删除缓存后，有客户端读数据，将可能读到旧数据，并有可能设置到缓存中，导致缓存中的数据一直是老数据。\n\n有 2 种解决方案：\n\n- 使用“双删”，即删更删，最后一步的删除作为异步操作，就是防止有客户端读取的时候设置了旧值。\n- 使用队列，当这个 key 不存在时，将其放入队列，串行执行，必须等到更新数据库完毕才能读取数据。\n\n总的来讲，比较麻烦。\n\n#### 先更新数据库，再删除缓存\n\n这个实际是常用的方案，但是有很多人不知道，这里介绍一下，这个叫 Cache Aside Pattern，老外发明的。如果先更新数据库，再删除缓存，那么就会出现更新数据库之前有瞬间数据不是很及时。\n\n同时，如果在更新之前，缓存刚好失效了，读客户端有可能读到旧值，然后在写客户端删除结束后再次设置了旧值，非常巧合的情况。\n\n有 2 个前提条件：\n\n- 缓存在写之前的时候失效，同时，在写客户度删除操作结束后，放置旧数据 —— 也就是读比写慢。\n- 设置有的写操作还会锁表\n\n所以，这个很难出现，但是如果出现了怎么办？使用双删！！！记录更新期间有没有客户端读数据库，如果有，在更新完数据库之后，执行延迟删除。\n还有一种可能，如果执行更新数据库，准备执行删除缓存时，服务挂了，执行删除失败怎么办？？？\n这就坑了！！！不过可以通过订阅数据库的 binlog 来删除。\n\n### 谈谈 Redis 的过期策略\n\n在日常开发中，我们使用 Redis 存储 key 时通常会设置一个过期时间，但是 Redis 是怎么删除过期的 key，而且 Redis 是单线程的，删除 key 会不会造成阻塞。要搞清楚这些，就要了解 Redis 的过期策略和内存淘汰机制。\n\n**Redis 采用的是定期删除 + 懒惰删除策略。**\n\n#### 定期删除策略\n\nRedis 会将每个设置了过期时间的 key 放入到一个独立的字典中，默认每 100ms 进行一次过期扫描：\n\n1. 随机抽取 20 个 key\n2. 删除这 20 个 key 中过期的 key\n3. 如果过期的 key 比例超过 1/4，就重复步骤 1，继续删除。\n\n**为什不扫描所有的 key？**\n\nRedis 是单线程，全部扫描岂不是卡死了。而且为了防止每次扫描过期的 key 比例都超过 1/4，导致不停循环卡死线程，Redis 为每次扫描添加了上限时间，默认是 25ms。\n\n如果客户端将超时时间设置的比较短，比如 10ms，那么就会出现大量的链接因为超时而关闭，业务端就会出现很多异常。而且这时你还无法从 Redis 的 slowlog 中看到慢查询记录，因为慢查询指的是逻辑处理过程慢，不包含等待时间。\n\n如果在同一时间出现大面积 key 过期，Redis 循环多次扫描过期词典，直到过期的 key 比例小于 1/4。这会导致卡顿，而且在高并发的情况下，可能会导致缓存雪崩。\n\n**为什么 Redis 为每次扫描添的上限时间是 25ms，还会出现上面的情况？**\n\n因为 Redis 是单线程，每个请求处理都需要排队，而且由于 Redis 每次扫描都是 25ms，也就是每个请求最多 25ms，100 个请求就是 2500ms。\n\n如果有大批量的 key 过期，要给过期时间设置一个随机范围，而不宜全部在同一时间过期，分散过期处理的压力。\n\n#### 从库的过期策略\n\n从库不会进行过期扫描，从库对过期的处理是被动的。主库在 key 到期时，会在 AOF 文件里增加一条 del 指令，同步到所有的从库，从库通过执行这条 del 指令来删除过期的 key。\n\n因为指令同步是异步进行的，所以主库过期的 key 的 del 指令没有及时同步到从库的话，会出现主从数据的不一致，主库没有的数据在从库里还存在。\n\n#### 懒惰删除策略\n\n**Redis 为什么要懒惰删除(lazy free)？**\n\n删除指令 del 会直接释放对象的内存，大部分情况下，这个指令非常快，没有明显延迟。不过如果删除的 key 是一个非常大的对象，比如一个包含了千万元素的 hash，又或者在使用 FLUSHDB 和 FLUSHALL 删除包含大量键的数据库时，那么删除操作就会导致单线程卡顿。\n\nredis 4.0 引入了 lazyfree 的机制，它可以将删除键或数据库的操作放在后台线程里执行， 从而尽可能地避免服务器阻塞。\n\n#### unlink\n\nunlink 指令，它能对删除操作进行懒处理，丢给后台线程来异步回收内存。\n\n```bash\n> unlink key\nOK\n```\n\n#### flush\n\nflushdb 和 flushall 指令，用来清空数据库，这也是极其缓慢的操作。Redis 4.0 同样给这两个指令也带来了异步化，在指令后面增加 async 参数就可以将整棵大树连根拔起，扔给后台线程慢慢焚烧。\n\n```bash\n> flushall async\nOK\n```\n\n#### 异步队列\n\n主线程将对象的引用从「大树」中摘除后，会将这个 key 的内存回收操作包装成一个任务，塞进异步任务队列，后台线程会从这个异步队列中取任务。任务队列被主线程和异步线程同时操作，所以必须是一个线程安全的队列。\n\n不是所有的 unlink 操作都会延后处理，如果对应 key 所占用的内存很小，延后处理就没有必要了，这时候 Redis 会将对应的 key 内存立即回收，跟 del 指令一样。\n\n#### 更多异步删除点\n\nRedis 回收内存除了 del 指令和 flush 之外，还会存在于在 key 的过期、LRU 淘汰、rename 指令以及从库全量同步时接受完 rdb 文件后会立即进行的 flush 操作。\n\nRedis4.0 为这些删除点也带来了异步删除机制，打开这些点需要额外的配置选项。\n\n- slave-lazy-flush 从库接受完 rdb 文件后的 flush 操作\n- lazyfree-lazy-eviction 内存达到 maxmemory 时进行淘汰\n- lazyfree-lazy-expire key 过期删除\n- lazyfree-lazy-server-del rename 指令删除 destKey\n\n#### 内存淘汰机制\n\nRedis 的内存占用会越来越高。Redis 为了限制最大使用内存，提供了 redis.conf 中的\n配置参数 maxmemory。当内存超出 maxmemory，**Redis 提供了几种内存淘汰机制让用户选择，配置 maxmemory-policy：**\n\n- **noeviction：**当内存超出 maxmemory，写入请求会报错，但是删除和读请求可以继续。（使用这个策略，疯了吧）\n- **allkeys-lru：**当内存超出 maxmemory，在所有的 key 中，移除最少使用的 key。只把 Redis 既当缓存是使用这种策略。（推荐）。\n- **allkeys-random：**当内存超出 maxmemory，在所有的 key 中，随机移除某个 key。（应该没人用吧）\n- **volatile-lru：**当内存超出 maxmemory，在设置了过期时间 key 的字典中，移除最少使用的 key。把 Redis 既当缓存，又做持久化的时候使用这种策略。\n- **volatile-random：**当内存超出 maxmemory，在设置了过期时间 key 的字典中，随机移除某个 key。\n- **volatile-ttl：**当内存超出 maxmemory，在设置了过期时间 key 的字典中，优先移除 ttl 小的。\n\n#### LRU 算法\n\n实现 LRU 算法除了需要 key/value 字典外，还需要附加一个链表，链表中的元素按照一定的顺序进行排列。当空间满的时候，会踢掉链表尾部的元素。当字典的某个元素被访问时，它在链表中的位置会被移动到表头。所以链表的元素排列顺序就是元素最近被访问的时间顺序。\n\n使用 Python 的 OrderedDict(双向链表 + 字典) 来实现一个简单的 LRU 算法：\n\n```python\nfrom collections import OrderedDict\n\nclass LRUDict(OrderedDict):\n\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.items = OrderedDict()\n\n    def __setitem__(self, key, value):\n        old_value = self.items.get(key)\n        if old_value is not None:\n            self.items.pop(key)\n            self.items[key] = value\n        elif len(self.items) < self.capacity:\n            self.items[key] = value\n        else:\n            self.items.popitem(last=True)\n            self.items[key] = value\n\n    def __getitem__(self, key):\n        value = self.items.get(key)\n        if value is not None:\n            self.items.pop(key)\n            self.items[key] = value\n        return value\n\n    def __repr__(self):\n        return repr(self.items)\n\n\nd = LRUDict(10)\n\nfor i in range(15):\n    d[i] = i\nprint d\n```\n\n#### 近似 LRU 算法\n\nRedis 使用的并不是完全 LRU 算法。不使用 LRU 算法，是为了节省内存，Redis 采用的是随机 LRU 算法，Redis 为每一个 key 增加了一个 24 bit 的字段，用来记录这个 key 最后一次被访问的时间戳。\n\n注意 Redis 的 LRU 淘汰策略是懒惰处理，也就是不会主动执行淘汰策略，当 Redis 执行写操作时，发现内存超出 maxmemory，就会执行 LRU 淘汰算法。这个算法就是随机采样出 5(默认值)个 key，然后移除最旧的 key，如果移除后内存还是超出 maxmemory，那就继续随机采样淘汰，直到内存低于 maxmemory 为止。\n\n如何采样就是看 maxmemory-policy 的配置，如果是 allkeys 就是从所有的 key 字典中随机，如果是 volatile 就从带过期时间的 key 字典中随机。每次采样多少个 key 看的是 maxmemory_samples 的配置，默认为 5。\n\n#### LFU\n\nRedis 4.0 里引入了一个新的淘汰策略 —— LFU（Least Frequently Used） 模式，作者认为它比 LRU 更加优秀。\n\nLFU 表示按最近的访问频率进行淘汰，它比 LRU 更加精准地表示了一个 key 被访问的热度。\n\n如果一个 key 长时间不被访问，只是刚刚偶然被用户访问了一下，那么在使用 LRU 算法下它是不容易被淘汰的，因为 LRU 算法认为当前这个 key 是很热的。而 LFU 是需要追踪最近一段时间的访问频率，如果某个 key 只是偶然被访问一次是不足以变得很热的，它需要在近期一段时间内被访问很多次才有机会被认为很热。\n\n**Redis 对象的热度**\n\nRedis 的所有对象结构头中都有一个 24bit 的字段，这个字段用来记录对象的热度。\n\n```lua\n// redis 的对象头\ntypedef struct redisObject {\n    unsigned type:4; // 对象类型如 zset/set/hash 等等\n    unsigned encoding:4; // 对象编码如 ziplist/intset/skiplist 等等\n    unsigned lru:24; // 对象的「热度」\n    int refcount; // 引用计数\n    void *ptr; // 对象的 body\n} robj;\n```\n\n**LRU 模式**\n\n在 LRU 模式下，lru 字段存储的是 Redis 时钟 server.lruclock，Redis 时钟是一个 24bit 的整数，默认是 Unix 时间戳对 2^24 取模的结果，大约 97 天清零一次。当某个 key 被访问一次，它的对象头的 lru 字段值就会被更新为 server.lruclock。\n\n**LFU 模式**\n\n在 LFU 模式下，lru 字段 24 个 bit 用来存储两个值，分别是 ldt(last decrement time) 和 logc(logistic counter)。\n\nlogc 是 8 个 bit，用来存储访问频次，因为 8 个 bit 能表示的最大整数值为 255，存储频次肯定远远不够，所以这 8 个 bit 存储的是频次的对数值，并且这个值还会随时间衰减。如果它的值比较小，那么就很容易被回收。为了确保新创建的对象不被回收，新对象的这 8 个 bit 会初始化为一个大于零的值，默认是 LFU_INIT_VAL=5。\n\nldt 是 16 个位，用来存储上一次 logc 的更新时间，因为只有 16 位，所以精度不可能很高。它取的是分钟时间戳对 2^16 进行取模，大约每隔 45 天就会折返。\n\n同 LRU 模式一样，我们也可以使用这个逻辑计算出对象的空闲时间，只不过精度是分钟级别的。图中的 server.unixtime 是当前 redis 记录的系统时间戳，和 server.lruclock 一样，它也是每毫秒更新一次。\n\n\n\n\n\n","slug":"java/interview/index","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor810024zc7hd26j261c","content":"<h2 id=\"Java-基础\"><a href=\"#Java-基础\" class=\"headerlink\" title=\"Java 基础\"></a>Java 基础</h2><h3 id=\"为什么-HashMap-是线程不安全的？\"><a href=\"#为什么-HashMap-是线程不安全的？\" class=\"headerlink\" title=\"为什么 HashMap 是线程不安全的？\"></a>为什么 HashMap 是线程不安全的？</h3><p>在 jdk1.8 中，在多线程环境下，会发生数据覆盖的情况。</p>\n<h4 id=\"jdk1-8-中-HashMap\"><a href=\"#jdk1-8-中-HashMap\" class=\"headerlink\" title=\"jdk1.8 中 HashMap\"></a>jdk1.8 中 HashMap</h4><p>在 jdk1.8 中对 HashMap 进行了优化，在发生 hash 碰撞，不再采用头插法方式，而是直接插入链表尾部，因此不会出现环形链表的情况，但是在多线程的情况下仍然不安全，这里我们看 jdk1.8 中 HashMap 的 put 操作源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">V</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">boolean</span> evict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果没有hash碰撞则直接插入元素</span>\n            tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span> <span class=\"token class-name\">K</span> k<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span>\n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span>\n                e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putTreeVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> binCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>binCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">>=</span> <span class=\"token constant\">TREEIFY_THRESHOLD</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1 for 1st</span>\n                            <span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// existing mapping for key</span>\n                <span class=\"token class-name\">V</span> oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent <span class=\"token operator\">||</span> oldValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">afterNodeAccess</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>size <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">afterNodeInsertion</span><span class=\"token punctuation\">(</span>evict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这是 jdk1.8 中 HashMap 中 put 操作的主函数， 注意第 6 行代码，如果没有 hash 碰撞则会直接插入元素。如果线程 A 和线程 B 同时进行 put 操作，刚好这两条不同的数据 hash 值一样，并且该位置数据为 null，所以这线程 A、B 都会进入第 6 行代码中。</p>\n<p>假设一种情况，线程 A 进入后还未进行数据插入时挂起，而线程 B 正常执行，从而正常插入数据，然后线程 A 获取 CPU 时间片，此时线程 A 不用再进行 hash 判断了，问题出现：线程 A 会把线程 B 插入的数据给覆盖，发生线程不安全。</p>\n<h3 id=\"单例模式一共有几种写法？\"><a href=\"#单例模式一共有几种写法？\" class=\"headerlink\" title=\"单例模式一共有几种写法？\"></a>单例模式一共有几种写法？</h3><p>大体可分为 4 类，下面分别介绍他们的基本形式、变种及特点。</p>\n<h4 id=\"饱汉模式\"><a href=\"#饱汉模式\" class=\"headerlink\" title=\"饱汉模式\"></a>饱汉模式</h4><p>饱汉是变种最多的单例模式。我们从饱汉出发，通过其变种逐渐了解实现单例模式时需要关注的问题。</p>\n<h5 id=\"基础的饱汉\"><a href=\"#基础的饱汉\" class=\"headerlink\" title=\"基础的饱汉\"></a>基础的饱汉</h5><p>饱汉，即已经吃饱，不着急再吃，饿的时候再吃。所以他就先不初始化单例，等第一次使用的时候再初始化，即“懒加载”。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 饱汉</span>\n<span class=\"token comment\">// UnThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton1</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1</span> singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>饱汉模式的核心就是懒加载。好处是更启动速度快、节省资源，一直到实例被第一次访问，才需要初始化单例；小坏处是写起来麻烦，大坏处是线程不安全，if 语句存在竞态条件。</p>\n<p>写起来麻烦不是大问题，可读性好啊。因此，单线程环境下，基础饱汉是笔者最喜欢的写法。但多线程环境下，基础饱汉就彻底不可用了。下面的几种变种都在试图解决基础饱汉线程不安全的问题。</p>\n<h5 id=\"饱汉-变种-1\"><a href=\"#饱汉-变种-1\" class=\"headerlink\" title=\"饱汉 - 变种 1\"></a>饱汉 - 变种 1</h5><p>最粗暴的犯法是用 synchronized 关键字修饰 getInstance()方法，这样能达到绝对的线程安全。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 饱汉</span>\n<span class=\"token comment\">// ThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton1_1</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1_1</span> singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton1_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1_1</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton1_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>变种 1 的好处是写起来简单，且绝对线程安全；坏处是并发性能极差，事实上完全退化到了串行。单例只需要初始化一次，但就算初始化以后，synchronized 的锁也无法避开，从而 getInstance()完全变成了串行操作。性能不敏感的场景建议使用。</p>\n<h5 id=\"饱汉-变种-2\"><a href=\"#饱汉-变种-2\" class=\"headerlink\" title=\"饱汉 - 变种 2\"></a>饱汉 - 变种 2</h5><p>变种 2 是“臭名昭著”的 DCL 1.0。</p>\n<p>针对变种 1 中单例初始化后锁仍然无法避开的问题，变种 2 在变种 1 的外层又套了一层 check，加上 synchronized 内层的 check，即所谓“双重检查锁”（Double Check Lock，简称 DCL）。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 饱汉</span>\n<span class=\"token comment\">// UnThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton1_2</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1_2</span> singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 触发部分初始化问题</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> f2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton1_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1_2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// may get half object</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Singleton1_2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton1_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>变种 2 的核心是 DCL，看起来变种 2 似乎已经达到了理想的效果：懒加载+线程安全。可惜的是，正如注释中所说，DCL 仍然是线程不安全的，由于指令重排序，你可能会得到“半个对象”，即”部分初始化“问题。详细在看完变种 3 后，可参考下面这篇文章，这里不再赘述。</p>\n<blockquote>\n<p><a href=\"https://monkeysayhi.github.io/2016/11/29/volatile%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8%E3%80%81%E5%8E%9F%E7%90%86/\">https://monkeysayhi.github.io/2016/11/29/volatile关键字的作用、原理/</a></p>\n</blockquote>\n<h5 id=\"饱汉-变种-3\"><a href=\"#饱汉-变种-3\" class=\"headerlink\" title=\"饱汉 - 变种 3\"></a>饱汉 - 变种 3</h5><p>变种 3 专门针对变种 2，可谓 DCL 2.0。</p>\n<p>针对变种 3 的“半个对象”问题，变种 3 在 instance 上增加了 volatile 关键字，原理见上述参考。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 饱汉</span>\n<span class=\"token comment\">// ThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton1_3</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Singleton1_3</span> singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 触发部分初始化问题</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> f2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton1_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1_3</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Singleton1_3</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// must be a complete instance</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton1_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>多线程环境下，变种 3 更适用于性能敏感的场景。但后面我们将了解到，就算是线程安全的，还有一些办法能破坏单例。</p>\n<p>当然，还有很多方式，能通过与 volatile 类似的方式防止部分初始化。读者可自行阅读内存屏障相关内容，但面试时不建议主动装逼。</p>\n<h4 id=\"饿汉模式\"><a href=\"#饿汉模式\" class=\"headerlink\" title=\"饿汉模式\"></a>饿汉模式</h4><p>与饱汉相对，饿汉很饿，只想着尽早吃到。所以他就在最早的时机，即类加载时初始化单例，以后访问时直接返回即可。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 饿汉</span>\n<span class=\"token comment\">// ThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton2</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Singleton2</span> singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>饿汉的好处是天生的线程安全（得益于类加载机制），写起来超级简单，使用时没有延迟；坏处是有可能造成资源浪费（如果类加载后就一直不使用单例的话）。</p>\n<blockquote>\n<p>值得注意的时，单线程环境下，饿汉与饱汉在性能上没什么差别；但多线程环境下，由于饱汉需要加锁，饿汉的性能反而更优。</p>\n</blockquote>\n<h4 id=\"Holder-模式\"><a href=\"#Holder-模式\" class=\"headerlink\" title=\"Holder 模式\"></a>Holder 模式</h4><p>我们既希望利用饿汉模式中静态变量的方便和线程安全；又希望通过懒加载规避资源浪费。Holder 模式满足了这两点要求：核心仍然是静态变量，足够方便和线程安全；通过静态的 Holder 类持有真正实例，间接实现了懒加载。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// Holder模式</span>\n<span class=\"token comment\">// ThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton3</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonHolder</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Singleton3</span> singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonHolder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">/**\n  * 勘误：多写了个synchronized。。\n  public synchronized static Singleton3 getInstance() &#123;\n    return SingletonHolder.singleton;\n  &#125;\n  */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton3</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">SingletonHolder</span><span class=\"token punctuation\">.</span>singleton<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>相对于饿汉模式，Holder 模式仅增加了一个静态内部类的成本，与饱汉的变种 3 效果相当（略优），都是比较受欢迎的实现方式。同样建议考虑。</p>\n<h4 id=\"枚举模式\"><a href=\"#枚举模式\" class=\"headerlink\" title=\"枚举模式\"></a>枚举模式</h4><p>用枚举实现单例模式，相当好用，但可读性是不存在的。</p>\n<h5 id=\"基础的枚举\"><a href=\"#基础的枚举\" class=\"headerlink\" title=\"基础的枚举\"></a>基础的枚举</h5><p>将枚举的静态成员变量作为单例的实例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 枚举</span>\n<span class=\"token comment\">// ThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Singleton4</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token constant\">SINGLETON</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>代码量比饿汉模式更少。但用户只能直接访问实例 Singleton4.SINGLETON——事实上，这样的访问方式作为单例使用也是恰当的，只是牺牲了静态工厂方法的优点，如无法实现懒加载。</p>\n<h5 id=\"丑陋但好用的语法糖\"><a href=\"#丑陋但好用的语法糖\" class=\"headerlink\" title=\"丑陋但好用的语法糖\"></a>丑陋但好用的语法糖</h5><p>Java 的枚举是一个“丑陋但好用的语法糖”。</p>\n<h5 id=\"枚举型单例模式的本质\"><a href=\"#枚举型单例模式的本质\" class=\"headerlink\" title=\"枚举型单例模式的本质\"></a>枚举型单例模式的本质</h5><p>通过反编译打开语法糖，就看到了枚举类型的本质，简化如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 枚举</span>\n<span class=\"token comment\">// ThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton4</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Singleton4</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Singleton4</span> <span class=\"token constant\">SINGLETON</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>本质上和饿汉模式相同，区别仅在于公有的静态成员变量。</p>\n<h5 id=\"用枚举实现一些-trick\"><a href=\"#用枚举实现一些-trick\" class=\"headerlink\" title=\"用枚举实现一些 trick\"></a>用枚举实现一些 trick</h5><blockquote>\n<p>这一部分与单例没什么关系，可以跳过。如果选择阅读也请认清这样的事实：虽然枚举相当灵活，但如何恰当的使用枚举有一定难度。一个足够简单的典型例子是 TimeUnit 类，建议有时间耐心阅读。</p>\n</blockquote>\n<p>上面已经看到，枚举型单例的本质仍然是一个普通的类。实际上，我们可以在枚举型型单例上增加任何普通类可以完成的功能。要点在于枚举实例的初始化，可以理解为实例化了一个匿名内部类。为了更明显，我们在 Singleton4_1 中定义一个普通的私有成员变量，一个普通的公有成员方法，和一个公有的抽象成员方法，如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 枚举</span>\n<span class=\"token comment\">// ThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Singleton4_1</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">SINGLETON</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enum is the easiest singleton pattern, but not the most readable\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAbsMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enum is ugly, but so flexible to make lots of trick\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> comment <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Singleton4_1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> comment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>comment <span class=\"token operator\">=</span> comment<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comment=\"</span> <span class=\"token operator\">+</span> comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAbsMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton4_1</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">SINGLETON</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样，枚举类 Singleton4_1 中的每一个枚举实例不仅继承了父类 Singleton4_1 的成员方法 print()，还必须实现父类 Singleton4_1 的抽象成员方法 testAbsMethod()。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>上面的分析都忽略了反射和序列化的问题。通过反射或序列化，我们仍然能够访问到私有构造器，创建新的实例破坏单例模式。此时，只有枚举模式能天然防范这一问题。反射和序列化笔者还不太了解，但基本原理并不难，可以在其他模式上手动实现。</p>\n<p>下面继续忽略反射和序列化的问题，做个总结回味一下：</p>\n<p><img src=\"/img/posts/java/interview/5.png\" alt=\"图片\"></p>\n<h3 id=\"你能说说进程与线程的区别吗\"><a href=\"#你能说说进程与线程的区别吗\" class=\"headerlink\" title=\"你能说说进程与线程的区别吗\"></a>你能说说进程与线程的区别吗</h3><h4 id=\"两者的定义\"><a href=\"#两者的定义\" class=\"headerlink\" title=\"两者的定义\"></a>两者的定义</h4><p>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。</p>\n<p>线程是进程的一个实体，是 CPU 调度和分派的基本单位，它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈)，但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p>\n<h4 id=\"进程与线程的区别\"><a href=\"#进程与线程的区别\" class=\"headerlink\" title=\"进程与线程的区别\"></a>进程与线程的区别</h4><ol>\n<li>进程是资源分配最小单位，线程是程序执行的最小单位；</li>\n<li>进程有自己独立的地址空间，每启动一个进程，系统都会为其分配地址空间，建立数据表来维护代码段、堆栈段和数据段，线程没有独立的地址空间，它使用相同的地址空间共享数据；</li>\n<li>CPU 切换一个线程比切换进程花费小；</li>\n<li>创建一个线程比进程开销小；</li>\n<li>线程占用的资源要⽐进程少很多。</li>\n<li>线程之间通信更方便，同一个进程下，线程共享全局变量，静态变量等数据，进程之间的通信需要以通信的方式（IPC）进行；（但多线程程序处理好同步与互斥是个难点）</li>\n<li>多进程程序更安全，生命力更强，一个进程死掉不会对另一个进程造成影响（源于有独立的地址空间），多线程程序更不易维护，一个线程死掉，整个进程就死掉了（因为共享地址空间）；</li>\n<li>进程对资源保护要求高，开销大，效率相对较低，线程资源保护要求不高，但开销小，效率高，可频繁切换；</li>\n</ol>\n<h3 id=\"创建线程有几种不同的方式？你喜欢哪一种？为什么？\"><a href=\"#创建线程有几种不同的方式？你喜欢哪一种？为什么？\" class=\"headerlink\" title=\"创建线程有几种不同的方式？你喜欢哪一种？为什么？\"></a>创建线程有几种不同的方式？你喜欢哪一种？为什么？</h3><p>有三种方式可以用来创建线程：</p>\n<ul>\n<li>继承 Thread 类</li>\n<li>实现 Runnable 接口</li>\n<li>应用程序可以使用 Executor 框架来创建线程池</li>\n</ul>\n<p>实现 Runnable 接口这种方式更受欢迎，因为这不需要继承 Thread 类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而 Java 不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。</p>\n<h3 id=\"概括的解释下线程的几种可用状态。\"><a href=\"#概括的解释下线程的几种可用状态。\" class=\"headerlink\" title=\"概括的解释下线程的几种可用状态。\"></a>概括的解释下线程的几种可用状态。</h3><p><strong>新建( new )：</strong>新创建了一个线程对象；</p>\n<p><strong>可运行( runnable )：</strong>线程对象创建后，其他线程(比如 main 线程）调用了该对象的 start ()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取 CPU 的使用权；</p>\n<p><strong>运行( running )：</strong>可运行状态( runnable )的线程获得了 CPU 时间片（ timeslice ） ，执行程序代码；</p>\n<p><strong>阻塞( block )：</strong>阻塞状态是指线程因为某种原因放弃了 CPU 使用权，也即让出了 CPU timeslice ，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 cpu timeslice 转到运行( running )状态。</p>\n<p>阻塞的情况分三种：</p>\n<ol>\n<li>等待阻塞：运行( running )的线程执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中。</li>\n<li>同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中。</li>\n<li>其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I &#x2F; O 请求时， JVM 会把该线程置为阻塞状态。当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I &#x2F; O 处理完毕时，线程重新转入可运行( runnable )状态。</li>\n</ol>\n<p><strong>死亡( dead )：</strong>线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生。</p>\n<h3 id=\"同步方法和同步代码块的区别是什么？\"><a href=\"#同步方法和同步代码块的区别是什么？\" class=\"headerlink\" title=\"同步方法和同步代码块的区别是什么？\"></a>同步方法和同步代码块的区别是什么？</h3><p><strong>区别：</strong></p>\n<ul>\n<li>同步方法默认用 this 或者当前类 class 对象作为锁；</li>\n<li>同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法；</li>\n</ul>\n<h3 id=\"在监视器-Monitor-内部，是如何做线程同步的？程序应该做哪种级别的同步？\"><a href=\"#在监视器-Monitor-内部，是如何做线程同步的？程序应该做哪种级别的同步？\" class=\"headerlink\" title=\"在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？\"></a>在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？</h3><p>监视器和锁在 Java 虚拟机中是一块使用的。监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块。每一个监视器都和一个对象引用相关联。线程在获取锁之前不允许执行同步代码。</p>\n<p>java 还提供了显式监视器( Lock )和隐式监视器( synchronized )两种锁方案。</p>\n<h3 id=\"什么是死锁-deadlock-？\"><a href=\"#什么是死锁-deadlock-？\" class=\"headerlink\" title=\"什么是死锁(deadlock)？\"></a>什么是死锁(deadlock)？</h3><p>两个线程或两个以上线程都在等待对方执行完毕才能继续往下执行的时候就发生了死锁。结果就是这些线程都陷入了无限的等待中。</p>\n<h3 id=\"如何确保-N-个线程可以访问-N-个资源同时又不导致死锁？\"><a href=\"#如何确保-N-个线程可以访问-N-个资源同时又不导致死锁？\" class=\"headerlink\" title=\"如何确保 N 个线程可以访问 N 个资源同时又不导致死锁？\"></a>如何确保 N 个线程可以访问 N 个资源同时又不导致死锁？</h3><p>多线程产生死锁的四个必要条件：</p>\n<ul>\n<li><strong>互斥条件：</strong>一个资源每次只能被一个进程使用。</li>\n<li><strong>保持和请求条件：</strong>一个进程因请求资源而阻塞时，对已获得资源保持不放。</li>\n<li><strong>不可剥夺性：</strong>进程已获得资源，在未使用完成前，不能被剥夺。</li>\n<li><strong>循环等待条件（闭环）：</strong>若干进程之间形成一种头尾相接的循环等待资源关系。</li>\n</ul>\n<p>只要破坏其中任意一个条件，就可以避免死锁</p>\n<p>一种非常简单的避免死锁的方式就是：<strong>指定获取锁的顺序，并强制线程按照指定的顺序获取锁。</strong>因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。</p>\n<h3 id=\"Java-序列化与反序列化三连问：是什么？为什么要？如何做？\"><a href=\"#Java-序列化与反序列化三连问：是什么？为什么要？如何做？\" class=\"headerlink\" title=\"Java 序列化与反序列化三连问：是什么？为什么要？如何做？\"></a>Java 序列化与反序列化三连问：是什么？为什么要？如何做？</h3><h4 id=\"Java-序列化与反序列化是什么？\"><a href=\"#Java-序列化与反序列化是什么？\" class=\"headerlink\" title=\"Java 序列化与反序列化是什么？\"></a>Java 序列化与反序列化是什么？</h4><p>Java 序列化是指把 Java 对象转换为字节序列的过程，而 Java 反序列化是指把字节序列恢复为 Java 对象的过程：</p>\n<ul>\n<li><strong>序列化</strong>：对象序列化的最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性。序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。核心作用是对象状态的保存与重建。</li>\n<li><strong>反序列化</strong>：客户端从文件中或网络上获得序列化后的对象字节流，根据字节流中所保存的对象状态及描述信息，通过反序列化重建对象。</li>\n</ul>\n<h4 id=\"为什么需要序列化与反序列化？\"><a href=\"#为什么需要序列化与反序列化？\" class=\"headerlink\" title=\"为什么需要序列化与反序列化？\"></a>为什么需要序列化与反序列化？</h4><p>为什么要序列化，那就是说一下序列化的好处喽，序列化有什么什么优点，所以我们要序列化。</p>\n<p><strong>一：对象序列化可以实现分布式对象。</strong></p>\n<p>主要应用例如：RMI(即远程调用 Remote Method Invocation)要利用对象序列化运行远程主机上的服务，就像在本地机上运行对象时一样。</p>\n<p><strong>二：java 对象序列化不仅保留一个对象的数据，而且递归保存对象引用的每个对象的数据。</strong></p>\n<p>可以将整个对象层次写入字节流中，可以保存在文件中或在网络连接上传递。利用对象序列化可以进行对象的”深复制”，即复制对象本身及引用的对象本身。序列化一个对象可能得到整个对象序列。</p>\n<p><strong>三：序列化可以将内存中的类写入文件或数据库中。</strong></p>\n<p>比如：将某个类序列化后存为文件，下次读取时只需将文件中的数据反序列化就可以将原先的类还原到内存中。也可以将类序列化为流数据进行传输。</p>\n<p>总的来说就是将一个已经实例化的类转成文件存储，下次需要实例化的时候只要反序列化即可将类实例化到内存中并保留序列化时类中的所有变量和状态。</p>\n<p><strong>四：对象、文件、数据，有许多不同的格式，很难统一传输和保存。</strong></p>\n<p>序列化以后就都是字节流了，无论原来是什么东西，都能变成一样的东西，就可以进行通用的格式传输或保存，传输结束以后，要再次使用，就进行反序列化还原，这样对象还是对象，文件还是文件。</p>\n<h4 id=\"如何实现-Java-序列化与反序列化\"><a href=\"#如何实现-Java-序列化与反序列化\" class=\"headerlink\" title=\"如何实现 Java 序列化与反序列化?\"></a>如何实现 Java 序列化与反序列化?</h4><p>首先我们要把准备要序列化类，实现 Serializabel 接口</p>\n<p>例如：我们要 Person 类里的 name 和 age 都序列化</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//本类可以序列化</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"，年龄\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后：我们将 name 和 age 序列化（也就是把这 2 个对象转为二进制，理解为“打碎”）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>lxh<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SerDemo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileOutputStream</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectOutputStream</span></span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ObjectOutputStreamDemo</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//序列化</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//序列化后生成指定文件路径</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span>separator <span class=\"token operator\">+</span> <span class=\"token string\">\"person.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//装饰流（流）</span>\n        oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//实例化类</span>\n        <span class=\"token class-name\">Person</span> per <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>per<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把类对象序列化</span>\n        oos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>《Java 对象的序列化（Serialization）和反序列化详解》<br><a href=\"https://blog.csdn.net/yaomingyang/article/details/79321939\">https://blog.csdn.net/yaomingyang/article/details/79321939</a></p>\n</blockquote>\n<blockquote>\n<p>《Java 序列化的高级认识》<br><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-serial/\">https://www.ibm.com/developerworks/cn/java/j-lo-serial/</a></p>\n</blockquote>\n<h3 id=\"什么情况用ArrayList-or-LinkedList呢\"><a href=\"#什么情况用ArrayList-or-LinkedList呢\" class=\"headerlink\" title=\"什么情况用ArrayList or LinkedList呢?\"></a>什么情况用ArrayList or LinkedList呢?</h3><p>列表（list）是元素的有序集合，也称为序列。它提供了基于元素位置的操作，有助于快速访问、添加和删除列表中特定索引位置的元素。List 接口实现了 <code>Collection </code>和 <code>Iterable </code>作为父接口。它允许存储重复值和空值，支持通过索引访问元素。</p>\n<h4 id=\"ArrayList-和-LinkedList-的不同之处\"><a href=\"#ArrayList-和-LinkedList-的不同之处\" class=\"headerlink\" title=\"ArrayList 和 LinkedList 的不同之处\"></a>ArrayList 和 LinkedList 的不同之处</h4><h5 id=\"增加元素到列表尾端\"><a href=\"#增加元素到列表尾端\" class=\"headerlink\" title=\"增加元素到列表尾端\"></a>增加元素到列表尾端</h5><p>在 <code>ArrayList</code> 中增加元素到队列尾端的代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//确保内部数组有足够的空间</span>\n   elementData<span class=\"token punctuation\">[</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span><span class=\"token comment\">//将元素加入到数组的末尾，完成添加</span>\n   <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>      \n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>ArrayList</code>中 <code>add()</code> 方法的性能决定于<code>ensureCapacity()</code>方法。<code>ensureCapacity()</code>的实现如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> vod <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> oldCapacity<span class=\"token operator\">=</span>elementData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>minCapacity<span class=\"token operator\">></span>oldCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">//如果数组容量不足，进行扩容</span>\n      <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldData<span class=\"token operator\">=</span>elementData<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> newCapacity<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>oldCapacity<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//扩容到原始容量的1.5倍</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newCapacitty<span class=\"token operator\">&lt;</span>minCapacity<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//如果新容量小于最小需要的容量，则使用最小</span>\n                                                    <span class=\"token comment\">//需要的容量大小</span>\n         newCapacity<span class=\"token operator\">=</span>minCapacity <span class=\"token punctuation\">;</span>  <span class=\"token comment\">//进行扩容的数组复制</span>\n         elementData<span class=\"token operator\">=</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyof</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span>newCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，只要<code>ArrayList</code>的当前容量足够大，<code>a  dd()</code>操作的效率非常高的。只有当<code>ArrayList</code>对容量的需求超出当前数组大小时，才需要进行扩容。扩容的过程中，会进行大量的数组复制操作。而数组复制时，最终将调用<code>System.arraycopy()</code>方法，因此<code>add()</code>操作的效率还是相当高的。</p>\n<p><code>LinkedList</code> 的<code>add()</code>操作实现如下，它也将任意元素增加到队列的尾端：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">addBefore</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将元素增加到header的前面</span>\n   <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中<code>addBefore()</code>的方法实现如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">addBefore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">,</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n     <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> newEntry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>entry<span class=\"token punctuation\">,</span>entry<span class=\"token punctuation\">.</span>previous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     newEntry<span class=\"token punctuation\">.</span>provious<span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span>newEntry<span class=\"token punctuation\">;</span>\n     newEntry<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>previous<span class=\"token operator\">=</span>newEntry<span class=\"token punctuation\">;</span>\n     size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n     modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可见，<strong>LinkeList由于使用了链表的结构，因此不需要维护容量的大小。从这点上说，它比ArrayList有一定的性能优势，然而，每次的元素增加都需要新建一个Entry对象，并进行更多的赋值操作。在频繁的系统调用中，对性能会产生一定的影响。</strong></p>\n<h5 id=\"增加元素到列表任意位置\"><a href=\"#增加元素到列表任意位置\" class=\"headerlink\" title=\"增加元素到列表任意位置\"></a>增加元素到列表任意位置</h5><p>除了提供元素到List的尾端，List接口还提供了在任意位置插入元素的方法：<code>void add(int index,E element);</code></p>\n<p><strong>由于实现的不同，ArrayList和LinkedList在这个方法上存在一定的性能差异，由于ArrayList是基于数组实现的，而数组是一块连续的内存空间，如果在数组的任意位置插入元素，必然导致在该位置后的所有元素需要重新排列，因此，其效率相对会比较低。</strong></p>\n<p>以下代码是ArrayList中的实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span><span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">></span>size<span class=\"token operator\">||</span>index<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"Index:\"</span><span class=\"token operator\">+</span>index<span class=\"token operator\">+</span><span class=\"token string\">\",size: \"</span><span class=\"token operator\">+</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>elementData<span class=\"token punctuation\">,</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>size<span class=\"token operator\">-</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         elementData<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n         size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到每次插入操作，都会进行一次数组复制。而这个操作在增加元素到List尾端的时候是不存在的，大量的数组重组操作会导致系统性能低下。并且插入元素在List中的位置越是靠前，数组重组的开销也越大。</p>\n<p>而LinkedList此时显示了优势：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span><span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">addBefore</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">==</span>size<span class=\"token operator\">?</span>header<span class=\"token operator\">:</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>可见，<strong>对LinkedList来说，在List的尾端插入数据与在任意位置插入数据是一样的，不会因为插入的位置靠前而导致插入的方法性能降低。</strong></p>\n<h5 id=\"删除任意位置元素\"><a href=\"#删除任意位置元素\" class=\"headerlink\" title=\"删除任意位置元素\"></a>删除任意位置元素</h5><p>对于元素的删除，List接口提供了在任意位置删除元素的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>对ArrayList来说，remove()方法和add()方法是雷同的。在任意位置移除元素后，都要进行数组的重组。ArrayList的实现如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">RangeCheck</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">E</span> oldValue<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> elementData<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> numMoved<span class=\"token operator\">=</span>size<span class=\"token operator\">-</span>index<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>numMoved<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>elementData<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>numMoved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     elementData<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，<strong>在ArrayList的每一次有效的元素删除操作后，都要进行数组的重组。并且删除的位置越靠前，数组重组时的开销越大。</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> index<span class=\"token operator\">>=</span>size<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index:\"</span><span class=\"token operator\">+</span>index<span class=\"token operator\">+</span><span class=\"token string\">\",size:\"</span><span class=\"token operator\">+</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> e<span class=\"token operator\">=</span> header<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//要删除的元素位于前半段</span>\n         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n             e<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">></span>index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n             e<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>previous<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在LinkedList的实现中，首先要通过循环找到要删除的元素。如果要删除的位置处于List的前半段，则从前往后找；若其位置处于后半段，则从后往前找。因此无论要删除较为靠前或者靠后的元素都是非常高效的；但要移除List中间的元素却几乎要遍历完半个List，在List拥有大量元素的情况下，效率很低。</p>\n<h5 id=\"容量参数\"><a href=\"#容量参数\" class=\"headerlink\" title=\"容量参数\"></a>容量参数</h5><p>容量参数是ArrayList和Vector等基于数组的List的特有性能参数。它表示初始化的数组大小。当ArrayList所存储的元素数量超过其已有大小时。它便会进行扩容，数组的扩容会导致整个数组进行一次内存复制。因此合理的数组大小有助于减少数组扩容的次数，从而提高系统性能。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span>  <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayList</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>initialCapacity<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal Capacity:\"</span><span class=\"token operator\">+</span>initialCapacity<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elementData<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>initialCapacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>ArrayList提供了一个可以制定初始数组大小的构造函数：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>现以构造一个拥有100万元素的List为例，当使用默认初始化大小时，其消耗的相对时间为125ms左右，当直接制定数组大小为100万时，构造相同的ArrayList仅相对耗时16ms。</p>\n<h5 id=\"遍历列表\"><a href=\"#遍历列表\" class=\"headerlink\" title=\"遍历列表\"></a>遍历列表</h5><p>遍历列表操作是最常用的列表操作之一，在JDK1.5之后，至少有3中常用的列表遍历方式：</p>\n<blockquote>\n<ul>\n<li>forEach操作</li>\n<li>迭代器</li>\n<li>for循环。</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> start<span class=\"token operator\">=</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//ForEach </span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token operator\">:</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    tmp<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foreach spend:\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstart <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> it<span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    \n   tmp<span class=\"token operator\">=</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Iterator spend;\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstart<span class=\"token operator\">=</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> size<span class=\"token operator\">=</span><span class=\"token punctuation\">;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>                     \n    tmp<span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"for spend;\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>构造一个拥有100万数据的ArrayList和等价的LinkedList，使用以上代码进行测试，测试结果：</p>\n<p><img src=\"https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/11.png\" alt=\"图片\"></p>\n<p>可以看到，<strong>最简便的ForEach循环并没有很好的性能表现，综合性能不如普通的迭代器，而是用for循环通过随机访问遍历列表时，ArrayList表项很好，但是LinkedList的表现却无法让人接受，甚至没有办法等待程序的结束。这是因为对LinkedList进行随机访问时，总会进行一次列表的遍历操作。性能非常差，应避免使用。</strong></p>\n<h2 id=\"Java-进阶\"><a href=\"#Java-进阶\" class=\"headerlink\" title=\"Java 进阶\"></a>Java 进阶</h2><h3 id=\"你能说说-Spring-框架中-Bean-的生命周期吗？\"><a href=\"#你能说说-Spring-框架中-Bean-的生命周期吗？\" class=\"headerlink\" title=\"你能说说 Spring 框架中 Bean 的生命周期吗？\"></a>你能说说 Spring 框架中 Bean 的生命周期吗？</h3><ol>\n<li><p>实例化一个 <code>Bean</code> , 也就是我们常说的 <code>new</code>；</p>\n</li>\n<li><p>按照 <code>Spring</code> 上下文对实例化的 <code>Bean</code> 进行配置－－也就是 <code>IOC</code> 注入；</p>\n</li>\n<li><p>如果这个 <code>Bean</code> 已经实现了 <code>BeanNameAware</code> 接口，会调用它实现的 <code>setBeanName(String)</code>方法，此处传递的就是 <code>Spring</code> 配置文件中 <code>Bean</code> 的 <code>id</code> 值</p>\n</li>\n<li><p>如果这个 <code>Bean</code> 已经实现了 <code>BeanFactoryAware</code> 接口，会调用它实现的 <code>setBeanFactory(setBeanFactory(BeanFactory)</code>传递的是 Spring 工厂自身（可以用这个方式来获取其它 Bean，只需在 Spring 配置文件中配置一个普通的 Bean 就可以）；</p>\n</li>\n<li><p>如果这个 <code>Bean</code> 已经实现了 <code>ApplicationContextAware</code> 接口，会调用 <code>setApplicationContext(ApplicationContext)</code>方法，传入 Spring 上下文（同样这个方式也可以实现步骤 4 的内容，但比 4 更好，因为 <code>ApplicationContext</code> 是 <code>BeanFactory</code> 的子接口，有更多的实现方法）；</p>\n</li>\n<li><p>如果这个 <code>Bean</code> 关联了 <code>BeanPostProcessor</code> 接口，将会调用 <code>postProcessBeforeInitialization(Object obj, String s)</code>方法，<code>BeanPostProcessor</code> 经常被用作是 <code>Bean</code> 内容的更改，并且由于这个是在 <code>Bean</code> 初始化结束时调用那个的方法，也可以被应用于内存或缓存技术；</p>\n</li>\n<li><p>如果 <code>Bean</code> 在 <code>Spring</code> 配置文件中配置了 <code>init-method</code> 属性会自动调用其配置的初始化方法。</p>\n</li>\n<li><p>如果这个 <code>Bean</code> 关联了 <code>BeanPostProcessor</code> 接口，将会调用 <code>postProcessAfterInitialization(Object obj, String s)</code>方法、；</p>\n<blockquote>\n<p>注：以上工作完成以后就可以应用这个 <code>Bean</code> 了，那这个 <code>Bean</code> 是一个 <code>Singleton</code> 的，所以一般情况下我们调用同一个 <code>id</code> 的 <code>Bean</code> 会是在内容地址相同的实例，当然在 <code>Spring</code> 配置文件中也可以配置非 <code>Singleton</code>，这里我们不做赘述。</p>\n</blockquote>\n</li>\n<li><p>当 <code>Bean</code> 不再需要时，会经过清理阶段，如果 <code>Bean</code> 实现了 <code>DisposableBean</code> 这个接口，会调用那个其实现的 <code>destroy()</code>方法；</p>\n</li>\n<li><p>最后，如果这个 <code>Bean</code> 的 <code>Spring</code> 配置中配置了 <code>destroy-method</code> 属性，会自动调用其配置的销毁方法。</p>\n</li>\n</ol>\n<h3 id=\"Spring，SpringMVC，SpringBoot，SpringCloud-有什么区别和联系？\"><a href=\"#Spring，SpringMVC，SpringBoot，SpringCloud-有什么区别和联系？\" class=\"headerlink\" title=\"Spring，SpringMVC，SpringBoot，SpringCloud 有什么区别和联系？\"></a>Spring，SpringMVC，SpringBoot，SpringCloud 有什么区别和联系？</h3><h4 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h4><ul>\n<li><code>Spring</code> 是一个轻量级的控制反转(<code>IoC</code>)和面向切面(<code>AOP</code>)的容器框架。Spring 使你能够编写更干净、更可管理、并且更易于测试的代码。</li>\n<li><code>Spring MVC</code> 是 Spring 的一个模块，一个 web 框架。通过 <code>Dispatcher Servlet</code>, <code>ModelAndView</code> 和 <code>View Resolver</code>，开发 web 应用变得很容易。主要针对的是网站应用程序或者服务开发——<code>URL 路由</code>、<code>Session</code>、<code>模板引擎</code>、<code>静态 Web 资源</code>等等。</li>\n<li><code>Spring</code> 配置复杂，繁琐，所以推出了 <code>Spring boot</code>，约定优于配置，简化了 spring 的配置流程。</li>\n<li><code>Spring Cloud</code> 构建于 <code>Spring Boot</code> 之上，是一个关注全局的服务治理框架。</li>\n</ul>\n<h4 id=\"Spring-VS-SpringMVC\"><a href=\"#Spring-VS-SpringMVC\" class=\"headerlink\" title=\"Spring VS SpringMVC\"></a>Spring VS SpringMVC</h4><ul>\n<li><code>Spring</code> 是一个一站式的轻量级的 java 开发框架，核心是<code>控制反转（IOC）</code>和<code>面向切面（AOP）</code>，针对于开发的 WEB 层 (<code>springMvc</code>)、业务层(<code>Ioc</code>)、持久层(<code>jdbcTemplate</code>)等都提供了多种配置解决方案；</li>\n<li><code>SpringMVC</code> 是 <code>Spring</code> 基础之上的一个 <code>MVC</code> 框架，主要处理 <code>web</code> 开发的路径映射和视图渲染，属于 <code>Spring</code> 框架中 <code>WEB</code> 层开发的一部分；</li>\n</ul>\n<h4 id=\"SpringMVC-VS-SpringBoot\"><a href=\"#SpringMVC-VS-SpringBoot\" class=\"headerlink\" title=\"SpringMVC VS SpringBoot\"></a>SpringMVC VS SpringBoot</h4><ul>\n<li><code>SpringMVC</code>属于一个企业 WEB 开发的 MVC 框架，涵盖面包括前端<strong>视图开发</strong>、<strong>文件配置</strong>、<strong>后台接口逻辑开发</strong>等，XML、config 等配置相对比较繁琐复杂；</li>\n<li><code>SpringBoot</code>框架相对于 SpringMVC 框架来说，更<strong>专注于开发微服务后台接口</strong>，不开发前端视图；</li>\n</ul>\n<h4 id=\"SpringBoot-VS-SpringCloud\"><a href=\"#SpringBoot-VS-SpringCloud\" class=\"headerlink\" title=\"SpringBoot VS SpringCloud\"></a>SpringBoot VS SpringCloud</h4><ul>\n<li><code>SpringBoot</code> 使用了<strong>默认大于配置</strong>的理念，集成了快速开发的 <code>Spring</code> 多个插件，同时<strong>自动过滤不需要配置的多余的插件</strong>，<strong>简化了项目的开发配置流程</strong>，一定程度上<strong>取消 xml 配置</strong>，是一套<strong>快速配置开发的脚手架</strong>，能快速开发<strong>单个微服务</strong>；</li>\n<li><code>SpringCloud</code> 大部分的功能插件都是基于 <code>SpringBoot</code> 去实现的，<code>SpringCloud</code> 关注于<strong>全局的微服务整合和管理</strong>，将多个 <code>SpringBoot</code> 单体微服务进行整合以及管理；<code>SpringCloud</code> 依赖于 <code>SpringBoot</code> 开发，而 - <code>SpringBoot</code> 可以独立开发；</li>\n</ul>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>Spring 是核心，提供了基础功能；</li>\n<li>Spring MVC 是基于 Spring 的一个 MVC 框架 ；</li>\n<li>Spring Boot 是为简化 Spring 配置的快速开发整合包；</li>\n<li>Spring Cloud 是构建在 Spring Boot 之上的服务治理框架。</li>\n</ul>\n<h3 id=\"如何保证消息的顺序性？\"><a href=\"#如何保证消息的顺序性？\" class=\"headerlink\" title=\"如何保证消息的顺序性？\"></a>如何保证消息的顺序性？</h3><h4 id=\"面试官心理分析\"><a href=\"#面试官心理分析\" class=\"headerlink\" title=\"面试官心理分析\"></a>面试官心理分析</h4><p>其实这个也是用 MQ 的时候必问的话题，第一看看你了不了解顺序这个事儿？第二看看你有没有办法保证消息是有顺序的？这是生产系统中常见的问题。</p>\n<h4 id=\"面试题剖析\"><a href=\"#面试题剖析\" class=\"headerlink\" title=\"面试题剖析\"></a>面试题剖析</h4><p>我举个例子，我们以前做过一个 mysql <code>binlog</code> 同步的系统，压力还是非常大的，日同步数据要达到上亿，就是说数据从一个 mysql 库原封不动地同步到另一个 mysql 库里面去（mysql -&gt; mysql）。常见的一点在于说比如大数据 team，就需要同步一个 mysql 库过来，对公司的业务系统的数据做各种复杂的操作。</p>\n<p>你在 mysql 里增删改一条数据，对应出来了增删改 3 条 <code>binlog</code> 日志，接着这三条 <code>binlog</code> 发送到 MQ 里面，再消费出来依次执行，起码得保证人家是按照顺序来的吧？不然本来是：增加、修改、删除；你楞是换了顺序给执行成删除、修改、增加，不全错了么。</p>\n<p>本来这个数据同步过来，应该最后这个数据被删除了；结果你搞错了这个顺序，最后这个数据保留下来了，数据同步就出错了。</p>\n<p>先看看顺序会错乱的俩场景：</p>\n<ul>\n<li><strong>RabbitMQ</strong>：一个 queue，多个 consumer。比如，生产者向 RabbitMQ 里发送了三条数据，顺序依次是 data1&#x2F;data2&#x2F;data3，压入的是 RabbitMQ 的一个内存队列。有三个消费者分别从 MQ 中消费这三条数据中的一条，结果消费者 2 先执行完操作，把 data2 存入数据库，然后是 data1&#x2F;data3。这不明显乱了。</li>\n</ul>\n<p><img src=\"/img/posts/java/interview/1.png\" alt=\"图片\"></p>\n<ul>\n<li><p><strong>Kafka</strong>：比如说我们建了一个 topic，有三个 partition。生产者在写的时候，其实可以指定一个 key，比如说我们指定了某个订单 id 作为 key，那么这个订单相关的数据，一定会被分发到同一个 partition 中去，而且这个 partition 中的数据一定是有顺序的。</p>\n<p>消费者从 partition 中取出来数据的时候，也一定是有顺序的。到这里，顺序还是 ok 的，没有错乱。接着，我们在消费者里可能会搞<strong>多个线程来并发处理消息</strong>。因为如果消费者是单线程消费处理，而处理比较耗时的话，比如处理一条消息耗时几十 ms，那么 1 秒钟只能处理几十条消息，这吞吐量太低了。而多个线程并发跑的话，顺序可能就乱掉了。</p>\n</li>\n</ul>\n<p><img src=\"/img/posts/java/interview/2.png\" alt=\"图片\"></p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><h4 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h4><p>拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点；或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。</p>\n<p><img src=\"/img/posts/java/interview/3.png\" alt=\"图片\"></p>\n<h4 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><ul>\n<li>一个 topic，一个 partition，一个 consumer，内部单线程消费，单线程吞吐量太低，一般不会用这个。</li>\n<li>写 N 个内存 queue，具有相同 key 的数据都到同一个内存 queue；然后对于 N 个线程，每个线程分别消费一个内存 queue 即可，这样就能保证顺序性。</li>\n</ul>\n<p><img src=\"/img/posts/java/interview/4.png\" alt=\"图片\"></p>\n<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><h3 id=\"Redis-是如何实现分布式锁的？\"><a href=\"#Redis-是如何实现分布式锁的？\" class=\"headerlink\" title=\"Redis 是如何实现分布式锁的？\"></a>Redis 是如何实现分布式锁的？</h3><p>分布式锁常见的三种实现方式：</p>\n<ol>\n<li>数据库乐观锁；</li>\n<li>基于 Redis 的分布式锁；</li>\n<li>基于 ZooKeeper 的分布式锁。</li>\n</ol>\n<p>本面试考点是，你对 Redis 使用熟悉吗？Redis 中是如何实现分布式锁的。</p>\n<h4 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h4><p>Redis 要实现分布式锁，以下条件应该得到满足</p>\n<h4 id=\"互斥性\"><a href=\"#互斥性\" class=\"headerlink\" title=\"互斥性\"></a>互斥性</h4><ul>\n<li>在任意时刻，只有一个客户端能持有锁。</li>\n</ul>\n<h4 id=\"不能死锁\"><a href=\"#不能死锁\" class=\"headerlink\" title=\"不能死锁\"></a>不能死锁</h4><ul>\n<li>客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li>\n</ul>\n<h4 id=\"容错性\"><a href=\"#容错性\" class=\"headerlink\" title=\"容错性\"></a>容错性</h4><ul>\n<li>只要大部分的 Redis 节点正常运行，客户端就可以加锁和解锁。</li>\n</ul>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>可以直接通过 <code>set key value px milliseconds nx</code> 命令实现加锁， 通过 Lua 脚本实现解锁。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token operator\">//</span>获取锁（unique_value可以是UUID等）\nSET resource_name unique_value NX PX  <span class=\"token number\">30000</span>\n\n<span class=\"token operator\">//</span>释放锁（lua脚本中，一定要比较value，防止误解锁）\n<span class=\"token keyword\">if</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span>KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">then</span>\n    <span class=\"token keyword\">return</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"del\"</span><span class=\"token punctuation\">,</span>KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h4><ul>\n<li>set 命令要用 <code>set key value px milliseconds nx</code>，替代 <code>setnx + expire</code> 需要分两次执行命令的方式，保证了原子性，</li>\n<li>value 要具有唯一性，可以使用<code>UUID.randomUUID().toString()</code>方法生成，用来标识这把锁是属于哪个请求加的，在解锁的时候就可以有依据；</li>\n<li>释放锁时要验证 value 值，防止误解锁；</li>\n<li>通过 Lua 脚本来避免 Check And Set 模型的并发问题，因为在释放锁的时候因为涉及到多个 Redis 操作 （利用了 eval 命令执行 Lua 脚本的原子性）；</li>\n</ul>\n<h4 id=\"加锁代码分析\"><a href=\"#加锁代码分析\" class=\"headerlink\" title=\"加锁代码分析\"></a>加锁代码分析</h4><p>首先，set()加入了 NX 参数，可以保证如果已有 key 存在，则函数不会调用成功，也就是只有一个客户端能持有锁，满足互斥性。其次，由于我们对锁设置了过期时间，即使锁的持有者后续发生崩溃而没有解锁，锁也会因为到了过期时间而自动解锁（即 key 被删除），不会发生死锁。最后，因为我们将 value 赋值为 requestId，用来标识这把锁是属于哪个请求加的，那么在客户端在解锁的时候就可以进行校验是否是同一个客户端。</p>\n<h4 id=\"解锁代码分析\"><a href=\"#解锁代码分析\" class=\"headerlink\" title=\"解锁代码分析\"></a>解锁代码分析</h4><p>将 Lua 代码传到 jedis.eval()方法里，并使参数 KEYS[1]赋值为 lockKey，ARGV[1]赋值为 requestId。在执行的时候，首先会获取锁对应的 value 值，检查是否与 requestId 相等，如果相等则解锁（删除 key）。</p>\n<h4 id=\"存在的风险\"><a href=\"#存在的风险\" class=\"headerlink\" title=\"存在的风险\"></a>存在的风险</h4><p>如果存储锁对应 key 的那个节点挂了的话，就可能存在丢失锁的风险，导致出现多个客户端持有锁的情况，这样就不能实现资源的独享了。</p>\n<ol>\n<li>客户端 A 从 master 获取到锁</li>\n<li>在 master 将锁同步到 slave 之前，master 宕掉了（Redis 的主从同步通常是异步的）。<br>主从切换，slave 节点被晋级为 master 节点</li>\n<li>客户端 B 取得了同一个资源被客户端 A 已经获取到的另外一个锁。导致存在同一时刻存不止一个线程获取到锁的情况。</li>\n</ol>\n<h4 id=\"redlock-算法出现\"><a href=\"#redlock-算法出现\" class=\"headerlink\" title=\"redlock 算法出现\"></a>redlock 算法出现</h4><p>这个场景是假设有一个 redis cluster，有 5 个 redis master 实例。然后执行如下步骤获取一把锁：</p>\n<ol>\n<li>获取当前时间戳，单位是毫秒；</li>\n<li>跟上面类似，轮流尝试在每个 master 节点上创建锁，过期时间较短，一般就几十毫秒；</li>\n<li>尝试在大多数节点上建立一个锁，比如 5 个节点就要求是 3 个节点 n &#x2F; 2 + 1；</li>\n<li>客户端计算建立好锁的时间，如果建立锁的时间小于超时时间，就算建立成功了；</li>\n<li>要是锁建立失败了，那么就依次之前建立过的锁删除；</li>\n<li>只要别人建立了一把分布式锁，你就得不断轮询去尝试获取锁。</li>\n</ol>\n<p><img src=\"/img/posts/java/interview/6.png\" alt=\"图片\"></p>\n<p>Redis 官方给出了以上两种基于 Redis 实现分布式锁的方法，详细说明可以查看：</p>\n<blockquote>\n<p><a href=\"https://redis.io/topics/distlock\">https://redis.io/topics/distlock</a> 。</p>\n</blockquote>\n<h4 id=\"Redisson-实现\"><a href=\"#Redisson-实现\" class=\"headerlink\" title=\"Redisson 实现\"></a>Redisson 实现</h4><p>Redisson 是一个在 Redis 的基础上实现的 Java 驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的 Java 常用对象，还实现了可重入锁（Reentrant Lock）、公平锁（Fair Lock、联锁（MultiLock）、 红锁（RedLock）、 读写锁（ReadWriteLock）等，还提供了许多分布式服务。</p>\n<p>Redisson 提供了使用 Redis 的最简单和最便捷的方法。Redisson 的宗旨是促进使用者对 Redis 的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。</p>\n<p><strong>Redisson 分布式重入锁用法</strong></p>\n<p>Redisson 支持单点模式、主从模式、哨兵模式、集群模式，这里以单点模式为例：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token operator\">//</span> <span class=\"token number\">1.</span>构造redisson实现分布式锁必要的Config\nConfig config <span class=\"token operator\">=</span> new <span class=\"token function\">Config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span><span class=\"token function\">useSingleServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis://127.0.0.1:5379\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setDatabase</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">//</span> <span class=\"token number\">2.</span>构造RedissonClient\nRedissonClient redissonClient <span class=\"token operator\">=</span> Redisson<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">//</span> <span class=\"token number\">3.</span>获取锁对象实例（无法保证是按线程的顺序获取到）\nRLock rLock <span class=\"token operator\">=</span> redissonClient<span class=\"token punctuation\">.</span><span class=\"token function\">getLock</span><span class=\"token punctuation\">(</span>lockKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n     <span class=\"token operator\">*</span> <span class=\"token number\">4.</span>尝试获取锁\n     <span class=\"token operator\">*</span> waitTimeout 尝试获取锁的最大等待时间，超过这个值，则认为获取锁失败\n     <span class=\"token operator\">*</span> leaseTime   锁的持有时间<span class=\"token punctuation\">,</span>超过这个时间锁会自动失效（值应设置为大于业务处理的时间，确保在锁有效期内业务能处理完）\n     <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\n    boolean res <span class=\"token operator\">=</span> rLock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>long<span class=\"token punctuation\">)</span>waitTimeout<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>long<span class=\"token punctuation\">)</span>leaseTime<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">//</span>成功获得锁，在这里处理业务\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    throw new <span class=\"token function\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aquire lock fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token function\">finally</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">//</span>无论如何<span class=\"token punctuation\">,</span> 最后都要解锁\n    rLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>加锁流程图</p>\n<p><img src=\"/img/posts/java/interview/7.png\" alt=\"图片\"></p>\n<p>解锁流程图</p>\n<p><img src=\"/img/posts/java/interview/8.png\" alt=\"图片\"></p>\n<p>我们可以看到，RedissonLock 是可重入的，并且考虑了失败重试，可以设置锁的最大等待时间， 在实现上也做了一些优化，减少了无效的锁申请，提升了资源的利用率。</p>\n<p>需要特别注意的是，RedissonLock 同样没有解决 节点挂掉的时候，存在丢失锁的风险的问题。而现实情况是有一些场景无法容忍的，所以 Redisson 提供了实现了 redlock 算法的 RedissonRedLock，RedissonRedLock 真正解决了单点失败的问题，代价是需要额外的为 RedissonRedLock 搭建 Redis 环境。</p>\n<p>所以，如果业务场景可以容忍这种小概率的错误，则推荐使用 RedissonLock， 如果无法容忍，则推荐使用 RedissonRedLock。</p>\n<h3 id=\"Redis-面试常见问答\"><a href=\"#Redis-面试常见问答\" class=\"headerlink\" title=\"Redis 面试常见问答\"></a>Redis 面试常见问答</h3><h4 id=\"什么是缓存雪崩？怎么解决？\"><a href=\"#什么是缓存雪崩？怎么解决？\" class=\"headerlink\" title=\"什么是缓存雪崩？怎么解决？\"></a>什么是缓存雪崩？怎么解决？</h4><p><img src=\"/img/posts/java/interview/9.png\" alt=\"图片\"></p>\n<p>通常，我们会使用缓存用于缓冲对 DB 的冲击，如果缓存宕机，所有请求将直接打在 DB，造成 DB 宕机——从而导致整个系统宕机。</p>\n<p><strong>如何解决呢？</strong></p>\n<p><img src=\"/img/posts/java/interview/10.png\" alt=\"图片\"></p>\n<p><strong>2 种策略（同时使用）：</strong></p>\n<ul>\n<li>对缓存做高可用，防止缓存宕机</li>\n<li>使用断路器，如果缓存宕机，为了防止系统全部宕机，限制部分流量进入 DB，保证部分可用，其余的请求返回断路器的默认值。</li>\n</ul>\n<h4 id=\"什么是缓存穿透？怎么解决？\"><a href=\"#什么是缓存穿透？怎么解决？\" class=\"headerlink\" title=\"什么是缓存穿透？怎么解决？\"></a>什么是缓存穿透？怎么解决？</h4><p><strong>解释 1：</strong>缓存查询一个没有的 key，同时数据库也没有，如果黑客大量的使用这种方式，那么就会导致 DB 宕机。</p>\n<p><strong>解决方案：</strong>我们可以使用一个默认值来防止，例如，当访问一个不存在的 key，然后再去访问数据库，还是没有，那么就在缓存里放一个占位符，下次来的时候，检查这个占位符，如果发生时占位符，就不去数据库查询了，防止 DB 宕机。</p>\n<p><strong>解释 2：</strong>大量请求查询一个刚刚失效的 key，导致 DB 压力倍增，可能导致宕机，但实际上，查询的都是相同的数据。</p>\n<p><strong>解决方案：</strong>可以在这些请求代码加上双重检查锁。但是那个阶段的请求会变慢。不过总比 DB 宕机好。</p>\n<h4 id=\"什么是缓存并发竞争？怎么解决？\"><a href=\"#什么是缓存并发竞争？怎么解决？\" class=\"headerlink\" title=\"什么是缓存并发竞争？怎么解决？\"></a>什么是缓存并发竞争？怎么解决？</h4><p><strong>解释：</strong>多个客户端写一个 key，如果顺序错了，数据就不对了。但是顺序我们无法控制。</p>\n<p><strong>解决方案：</strong>使用分布式锁，例如 zk，同时加入数据的时间戳。同一时刻，只有抢到锁的客户端才能写入，同时，写入时，比较当前数据的时间戳和缓存中数据的时间戳。</p>\n<p>####什么是缓存和数据库双写不一致？怎么解决？</p>\n<p>解释：连续写数据库和缓存，但是操作期间，出现并发了，数据不一致了。</p>\n<p>通常，更新缓存和数据库有以下几种顺序：</p>\n<ul>\n<li>先更新数据库，再更新缓存。</li>\n<li>先删缓存，再更新数据库。</li>\n<li>先更新数据库，再删除缓存。</li>\n</ul>\n<p><em>三种方式的优劣来看一下：</em></p>\n<h4 id=\"先更新数据库，再更新缓存\"><a href=\"#先更新数据库，再更新缓存\" class=\"headerlink\" title=\"先更新数据库，再更新缓存\"></a>先更新数据库，再更新缓存</h4><p>这么做的问题是：当有 2 个请求同时更新数据，那么如果不使用分布式锁，将无法控制最后缓存的值到底是多少。也就是并发写的时候有问题。</p>\n<h4 id=\"先删缓存，Redis-面试常见问答再更新数据库\"><a href=\"#先删缓存，Redis-面试常见问答再更新数据库\" class=\"headerlink\" title=\"先删缓存，Redis 面试常见问答再更新数据库\"></a>先删缓存，Redis 面试常见问答再更新数据库</h4><p>这么做的问题：如果在删除缓存后，有客户端读数据，将可能读到旧数据，并有可能设置到缓存中，导致缓存中的数据一直是老数据。</p>\n<p>有 2 种解决方案：</p>\n<ul>\n<li>使用“双删”，即删更删，最后一步的删除作为异步操作，就是防止有客户端读取的时候设置了旧值。</li>\n<li>使用队列，当这个 key 不存在时，将其放入队列，串行执行，必须等到更新数据库完毕才能读取数据。</li>\n</ul>\n<p>总的来讲，比较麻烦。</p>\n<h4 id=\"先更新数据库，再删除缓存\"><a href=\"#先更新数据库，再删除缓存\" class=\"headerlink\" title=\"先更新数据库，再删除缓存\"></a>先更新数据库，再删除缓存</h4><p>这个实际是常用的方案，但是有很多人不知道，这里介绍一下，这个叫 Cache Aside Pattern，老外发明的。如果先更新数据库，再删除缓存，那么就会出现更新数据库之前有瞬间数据不是很及时。</p>\n<p>同时，如果在更新之前，缓存刚好失效了，读客户端有可能读到旧值，然后在写客户端删除结束后再次设置了旧值，非常巧合的情况。</p>\n<p>有 2 个前提条件：</p>\n<ul>\n<li>缓存在写之前的时候失效，同时，在写客户度删除操作结束后，放置旧数据 —— 也就是读比写慢。</li>\n<li>设置有的写操作还会锁表</li>\n</ul>\n<p>所以，这个很难出现，但是如果出现了怎么办？使用双删！！！记录更新期间有没有客户端读数据库，如果有，在更新完数据库之后，执行延迟删除。<br>还有一种可能，如果执行更新数据库，准备执行删除缓存时，服务挂了，执行删除失败怎么办？？？<br>这就坑了！！！不过可以通过订阅数据库的 binlog 来删除。</p>\n<h3 id=\"谈谈-Redis-的过期策略\"><a href=\"#谈谈-Redis-的过期策略\" class=\"headerlink\" title=\"谈谈 Redis 的过期策略\"></a>谈谈 Redis 的过期策略</h3><p>在日常开发中，我们使用 Redis 存储 key 时通常会设置一个过期时间，但是 Redis 是怎么删除过期的 key，而且 Redis 是单线程的，删除 key 会不会造成阻塞。要搞清楚这些，就要了解 Redis 的过期策略和内存淘汰机制。</p>\n<p><strong>Redis 采用的是定期删除 + 懒惰删除策略。</strong></p>\n<h4 id=\"定期删除策略\"><a href=\"#定期删除策略\" class=\"headerlink\" title=\"定期删除策略\"></a>定期删除策略</h4><p>Redis 会将每个设置了过期时间的 key 放入到一个独立的字典中，默认每 100ms 进行一次过期扫描：</p>\n<ol>\n<li>随机抽取 20 个 key</li>\n<li>删除这 20 个 key 中过期的 key</li>\n<li>如果过期的 key 比例超过 1&#x2F;4，就重复步骤 1，继续删除。</li>\n</ol>\n<p><strong>为什不扫描所有的 key？</strong></p>\n<p>Redis 是单线程，全部扫描岂不是卡死了。而且为了防止每次扫描过期的 key 比例都超过 1&#x2F;4，导致不停循环卡死线程，Redis 为每次扫描添加了上限时间，默认是 25ms。</p>\n<p>如果客户端将超时时间设置的比较短，比如 10ms，那么就会出现大量的链接因为超时而关闭，业务端就会出现很多异常。而且这时你还无法从 Redis 的 slowlog 中看到慢查询记录，因为慢查询指的是逻辑处理过程慢，不包含等待时间。</p>\n<p>如果在同一时间出现大面积 key 过期，Redis 循环多次扫描过期词典，直到过期的 key 比例小于 1&#x2F;4。这会导致卡顿，而且在高并发的情况下，可能会导致缓存雪崩。</p>\n<p><strong>为什么 Redis 为每次扫描添的上限时间是 25ms，还会出现上面的情况？</strong></p>\n<p>因为 Redis 是单线程，每个请求处理都需要排队，而且由于 Redis 每次扫描都是 25ms，也就是每个请求最多 25ms，100 个请求就是 2500ms。</p>\n<p>如果有大批量的 key 过期，要给过期时间设置一个随机范围，而不宜全部在同一时间过期，分散过期处理的压力。</p>\n<h4 id=\"从库的过期策略\"><a href=\"#从库的过期策略\" class=\"headerlink\" title=\"从库的过期策略\"></a>从库的过期策略</h4><p>从库不会进行过期扫描，从库对过期的处理是被动的。主库在 key 到期时，会在 AOF 文件里增加一条 del 指令，同步到所有的从库，从库通过执行这条 del 指令来删除过期的 key。</p>\n<p>因为指令同步是异步进行的，所以主库过期的 key 的 del 指令没有及时同步到从库的话，会出现主从数据的不一致，主库没有的数据在从库里还存在。</p>\n<h4 id=\"懒惰删除策略\"><a href=\"#懒惰删除策略\" class=\"headerlink\" title=\"懒惰删除策略\"></a>懒惰删除策略</h4><p><strong>Redis 为什么要懒惰删除(lazy free)？</strong></p>\n<p>删除指令 del 会直接释放对象的内存，大部分情况下，这个指令非常快，没有明显延迟。不过如果删除的 key 是一个非常大的对象，比如一个包含了千万元素的 hash，又或者在使用 FLUSHDB 和 FLUSHALL 删除包含大量键的数据库时，那么删除操作就会导致单线程卡顿。</p>\n<p>redis 4.0 引入了 lazyfree 的机制，它可以将删除键或数据库的操作放在后台线程里执行， 从而尽可能地避免服务器阻塞。</p>\n<h4 id=\"unlink\"><a href=\"#unlink\" class=\"headerlink\" title=\"unlink\"></a>unlink</h4><p>unlink 指令，它能对删除操作进行懒处理，丢给后台线程来异步回收内存。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> unlink key\nOK<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"flush\"><a href=\"#flush\" class=\"headerlink\" title=\"flush\"></a>flush</h4><p>flushdb 和 flushall 指令，用来清空数据库，这也是极其缓慢的操作。Redis 4.0 同样给这两个指令也带来了异步化，在指令后面增加 async 参数就可以将整棵大树连根拔起，扔给后台线程慢慢焚烧。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> flushall async\nOK<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"异步队列\"><a href=\"#异步队列\" class=\"headerlink\" title=\"异步队列\"></a>异步队列</h4><p>主线程将对象的引用从「大树」中摘除后，会将这个 key 的内存回收操作包装成一个任务，塞进异步任务队列，后台线程会从这个异步队列中取任务。任务队列被主线程和异步线程同时操作，所以必须是一个线程安全的队列。</p>\n<p>不是所有的 unlink 操作都会延后处理，如果对应 key 所占用的内存很小，延后处理就没有必要了，这时候 Redis 会将对应的 key 内存立即回收，跟 del 指令一样。</p>\n<h4 id=\"更多异步删除点\"><a href=\"#更多异步删除点\" class=\"headerlink\" title=\"更多异步删除点\"></a>更多异步删除点</h4><p>Redis 回收内存除了 del 指令和 flush 之外，还会存在于在 key 的过期、LRU 淘汰、rename 指令以及从库全量同步时接受完 rdb 文件后会立即进行的 flush 操作。</p>\n<p>Redis4.0 为这些删除点也带来了异步删除机制，打开这些点需要额外的配置选项。</p>\n<ul>\n<li>slave-lazy-flush 从库接受完 rdb 文件后的 flush 操作</li>\n<li>lazyfree-lazy-eviction 内存达到 maxmemory 时进行淘汰</li>\n<li>lazyfree-lazy-expire key 过期删除</li>\n<li>lazyfree-lazy-server-del rename 指令删除 destKey</li>\n</ul>\n<h4 id=\"内存淘汰机制\"><a href=\"#内存淘汰机制\" class=\"headerlink\" title=\"内存淘汰机制\"></a>内存淘汰机制</h4><p>Redis 的内存占用会越来越高。Redis 为了限制最大使用内存，提供了 redis.conf 中的<br>配置参数 maxmemory。当内存超出 maxmemory，<strong>Redis 提供了几种内存淘汰机制让用户选择，配置 maxmemory-policy：</strong></p>\n<ul>\n<li><strong>noeviction：</strong>当内存超出 maxmemory，写入请求会报错，但是删除和读请求可以继续。（使用这个策略，疯了吧）</li>\n<li><strong>allkeys-lru：</strong>当内存超出 maxmemory，在所有的 key 中，移除最少使用的 key。只把 Redis 既当缓存是使用这种策略。（推荐）。</li>\n<li><strong>allkeys-random：</strong>当内存超出 maxmemory，在所有的 key 中，随机移除某个 key。（应该没人用吧）</li>\n<li><strong>volatile-lru：</strong>当内存超出 maxmemory，在设置了过期时间 key 的字典中，移除最少使用的 key。把 Redis 既当缓存，又做持久化的时候使用这种策略。</li>\n<li><strong>volatile-random：</strong>当内存超出 maxmemory，在设置了过期时间 key 的字典中，随机移除某个 key。</li>\n<li><strong>volatile-ttl：</strong>当内存超出 maxmemory，在设置了过期时间 key 的字典中，优先移除 ttl 小的。</li>\n</ul>\n<h4 id=\"LRU-算法\"><a href=\"#LRU-算法\" class=\"headerlink\" title=\"LRU 算法\"></a>LRU 算法</h4><p>实现 LRU 算法除了需要 key&#x2F;value 字典外，还需要附加一个链表，链表中的元素按照一定的顺序进行排列。当空间满的时候，会踢掉链表尾部的元素。当字典的某个元素被访问时，它在链表中的位置会被移动到表头。所以链表的元素排列顺序就是元素最近被访问的时间顺序。</p>\n<p>使用 Python 的 OrderedDict(双向链表 + 字典) 来实现一个简单的 LRU 算法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> OrderedDict\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LRUDict</span><span class=\"token punctuation\">(</span>OrderedDict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> capacity\n        self<span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__setitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        old_value <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> old_value <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>capacity<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>popitem<span class=\"token punctuation\">(</span>last<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        value <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n        <span class=\"token keyword\">return</span> value\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span>\n\n\nd <span class=\"token operator\">=</span> LRUDict<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n<span class=\"token keyword\">print</span> d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"近似-LRU-算法\"><a href=\"#近似-LRU-算法\" class=\"headerlink\" title=\"近似 LRU 算法\"></a>近似 LRU 算法</h4><p>Redis 使用的并不是完全 LRU 算法。不使用 LRU 算法，是为了节省内存，Redis 采用的是随机 LRU 算法，Redis 为每一个 key 增加了一个 24 bit 的字段，用来记录这个 key 最后一次被访问的时间戳。</p>\n<p>注意 Redis 的 LRU 淘汰策略是懒惰处理，也就是不会主动执行淘汰策略，当 Redis 执行写操作时，发现内存超出 maxmemory，就会执行 LRU 淘汰算法。这个算法就是随机采样出 5(默认值)个 key，然后移除最旧的 key，如果移除后内存还是超出 maxmemory，那就继续随机采样淘汰，直到内存低于 maxmemory 为止。</p>\n<p>如何采样就是看 maxmemory-policy 的配置，如果是 allkeys 就是从所有的 key 字典中随机，如果是 volatile 就从带过期时间的 key 字典中随机。每次采样多少个 key 看的是 maxmemory_samples 的配置，默认为 5。</p>\n<h4 id=\"LFU\"><a href=\"#LFU\" class=\"headerlink\" title=\"LFU\"></a>LFU</h4><p>Redis 4.0 里引入了一个新的淘汰策略 —— LFU（Least Frequently Used） 模式，作者认为它比 LRU 更加优秀。</p>\n<p>LFU 表示按最近的访问频率进行淘汰，它比 LRU 更加精准地表示了一个 key 被访问的热度。</p>\n<p>如果一个 key 长时间不被访问，只是刚刚偶然被用户访问了一下，那么在使用 LRU 算法下它是不容易被淘汰的，因为 LRU 算法认为当前这个 key 是很热的。而 LFU 是需要追踪最近一段时间的访问频率，如果某个 key 只是偶然被访问一次是不足以变得很热的，它需要在近期一段时间内被访问很多次才有机会被认为很热。</p>\n<p><strong>Redis 对象的热度</strong></p>\n<p>Redis 的所有对象结构头中都有一个 24bit 的字段，这个字段用来记录对象的热度。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token operator\">//</span> redis 的对象头\ntypedef struct <span class=\"token function\">redisObject</span> <span class=\"token punctuation\">&#123;</span>\n    unsigned type<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> 对象类型如 zset<span class=\"token operator\">/</span>set<span class=\"token operator\">/</span>hash 等等\n    unsigned encoding<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> 对象编码如 ziplist<span class=\"token operator\">/</span>intset<span class=\"token operator\">/</span>skiplist 等等\n    unsigned lru<span class=\"token punctuation\">:</span><span class=\"token number\">24</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> 对象的「热度」\n    int refcount<span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> 引用计数\n    void <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> 对象的 body\n<span class=\"token punctuation\">&#125;</span> robj<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>LRU 模式</strong></p>\n<p>在 LRU 模式下，lru 字段存储的是 Redis 时钟 server.lruclock，Redis 时钟是一个 24bit 的整数，默认是 Unix 时间戳对 2^24 取模的结果，大约 97 天清零一次。当某个 key 被访问一次，它的对象头的 lru 字段值就会被更新为 server.lruclock。</p>\n<p><strong>LFU 模式</strong></p>\n<p>在 LFU 模式下，lru 字段 24 个 bit 用来存储两个值，分别是 ldt(last decrement time) 和 logc(logistic counter)。</p>\n<p>logc 是 8 个 bit，用来存储访问频次，因为 8 个 bit 能表示的最大整数值为 255，存储频次肯定远远不够，所以这 8 个 bit 存储的是频次的对数值，并且这个值还会随时间衰减。如果它的值比较小，那么就很容易被回收。为了确保新创建的对象不被回收，新对象的这 8 个 bit 会初始化为一个大于零的值，默认是 LFU_INIT_VAL&#x3D;5。</p>\n<p>ldt 是 16 个位，用来存储上一次 logc 的更新时间，因为只有 16 位，所以精度不可能很高。它取的是分钟时间戳对 2^16 进行取模，大约每隔 45 天就会折返。</p>\n<p>同 LRU 模式一样，我们也可以使用这个逻辑计算出对象的空闲时间，只不过精度是分钟级别的。图中的 server.unixtime 是当前 redis 记录的系统时间戳，和 server.lruclock 一样，它也是每毫秒更新一次。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric3.png","cover_type":"img","excerpt":"","more":"<h2 id=\"Java-基础\"><a href=\"#Java-基础\" class=\"headerlink\" title=\"Java 基础\"></a>Java 基础</h2><h3 id=\"为什么-HashMap-是线程不安全的？\"><a href=\"#为什么-HashMap-是线程不安全的？\" class=\"headerlink\" title=\"为什么 HashMap 是线程不安全的？\"></a>为什么 HashMap 是线程不安全的？</h3><p>在 jdk1.8 中，在多线程环境下，会发生数据覆盖的情况。</p>\n<h4 id=\"jdk1-8-中-HashMap\"><a href=\"#jdk1-8-中-HashMap\" class=\"headerlink\" title=\"jdk1.8 中 HashMap\"></a>jdk1.8 中 HashMap</h4><p>在 jdk1.8 中对 HashMap 进行了优化，在发生 hash 碰撞，不再采用头插法方式，而是直接插入链表尾部，因此不会出现环形链表的情况，但是在多线程的情况下仍然不安全，这里我们看 jdk1.8 中 HashMap 的 put 操作源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">V</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">boolean</span> evict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果没有hash碰撞则直接插入元素</span>\n            tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span> <span class=\"token class-name\">K</span> k<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span>\n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span>\n                e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putTreeVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> binCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>binCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">>=</span> <span class=\"token constant\">TREEIFY_THRESHOLD</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1 for 1st</span>\n                            <span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// existing mapping for key</span>\n                <span class=\"token class-name\">V</span> oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent <span class=\"token operator\">||</span> oldValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">afterNodeAccess</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>size <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">afterNodeInsertion</span><span class=\"token punctuation\">(</span>evict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这是 jdk1.8 中 HashMap 中 put 操作的主函数， 注意第 6 行代码，如果没有 hash 碰撞则会直接插入元素。如果线程 A 和线程 B 同时进行 put 操作，刚好这两条不同的数据 hash 值一样，并且该位置数据为 null，所以这线程 A、B 都会进入第 6 行代码中。</p>\n<p>假设一种情况，线程 A 进入后还未进行数据插入时挂起，而线程 B 正常执行，从而正常插入数据，然后线程 A 获取 CPU 时间片，此时线程 A 不用再进行 hash 判断了，问题出现：线程 A 会把线程 B 插入的数据给覆盖，发生线程不安全。</p>\n<h3 id=\"单例模式一共有几种写法？\"><a href=\"#单例模式一共有几种写法？\" class=\"headerlink\" title=\"单例模式一共有几种写法？\"></a>单例模式一共有几种写法？</h3><p>大体可分为 4 类，下面分别介绍他们的基本形式、变种及特点。</p>\n<h4 id=\"饱汉模式\"><a href=\"#饱汉模式\" class=\"headerlink\" title=\"饱汉模式\"></a>饱汉模式</h4><p>饱汉是变种最多的单例模式。我们从饱汉出发，通过其变种逐渐了解实现单例模式时需要关注的问题。</p>\n<h5 id=\"基础的饱汉\"><a href=\"#基础的饱汉\" class=\"headerlink\" title=\"基础的饱汉\"></a>基础的饱汉</h5><p>饱汉，即已经吃饱，不着急再吃，饿的时候再吃。所以他就先不初始化单例，等第一次使用的时候再初始化，即“懒加载”。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 饱汉</span>\n<span class=\"token comment\">// UnThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton1</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1</span> singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>饱汉模式的核心就是懒加载。好处是更启动速度快、节省资源，一直到实例被第一次访问，才需要初始化单例；小坏处是写起来麻烦，大坏处是线程不安全，if 语句存在竞态条件。</p>\n<p>写起来麻烦不是大问题，可读性好啊。因此，单线程环境下，基础饱汉是笔者最喜欢的写法。但多线程环境下，基础饱汉就彻底不可用了。下面的几种变种都在试图解决基础饱汉线程不安全的问题。</p>\n<h5 id=\"饱汉-变种-1\"><a href=\"#饱汉-变种-1\" class=\"headerlink\" title=\"饱汉 - 变种 1\"></a>饱汉 - 变种 1</h5><p>最粗暴的犯法是用 synchronized 关键字修饰 getInstance()方法，这样能达到绝对的线程安全。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 饱汉</span>\n<span class=\"token comment\">// ThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton1_1</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1_1</span> singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton1_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1_1</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton1_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>变种 1 的好处是写起来简单，且绝对线程安全；坏处是并发性能极差，事实上完全退化到了串行。单例只需要初始化一次，但就算初始化以后，synchronized 的锁也无法避开，从而 getInstance()完全变成了串行操作。性能不敏感的场景建议使用。</p>\n<h5 id=\"饱汉-变种-2\"><a href=\"#饱汉-变种-2\" class=\"headerlink\" title=\"饱汉 - 变种 2\"></a>饱汉 - 变种 2</h5><p>变种 2 是“臭名昭著”的 DCL 1.0。</p>\n<p>针对变种 1 中单例初始化后锁仍然无法避开的问题，变种 2 在变种 1 的外层又套了一层 check，加上 synchronized 内层的 check，即所谓“双重检查锁”（Double Check Lock，简称 DCL）。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 饱汉</span>\n<span class=\"token comment\">// UnThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton1_2</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1_2</span> singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 触发部分初始化问题</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> f2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton1_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1_2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// may get half object</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Singleton1_2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton1_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>变种 2 的核心是 DCL，看起来变种 2 似乎已经达到了理想的效果：懒加载+线程安全。可惜的是，正如注释中所说，DCL 仍然是线程不安全的，由于指令重排序，你可能会得到“半个对象”，即”部分初始化“问题。详细在看完变种 3 后，可参考下面这篇文章，这里不再赘述。</p>\n<blockquote>\n<p><a href=\"https://monkeysayhi.github.io/2016/11/29/volatile%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8%E3%80%81%E5%8E%9F%E7%90%86/\">https://monkeysayhi.github.io/2016/11/29/volatile关键字的作用、原理/</a></p>\n</blockquote>\n<h5 id=\"饱汉-变种-3\"><a href=\"#饱汉-变种-3\" class=\"headerlink\" title=\"饱汉 - 变种 3\"></a>饱汉 - 变种 3</h5><p>变种 3 专门针对变种 2，可谓 DCL 2.0。</p>\n<p>针对变种 3 的“半个对象”问题，变种 3 在 instance 上增加了 volatile 关键字，原理见上述参考。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 饱汉</span>\n<span class=\"token comment\">// ThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton1_3</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Singleton1_3</span> singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 触发部分初始化问题</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> f2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton1_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1_3</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Singleton1_3</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// must be a complete instance</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton1_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>多线程环境下，变种 3 更适用于性能敏感的场景。但后面我们将了解到，就算是线程安全的，还有一些办法能破坏单例。</p>\n<p>当然，还有很多方式，能通过与 volatile 类似的方式防止部分初始化。读者可自行阅读内存屏障相关内容，但面试时不建议主动装逼。</p>\n<h4 id=\"饿汉模式\"><a href=\"#饿汉模式\" class=\"headerlink\" title=\"饿汉模式\"></a>饿汉模式</h4><p>与饱汉相对，饿汉很饿，只想着尽早吃到。所以他就在最早的时机，即类加载时初始化单例，以后访问时直接返回即可。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 饿汉</span>\n<span class=\"token comment\">// ThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton2</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Singleton2</span> singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>饿汉的好处是天生的线程安全（得益于类加载机制），写起来超级简单，使用时没有延迟；坏处是有可能造成资源浪费（如果类加载后就一直不使用单例的话）。</p>\n<blockquote>\n<p>值得注意的时，单线程环境下，饿汉与饱汉在性能上没什么差别；但多线程环境下，由于饱汉需要加锁，饿汉的性能反而更优。</p>\n</blockquote>\n<h4 id=\"Holder-模式\"><a href=\"#Holder-模式\" class=\"headerlink\" title=\"Holder 模式\"></a>Holder 模式</h4><p>我们既希望利用饿汉模式中静态变量的方便和线程安全；又希望通过懒加载规避资源浪费。Holder 模式满足了这两点要求：核心仍然是静态变量，足够方便和线程安全；通过静态的 Holder 类持有真正实例，间接实现了懒加载。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// Holder模式</span>\n<span class=\"token comment\">// ThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton3</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonHolder</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Singleton3</span> singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonHolder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">/**\n  * 勘误：多写了个synchronized。。\n  public synchronized static Singleton3 getInstance() &#123;\n    return SingletonHolder.singleton;\n  &#125;\n  */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton3</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">SingletonHolder</span><span class=\"token punctuation\">.</span>singleton<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>相对于饿汉模式，Holder 模式仅增加了一个静态内部类的成本，与饱汉的变种 3 效果相当（略优），都是比较受欢迎的实现方式。同样建议考虑。</p>\n<h4 id=\"枚举模式\"><a href=\"#枚举模式\" class=\"headerlink\" title=\"枚举模式\"></a>枚举模式</h4><p>用枚举实现单例模式，相当好用，但可读性是不存在的。</p>\n<h5 id=\"基础的枚举\"><a href=\"#基础的枚举\" class=\"headerlink\" title=\"基础的枚举\"></a>基础的枚举</h5><p>将枚举的静态成员变量作为单例的实例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 枚举</span>\n<span class=\"token comment\">// ThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Singleton4</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token constant\">SINGLETON</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>代码量比饿汉模式更少。但用户只能直接访问实例 Singleton4.SINGLETON——事实上，这样的访问方式作为单例使用也是恰当的，只是牺牲了静态工厂方法的优点，如无法实现懒加载。</p>\n<h5 id=\"丑陋但好用的语法糖\"><a href=\"#丑陋但好用的语法糖\" class=\"headerlink\" title=\"丑陋但好用的语法糖\"></a>丑陋但好用的语法糖</h5><p>Java 的枚举是一个“丑陋但好用的语法糖”。</p>\n<h5 id=\"枚举型单例模式的本质\"><a href=\"#枚举型单例模式的本质\" class=\"headerlink\" title=\"枚举型单例模式的本质\"></a>枚举型单例模式的本质</h5><p>通过反编译打开语法糖，就看到了枚举类型的本质，简化如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 枚举</span>\n<span class=\"token comment\">// ThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton4</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Singleton4</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Singleton4</span> <span class=\"token constant\">SINGLETON</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>本质上和饿汉模式相同，区别仅在于公有的静态成员变量。</p>\n<h5 id=\"用枚举实现一些-trick\"><a href=\"#用枚举实现一些-trick\" class=\"headerlink\" title=\"用枚举实现一些 trick\"></a>用枚举实现一些 trick</h5><blockquote>\n<p>这一部分与单例没什么关系，可以跳过。如果选择阅读也请认清这样的事实：虽然枚举相当灵活，但如何恰当的使用枚举有一定难度。一个足够简单的典型例子是 TimeUnit 类，建议有时间耐心阅读。</p>\n</blockquote>\n<p>上面已经看到，枚举型单例的本质仍然是一个普通的类。实际上，我们可以在枚举型型单例上增加任何普通类可以完成的功能。要点在于枚举实例的初始化，可以理解为实例化了一个匿名内部类。为了更明显，我们在 Singleton4_1 中定义一个普通的私有成员变量，一个普通的公有成员方法，和一个公有的抽象成员方法，如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 枚举</span>\n<span class=\"token comment\">// ThreadSafe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Singleton4_1</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">SINGLETON</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enum is the easiest singleton pattern, but not the most readable\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAbsMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enum is ugly, but so flexible to make lots of trick\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> comment <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Singleton4_1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> comment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>comment <span class=\"token operator\">=</span> comment<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comment=\"</span> <span class=\"token operator\">+</span> comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAbsMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton4_1</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">SINGLETON</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样，枚举类 Singleton4_1 中的每一个枚举实例不仅继承了父类 Singleton4_1 的成员方法 print()，还必须实现父类 Singleton4_1 的抽象成员方法 testAbsMethod()。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>上面的分析都忽略了反射和序列化的问题。通过反射或序列化，我们仍然能够访问到私有构造器，创建新的实例破坏单例模式。此时，只有枚举模式能天然防范这一问题。反射和序列化笔者还不太了解，但基本原理并不难，可以在其他模式上手动实现。</p>\n<p>下面继续忽略反射和序列化的问题，做个总结回味一下：</p>\n<p><img src=\"/img/posts/java/interview/5.png\" alt=\"图片\"></p>\n<h3 id=\"你能说说进程与线程的区别吗\"><a href=\"#你能说说进程与线程的区别吗\" class=\"headerlink\" title=\"你能说说进程与线程的区别吗\"></a>你能说说进程与线程的区别吗</h3><h4 id=\"两者的定义\"><a href=\"#两者的定义\" class=\"headerlink\" title=\"两者的定义\"></a>两者的定义</h4><p>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。</p>\n<p>线程是进程的一个实体，是 CPU 调度和分派的基本单位，它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈)，但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p>\n<h4 id=\"进程与线程的区别\"><a href=\"#进程与线程的区别\" class=\"headerlink\" title=\"进程与线程的区别\"></a>进程与线程的区别</h4><ol>\n<li>进程是资源分配最小单位，线程是程序执行的最小单位；</li>\n<li>进程有自己独立的地址空间，每启动一个进程，系统都会为其分配地址空间，建立数据表来维护代码段、堆栈段和数据段，线程没有独立的地址空间，它使用相同的地址空间共享数据；</li>\n<li>CPU 切换一个线程比切换进程花费小；</li>\n<li>创建一个线程比进程开销小；</li>\n<li>线程占用的资源要⽐进程少很多。</li>\n<li>线程之间通信更方便，同一个进程下，线程共享全局变量，静态变量等数据，进程之间的通信需要以通信的方式（IPC）进行；（但多线程程序处理好同步与互斥是个难点）</li>\n<li>多进程程序更安全，生命力更强，一个进程死掉不会对另一个进程造成影响（源于有独立的地址空间），多线程程序更不易维护，一个线程死掉，整个进程就死掉了（因为共享地址空间）；</li>\n<li>进程对资源保护要求高，开销大，效率相对较低，线程资源保护要求不高，但开销小，效率高，可频繁切换；</li>\n</ol>\n<h3 id=\"创建线程有几种不同的方式？你喜欢哪一种？为什么？\"><a href=\"#创建线程有几种不同的方式？你喜欢哪一种？为什么？\" class=\"headerlink\" title=\"创建线程有几种不同的方式？你喜欢哪一种？为什么？\"></a>创建线程有几种不同的方式？你喜欢哪一种？为什么？</h3><p>有三种方式可以用来创建线程：</p>\n<ul>\n<li>继承 Thread 类</li>\n<li>实现 Runnable 接口</li>\n<li>应用程序可以使用 Executor 框架来创建线程池</li>\n</ul>\n<p>实现 Runnable 接口这种方式更受欢迎，因为这不需要继承 Thread 类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而 Java 不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。</p>\n<h3 id=\"概括的解释下线程的几种可用状态。\"><a href=\"#概括的解释下线程的几种可用状态。\" class=\"headerlink\" title=\"概括的解释下线程的几种可用状态。\"></a>概括的解释下线程的几种可用状态。</h3><p><strong>新建( new )：</strong>新创建了一个线程对象；</p>\n<p><strong>可运行( runnable )：</strong>线程对象创建后，其他线程(比如 main 线程）调用了该对象的 start ()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取 CPU 的使用权；</p>\n<p><strong>运行( running )：</strong>可运行状态( runnable )的线程获得了 CPU 时间片（ timeslice ） ，执行程序代码；</p>\n<p><strong>阻塞( block )：</strong>阻塞状态是指线程因为某种原因放弃了 CPU 使用权，也即让出了 CPU timeslice ，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 cpu timeslice 转到运行( running )状态。</p>\n<p>阻塞的情况分三种：</p>\n<ol>\n<li>等待阻塞：运行( running )的线程执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中。</li>\n<li>同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中。</li>\n<li>其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I &#x2F; O 请求时， JVM 会把该线程置为阻塞状态。当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I &#x2F; O 处理完毕时，线程重新转入可运行( runnable )状态。</li>\n</ol>\n<p><strong>死亡( dead )：</strong>线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生。</p>\n<h3 id=\"同步方法和同步代码块的区别是什么？\"><a href=\"#同步方法和同步代码块的区别是什么？\" class=\"headerlink\" title=\"同步方法和同步代码块的区别是什么？\"></a>同步方法和同步代码块的区别是什么？</h3><p><strong>区别：</strong></p>\n<ul>\n<li>同步方法默认用 this 或者当前类 class 对象作为锁；</li>\n<li>同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法；</li>\n</ul>\n<h3 id=\"在监视器-Monitor-内部，是如何做线程同步的？程序应该做哪种级别的同步？\"><a href=\"#在监视器-Monitor-内部，是如何做线程同步的？程序应该做哪种级别的同步？\" class=\"headerlink\" title=\"在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？\"></a>在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？</h3><p>监视器和锁在 Java 虚拟机中是一块使用的。监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块。每一个监视器都和一个对象引用相关联。线程在获取锁之前不允许执行同步代码。</p>\n<p>java 还提供了显式监视器( Lock )和隐式监视器( synchronized )两种锁方案。</p>\n<h3 id=\"什么是死锁-deadlock-？\"><a href=\"#什么是死锁-deadlock-？\" class=\"headerlink\" title=\"什么是死锁(deadlock)？\"></a>什么是死锁(deadlock)？</h3><p>两个线程或两个以上线程都在等待对方执行完毕才能继续往下执行的时候就发生了死锁。结果就是这些线程都陷入了无限的等待中。</p>\n<h3 id=\"如何确保-N-个线程可以访问-N-个资源同时又不导致死锁？\"><a href=\"#如何确保-N-个线程可以访问-N-个资源同时又不导致死锁？\" class=\"headerlink\" title=\"如何确保 N 个线程可以访问 N 个资源同时又不导致死锁？\"></a>如何确保 N 个线程可以访问 N 个资源同时又不导致死锁？</h3><p>多线程产生死锁的四个必要条件：</p>\n<ul>\n<li><strong>互斥条件：</strong>一个资源每次只能被一个进程使用。</li>\n<li><strong>保持和请求条件：</strong>一个进程因请求资源而阻塞时，对已获得资源保持不放。</li>\n<li><strong>不可剥夺性：</strong>进程已获得资源，在未使用完成前，不能被剥夺。</li>\n<li><strong>循环等待条件（闭环）：</strong>若干进程之间形成一种头尾相接的循环等待资源关系。</li>\n</ul>\n<p>只要破坏其中任意一个条件，就可以避免死锁</p>\n<p>一种非常简单的避免死锁的方式就是：<strong>指定获取锁的顺序，并强制线程按照指定的顺序获取锁。</strong>因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。</p>\n<h3 id=\"Java-序列化与反序列化三连问：是什么？为什么要？如何做？\"><a href=\"#Java-序列化与反序列化三连问：是什么？为什么要？如何做？\" class=\"headerlink\" title=\"Java 序列化与反序列化三连问：是什么？为什么要？如何做？\"></a>Java 序列化与反序列化三连问：是什么？为什么要？如何做？</h3><h4 id=\"Java-序列化与反序列化是什么？\"><a href=\"#Java-序列化与反序列化是什么？\" class=\"headerlink\" title=\"Java 序列化与反序列化是什么？\"></a>Java 序列化与反序列化是什么？</h4><p>Java 序列化是指把 Java 对象转换为字节序列的过程，而 Java 反序列化是指把字节序列恢复为 Java 对象的过程：</p>\n<ul>\n<li><strong>序列化</strong>：对象序列化的最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性。序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。核心作用是对象状态的保存与重建。</li>\n<li><strong>反序列化</strong>：客户端从文件中或网络上获得序列化后的对象字节流，根据字节流中所保存的对象状态及描述信息，通过反序列化重建对象。</li>\n</ul>\n<h4 id=\"为什么需要序列化与反序列化？\"><a href=\"#为什么需要序列化与反序列化？\" class=\"headerlink\" title=\"为什么需要序列化与反序列化？\"></a>为什么需要序列化与反序列化？</h4><p>为什么要序列化，那就是说一下序列化的好处喽，序列化有什么什么优点，所以我们要序列化。</p>\n<p><strong>一：对象序列化可以实现分布式对象。</strong></p>\n<p>主要应用例如：RMI(即远程调用 Remote Method Invocation)要利用对象序列化运行远程主机上的服务，就像在本地机上运行对象时一样。</p>\n<p><strong>二：java 对象序列化不仅保留一个对象的数据，而且递归保存对象引用的每个对象的数据。</strong></p>\n<p>可以将整个对象层次写入字节流中，可以保存在文件中或在网络连接上传递。利用对象序列化可以进行对象的”深复制”，即复制对象本身及引用的对象本身。序列化一个对象可能得到整个对象序列。</p>\n<p><strong>三：序列化可以将内存中的类写入文件或数据库中。</strong></p>\n<p>比如：将某个类序列化后存为文件，下次读取时只需将文件中的数据反序列化就可以将原先的类还原到内存中。也可以将类序列化为流数据进行传输。</p>\n<p>总的来说就是将一个已经实例化的类转成文件存储，下次需要实例化的时候只要反序列化即可将类实例化到内存中并保留序列化时类中的所有变量和状态。</p>\n<p><strong>四：对象、文件、数据，有许多不同的格式，很难统一传输和保存。</strong></p>\n<p>序列化以后就都是字节流了，无论原来是什么东西，都能变成一样的东西，就可以进行通用的格式传输或保存，传输结束以后，要再次使用，就进行反序列化还原，这样对象还是对象，文件还是文件。</p>\n<h4 id=\"如何实现-Java-序列化与反序列化\"><a href=\"#如何实现-Java-序列化与反序列化\" class=\"headerlink\" title=\"如何实现 Java 序列化与反序列化?\"></a>如何实现 Java 序列化与反序列化?</h4><p>首先我们要把准备要序列化类，实现 Serializabel 接口</p>\n<p>例如：我们要 Person 类里的 name 和 age 都序列化</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//本类可以序列化</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"姓名：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"，年龄\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后：我们将 name 和 age 序列化（也就是把这 2 个对象转为二进制，理解为“打碎”）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>lxh<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SerDemo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileOutputStream</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectOutputStream</span></span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ObjectOutputStreamDemo</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//序列化</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//序列化后生成指定文件路径</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span>separator <span class=\"token operator\">+</span> <span class=\"token string\">\"person.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//装饰流（流）</span>\n        oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//实例化类</span>\n        <span class=\"token class-name\">Person</span> per <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>per<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把类对象序列化</span>\n        oos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>《Java 对象的序列化（Serialization）和反序列化详解》<br><a href=\"https://blog.csdn.net/yaomingyang/article/details/79321939\">https://blog.csdn.net/yaomingyang/article/details/79321939</a></p>\n</blockquote>\n<blockquote>\n<p>《Java 序列化的高级认识》<br><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-serial/\">https://www.ibm.com/developerworks/cn/java/j-lo-serial/</a></p>\n</blockquote>\n<h3 id=\"什么情况用ArrayList-or-LinkedList呢\"><a href=\"#什么情况用ArrayList-or-LinkedList呢\" class=\"headerlink\" title=\"什么情况用ArrayList or LinkedList呢?\"></a>什么情况用ArrayList or LinkedList呢?</h3><p>列表（list）是元素的有序集合，也称为序列。它提供了基于元素位置的操作，有助于快速访问、添加和删除列表中特定索引位置的元素。List 接口实现了 <code>Collection </code>和 <code>Iterable </code>作为父接口。它允许存储重复值和空值，支持通过索引访问元素。</p>\n<h4 id=\"ArrayList-和-LinkedList-的不同之处\"><a href=\"#ArrayList-和-LinkedList-的不同之处\" class=\"headerlink\" title=\"ArrayList 和 LinkedList 的不同之处\"></a>ArrayList 和 LinkedList 的不同之处</h4><h5 id=\"增加元素到列表尾端\"><a href=\"#增加元素到列表尾端\" class=\"headerlink\" title=\"增加元素到列表尾端\"></a>增加元素到列表尾端</h5><p>在 <code>ArrayList</code> 中增加元素到队列尾端的代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//确保内部数组有足够的空间</span>\n   elementData<span class=\"token punctuation\">[</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span><span class=\"token comment\">//将元素加入到数组的末尾，完成添加</span>\n   <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>      \n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>ArrayList</code>中 <code>add()</code> 方法的性能决定于<code>ensureCapacity()</code>方法。<code>ensureCapacity()</code>的实现如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> vod <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> oldCapacity<span class=\"token operator\">=</span>elementData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>minCapacity<span class=\"token operator\">></span>oldCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">//如果数组容量不足，进行扩容</span>\n      <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldData<span class=\"token operator\">=</span>elementData<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> newCapacity<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>oldCapacity<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//扩容到原始容量的1.5倍</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newCapacitty<span class=\"token operator\">&lt;</span>minCapacity<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//如果新容量小于最小需要的容量，则使用最小</span>\n                                                    <span class=\"token comment\">//需要的容量大小</span>\n         newCapacity<span class=\"token operator\">=</span>minCapacity <span class=\"token punctuation\">;</span>  <span class=\"token comment\">//进行扩容的数组复制</span>\n         elementData<span class=\"token operator\">=</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyof</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span>newCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，只要<code>ArrayList</code>的当前容量足够大，<code>a  dd()</code>操作的效率非常高的。只有当<code>ArrayList</code>对容量的需求超出当前数组大小时，才需要进行扩容。扩容的过程中，会进行大量的数组复制操作。而数组复制时，最终将调用<code>System.arraycopy()</code>方法，因此<code>add()</code>操作的效率还是相当高的。</p>\n<p><code>LinkedList</code> 的<code>add()</code>操作实现如下，它也将任意元素增加到队列的尾端：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">addBefore</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将元素增加到header的前面</span>\n   <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中<code>addBefore()</code>的方法实现如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">addBefore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">,</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n     <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> newEntry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>entry<span class=\"token punctuation\">,</span>entry<span class=\"token punctuation\">.</span>previous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     newEntry<span class=\"token punctuation\">.</span>provious<span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span>newEntry<span class=\"token punctuation\">;</span>\n     newEntry<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>previous<span class=\"token operator\">=</span>newEntry<span class=\"token punctuation\">;</span>\n     size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n     modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可见，<strong>LinkeList由于使用了链表的结构，因此不需要维护容量的大小。从这点上说，它比ArrayList有一定的性能优势，然而，每次的元素增加都需要新建一个Entry对象，并进行更多的赋值操作。在频繁的系统调用中，对性能会产生一定的影响。</strong></p>\n<h5 id=\"增加元素到列表任意位置\"><a href=\"#增加元素到列表任意位置\" class=\"headerlink\" title=\"增加元素到列表任意位置\"></a>增加元素到列表任意位置</h5><p>除了提供元素到List的尾端，List接口还提供了在任意位置插入元素的方法：<code>void add(int index,E element);</code></p>\n<p><strong>由于实现的不同，ArrayList和LinkedList在这个方法上存在一定的性能差异，由于ArrayList是基于数组实现的，而数组是一块连续的内存空间，如果在数组的任意位置插入元素，必然导致在该位置后的所有元素需要重新排列，因此，其效率相对会比较低。</strong></p>\n<p>以下代码是ArrayList中的实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span><span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">></span>size<span class=\"token operator\">||</span>index<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutOfBoundsException</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"Index:\"</span><span class=\"token operator\">+</span>index<span class=\"token operator\">+</span><span class=\"token string\">\",size: \"</span><span class=\"token operator\">+</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>elementData<span class=\"token punctuation\">,</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>size<span class=\"token operator\">-</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         elementData<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n         size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到每次插入操作，都会进行一次数组复制。而这个操作在增加元素到List尾端的时候是不存在的，大量的数组重组操作会导致系统性能低下。并且插入元素在List中的位置越是靠前，数组重组的开销也越大。</p>\n<p>而LinkedList此时显示了优势：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span><span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">addBefore</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">==</span>size<span class=\"token operator\">?</span>header<span class=\"token operator\">:</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>可见，<strong>对LinkedList来说，在List的尾端插入数据与在任意位置插入数据是一样的，不会因为插入的位置靠前而导致插入的方法性能降低。</strong></p>\n<h5 id=\"删除任意位置元素\"><a href=\"#删除任意位置元素\" class=\"headerlink\" title=\"删除任意位置元素\"></a>删除任意位置元素</h5><p>对于元素的删除，List接口提供了在任意位置删除元素的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>对ArrayList来说，remove()方法和add()方法是雷同的。在任意位置移除元素后，都要进行数组的重组。ArrayList的实现如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">RangeCheck</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">E</span> oldValue<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> elementData<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> numMoved<span class=\"token operator\">=</span>size<span class=\"token operator\">-</span>index<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>numMoved<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>elementData<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>numMoved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     elementData<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，<strong>在ArrayList的每一次有效的元素删除操作后，都要进行数组的重组。并且删除的位置越靠前，数组重组时的开销越大。</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> index<span class=\"token operator\">>=</span>size<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Index:\"</span><span class=\"token operator\">+</span>index<span class=\"token operator\">+</span><span class=\"token string\">\",size:\"</span><span class=\"token operator\">+</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> e<span class=\"token operator\">=</span> header<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//要删除的元素位于前半段</span>\n         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n             e<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">></span>index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n             e<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>previous<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在LinkedList的实现中，首先要通过循环找到要删除的元素。如果要删除的位置处于List的前半段，则从前往后找；若其位置处于后半段，则从后往前找。因此无论要删除较为靠前或者靠后的元素都是非常高效的；但要移除List中间的元素却几乎要遍历完半个List，在List拥有大量元素的情况下，效率很低。</p>\n<h5 id=\"容量参数\"><a href=\"#容量参数\" class=\"headerlink\" title=\"容量参数\"></a>容量参数</h5><p>容量参数是ArrayList和Vector等基于数组的List的特有性能参数。它表示初始化的数组大小。当ArrayList所存储的元素数量超过其已有大小时。它便会进行扩容，数组的扩容会导致整个数组进行一次内存复制。因此合理的数组大小有助于减少数组扩容的次数，从而提高系统性能。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span>  <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayList</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>initialCapacity<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal Capacity:\"</span><span class=\"token operator\">+</span>initialCapacity<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elementData<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>initialCapacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>ArrayList提供了一个可以制定初始数组大小的构造函数：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>现以构造一个拥有100万元素的List为例，当使用默认初始化大小时，其消耗的相对时间为125ms左右，当直接制定数组大小为100万时，构造相同的ArrayList仅相对耗时16ms。</p>\n<h5 id=\"遍历列表\"><a href=\"#遍历列表\" class=\"headerlink\" title=\"遍历列表\"></a>遍历列表</h5><p>遍历列表操作是最常用的列表操作之一，在JDK1.5之后，至少有3中常用的列表遍历方式：</p>\n<blockquote>\n<ul>\n<li>forEach操作</li>\n<li>迭代器</li>\n<li>for循环。</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> start<span class=\"token operator\">=</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//ForEach </span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token operator\">:</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    tmp<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foreach spend:\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstart <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> it<span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    \n   tmp<span class=\"token operator\">=</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Iterator spend;\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstart<span class=\"token operator\">=</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> size<span class=\"token operator\">=</span><span class=\"token punctuation\">;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>                     \n    tmp<span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"for spend;\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>构造一个拥有100万数据的ArrayList和等价的LinkedList，使用以上代码进行测试，测试结果：</p>\n<p><img src=\"https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/11.png\" alt=\"图片\"></p>\n<p>可以看到，<strong>最简便的ForEach循环并没有很好的性能表现，综合性能不如普通的迭代器，而是用for循环通过随机访问遍历列表时，ArrayList表项很好，但是LinkedList的表现却无法让人接受，甚至没有办法等待程序的结束。这是因为对LinkedList进行随机访问时，总会进行一次列表的遍历操作。性能非常差，应避免使用。</strong></p>\n<h2 id=\"Java-进阶\"><a href=\"#Java-进阶\" class=\"headerlink\" title=\"Java 进阶\"></a>Java 进阶</h2><h3 id=\"你能说说-Spring-框架中-Bean-的生命周期吗？\"><a href=\"#你能说说-Spring-框架中-Bean-的生命周期吗？\" class=\"headerlink\" title=\"你能说说 Spring 框架中 Bean 的生命周期吗？\"></a>你能说说 Spring 框架中 Bean 的生命周期吗？</h3><ol>\n<li><p>实例化一个 <code>Bean</code> , 也就是我们常说的 <code>new</code>；</p>\n</li>\n<li><p>按照 <code>Spring</code> 上下文对实例化的 <code>Bean</code> 进行配置－－也就是 <code>IOC</code> 注入；</p>\n</li>\n<li><p>如果这个 <code>Bean</code> 已经实现了 <code>BeanNameAware</code> 接口，会调用它实现的 <code>setBeanName(String)</code>方法，此处传递的就是 <code>Spring</code> 配置文件中 <code>Bean</code> 的 <code>id</code> 值</p>\n</li>\n<li><p>如果这个 <code>Bean</code> 已经实现了 <code>BeanFactoryAware</code> 接口，会调用它实现的 <code>setBeanFactory(setBeanFactory(BeanFactory)</code>传递的是 Spring 工厂自身（可以用这个方式来获取其它 Bean，只需在 Spring 配置文件中配置一个普通的 Bean 就可以）；</p>\n</li>\n<li><p>如果这个 <code>Bean</code> 已经实现了 <code>ApplicationContextAware</code> 接口，会调用 <code>setApplicationContext(ApplicationContext)</code>方法，传入 Spring 上下文（同样这个方式也可以实现步骤 4 的内容，但比 4 更好，因为 <code>ApplicationContext</code> 是 <code>BeanFactory</code> 的子接口，有更多的实现方法）；</p>\n</li>\n<li><p>如果这个 <code>Bean</code> 关联了 <code>BeanPostProcessor</code> 接口，将会调用 <code>postProcessBeforeInitialization(Object obj, String s)</code>方法，<code>BeanPostProcessor</code> 经常被用作是 <code>Bean</code> 内容的更改，并且由于这个是在 <code>Bean</code> 初始化结束时调用那个的方法，也可以被应用于内存或缓存技术；</p>\n</li>\n<li><p>如果 <code>Bean</code> 在 <code>Spring</code> 配置文件中配置了 <code>init-method</code> 属性会自动调用其配置的初始化方法。</p>\n</li>\n<li><p>如果这个 <code>Bean</code> 关联了 <code>BeanPostProcessor</code> 接口，将会调用 <code>postProcessAfterInitialization(Object obj, String s)</code>方法、；</p>\n<blockquote>\n<p>注：以上工作完成以后就可以应用这个 <code>Bean</code> 了，那这个 <code>Bean</code> 是一个 <code>Singleton</code> 的，所以一般情况下我们调用同一个 <code>id</code> 的 <code>Bean</code> 会是在内容地址相同的实例，当然在 <code>Spring</code> 配置文件中也可以配置非 <code>Singleton</code>，这里我们不做赘述。</p>\n</blockquote>\n</li>\n<li><p>当 <code>Bean</code> 不再需要时，会经过清理阶段，如果 <code>Bean</code> 实现了 <code>DisposableBean</code> 这个接口，会调用那个其实现的 <code>destroy()</code>方法；</p>\n</li>\n<li><p>最后，如果这个 <code>Bean</code> 的 <code>Spring</code> 配置中配置了 <code>destroy-method</code> 属性，会自动调用其配置的销毁方法。</p>\n</li>\n</ol>\n<h3 id=\"Spring，SpringMVC，SpringBoot，SpringCloud-有什么区别和联系？\"><a href=\"#Spring，SpringMVC，SpringBoot，SpringCloud-有什么区别和联系？\" class=\"headerlink\" title=\"Spring，SpringMVC，SpringBoot，SpringCloud 有什么区别和联系？\"></a>Spring，SpringMVC，SpringBoot，SpringCloud 有什么区别和联系？</h3><h4 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h4><ul>\n<li><code>Spring</code> 是一个轻量级的控制反转(<code>IoC</code>)和面向切面(<code>AOP</code>)的容器框架。Spring 使你能够编写更干净、更可管理、并且更易于测试的代码。</li>\n<li><code>Spring MVC</code> 是 Spring 的一个模块，一个 web 框架。通过 <code>Dispatcher Servlet</code>, <code>ModelAndView</code> 和 <code>View Resolver</code>，开发 web 应用变得很容易。主要针对的是网站应用程序或者服务开发——<code>URL 路由</code>、<code>Session</code>、<code>模板引擎</code>、<code>静态 Web 资源</code>等等。</li>\n<li><code>Spring</code> 配置复杂，繁琐，所以推出了 <code>Spring boot</code>，约定优于配置，简化了 spring 的配置流程。</li>\n<li><code>Spring Cloud</code> 构建于 <code>Spring Boot</code> 之上，是一个关注全局的服务治理框架。</li>\n</ul>\n<h4 id=\"Spring-VS-SpringMVC\"><a href=\"#Spring-VS-SpringMVC\" class=\"headerlink\" title=\"Spring VS SpringMVC\"></a>Spring VS SpringMVC</h4><ul>\n<li><code>Spring</code> 是一个一站式的轻量级的 java 开发框架，核心是<code>控制反转（IOC）</code>和<code>面向切面（AOP）</code>，针对于开发的 WEB 层 (<code>springMvc</code>)、业务层(<code>Ioc</code>)、持久层(<code>jdbcTemplate</code>)等都提供了多种配置解决方案；</li>\n<li><code>SpringMVC</code> 是 <code>Spring</code> 基础之上的一个 <code>MVC</code> 框架，主要处理 <code>web</code> 开发的路径映射和视图渲染，属于 <code>Spring</code> 框架中 <code>WEB</code> 层开发的一部分；</li>\n</ul>\n<h4 id=\"SpringMVC-VS-SpringBoot\"><a href=\"#SpringMVC-VS-SpringBoot\" class=\"headerlink\" title=\"SpringMVC VS SpringBoot\"></a>SpringMVC VS SpringBoot</h4><ul>\n<li><code>SpringMVC</code>属于一个企业 WEB 开发的 MVC 框架，涵盖面包括前端<strong>视图开发</strong>、<strong>文件配置</strong>、<strong>后台接口逻辑开发</strong>等，XML、config 等配置相对比较繁琐复杂；</li>\n<li><code>SpringBoot</code>框架相对于 SpringMVC 框架来说，更<strong>专注于开发微服务后台接口</strong>，不开发前端视图；</li>\n</ul>\n<h4 id=\"SpringBoot-VS-SpringCloud\"><a href=\"#SpringBoot-VS-SpringCloud\" class=\"headerlink\" title=\"SpringBoot VS SpringCloud\"></a>SpringBoot VS SpringCloud</h4><ul>\n<li><code>SpringBoot</code> 使用了<strong>默认大于配置</strong>的理念，集成了快速开发的 <code>Spring</code> 多个插件，同时<strong>自动过滤不需要配置的多余的插件</strong>，<strong>简化了项目的开发配置流程</strong>，一定程度上<strong>取消 xml 配置</strong>，是一套<strong>快速配置开发的脚手架</strong>，能快速开发<strong>单个微服务</strong>；</li>\n<li><code>SpringCloud</code> 大部分的功能插件都是基于 <code>SpringBoot</code> 去实现的，<code>SpringCloud</code> 关注于<strong>全局的微服务整合和管理</strong>，将多个 <code>SpringBoot</code> 单体微服务进行整合以及管理；<code>SpringCloud</code> 依赖于 <code>SpringBoot</code> 开发，而 - <code>SpringBoot</code> 可以独立开发；</li>\n</ul>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>Spring 是核心，提供了基础功能；</li>\n<li>Spring MVC 是基于 Spring 的一个 MVC 框架 ；</li>\n<li>Spring Boot 是为简化 Spring 配置的快速开发整合包；</li>\n<li>Spring Cloud 是构建在 Spring Boot 之上的服务治理框架。</li>\n</ul>\n<h3 id=\"如何保证消息的顺序性？\"><a href=\"#如何保证消息的顺序性？\" class=\"headerlink\" title=\"如何保证消息的顺序性？\"></a>如何保证消息的顺序性？</h3><h4 id=\"面试官心理分析\"><a href=\"#面试官心理分析\" class=\"headerlink\" title=\"面试官心理分析\"></a>面试官心理分析</h4><p>其实这个也是用 MQ 的时候必问的话题，第一看看你了不了解顺序这个事儿？第二看看你有没有办法保证消息是有顺序的？这是生产系统中常见的问题。</p>\n<h4 id=\"面试题剖析\"><a href=\"#面试题剖析\" class=\"headerlink\" title=\"面试题剖析\"></a>面试题剖析</h4><p>我举个例子，我们以前做过一个 mysql <code>binlog</code> 同步的系统，压力还是非常大的，日同步数据要达到上亿，就是说数据从一个 mysql 库原封不动地同步到另一个 mysql 库里面去（mysql -&gt; mysql）。常见的一点在于说比如大数据 team，就需要同步一个 mysql 库过来，对公司的业务系统的数据做各种复杂的操作。</p>\n<p>你在 mysql 里增删改一条数据，对应出来了增删改 3 条 <code>binlog</code> 日志，接着这三条 <code>binlog</code> 发送到 MQ 里面，再消费出来依次执行，起码得保证人家是按照顺序来的吧？不然本来是：增加、修改、删除；你楞是换了顺序给执行成删除、修改、增加，不全错了么。</p>\n<p>本来这个数据同步过来，应该最后这个数据被删除了；结果你搞错了这个顺序，最后这个数据保留下来了，数据同步就出错了。</p>\n<p>先看看顺序会错乱的俩场景：</p>\n<ul>\n<li><strong>RabbitMQ</strong>：一个 queue，多个 consumer。比如，生产者向 RabbitMQ 里发送了三条数据，顺序依次是 data1&#x2F;data2&#x2F;data3，压入的是 RabbitMQ 的一个内存队列。有三个消费者分别从 MQ 中消费这三条数据中的一条，结果消费者 2 先执行完操作，把 data2 存入数据库，然后是 data1&#x2F;data3。这不明显乱了。</li>\n</ul>\n<p><img src=\"/img/posts/java/interview/1.png\" alt=\"图片\"></p>\n<ul>\n<li><p><strong>Kafka</strong>：比如说我们建了一个 topic，有三个 partition。生产者在写的时候，其实可以指定一个 key，比如说我们指定了某个订单 id 作为 key，那么这个订单相关的数据，一定会被分发到同一个 partition 中去，而且这个 partition 中的数据一定是有顺序的。</p>\n<p>消费者从 partition 中取出来数据的时候，也一定是有顺序的。到这里，顺序还是 ok 的，没有错乱。接着，我们在消费者里可能会搞<strong>多个线程来并发处理消息</strong>。因为如果消费者是单线程消费处理，而处理比较耗时的话，比如处理一条消息耗时几十 ms，那么 1 秒钟只能处理几十条消息，这吞吐量太低了。而多个线程并发跑的话，顺序可能就乱掉了。</p>\n</li>\n</ul>\n<p><img src=\"/img/posts/java/interview/2.png\" alt=\"图片\"></p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><h4 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h4><p>拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点；或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。</p>\n<p><img src=\"/img/posts/java/interview/3.png\" alt=\"图片\"></p>\n<h4 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><ul>\n<li>一个 topic，一个 partition，一个 consumer，内部单线程消费，单线程吞吐量太低，一般不会用这个。</li>\n<li>写 N 个内存 queue，具有相同 key 的数据都到同一个内存 queue；然后对于 N 个线程，每个线程分别消费一个内存 queue 即可，这样就能保证顺序性。</li>\n</ul>\n<p><img src=\"/img/posts/java/interview/4.png\" alt=\"图片\"></p>\n<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><h3 id=\"Redis-是如何实现分布式锁的？\"><a href=\"#Redis-是如何实现分布式锁的？\" class=\"headerlink\" title=\"Redis 是如何实现分布式锁的？\"></a>Redis 是如何实现分布式锁的？</h3><p>分布式锁常见的三种实现方式：</p>\n<ol>\n<li>数据库乐观锁；</li>\n<li>基于 Redis 的分布式锁；</li>\n<li>基于 ZooKeeper 的分布式锁。</li>\n</ol>\n<p>本面试考点是，你对 Redis 使用熟悉吗？Redis 中是如何实现分布式锁的。</p>\n<h4 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h4><p>Redis 要实现分布式锁，以下条件应该得到满足</p>\n<h4 id=\"互斥性\"><a href=\"#互斥性\" class=\"headerlink\" title=\"互斥性\"></a>互斥性</h4><ul>\n<li>在任意时刻，只有一个客户端能持有锁。</li>\n</ul>\n<h4 id=\"不能死锁\"><a href=\"#不能死锁\" class=\"headerlink\" title=\"不能死锁\"></a>不能死锁</h4><ul>\n<li>客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li>\n</ul>\n<h4 id=\"容错性\"><a href=\"#容错性\" class=\"headerlink\" title=\"容错性\"></a>容错性</h4><ul>\n<li>只要大部分的 Redis 节点正常运行，客户端就可以加锁和解锁。</li>\n</ul>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>可以直接通过 <code>set key value px milliseconds nx</code> 命令实现加锁， 通过 Lua 脚本实现解锁。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token operator\">//</span>获取锁（unique_value可以是UUID等）\nSET resource_name unique_value NX PX  <span class=\"token number\">30000</span>\n\n<span class=\"token operator\">//</span>释放锁（lua脚本中，一定要比较value，防止误解锁）\n<span class=\"token keyword\">if</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span>KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">then</span>\n    <span class=\"token keyword\">return</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"del\"</span><span class=\"token punctuation\">,</span>KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h4><ul>\n<li>set 命令要用 <code>set key value px milliseconds nx</code>，替代 <code>setnx + expire</code> 需要分两次执行命令的方式，保证了原子性，</li>\n<li>value 要具有唯一性，可以使用<code>UUID.randomUUID().toString()</code>方法生成，用来标识这把锁是属于哪个请求加的，在解锁的时候就可以有依据；</li>\n<li>释放锁时要验证 value 值，防止误解锁；</li>\n<li>通过 Lua 脚本来避免 Check And Set 模型的并发问题，因为在释放锁的时候因为涉及到多个 Redis 操作 （利用了 eval 命令执行 Lua 脚本的原子性）；</li>\n</ul>\n<h4 id=\"加锁代码分析\"><a href=\"#加锁代码分析\" class=\"headerlink\" title=\"加锁代码分析\"></a>加锁代码分析</h4><p>首先，set()加入了 NX 参数，可以保证如果已有 key 存在，则函数不会调用成功，也就是只有一个客户端能持有锁，满足互斥性。其次，由于我们对锁设置了过期时间，即使锁的持有者后续发生崩溃而没有解锁，锁也会因为到了过期时间而自动解锁（即 key 被删除），不会发生死锁。最后，因为我们将 value 赋值为 requestId，用来标识这把锁是属于哪个请求加的，那么在客户端在解锁的时候就可以进行校验是否是同一个客户端。</p>\n<h4 id=\"解锁代码分析\"><a href=\"#解锁代码分析\" class=\"headerlink\" title=\"解锁代码分析\"></a>解锁代码分析</h4><p>将 Lua 代码传到 jedis.eval()方法里，并使参数 KEYS[1]赋值为 lockKey，ARGV[1]赋值为 requestId。在执行的时候，首先会获取锁对应的 value 值，检查是否与 requestId 相等，如果相等则解锁（删除 key）。</p>\n<h4 id=\"存在的风险\"><a href=\"#存在的风险\" class=\"headerlink\" title=\"存在的风险\"></a>存在的风险</h4><p>如果存储锁对应 key 的那个节点挂了的话，就可能存在丢失锁的风险，导致出现多个客户端持有锁的情况，这样就不能实现资源的独享了。</p>\n<ol>\n<li>客户端 A 从 master 获取到锁</li>\n<li>在 master 将锁同步到 slave 之前，master 宕掉了（Redis 的主从同步通常是异步的）。<br>主从切换，slave 节点被晋级为 master 节点</li>\n<li>客户端 B 取得了同一个资源被客户端 A 已经获取到的另外一个锁。导致存在同一时刻存不止一个线程获取到锁的情况。</li>\n</ol>\n<h4 id=\"redlock-算法出现\"><a href=\"#redlock-算法出现\" class=\"headerlink\" title=\"redlock 算法出现\"></a>redlock 算法出现</h4><p>这个场景是假设有一个 redis cluster，有 5 个 redis master 实例。然后执行如下步骤获取一把锁：</p>\n<ol>\n<li>获取当前时间戳，单位是毫秒；</li>\n<li>跟上面类似，轮流尝试在每个 master 节点上创建锁，过期时间较短，一般就几十毫秒；</li>\n<li>尝试在大多数节点上建立一个锁，比如 5 个节点就要求是 3 个节点 n &#x2F; 2 + 1；</li>\n<li>客户端计算建立好锁的时间，如果建立锁的时间小于超时时间，就算建立成功了；</li>\n<li>要是锁建立失败了，那么就依次之前建立过的锁删除；</li>\n<li>只要别人建立了一把分布式锁，你就得不断轮询去尝试获取锁。</li>\n</ol>\n<p><img src=\"/img/posts/java/interview/6.png\" alt=\"图片\"></p>\n<p>Redis 官方给出了以上两种基于 Redis 实现分布式锁的方法，详细说明可以查看：</p>\n<blockquote>\n<p><a href=\"https://redis.io/topics/distlock\">https://redis.io/topics/distlock</a> 。</p>\n</blockquote>\n<h4 id=\"Redisson-实现\"><a href=\"#Redisson-实现\" class=\"headerlink\" title=\"Redisson 实现\"></a>Redisson 实现</h4><p>Redisson 是一个在 Redis 的基础上实现的 Java 驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的 Java 常用对象，还实现了可重入锁（Reentrant Lock）、公平锁（Fair Lock、联锁（MultiLock）、 红锁（RedLock）、 读写锁（ReadWriteLock）等，还提供了许多分布式服务。</p>\n<p>Redisson 提供了使用 Redis 的最简单和最便捷的方法。Redisson 的宗旨是促进使用者对 Redis 的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。</p>\n<p><strong>Redisson 分布式重入锁用法</strong></p>\n<p>Redisson 支持单点模式、主从模式、哨兵模式、集群模式，这里以单点模式为例：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token operator\">//</span> <span class=\"token number\">1.</span>构造redisson实现分布式锁必要的Config\nConfig config <span class=\"token operator\">=</span> new <span class=\"token function\">Config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconfig<span class=\"token punctuation\">.</span><span class=\"token function\">useSingleServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis://127.0.0.1:5379\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setDatabase</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">//</span> <span class=\"token number\">2.</span>构造RedissonClient\nRedissonClient redissonClient <span class=\"token operator\">=</span> Redisson<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">//</span> <span class=\"token number\">3.</span>获取锁对象实例（无法保证是按线程的顺序获取到）\nRLock rLock <span class=\"token operator\">=</span> redissonClient<span class=\"token punctuation\">.</span><span class=\"token function\">getLock</span><span class=\"token punctuation\">(</span>lockKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n     <span class=\"token operator\">*</span> <span class=\"token number\">4.</span>尝试获取锁\n     <span class=\"token operator\">*</span> waitTimeout 尝试获取锁的最大等待时间，超过这个值，则认为获取锁失败\n     <span class=\"token operator\">*</span> leaseTime   锁的持有时间<span class=\"token punctuation\">,</span>超过这个时间锁会自动失效（值应设置为大于业务处理的时间，确保在锁有效期内业务能处理完）\n     <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\n    boolean res <span class=\"token operator\">=</span> rLock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>long<span class=\"token punctuation\">)</span>waitTimeout<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>long<span class=\"token punctuation\">)</span>leaseTime<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">//</span>成功获得锁，在这里处理业务\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    throw new <span class=\"token function\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aquire lock fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token function\">finally</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">//</span>无论如何<span class=\"token punctuation\">,</span> 最后都要解锁\n    rLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>加锁流程图</p>\n<p><img src=\"/img/posts/java/interview/7.png\" alt=\"图片\"></p>\n<p>解锁流程图</p>\n<p><img src=\"/img/posts/java/interview/8.png\" alt=\"图片\"></p>\n<p>我们可以看到，RedissonLock 是可重入的，并且考虑了失败重试，可以设置锁的最大等待时间， 在实现上也做了一些优化，减少了无效的锁申请，提升了资源的利用率。</p>\n<p>需要特别注意的是，RedissonLock 同样没有解决 节点挂掉的时候，存在丢失锁的风险的问题。而现实情况是有一些场景无法容忍的，所以 Redisson 提供了实现了 redlock 算法的 RedissonRedLock，RedissonRedLock 真正解决了单点失败的问题，代价是需要额外的为 RedissonRedLock 搭建 Redis 环境。</p>\n<p>所以，如果业务场景可以容忍这种小概率的错误，则推荐使用 RedissonLock， 如果无法容忍，则推荐使用 RedissonRedLock。</p>\n<h3 id=\"Redis-面试常见问答\"><a href=\"#Redis-面试常见问答\" class=\"headerlink\" title=\"Redis 面试常见问答\"></a>Redis 面试常见问答</h3><h4 id=\"什么是缓存雪崩？怎么解决？\"><a href=\"#什么是缓存雪崩？怎么解决？\" class=\"headerlink\" title=\"什么是缓存雪崩？怎么解决？\"></a>什么是缓存雪崩？怎么解决？</h4><p><img src=\"/img/posts/java/interview/9.png\" alt=\"图片\"></p>\n<p>通常，我们会使用缓存用于缓冲对 DB 的冲击，如果缓存宕机，所有请求将直接打在 DB，造成 DB 宕机——从而导致整个系统宕机。</p>\n<p><strong>如何解决呢？</strong></p>\n<p><img src=\"/img/posts/java/interview/10.png\" alt=\"图片\"></p>\n<p><strong>2 种策略（同时使用）：</strong></p>\n<ul>\n<li>对缓存做高可用，防止缓存宕机</li>\n<li>使用断路器，如果缓存宕机，为了防止系统全部宕机，限制部分流量进入 DB，保证部分可用，其余的请求返回断路器的默认值。</li>\n</ul>\n<h4 id=\"什么是缓存穿透？怎么解决？\"><a href=\"#什么是缓存穿透？怎么解决？\" class=\"headerlink\" title=\"什么是缓存穿透？怎么解决？\"></a>什么是缓存穿透？怎么解决？</h4><p><strong>解释 1：</strong>缓存查询一个没有的 key，同时数据库也没有，如果黑客大量的使用这种方式，那么就会导致 DB 宕机。</p>\n<p><strong>解决方案：</strong>我们可以使用一个默认值来防止，例如，当访问一个不存在的 key，然后再去访问数据库，还是没有，那么就在缓存里放一个占位符，下次来的时候，检查这个占位符，如果发生时占位符，就不去数据库查询了，防止 DB 宕机。</p>\n<p><strong>解释 2：</strong>大量请求查询一个刚刚失效的 key，导致 DB 压力倍增，可能导致宕机，但实际上，查询的都是相同的数据。</p>\n<p><strong>解决方案：</strong>可以在这些请求代码加上双重检查锁。但是那个阶段的请求会变慢。不过总比 DB 宕机好。</p>\n<h4 id=\"什么是缓存并发竞争？怎么解决？\"><a href=\"#什么是缓存并发竞争？怎么解决？\" class=\"headerlink\" title=\"什么是缓存并发竞争？怎么解决？\"></a>什么是缓存并发竞争？怎么解决？</h4><p><strong>解释：</strong>多个客户端写一个 key，如果顺序错了，数据就不对了。但是顺序我们无法控制。</p>\n<p><strong>解决方案：</strong>使用分布式锁，例如 zk，同时加入数据的时间戳。同一时刻，只有抢到锁的客户端才能写入，同时，写入时，比较当前数据的时间戳和缓存中数据的时间戳。</p>\n<p>####什么是缓存和数据库双写不一致？怎么解决？</p>\n<p>解释：连续写数据库和缓存，但是操作期间，出现并发了，数据不一致了。</p>\n<p>通常，更新缓存和数据库有以下几种顺序：</p>\n<ul>\n<li>先更新数据库，再更新缓存。</li>\n<li>先删缓存，再更新数据库。</li>\n<li>先更新数据库，再删除缓存。</li>\n</ul>\n<p><em>三种方式的优劣来看一下：</em></p>\n<h4 id=\"先更新数据库，再更新缓存\"><a href=\"#先更新数据库，再更新缓存\" class=\"headerlink\" title=\"先更新数据库，再更新缓存\"></a>先更新数据库，再更新缓存</h4><p>这么做的问题是：当有 2 个请求同时更新数据，那么如果不使用分布式锁，将无法控制最后缓存的值到底是多少。也就是并发写的时候有问题。</p>\n<h4 id=\"先删缓存，Redis-面试常见问答再更新数据库\"><a href=\"#先删缓存，Redis-面试常见问答再更新数据库\" class=\"headerlink\" title=\"先删缓存，Redis 面试常见问答再更新数据库\"></a>先删缓存，Redis 面试常见问答再更新数据库</h4><p>这么做的问题：如果在删除缓存后，有客户端读数据，将可能读到旧数据，并有可能设置到缓存中，导致缓存中的数据一直是老数据。</p>\n<p>有 2 种解决方案：</p>\n<ul>\n<li>使用“双删”，即删更删，最后一步的删除作为异步操作，就是防止有客户端读取的时候设置了旧值。</li>\n<li>使用队列，当这个 key 不存在时，将其放入队列，串行执行，必须等到更新数据库完毕才能读取数据。</li>\n</ul>\n<p>总的来讲，比较麻烦。</p>\n<h4 id=\"先更新数据库，再删除缓存\"><a href=\"#先更新数据库，再删除缓存\" class=\"headerlink\" title=\"先更新数据库，再删除缓存\"></a>先更新数据库，再删除缓存</h4><p>这个实际是常用的方案，但是有很多人不知道，这里介绍一下，这个叫 Cache Aside Pattern，老外发明的。如果先更新数据库，再删除缓存，那么就会出现更新数据库之前有瞬间数据不是很及时。</p>\n<p>同时，如果在更新之前，缓存刚好失效了，读客户端有可能读到旧值，然后在写客户端删除结束后再次设置了旧值，非常巧合的情况。</p>\n<p>有 2 个前提条件：</p>\n<ul>\n<li>缓存在写之前的时候失效，同时，在写客户度删除操作结束后，放置旧数据 —— 也就是读比写慢。</li>\n<li>设置有的写操作还会锁表</li>\n</ul>\n<p>所以，这个很难出现，但是如果出现了怎么办？使用双删！！！记录更新期间有没有客户端读数据库，如果有，在更新完数据库之后，执行延迟删除。<br>还有一种可能，如果执行更新数据库，准备执行删除缓存时，服务挂了，执行删除失败怎么办？？？<br>这就坑了！！！不过可以通过订阅数据库的 binlog 来删除。</p>\n<h3 id=\"谈谈-Redis-的过期策略\"><a href=\"#谈谈-Redis-的过期策略\" class=\"headerlink\" title=\"谈谈 Redis 的过期策略\"></a>谈谈 Redis 的过期策略</h3><p>在日常开发中，我们使用 Redis 存储 key 时通常会设置一个过期时间，但是 Redis 是怎么删除过期的 key，而且 Redis 是单线程的，删除 key 会不会造成阻塞。要搞清楚这些，就要了解 Redis 的过期策略和内存淘汰机制。</p>\n<p><strong>Redis 采用的是定期删除 + 懒惰删除策略。</strong></p>\n<h4 id=\"定期删除策略\"><a href=\"#定期删除策略\" class=\"headerlink\" title=\"定期删除策略\"></a>定期删除策略</h4><p>Redis 会将每个设置了过期时间的 key 放入到一个独立的字典中，默认每 100ms 进行一次过期扫描：</p>\n<ol>\n<li>随机抽取 20 个 key</li>\n<li>删除这 20 个 key 中过期的 key</li>\n<li>如果过期的 key 比例超过 1&#x2F;4，就重复步骤 1，继续删除。</li>\n</ol>\n<p><strong>为什不扫描所有的 key？</strong></p>\n<p>Redis 是单线程，全部扫描岂不是卡死了。而且为了防止每次扫描过期的 key 比例都超过 1&#x2F;4，导致不停循环卡死线程，Redis 为每次扫描添加了上限时间，默认是 25ms。</p>\n<p>如果客户端将超时时间设置的比较短，比如 10ms，那么就会出现大量的链接因为超时而关闭，业务端就会出现很多异常。而且这时你还无法从 Redis 的 slowlog 中看到慢查询记录，因为慢查询指的是逻辑处理过程慢，不包含等待时间。</p>\n<p>如果在同一时间出现大面积 key 过期，Redis 循环多次扫描过期词典，直到过期的 key 比例小于 1&#x2F;4。这会导致卡顿，而且在高并发的情况下，可能会导致缓存雪崩。</p>\n<p><strong>为什么 Redis 为每次扫描添的上限时间是 25ms，还会出现上面的情况？</strong></p>\n<p>因为 Redis 是单线程，每个请求处理都需要排队，而且由于 Redis 每次扫描都是 25ms，也就是每个请求最多 25ms，100 个请求就是 2500ms。</p>\n<p>如果有大批量的 key 过期，要给过期时间设置一个随机范围，而不宜全部在同一时间过期，分散过期处理的压力。</p>\n<h4 id=\"从库的过期策略\"><a href=\"#从库的过期策略\" class=\"headerlink\" title=\"从库的过期策略\"></a>从库的过期策略</h4><p>从库不会进行过期扫描，从库对过期的处理是被动的。主库在 key 到期时，会在 AOF 文件里增加一条 del 指令，同步到所有的从库，从库通过执行这条 del 指令来删除过期的 key。</p>\n<p>因为指令同步是异步进行的，所以主库过期的 key 的 del 指令没有及时同步到从库的话，会出现主从数据的不一致，主库没有的数据在从库里还存在。</p>\n<h4 id=\"懒惰删除策略\"><a href=\"#懒惰删除策略\" class=\"headerlink\" title=\"懒惰删除策略\"></a>懒惰删除策略</h4><p><strong>Redis 为什么要懒惰删除(lazy free)？</strong></p>\n<p>删除指令 del 会直接释放对象的内存，大部分情况下，这个指令非常快，没有明显延迟。不过如果删除的 key 是一个非常大的对象，比如一个包含了千万元素的 hash，又或者在使用 FLUSHDB 和 FLUSHALL 删除包含大量键的数据库时，那么删除操作就会导致单线程卡顿。</p>\n<p>redis 4.0 引入了 lazyfree 的机制，它可以将删除键或数据库的操作放在后台线程里执行， 从而尽可能地避免服务器阻塞。</p>\n<h4 id=\"unlink\"><a href=\"#unlink\" class=\"headerlink\" title=\"unlink\"></a>unlink</h4><p>unlink 指令，它能对删除操作进行懒处理，丢给后台线程来异步回收内存。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> unlink key\nOK<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"flush\"><a href=\"#flush\" class=\"headerlink\" title=\"flush\"></a>flush</h4><p>flushdb 和 flushall 指令，用来清空数据库，这也是极其缓慢的操作。Redis 4.0 同样给这两个指令也带来了异步化，在指令后面增加 async 参数就可以将整棵大树连根拔起，扔给后台线程慢慢焚烧。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> flushall async\nOK<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"异步队列\"><a href=\"#异步队列\" class=\"headerlink\" title=\"异步队列\"></a>异步队列</h4><p>主线程将对象的引用从「大树」中摘除后，会将这个 key 的内存回收操作包装成一个任务，塞进异步任务队列，后台线程会从这个异步队列中取任务。任务队列被主线程和异步线程同时操作，所以必须是一个线程安全的队列。</p>\n<p>不是所有的 unlink 操作都会延后处理，如果对应 key 所占用的内存很小，延后处理就没有必要了，这时候 Redis 会将对应的 key 内存立即回收，跟 del 指令一样。</p>\n<h4 id=\"更多异步删除点\"><a href=\"#更多异步删除点\" class=\"headerlink\" title=\"更多异步删除点\"></a>更多异步删除点</h4><p>Redis 回收内存除了 del 指令和 flush 之外，还会存在于在 key 的过期、LRU 淘汰、rename 指令以及从库全量同步时接受完 rdb 文件后会立即进行的 flush 操作。</p>\n<p>Redis4.0 为这些删除点也带来了异步删除机制，打开这些点需要额外的配置选项。</p>\n<ul>\n<li>slave-lazy-flush 从库接受完 rdb 文件后的 flush 操作</li>\n<li>lazyfree-lazy-eviction 内存达到 maxmemory 时进行淘汰</li>\n<li>lazyfree-lazy-expire key 过期删除</li>\n<li>lazyfree-lazy-server-del rename 指令删除 destKey</li>\n</ul>\n<h4 id=\"内存淘汰机制\"><a href=\"#内存淘汰机制\" class=\"headerlink\" title=\"内存淘汰机制\"></a>内存淘汰机制</h4><p>Redis 的内存占用会越来越高。Redis 为了限制最大使用内存，提供了 redis.conf 中的<br>配置参数 maxmemory。当内存超出 maxmemory，<strong>Redis 提供了几种内存淘汰机制让用户选择，配置 maxmemory-policy：</strong></p>\n<ul>\n<li><strong>noeviction：</strong>当内存超出 maxmemory，写入请求会报错，但是删除和读请求可以继续。（使用这个策略，疯了吧）</li>\n<li><strong>allkeys-lru：</strong>当内存超出 maxmemory，在所有的 key 中，移除最少使用的 key。只把 Redis 既当缓存是使用这种策略。（推荐）。</li>\n<li><strong>allkeys-random：</strong>当内存超出 maxmemory，在所有的 key 中，随机移除某个 key。（应该没人用吧）</li>\n<li><strong>volatile-lru：</strong>当内存超出 maxmemory，在设置了过期时间 key 的字典中，移除最少使用的 key。把 Redis 既当缓存，又做持久化的时候使用这种策略。</li>\n<li><strong>volatile-random：</strong>当内存超出 maxmemory，在设置了过期时间 key 的字典中，随机移除某个 key。</li>\n<li><strong>volatile-ttl：</strong>当内存超出 maxmemory，在设置了过期时间 key 的字典中，优先移除 ttl 小的。</li>\n</ul>\n<h4 id=\"LRU-算法\"><a href=\"#LRU-算法\" class=\"headerlink\" title=\"LRU 算法\"></a>LRU 算法</h4><p>实现 LRU 算法除了需要 key&#x2F;value 字典外，还需要附加一个链表，链表中的元素按照一定的顺序进行排列。当空间满的时候，会踢掉链表尾部的元素。当字典的某个元素被访问时，它在链表中的位置会被移动到表头。所以链表的元素排列顺序就是元素最近被访问的时间顺序。</p>\n<p>使用 Python 的 OrderedDict(双向链表 + 字典) 来实现一个简单的 LRU 算法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> OrderedDict\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LRUDict</span><span class=\"token punctuation\">(</span>OrderedDict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> capacity\n        self<span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__setitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        old_value <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> old_value <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>capacity<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>popitem<span class=\"token punctuation\">(</span>last<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        value <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n        <span class=\"token keyword\">return</span> value\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span>\n\n\nd <span class=\"token operator\">=</span> LRUDict<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n<span class=\"token keyword\">print</span> d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"近似-LRU-算法\"><a href=\"#近似-LRU-算法\" class=\"headerlink\" title=\"近似 LRU 算法\"></a>近似 LRU 算法</h4><p>Redis 使用的并不是完全 LRU 算法。不使用 LRU 算法，是为了节省内存，Redis 采用的是随机 LRU 算法，Redis 为每一个 key 增加了一个 24 bit 的字段，用来记录这个 key 最后一次被访问的时间戳。</p>\n<p>注意 Redis 的 LRU 淘汰策略是懒惰处理，也就是不会主动执行淘汰策略，当 Redis 执行写操作时，发现内存超出 maxmemory，就会执行 LRU 淘汰算法。这个算法就是随机采样出 5(默认值)个 key，然后移除最旧的 key，如果移除后内存还是超出 maxmemory，那就继续随机采样淘汰，直到内存低于 maxmemory 为止。</p>\n<p>如何采样就是看 maxmemory-policy 的配置，如果是 allkeys 就是从所有的 key 字典中随机，如果是 volatile 就从带过期时间的 key 字典中随机。每次采样多少个 key 看的是 maxmemory_samples 的配置，默认为 5。</p>\n<h4 id=\"LFU\"><a href=\"#LFU\" class=\"headerlink\" title=\"LFU\"></a>LFU</h4><p>Redis 4.0 里引入了一个新的淘汰策略 —— LFU（Least Frequently Used） 模式，作者认为它比 LRU 更加优秀。</p>\n<p>LFU 表示按最近的访问频率进行淘汰，它比 LRU 更加精准地表示了一个 key 被访问的热度。</p>\n<p>如果一个 key 长时间不被访问，只是刚刚偶然被用户访问了一下，那么在使用 LRU 算法下它是不容易被淘汰的，因为 LRU 算法认为当前这个 key 是很热的。而 LFU 是需要追踪最近一段时间的访问频率，如果某个 key 只是偶然被访问一次是不足以变得很热的，它需要在近期一段时间内被访问很多次才有机会被认为很热。</p>\n<p><strong>Redis 对象的热度</strong></p>\n<p>Redis 的所有对象结构头中都有一个 24bit 的字段，这个字段用来记录对象的热度。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token operator\">//</span> redis 的对象头\ntypedef struct <span class=\"token function\">redisObject</span> <span class=\"token punctuation\">&#123;</span>\n    unsigned type<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> 对象类型如 zset<span class=\"token operator\">/</span>set<span class=\"token operator\">/</span>hash 等等\n    unsigned encoding<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> 对象编码如 ziplist<span class=\"token operator\">/</span>intset<span class=\"token operator\">/</span>skiplist 等等\n    unsigned lru<span class=\"token punctuation\">:</span><span class=\"token number\">24</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> 对象的「热度」\n    int refcount<span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> 引用计数\n    void <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> 对象的 body\n<span class=\"token punctuation\">&#125;</span> robj<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>LRU 模式</strong></p>\n<p>在 LRU 模式下，lru 字段存储的是 Redis 时钟 server.lruclock，Redis 时钟是一个 24bit 的整数，默认是 Unix 时间戳对 2^24 取模的结果，大约 97 天清零一次。当某个 key 被访问一次，它的对象头的 lru 字段值就会被更新为 server.lruclock。</p>\n<p><strong>LFU 模式</strong></p>\n<p>在 LFU 模式下，lru 字段 24 个 bit 用来存储两个值，分别是 ldt(last decrement time) 和 logc(logistic counter)。</p>\n<p>logc 是 8 个 bit，用来存储访问频次，因为 8 个 bit 能表示的最大整数值为 255，存储频次肯定远远不够，所以这 8 个 bit 存储的是频次的对数值，并且这个值还会随时间衰减。如果它的值比较小，那么就很容易被回收。为了确保新创建的对象不被回收，新对象的这 8 个 bit 会初始化为一个大于零的值，默认是 LFU_INIT_VAL&#x3D;5。</p>\n<p>ldt 是 16 个位，用来存储上一次 logc 的更新时间，因为只有 16 位，所以精度不可能很高。它取的是分钟时间戳对 2^16 进行取模，大约每隔 45 天就会折返。</p>\n<p>同 LRU 模式一样，我们也可以使用这个逻辑计算出对象的空闲时间，只不过精度是分钟级别的。图中的 server.unixtime 是当前 redis 记录的系统时间戳，和 server.lruclock 一样，它也是每毫秒更新一次。</p>\n"},{"title":"k8s 网络策略","date":"2023-06-11T16:00:00.000Z","updated":"2023-06-11T16:00:00.000Z","keywords":["k8s","NetworkPolicy"],"copyright":false,"_content":"\n如果你希望在 IP 地址或端口层面（OSI 第 3 层或第 4 层）控制网络流量， 则你可以考虑为集群中特定应用使用 Kubernetes 网络策略（NetworkPolicy）。 NetworkPolicy 是一种以应用为中心的结构，允许你设置如何允许 [Pod](https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/) 与网络上的各类网络“实体” （我们这里使用实体以避免过度使用诸如“端点”和“服务”这类常用术语， 这些术语在 Kubernetes 中有特定含义）通信。 NetworkPolicy 适用于一端或两端与 Pod 的连接，与其他连接无关。\n\nPod 可以通信的 Pod 是通过如下三个标识符的组合来辩识的：\n\n1. 其他被允许的 Pods（例外：Pod 无法阻塞对自身的访问）\n2. 被允许的名字空间\n3. IP 组块（例外：与 Pod 运行所在的节点的通信总是被允许的， 无论 Pod 或节点的 IP 地址）\n\n在定义基于 Pod 或名字空间的 NetworkPolicy 时， 你会使用[选择算符](https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/)来设定哪些流量可以进入或离开与该算符匹配的 Pod。 另外，当创建基于 IP 的 NetworkPolicy 时，我们基于 IP 组块（CIDR 范围）来定义策略。\n\n## 前置条件\n\n网络策略通过[网络插件](https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/)来实现。 要使用网络策略，你必须使用支持 NetworkPolicy 的网络解决方案。 创建一个 NetworkPolicy 资源对象而没有控制器来使它生效的话，是没有任何作用的。\n\n## Pod 隔离的两种类型\n\nPod 有两种隔离: 出口的隔离和入口的隔离。它们涉及到可以建立哪些连接。 这里的“隔离”不是绝对的，而是意味着“有一些限制”。 另外的，“非隔离方向”意味着在所述方向上没有限制。这两种隔离（或不隔离）是独立声明的， 并且都与从一个 Pod 到另一个 Pod 的连接有关。\n\n默认情况下，一个 Pod 的出口是非隔离的，即所有外向连接都是被允许的。如果有任何的 NetworkPolicy 选择该 Pod 并在其 `policyTypes` 中包含 “Egress”，则该 Pod 是出口隔离的， 我们称这样的策略适用于该 Pod 的出口。当一个 Pod 的出口被隔离时， 唯一允许的来自 Pod 的连接是适用于出口的 Pod 的某个 NetworkPolicy 的 `egress` 列表所允许的连接。 这些 `egress` 列表的效果是相加的。\n\n默认情况下，一个 Pod 对入口是非隔离的，即所有入站连接都是被允许的。如果有任何的 NetworkPolicy 选择该 Pod 并在其 `policyTypes` 中包含 “Ingress”，则该 Pod 被隔离入口， 我们称这种策略适用于该 Pod 的入口。当一个 Pod 的入口被隔离时，唯一允许进入该 Pod 的连接是来自该 Pod 节点的连接和适用于入口的 Pod 的某个 NetworkPolicy 的 `ingress` 列表所允许的连接。这些 `ingress` 列表的效果是相加的。\n\n网络策略是相加的，所以不会产生冲突。如果策略适用于 Pod 某一特定方向的流量， Pod 在对应方向所允许的连接是适用的网络策略所允许的集合。 因此，评估的顺序不影响策略的结果。\n\n要允许从源 Pod 到目的 Pod 的连接，源 Pod 的出口策略和目的 Pod 的入口策略都需要允许连接。 如果任何一方不允许连接，建立连接将会失败。\n\n## NetworkPolicy 资源\n\n参阅 [NetworkPolicy](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#networkpolicy-v1-networking-k8s-io) 来了解资源的完整定义。\n\n下面是一个 NetworkPolicy 的示例:\n\n[`service/networking/networkpolicy.yaml`](https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/networkpolicy.yaml)\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: test-network-policy\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      role: db\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - ipBlock:\n            cidr: 172.17.0.0/16\n            except:\n              - 172.17.1.0/24\n        - namespaceSelector:\n            matchLabels:\n              project: myproject\n        - podSelector:\n            matchLabels:\n              role: frontend\n      ports:\n        - protocol: TCP\n          port: 6379\n  egress:\n    - to:\n        - ipBlock:\n            cidr: 10.0.0.0/24\n      ports:\n        - protocol: TCP\n          port: 5978\n```\n\n**说明：**\n\n除非选择支持网络策略的网络解决方案，否则将上述示例发送到API服务器没有任何效果。\n\n**必需字段**：与所有其他的 Kubernetes 配置一样，NetworkPolicy 需要 `apiVersion`、 `kind` 和 `metadata` 字段。关于配置文件操作的一般信息， 请参考[配置 Pod 以使用 ConfigMap](https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-pod-configmap/) 和[对象管理](https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/object-management)。\n\n**spec**：NetworkPolicy [规约](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status) 中包含了在一个名字空间中定义特定网络策略所需的所有信息。\n\n**podSelector**：每个 NetworkPolicy 都包括一个 `podSelector`， 它对该策略所适用的一组 Pod 进行选择。示例中的策略选择带有 \"role=db\" 标签的 Pod。 空的 `podSelector` 选择名字空间下的所有 Pod。\n\n**policyTypes**：每个 NetworkPolicy 都包含一个 `policyTypes` 列表，其中包含 `Ingress` 或 `Egress` 或两者兼具。`policyTypes` 字段表示给定的策略是应用于进入所选 Pod 的入站流量还是来自所选 Pod 的出站流量，或两者兼有。 如果 NetworkPolicy 未指定 `policyTypes` 则默认情况下始终设置 `Ingress`； 如果 NetworkPolicy 有任何出口规则的话则设置 `Egress`。\n\n**ingress**：每个 NetworkPolicy 可包含一个 `ingress` 规则的白名单列表。 每个规则都允许同时匹配 `from` 和 `ports` 部分的流量。示例策略中包含一条简单的规则： 它匹配某个特定端口，来自三个来源中的一个，第一个通过 `ipBlock` 指定，第二个通过 `namespaceSelector` 指定，第三个通过 `podSelector` 指定。\n\n**egress**：每个 NetworkPolicy 可包含一个 `egress` 规则的白名单列表。 每个规则都允许匹配 `to` 和 `port` 部分的流量。该示例策略包含一条规则， 该规则将指定端口上的流量匹配到 `10.0.0.0/24` 中的任何目的地。\n\n所以，该网络策略示例:\n\n1. 隔离 `default` 名字空间下 `role=db` 的 Pod （如果它们不是已经被隔离的话）。\n2. （Ingress 规则）允许以下 Pod 连接到 `default` 名字空间下的带有 `role=db` 标签的所有 Pod 的 6379 TCP 端口：\n   - `default` 名字空间下带有 `role=frontend` 标签的所有 Pod\n   - 带有 `project=myproject` 标签的所有名字空间中的 Pod\n   - IP 地址范围为 172.17.0.0–172.17.0.255 和 172.17.2.0–172.17.255.255 （即，除了 172.17.1.0/24 之外的所有 172.17.0.0/16）\n3. （Egress 规则）允许 `default` 名字空间中任何带有标签 `role=db` 的 Pod 到 CIDR 10.0.0.0/24 下 5978 TCP 端口的连接。\n\n参阅[声明网络策略](https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/declare-network-policy/)演练了解更多示例。\n\n## 选择器 `to` 和 `from` 的行为\n\n可以在 `ingress` 的 `from` 部分或 `egress` 的 `to` 部分中指定四种选择器：\n\n**podSelector**：此选择器将在与 NetworkPolicy 相同的名字空间中选择特定的 Pod，应将其允许作为入站流量来源或出站流量目的地。\n\n**namespaceSelector**：此选择器将选择特定的名字空间，应将所有 Pod 用作其入站流量来源或出站流量目的地。\n\n**namespaceSelector 和 podSelector**：一个指定 `namespaceSelector` 和 `podSelector` 的 `to`/`from` 条目选择特定名字空间中的特定 Pod。 注意使用正确的 YAML 语法；下面的策略：\n\n```yaml\n  ...\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          user: alice\n      podSelector:\n        matchLabels:\n          role: client\n  ...\n```\n\n此策略在 `from` 数组中仅包含一个元素，只允许来自标有 `role=client` 的 Pod 且该 Pod 所在的名字空间中标有 `user=alice` 的连接。但是**这项**策略：\n\n```yaml\n  ...\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          user: alice\n    - podSelector:\n        matchLabels:\n          role: client\n  ...\n```\n\n它在 `from` 数组中包含两个元素，允许来自本地名字空间中标有 `role=client` 的 Pod 的连接，**或**来自任何名字空间中标有 `user=alice` 的任何 Pod 的连接。\n\n如有疑问，请使用 `kubectl describe` 查看 Kubernetes 如何解释该策略。\n\n**ipBlock**：此选择器将选择特定的 IP CIDR 范围以用作入站流量来源或出站流量目的地。 这些应该是集群外部 IP，因为 Pod IP 存在时间短暂的且随机产生。\n\n集群的入站和出站机制通常需要重写数据包的源 IP 或目标 IP。 在发生这种情况时，不确定在 NetworkPolicy 处理之前还是之后发生， 并且对于网络插件、云提供商、`Service` 实现等的不同组合，其行为可能会有所不同。\n\n对入站流量而言，这意味着在某些情况下，你可以根据实际的原始源 IP 过滤传入的数据包， 而在其他情况下，NetworkPolicy 所作用的 `源IP` 则可能是 `LoadBalancer` 或 Pod 的节点等。\n\n对于出站流量而言，这意味着从 Pod 到被重写为集群外部 IP 的 `Service` IP 的连接可能会或可能不会受到基于 `ipBlock` 的策略的约束。\n\n## 默认策略\n\n默认情况下，如果名字空间中不存在任何策略，则所有进出该名字空间中 Pod 的流量都被允许。 以下示例使你可以更改该名字空间中的默认行为。\n\n### 默认拒绝所有入站流量\n\n你可以通过创建选择所有 Pod 但不允许任何进入这些 Pod 的入站流量的 NetworkPolicy 来为名字空间创建 “default” 隔离策略。\n\n[`service/networking/network-policy-default-deny-ingress.yaml`](https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-default-deny-ingress.yaml) \n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-ingress\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n```\n\n这确保即使没有被任何其他 NetworkPolicy 选择的 Pod 仍将被隔离以进行入口。 此策略不影响任何 Pod 的出口隔离。\n\n### 允许所有入站流量\n\n如果你想允许一个名字空间中所有 Pod 的所有入站连接，你可以创建一个明确允许的策略。\n\n[`service/networking/network-policy-allow-all-ingress.yaml`](https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-allow-all-ingress.yaml) \n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-all-ingress\nspec:\n  podSelector: {}\n  ingress:\n  - {}\n  policyTypes:\n  - Ingress\n```\n\n有了这个策略，任何额外的策略都不会导致到这些 Pod 的任何入站连接被拒绝。 此策略对任何 Pod 的出口隔离没有影响。\n\n### 默认拒绝所有出站流量\n\n你可以通过创建选择所有容器但不允许来自这些容器的任何出站流量的 NetworkPolicy 来为名字空间创建 “default” 隔离策略。\n\n[`service/networking/network-policy-default-deny-egress.yaml`](https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-default-deny-egress.yaml) \n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-egress\nspec:\n  podSelector: {}\n  policyTypes:\n  - Egress\n```\n\n此策略可以确保即使没有被其他任何 NetworkPolicy 选择的 Pod 也不会被允许流出流量。 此策略不会更改任何 Pod 的入站流量隔离行为。\n\n### 允许所有出站流量\n\n如果要允许来自名字空间中所有 Pod 的所有连接， 则可以创建一个明确允许来自该名字空间中 Pod 的所有出站连接的策略。\n\n[`service/networking/network-policy-allow-all-egress.yaml`](https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-allow-all-egress.yaml) \n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-all-egress\nspec:\n  podSelector: {}\n  egress:\n  - {}\n  policyTypes:\n  - Egress\n```\n\n有了这个策略，任何额外的策略都不会导致来自这些 Pod 的任何出站连接被拒绝。 此策略对进入任何 Pod 的隔离没有影响。\n\n### 默认拒绝所有入站和所有出站流量\n\n你可以为名字空间创建“默认”策略，以通过在该名字空间中创建以下 NetworkPolicy 来阻止所有入站和出站流量。\n\n[`service/networking/network-policy-default-deny-all.yaml`](https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-default-deny-all.yaml)\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-all\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n```\n\n此策略可以确保即使没有被其他任何 NetworkPolicy 选择的 Pod 也不会被允许入站或出站流量。\n\n## SCTP 支持\n\n**特性状态：** `Kubernetes v1.20 [stable]`\n\n作为一个稳定特性，SCTP 支持默认是被启用的。 要在集群层面禁用 SCTP，你（或你的集群管理员）需要为 API 服务器指定 `--feature-gates=SCTPSupport=false,...` 来禁用 `SCTPSupport` [特性门控](https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/feature-gates/)。 启用该特性门控后，用户可以将 NetworkPolicy 的 `protocol` 字段设置为 `SCTP`。\n\n**说明：**\n\n你必须使用支持 SCTP 协议 NetworkPolicy 的 [CNI](https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/) 插件。\n\n## 针对某个端口范围\n\n**特性状态：** `Kubernetes v1.25 [stable]`\n\n在编写 NetworkPolicy 时，你可以针对一个端口范围而不是某个固定端口。\n\n这一目的可以通过使用 `endPort` 字段来实现，如下例所示：\n\n[`service/networking/networkpolicy-multiport-egress.yaml`](https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/networkpolicy-multiport-egress.yaml) \n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: multi-port-egress\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      role: db\n  policyTypes:\n    - Egress\n  egress:\n    - to:\n        - ipBlock:\n            cidr: 10.0.0.0/24\n      ports:\n        - protocol: TCP\n          port: 32000\n          endPort: 32768\n```\n\n上面的规则允许名字空间 `default` 中所有带有标签 `role=db` 的 Pod 使用 TCP 协议与 `10.0.0.0/24` 范围内的 IP 通信，只要目标端口介于 32000 和 32768 之间就可以。\n\n使用此字段时存在以下限制：\n\n- `endPort` 字段必须等于或者大于 `port` 字段的值。\n- 只有在定义了 `port` 时才能定义 `endPort`。\n- 两个字段的设置值都只能是数字。\n\n**说明：**\n\n你的集群所使用的 [CNI](https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/) 插件必须支持在 NetworkPolicy 规约中使用 `endPort` 字段。 如果你的[网络插件](https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/)不支持 `endPort` 字段，而你指定了一个包含 `endPort` 字段的 NetworkPolicy， 策略只对单个 `port` 字段生效。\n\n## 按标签选择多个命名空间\n\n在这种情况下，你的 `Egress` NetworkPolicy 使用名字空间的标签名称来将多个名字空间作为其目标。 为此，你需要为目标名字空间设置标签。例如：\n\n```shell\n kubectl label namespace frontend namespace=frontend\n kubectl label namespace backend namespace=backend\n```\n\n在 NetworkPolicy 文档中的 namespaceSelector 下添加标签。例如：\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: egress-namespaces\nspec:\n  podSelector:\n    matchLabels:\n      app: myapp\n  policyTypes:\n  - Egress\n  egress:\n   - to:\n     - namespaceSelector:\n       matchExpressions:\n       - key: namespace\n         operator: In\n         values: [\"frontend\", \"backend\"]\n```\n\n**说明：**\n\n你不可以在 NetworkPolicy 中直接指定命名空间的名称。 你必须使用带有 `matchLabels` 或 `matchExpressions` 的 `namespaceSelector` 来根据标签选择命名空间。\n\n## 基于名字指向某名字空间\n\n**特性状态：** `Kubernetes 1.22 [stable]`\n\n只要 `NamespaceDefaultLabelName` [特性门控](https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/feature-gates/)被启用， Kubernetes 控制面会在所有名字空间上设置一个不可变更的标签 `kubernetes.io/metadata.name`。该标签的值是名字空间的名称。\n\n如果 NetworkPolicy 无法在某些对象字段中指向某名字空间， 你可以使用标准的标签方式来指向特定名字空间。\n\n## 通过网络策略（至少目前还）无法完成的工作\n\n到 Kubernetes 1.27 为止，NetworkPolicy API 还不支持以下功能， 不过你可能可以使用操作系统组件（如 SELinux、OpenVSwitch、IPTables 等等） 或者第七层技术（Ingress 控制器、服务网格实现）或准入控制器来实现一些替代方案。 如果你对 Kubernetes 中的网络安全性还不太了解，了解使用 NetworkPolicy API 还无法实现下面的用户场景是很值得的。\n\n- 强制集群内部流量经过某公用网关（这种场景最好通过服务网格或其他代理来实现）；\n- 与 TLS 相关的场景（考虑使用服务网格或者 Ingress 控制器）；\n- 特定于节点的策略（你可以使用 CIDR 来表达这一需求不过你无法使用节点在 Kubernetes 中的其他标识信息来辩识目标节点）；\n- 基于名字来选择服务（不过，你可以使用 [标签](https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/) 来选择目标 Pod 或名字空间，这也通常是一种可靠的替代方案）；\n- 创建或管理由第三方来实际完成的“策略请求”；\n\n- 实现适用于所有名字空间或 Pods 的默认策略（某些第三方 Kubernetes 发行版本或项目可以做到这点）；\n- 高级的策略查询或者可达性相关工具；\n- 生成网络安全事件日志的能力（例如，被阻塞或接收的连接请求）；\n- 显式地拒绝策略的能力（目前，NetworkPolicy 的模型默认采用拒绝操作， 其唯一的能力是添加允许策略）；\n- 禁止本地回路或指向宿主的网络流量（Pod 目前无法阻塞 localhost 访问， 它们也无法禁止来自所在节点的访问请求）。","source":"_posts/k8s/study/k8s 网络策略.md","raw":"---\ntitle: k8s 网络策略\ndate: 2023-06-12\nupdated: 2023-06-12\ntags:\n  - k8s\n  - 学习\ncategories:\n  - 虚拟化\nkeywords:\n  - k8s\n  - NetworkPolicy\ncopyright: false\n---\n\n如果你希望在 IP 地址或端口层面（OSI 第 3 层或第 4 层）控制网络流量， 则你可以考虑为集群中特定应用使用 Kubernetes 网络策略（NetworkPolicy）。 NetworkPolicy 是一种以应用为中心的结构，允许你设置如何允许 [Pod](https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/) 与网络上的各类网络“实体” （我们这里使用实体以避免过度使用诸如“端点”和“服务”这类常用术语， 这些术语在 Kubernetes 中有特定含义）通信。 NetworkPolicy 适用于一端或两端与 Pod 的连接，与其他连接无关。\n\nPod 可以通信的 Pod 是通过如下三个标识符的组合来辩识的：\n\n1. 其他被允许的 Pods（例外：Pod 无法阻塞对自身的访问）\n2. 被允许的名字空间\n3. IP 组块（例外：与 Pod 运行所在的节点的通信总是被允许的， 无论 Pod 或节点的 IP 地址）\n\n在定义基于 Pod 或名字空间的 NetworkPolicy 时， 你会使用[选择算符](https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/)来设定哪些流量可以进入或离开与该算符匹配的 Pod。 另外，当创建基于 IP 的 NetworkPolicy 时，我们基于 IP 组块（CIDR 范围）来定义策略。\n\n## 前置条件\n\n网络策略通过[网络插件](https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/)来实现。 要使用网络策略，你必须使用支持 NetworkPolicy 的网络解决方案。 创建一个 NetworkPolicy 资源对象而没有控制器来使它生效的话，是没有任何作用的。\n\n## Pod 隔离的两种类型\n\nPod 有两种隔离: 出口的隔离和入口的隔离。它们涉及到可以建立哪些连接。 这里的“隔离”不是绝对的，而是意味着“有一些限制”。 另外的，“非隔离方向”意味着在所述方向上没有限制。这两种隔离（或不隔离）是独立声明的， 并且都与从一个 Pod 到另一个 Pod 的连接有关。\n\n默认情况下，一个 Pod 的出口是非隔离的，即所有外向连接都是被允许的。如果有任何的 NetworkPolicy 选择该 Pod 并在其 `policyTypes` 中包含 “Egress”，则该 Pod 是出口隔离的， 我们称这样的策略适用于该 Pod 的出口。当一个 Pod 的出口被隔离时， 唯一允许的来自 Pod 的连接是适用于出口的 Pod 的某个 NetworkPolicy 的 `egress` 列表所允许的连接。 这些 `egress` 列表的效果是相加的。\n\n默认情况下，一个 Pod 对入口是非隔离的，即所有入站连接都是被允许的。如果有任何的 NetworkPolicy 选择该 Pod 并在其 `policyTypes` 中包含 “Ingress”，则该 Pod 被隔离入口， 我们称这种策略适用于该 Pod 的入口。当一个 Pod 的入口被隔离时，唯一允许进入该 Pod 的连接是来自该 Pod 节点的连接和适用于入口的 Pod 的某个 NetworkPolicy 的 `ingress` 列表所允许的连接。这些 `ingress` 列表的效果是相加的。\n\n网络策略是相加的，所以不会产生冲突。如果策略适用于 Pod 某一特定方向的流量， Pod 在对应方向所允许的连接是适用的网络策略所允许的集合。 因此，评估的顺序不影响策略的结果。\n\n要允许从源 Pod 到目的 Pod 的连接，源 Pod 的出口策略和目的 Pod 的入口策略都需要允许连接。 如果任何一方不允许连接，建立连接将会失败。\n\n## NetworkPolicy 资源\n\n参阅 [NetworkPolicy](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#networkpolicy-v1-networking-k8s-io) 来了解资源的完整定义。\n\n下面是一个 NetworkPolicy 的示例:\n\n[`service/networking/networkpolicy.yaml`](https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/networkpolicy.yaml)\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: test-network-policy\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      role: db\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - ipBlock:\n            cidr: 172.17.0.0/16\n            except:\n              - 172.17.1.0/24\n        - namespaceSelector:\n            matchLabels:\n              project: myproject\n        - podSelector:\n            matchLabels:\n              role: frontend\n      ports:\n        - protocol: TCP\n          port: 6379\n  egress:\n    - to:\n        - ipBlock:\n            cidr: 10.0.0.0/24\n      ports:\n        - protocol: TCP\n          port: 5978\n```\n\n**说明：**\n\n除非选择支持网络策略的网络解决方案，否则将上述示例发送到API服务器没有任何效果。\n\n**必需字段**：与所有其他的 Kubernetes 配置一样，NetworkPolicy 需要 `apiVersion`、 `kind` 和 `metadata` 字段。关于配置文件操作的一般信息， 请参考[配置 Pod 以使用 ConfigMap](https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-pod-configmap/) 和[对象管理](https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/object-management)。\n\n**spec**：NetworkPolicy [规约](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status) 中包含了在一个名字空间中定义特定网络策略所需的所有信息。\n\n**podSelector**：每个 NetworkPolicy 都包括一个 `podSelector`， 它对该策略所适用的一组 Pod 进行选择。示例中的策略选择带有 \"role=db\" 标签的 Pod。 空的 `podSelector` 选择名字空间下的所有 Pod。\n\n**policyTypes**：每个 NetworkPolicy 都包含一个 `policyTypes` 列表，其中包含 `Ingress` 或 `Egress` 或两者兼具。`policyTypes` 字段表示给定的策略是应用于进入所选 Pod 的入站流量还是来自所选 Pod 的出站流量，或两者兼有。 如果 NetworkPolicy 未指定 `policyTypes` 则默认情况下始终设置 `Ingress`； 如果 NetworkPolicy 有任何出口规则的话则设置 `Egress`。\n\n**ingress**：每个 NetworkPolicy 可包含一个 `ingress` 规则的白名单列表。 每个规则都允许同时匹配 `from` 和 `ports` 部分的流量。示例策略中包含一条简单的规则： 它匹配某个特定端口，来自三个来源中的一个，第一个通过 `ipBlock` 指定，第二个通过 `namespaceSelector` 指定，第三个通过 `podSelector` 指定。\n\n**egress**：每个 NetworkPolicy 可包含一个 `egress` 规则的白名单列表。 每个规则都允许匹配 `to` 和 `port` 部分的流量。该示例策略包含一条规则， 该规则将指定端口上的流量匹配到 `10.0.0.0/24` 中的任何目的地。\n\n所以，该网络策略示例:\n\n1. 隔离 `default` 名字空间下 `role=db` 的 Pod （如果它们不是已经被隔离的话）。\n2. （Ingress 规则）允许以下 Pod 连接到 `default` 名字空间下的带有 `role=db` 标签的所有 Pod 的 6379 TCP 端口：\n   - `default` 名字空间下带有 `role=frontend` 标签的所有 Pod\n   - 带有 `project=myproject` 标签的所有名字空间中的 Pod\n   - IP 地址范围为 172.17.0.0–172.17.0.255 和 172.17.2.0–172.17.255.255 （即，除了 172.17.1.0/24 之外的所有 172.17.0.0/16）\n3. （Egress 规则）允许 `default` 名字空间中任何带有标签 `role=db` 的 Pod 到 CIDR 10.0.0.0/24 下 5978 TCP 端口的连接。\n\n参阅[声明网络策略](https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/declare-network-policy/)演练了解更多示例。\n\n## 选择器 `to` 和 `from` 的行为\n\n可以在 `ingress` 的 `from` 部分或 `egress` 的 `to` 部分中指定四种选择器：\n\n**podSelector**：此选择器将在与 NetworkPolicy 相同的名字空间中选择特定的 Pod，应将其允许作为入站流量来源或出站流量目的地。\n\n**namespaceSelector**：此选择器将选择特定的名字空间，应将所有 Pod 用作其入站流量来源或出站流量目的地。\n\n**namespaceSelector 和 podSelector**：一个指定 `namespaceSelector` 和 `podSelector` 的 `to`/`from` 条目选择特定名字空间中的特定 Pod。 注意使用正确的 YAML 语法；下面的策略：\n\n```yaml\n  ...\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          user: alice\n      podSelector:\n        matchLabels:\n          role: client\n  ...\n```\n\n此策略在 `from` 数组中仅包含一个元素，只允许来自标有 `role=client` 的 Pod 且该 Pod 所在的名字空间中标有 `user=alice` 的连接。但是**这项**策略：\n\n```yaml\n  ...\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          user: alice\n    - podSelector:\n        matchLabels:\n          role: client\n  ...\n```\n\n它在 `from` 数组中包含两个元素，允许来自本地名字空间中标有 `role=client` 的 Pod 的连接，**或**来自任何名字空间中标有 `user=alice` 的任何 Pod 的连接。\n\n如有疑问，请使用 `kubectl describe` 查看 Kubernetes 如何解释该策略。\n\n**ipBlock**：此选择器将选择特定的 IP CIDR 范围以用作入站流量来源或出站流量目的地。 这些应该是集群外部 IP，因为 Pod IP 存在时间短暂的且随机产生。\n\n集群的入站和出站机制通常需要重写数据包的源 IP 或目标 IP。 在发生这种情况时，不确定在 NetworkPolicy 处理之前还是之后发生， 并且对于网络插件、云提供商、`Service` 实现等的不同组合，其行为可能会有所不同。\n\n对入站流量而言，这意味着在某些情况下，你可以根据实际的原始源 IP 过滤传入的数据包， 而在其他情况下，NetworkPolicy 所作用的 `源IP` 则可能是 `LoadBalancer` 或 Pod 的节点等。\n\n对于出站流量而言，这意味着从 Pod 到被重写为集群外部 IP 的 `Service` IP 的连接可能会或可能不会受到基于 `ipBlock` 的策略的约束。\n\n## 默认策略\n\n默认情况下，如果名字空间中不存在任何策略，则所有进出该名字空间中 Pod 的流量都被允许。 以下示例使你可以更改该名字空间中的默认行为。\n\n### 默认拒绝所有入站流量\n\n你可以通过创建选择所有 Pod 但不允许任何进入这些 Pod 的入站流量的 NetworkPolicy 来为名字空间创建 “default” 隔离策略。\n\n[`service/networking/network-policy-default-deny-ingress.yaml`](https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-default-deny-ingress.yaml) \n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-ingress\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n```\n\n这确保即使没有被任何其他 NetworkPolicy 选择的 Pod 仍将被隔离以进行入口。 此策略不影响任何 Pod 的出口隔离。\n\n### 允许所有入站流量\n\n如果你想允许一个名字空间中所有 Pod 的所有入站连接，你可以创建一个明确允许的策略。\n\n[`service/networking/network-policy-allow-all-ingress.yaml`](https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-allow-all-ingress.yaml) \n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-all-ingress\nspec:\n  podSelector: {}\n  ingress:\n  - {}\n  policyTypes:\n  - Ingress\n```\n\n有了这个策略，任何额外的策略都不会导致到这些 Pod 的任何入站连接被拒绝。 此策略对任何 Pod 的出口隔离没有影响。\n\n### 默认拒绝所有出站流量\n\n你可以通过创建选择所有容器但不允许来自这些容器的任何出站流量的 NetworkPolicy 来为名字空间创建 “default” 隔离策略。\n\n[`service/networking/network-policy-default-deny-egress.yaml`](https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-default-deny-egress.yaml) \n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-egress\nspec:\n  podSelector: {}\n  policyTypes:\n  - Egress\n```\n\n此策略可以确保即使没有被其他任何 NetworkPolicy 选择的 Pod 也不会被允许流出流量。 此策略不会更改任何 Pod 的入站流量隔离行为。\n\n### 允许所有出站流量\n\n如果要允许来自名字空间中所有 Pod 的所有连接， 则可以创建一个明确允许来自该名字空间中 Pod 的所有出站连接的策略。\n\n[`service/networking/network-policy-allow-all-egress.yaml`](https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-allow-all-egress.yaml) \n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-all-egress\nspec:\n  podSelector: {}\n  egress:\n  - {}\n  policyTypes:\n  - Egress\n```\n\n有了这个策略，任何额外的策略都不会导致来自这些 Pod 的任何出站连接被拒绝。 此策略对进入任何 Pod 的隔离没有影响。\n\n### 默认拒绝所有入站和所有出站流量\n\n你可以为名字空间创建“默认”策略，以通过在该名字空间中创建以下 NetworkPolicy 来阻止所有入站和出站流量。\n\n[`service/networking/network-policy-default-deny-all.yaml`](https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-default-deny-all.yaml)\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-all\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n```\n\n此策略可以确保即使没有被其他任何 NetworkPolicy 选择的 Pod 也不会被允许入站或出站流量。\n\n## SCTP 支持\n\n**特性状态：** `Kubernetes v1.20 [stable]`\n\n作为一个稳定特性，SCTP 支持默认是被启用的。 要在集群层面禁用 SCTP，你（或你的集群管理员）需要为 API 服务器指定 `--feature-gates=SCTPSupport=false,...` 来禁用 `SCTPSupport` [特性门控](https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/feature-gates/)。 启用该特性门控后，用户可以将 NetworkPolicy 的 `protocol` 字段设置为 `SCTP`。\n\n**说明：**\n\n你必须使用支持 SCTP 协议 NetworkPolicy 的 [CNI](https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/) 插件。\n\n## 针对某个端口范围\n\n**特性状态：** `Kubernetes v1.25 [stable]`\n\n在编写 NetworkPolicy 时，你可以针对一个端口范围而不是某个固定端口。\n\n这一目的可以通过使用 `endPort` 字段来实现，如下例所示：\n\n[`service/networking/networkpolicy-multiport-egress.yaml`](https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/networkpolicy-multiport-egress.yaml) \n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: multi-port-egress\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      role: db\n  policyTypes:\n    - Egress\n  egress:\n    - to:\n        - ipBlock:\n            cidr: 10.0.0.0/24\n      ports:\n        - protocol: TCP\n          port: 32000\n          endPort: 32768\n```\n\n上面的规则允许名字空间 `default` 中所有带有标签 `role=db` 的 Pod 使用 TCP 协议与 `10.0.0.0/24` 范围内的 IP 通信，只要目标端口介于 32000 和 32768 之间就可以。\n\n使用此字段时存在以下限制：\n\n- `endPort` 字段必须等于或者大于 `port` 字段的值。\n- 只有在定义了 `port` 时才能定义 `endPort`。\n- 两个字段的设置值都只能是数字。\n\n**说明：**\n\n你的集群所使用的 [CNI](https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/) 插件必须支持在 NetworkPolicy 规约中使用 `endPort` 字段。 如果你的[网络插件](https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/)不支持 `endPort` 字段，而你指定了一个包含 `endPort` 字段的 NetworkPolicy， 策略只对单个 `port` 字段生效。\n\n## 按标签选择多个命名空间\n\n在这种情况下，你的 `Egress` NetworkPolicy 使用名字空间的标签名称来将多个名字空间作为其目标。 为此，你需要为目标名字空间设置标签。例如：\n\n```shell\n kubectl label namespace frontend namespace=frontend\n kubectl label namespace backend namespace=backend\n```\n\n在 NetworkPolicy 文档中的 namespaceSelector 下添加标签。例如：\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: egress-namespaces\nspec:\n  podSelector:\n    matchLabels:\n      app: myapp\n  policyTypes:\n  - Egress\n  egress:\n   - to:\n     - namespaceSelector:\n       matchExpressions:\n       - key: namespace\n         operator: In\n         values: [\"frontend\", \"backend\"]\n```\n\n**说明：**\n\n你不可以在 NetworkPolicy 中直接指定命名空间的名称。 你必须使用带有 `matchLabels` 或 `matchExpressions` 的 `namespaceSelector` 来根据标签选择命名空间。\n\n## 基于名字指向某名字空间\n\n**特性状态：** `Kubernetes 1.22 [stable]`\n\n只要 `NamespaceDefaultLabelName` [特性门控](https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/feature-gates/)被启用， Kubernetes 控制面会在所有名字空间上设置一个不可变更的标签 `kubernetes.io/metadata.name`。该标签的值是名字空间的名称。\n\n如果 NetworkPolicy 无法在某些对象字段中指向某名字空间， 你可以使用标准的标签方式来指向特定名字空间。\n\n## 通过网络策略（至少目前还）无法完成的工作\n\n到 Kubernetes 1.27 为止，NetworkPolicy API 还不支持以下功能， 不过你可能可以使用操作系统组件（如 SELinux、OpenVSwitch、IPTables 等等） 或者第七层技术（Ingress 控制器、服务网格实现）或准入控制器来实现一些替代方案。 如果你对 Kubernetes 中的网络安全性还不太了解，了解使用 NetworkPolicy API 还无法实现下面的用户场景是很值得的。\n\n- 强制集群内部流量经过某公用网关（这种场景最好通过服务网格或其他代理来实现）；\n- 与 TLS 相关的场景（考虑使用服务网格或者 Ingress 控制器）；\n- 特定于节点的策略（你可以使用 CIDR 来表达这一需求不过你无法使用节点在 Kubernetes 中的其他标识信息来辩识目标节点）；\n- 基于名字来选择服务（不过，你可以使用 [标签](https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/) 来选择目标 Pod 或名字空间，这也通常是一种可靠的替代方案）；\n- 创建或管理由第三方来实际完成的“策略请求”；\n\n- 实现适用于所有名字空间或 Pods 的默认策略（某些第三方 Kubernetes 发行版本或项目可以做到这点）；\n- 高级的策略查询或者可达性相关工具；\n- 生成网络安全事件日志的能力（例如，被阻塞或接收的连接请求）；\n- 显式地拒绝策略的能力（目前，NetworkPolicy 的模型默认采用拒绝操作， 其唯一的能力是添加允许策略）；\n- 禁止本地回路或指向宿主的网络流量（Pod 目前无法阻塞 localhost 访问， 它们也无法禁止来自所在节点的访问请求）。","slug":"k8s/study/k8s 网络策略","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cmfxlor820025zc7h29h14cby","content":"<p>如果你希望在 IP 地址或端口层面（OSI 第 3 层或第 4 层）控制网络流量， 则你可以考虑为集群中特定应用使用 Kubernetes 网络策略（NetworkPolicy）。 NetworkPolicy 是一种以应用为中心的结构，允许你设置如何允许 <a href=\"https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/\">Pod</a> 与网络上的各类网络“实体” （我们这里使用实体以避免过度使用诸如“端点”和“服务”这类常用术语， 这些术语在 Kubernetes 中有特定含义）通信。 NetworkPolicy 适用于一端或两端与 Pod 的连接，与其他连接无关。</p>\n<p>Pod 可以通信的 Pod 是通过如下三个标识符的组合来辩识的：</p>\n<ol>\n<li>其他被允许的 Pods（例外：Pod 无法阻塞对自身的访问）</li>\n<li>被允许的名字空间</li>\n<li>IP 组块（例外：与 Pod 运行所在的节点的通信总是被允许的， 无论 Pod 或节点的 IP 地址）</li>\n</ol>\n<p>在定义基于 Pod 或名字空间的 NetworkPolicy 时， 你会使用<a href=\"https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/\">选择算符</a>来设定哪些流量可以进入或离开与该算符匹配的 Pod。 另外，当创建基于 IP 的 NetworkPolicy 时，我们基于 IP 组块（CIDR 范围）来定义策略。</p>\n<h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><p>网络策略通过<a href=\"https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/\">网络插件</a>来实现。 要使用网络策略，你必须使用支持 NetworkPolicy 的网络解决方案。 创建一个 NetworkPolicy 资源对象而没有控制器来使它生效的话，是没有任何作用的。</p>\n<h2 id=\"Pod-隔离的两种类型\"><a href=\"#Pod-隔离的两种类型\" class=\"headerlink\" title=\"Pod 隔离的两种类型\"></a>Pod 隔离的两种类型</h2><p>Pod 有两种隔离: 出口的隔离和入口的隔离。它们涉及到可以建立哪些连接。 这里的“隔离”不是绝对的，而是意味着“有一些限制”。 另外的，“非隔离方向”意味着在所述方向上没有限制。这两种隔离（或不隔离）是独立声明的， 并且都与从一个 Pod 到另一个 Pod 的连接有关。</p>\n<p>默认情况下，一个 Pod 的出口是非隔离的，即所有外向连接都是被允许的。如果有任何的 NetworkPolicy 选择该 Pod 并在其 <code>policyTypes</code> 中包含 “Egress”，则该 Pod 是出口隔离的， 我们称这样的策略适用于该 Pod 的出口。当一个 Pod 的出口被隔离时， 唯一允许的来自 Pod 的连接是适用于出口的 Pod 的某个 NetworkPolicy 的 <code>egress</code> 列表所允许的连接。 这些 <code>egress</code> 列表的效果是相加的。</p>\n<p>默认情况下，一个 Pod 对入口是非隔离的，即所有入站连接都是被允许的。如果有任何的 NetworkPolicy 选择该 Pod 并在其 <code>policyTypes</code> 中包含 “Ingress”，则该 Pod 被隔离入口， 我们称这种策略适用于该 Pod 的入口。当一个 Pod 的入口被隔离时，唯一允许进入该 Pod 的连接是来自该 Pod 节点的连接和适用于入口的 Pod 的某个 NetworkPolicy 的 <code>ingress</code> 列表所允许的连接。这些 <code>ingress</code> 列表的效果是相加的。</p>\n<p>网络策略是相加的，所以不会产生冲突。如果策略适用于 Pod 某一特定方向的流量， Pod 在对应方向所允许的连接是适用的网络策略所允许的集合。 因此，评估的顺序不影响策略的结果。</p>\n<p>要允许从源 Pod 到目的 Pod 的连接，源 Pod 的出口策略和目的 Pod 的入口策略都需要允许连接。 如果任何一方不允许连接，建立连接将会失败。</p>\n<h2 id=\"NetworkPolicy-资源\"><a href=\"#NetworkPolicy-资源\" class=\"headerlink\" title=\"NetworkPolicy 资源\"></a>NetworkPolicy 资源</h2><p>参阅 <a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#networkpolicy-v1-networking-k8s-io\">NetworkPolicy</a> 来了解资源的完整定义。</p>\n<p>下面是一个 NetworkPolicy 的示例:</p>\n<p><a href=\"https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/networkpolicy.yaml\"><code>service/networking/networkpolicy.yaml</code></a></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>network<span class=\"token punctuation\">-</span>policy\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> db\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> Ingress\n    <span class=\"token punctuation\">-</span> Egress\n  <span class=\"token key atrule\">ingress</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">from</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ipBlock</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">cidr</span><span class=\"token punctuation\">:</span> 172.17.0.0/16\n            <span class=\"token key atrule\">except</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> 172.17.1.0/24\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">namespaceSelector</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">project</span><span class=\"token punctuation\">:</span> myproject\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> frontend\n      <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n          <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span>\n  <span class=\"token key atrule\">egress</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">to</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ipBlock</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">cidr</span><span class=\"token punctuation\">:</span> 10.0.0.0/24\n      <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n          <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5978</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>说明：</strong></p>\n<p>除非选择支持网络策略的网络解决方案，否则将上述示例发送到API服务器没有任何效果。</p>\n<p><strong>必需字段</strong>：与所有其他的 Kubernetes 配置一样，NetworkPolicy 需要 <code>apiVersion</code>、 <code>kind</code> 和 <code>metadata</code> 字段。关于配置文件操作的一般信息， 请参考<a href=\"https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-pod-configmap/\">配置 Pod 以使用 ConfigMap</a> 和<a href=\"https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/object-management\">对象管理</a>。</p>\n<p><strong>spec</strong>：NetworkPolicy <a href=\"https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\">规约</a> 中包含了在一个名字空间中定义特定网络策略所需的所有信息。</p>\n<p><strong>podSelector</strong>：每个 NetworkPolicy 都包括一个 <code>podSelector</code>， 它对该策略所适用的一组 Pod 进行选择。示例中的策略选择带有 “role&#x3D;db” 标签的 Pod。 空的 <code>podSelector</code> 选择名字空间下的所有 Pod。</p>\n<p><strong>policyTypes</strong>：每个 NetworkPolicy 都包含一个 <code>policyTypes</code> 列表，其中包含 <code>Ingress</code> 或 <code>Egress</code> 或两者兼具。<code>policyTypes</code> 字段表示给定的策略是应用于进入所选 Pod 的入站流量还是来自所选 Pod 的出站流量，或两者兼有。 如果 NetworkPolicy 未指定 <code>policyTypes</code> 则默认情况下始终设置 <code>Ingress</code>； 如果 NetworkPolicy 有任何出口规则的话则设置 <code>Egress</code>。</p>\n<p><strong>ingress</strong>：每个 NetworkPolicy 可包含一个 <code>ingress</code> 规则的白名单列表。 每个规则都允许同时匹配 <code>from</code> 和 <code>ports</code> 部分的流量。示例策略中包含一条简单的规则： 它匹配某个特定端口，来自三个来源中的一个，第一个通过 <code>ipBlock</code> 指定，第二个通过 <code>namespaceSelector</code> 指定，第三个通过 <code>podSelector</code> 指定。</p>\n<p><strong>egress</strong>：每个 NetworkPolicy 可包含一个 <code>egress</code> 规则的白名单列表。 每个规则都允许匹配 <code>to</code> 和 <code>port</code> 部分的流量。该示例策略包含一条规则， 该规则将指定端口上的流量匹配到 <code>10.0.0.0/24</code> 中的任何目的地。</p>\n<p>所以，该网络策略示例:</p>\n<ol>\n<li>隔离 <code>default</code> 名字空间下 <code>role=db</code> 的 Pod （如果它们不是已经被隔离的话）。</li>\n<li>（Ingress 规则）允许以下 Pod 连接到 <code>default</code> 名字空间下的带有 <code>role=db</code> 标签的所有 Pod 的 6379 TCP 端口：<ul>\n<li><code>default</code> 名字空间下带有 <code>role=frontend</code> 标签的所有 Pod</li>\n<li>带有 <code>project=myproject</code> 标签的所有名字空间中的 Pod</li>\n<li>IP 地址范围为 172.17.0.0–172.17.0.255 和 172.17.2.0–172.17.255.255 （即，除了 172.17.1.0&#x2F;24 之外的所有 172.17.0.0&#x2F;16）</li>\n</ul>\n</li>\n<li>（Egress 规则）允许 <code>default</code> 名字空间中任何带有标签 <code>role=db</code> 的 Pod 到 CIDR 10.0.0.0&#x2F;24 下 5978 TCP 端口的连接。</li>\n</ol>\n<p>参阅<a href=\"https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/declare-network-policy/\">声明网络策略</a>演练了解更多示例。</p>\n<h2 id=\"选择器-to-和-from-的行为\"><a href=\"#选择器-to-和-from-的行为\" class=\"headerlink\" title=\"选择器 to 和 from 的行为\"></a>选择器 <code>to</code> 和 <code>from</code> 的行为</h2><p>可以在 <code>ingress</code> 的 <code>from</code> 部分或 <code>egress</code> 的 <code>to</code> 部分中指定四种选择器：</p>\n<p><strong>podSelector</strong>：此选择器将在与 NetworkPolicy 相同的名字空间中选择特定的 Pod，应将其允许作为入站流量来源或出站流量目的地。</p>\n<p><strong>namespaceSelector</strong>：此选择器将选择特定的名字空间，应将所有 Pod 用作其入站流量来源或出站流量目的地。</p>\n<p><strong>namespaceSelector 和 podSelector</strong>：一个指定 <code>namespaceSelector</code> 和 <code>podSelector</code> 的 <code>to</code>&#x2F;<code>from</code> 条目选择特定名字空间中的特定 Pod。 注意使用正确的 YAML 语法；下面的策略：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">...</span>\n<span class=\"token key atrule\">ingress</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">from</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">namespaceSelector</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> alice\n    <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> client\n<span class=\"token punctuation\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此策略在 <code>from</code> 数组中仅包含一个元素，只允许来自标有 <code>role=client</code> 的 Pod 且该 Pod 所在的名字空间中标有 <code>user=alice</code> 的连接。但是<strong>这项</strong>策略：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">...</span>\n<span class=\"token key atrule\">ingress</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">from</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">namespaceSelector</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> alice\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> client\n<span class=\"token punctuation\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它在 <code>from</code> 数组中包含两个元素，允许来自本地名字空间中标有 <code>role=client</code> 的 Pod 的连接，<strong>或</strong>来自任何名字空间中标有 <code>user=alice</code> 的任何 Pod 的连接。</p>\n<p>如有疑问，请使用 <code>kubectl describe</code> 查看 Kubernetes 如何解释该策略。</p>\n<p><strong>ipBlock</strong>：此选择器将选择特定的 IP CIDR 范围以用作入站流量来源或出站流量目的地。 这些应该是集群外部 IP，因为 Pod IP 存在时间短暂的且随机产生。</p>\n<p>集群的入站和出站机制通常需要重写数据包的源 IP 或目标 IP。 在发生这种情况时，不确定在 NetworkPolicy 处理之前还是之后发生， 并且对于网络插件、云提供商、<code>Service</code> 实现等的不同组合，其行为可能会有所不同。</p>\n<p>对入站流量而言，这意味着在某些情况下，你可以根据实际的原始源 IP 过滤传入的数据包， 而在其他情况下，NetworkPolicy 所作用的 <code>源IP</code> 则可能是 <code>LoadBalancer</code> 或 Pod 的节点等。</p>\n<p>对于出站流量而言，这意味着从 Pod 到被重写为集群外部 IP 的 <code>Service</code> IP 的连接可能会或可能不会受到基于 <code>ipBlock</code> 的策略的约束。</p>\n<h2 id=\"默认策略\"><a href=\"#默认策略\" class=\"headerlink\" title=\"默认策略\"></a>默认策略</h2><p>默认情况下，如果名字空间中不存在任何策略，则所有进出该名字空间中 Pod 的流量都被允许。 以下示例使你可以更改该名字空间中的默认行为。</p>\n<h3 id=\"默认拒绝所有入站流量\"><a href=\"#默认拒绝所有入站流量\" class=\"headerlink\" title=\"默认拒绝所有入站流量\"></a>默认拒绝所有入站流量</h3><p>你可以通过创建选择所有 Pod 但不允许任何进入这些 Pod 的入站流量的 NetworkPolicy 来为名字空间创建 “default” 隔离策略。</p>\n<p><a href=\"https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-default-deny-ingress.yaml\"><code>service/networking/network-policy-default-deny-ingress.yaml</code></a> </p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>deny<span class=\"token punctuation\">-</span>ingress\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Ingress<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这确保即使没有被任何其他 NetworkPolicy 选择的 Pod 仍将被隔离以进行入口。 此策略不影响任何 Pod 的出口隔离。</p>\n<h3 id=\"允许所有入站流量\"><a href=\"#允许所有入站流量\" class=\"headerlink\" title=\"允许所有入站流量\"></a>允许所有入站流量</h3><p>如果你想允许一个名字空间中所有 Pod 的所有入站连接，你可以创建一个明确允许的策略。</p>\n<p><a href=\"https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-allow-all-ingress.yaml\"><code>service/networking/network-policy-allow-all-ingress.yaml</code></a> </p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> allow<span class=\"token punctuation\">-</span>all<span class=\"token punctuation\">-</span>ingress\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">ingress</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Ingress<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>有了这个策略，任何额外的策略都不会导致到这些 Pod 的任何入站连接被拒绝。 此策略对任何 Pod 的出口隔离没有影响。</p>\n<h3 id=\"默认拒绝所有出站流量\"><a href=\"#默认拒绝所有出站流量\" class=\"headerlink\" title=\"默认拒绝所有出站流量\"></a>默认拒绝所有出站流量</h3><p>你可以通过创建选择所有容器但不允许来自这些容器的任何出站流量的 NetworkPolicy 来为名字空间创建 “default” 隔离策略。</p>\n<p><a href=\"https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-default-deny-egress.yaml\"><code>service/networking/network-policy-default-deny-egress.yaml</code></a> </p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>deny<span class=\"token punctuation\">-</span>egress\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Egress<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此策略可以确保即使没有被其他任何 NetworkPolicy 选择的 Pod 也不会被允许流出流量。 此策略不会更改任何 Pod 的入站流量隔离行为。</p>\n<h3 id=\"允许所有出站流量\"><a href=\"#允许所有出站流量\" class=\"headerlink\" title=\"允许所有出站流量\"></a>允许所有出站流量</h3><p>如果要允许来自名字空间中所有 Pod 的所有连接， 则可以创建一个明确允许来自该名字空间中 Pod 的所有出站连接的策略。</p>\n<p><a href=\"https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-allow-all-egress.yaml\"><code>service/networking/network-policy-allow-all-egress.yaml</code></a> </p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> allow<span class=\"token punctuation\">-</span>all<span class=\"token punctuation\">-</span>egress\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">egress</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Egress<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>有了这个策略，任何额外的策略都不会导致来自这些 Pod 的任何出站连接被拒绝。 此策略对进入任何 Pod 的隔离没有影响。</p>\n<h3 id=\"默认拒绝所有入站和所有出站流量\"><a href=\"#默认拒绝所有入站和所有出站流量\" class=\"headerlink\" title=\"默认拒绝所有入站和所有出站流量\"></a>默认拒绝所有入站和所有出站流量</h3><p>你可以为名字空间创建“默认”策略，以通过在该名字空间中创建以下 NetworkPolicy 来阻止所有入站和出站流量。</p>\n<p><a href=\"https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-default-deny-all.yaml\"><code>service/networking/network-policy-default-deny-all.yaml</code></a></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>deny<span class=\"token punctuation\">-</span>all\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Ingress\n  <span class=\"token punctuation\">-</span> Egress<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此策略可以确保即使没有被其他任何 NetworkPolicy 选择的 Pod 也不会被允许入站或出站流量。</p>\n<h2 id=\"SCTP-支持\"><a href=\"#SCTP-支持\" class=\"headerlink\" title=\"SCTP 支持\"></a>SCTP 支持</h2><p><strong>特性状态：</strong> <code>Kubernetes v1.20 [stable]</code></p>\n<p>作为一个稳定特性，SCTP 支持默认是被启用的。 要在集群层面禁用 SCTP，你（或你的集群管理员）需要为 API 服务器指定 <code>--feature-gates=SCTPSupport=false,...</code> 来禁用 <code>SCTPSupport</code> <a href=\"https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/feature-gates/\">特性门控</a>。 启用该特性门控后，用户可以将 NetworkPolicy 的 <code>protocol</code> 字段设置为 <code>SCTP</code>。</p>\n<p><strong>说明：</strong></p>\n<p>你必须使用支持 SCTP 协议 NetworkPolicy 的 <a href=\"https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/\">CNI</a> 插件。</p>\n<h2 id=\"针对某个端口范围\"><a href=\"#针对某个端口范围\" class=\"headerlink\" title=\"针对某个端口范围\"></a>针对某个端口范围</h2><p><strong>特性状态：</strong> <code>Kubernetes v1.25 [stable]</code></p>\n<p>在编写 NetworkPolicy 时，你可以针对一个端口范围而不是某个固定端口。</p>\n<p>这一目的可以通过使用 <code>endPort</code> 字段来实现，如下例所示：</p>\n<p><a href=\"https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/networkpolicy-multiport-egress.yaml\"><code>service/networking/networkpolicy-multiport-egress.yaml</code></a> </p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> multi<span class=\"token punctuation\">-</span>port<span class=\"token punctuation\">-</span>egress\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> db\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> Egress\n  <span class=\"token key atrule\">egress</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">to</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ipBlock</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">cidr</span><span class=\"token punctuation\">:</span> 10.0.0.0/24\n      <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n          <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32000</span>\n          <span class=\"token key atrule\">endPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32768</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的规则允许名字空间 <code>default</code> 中所有带有标签 <code>role=db</code> 的 Pod 使用 TCP 协议与 <code>10.0.0.0/24</code> 范围内的 IP 通信，只要目标端口介于 32000 和 32768 之间就可以。</p>\n<p>使用此字段时存在以下限制：</p>\n<ul>\n<li><code>endPort</code> 字段必须等于或者大于 <code>port</code> 字段的值。</li>\n<li>只有在定义了 <code>port</code> 时才能定义 <code>endPort</code>。</li>\n<li>两个字段的设置值都只能是数字。</li>\n</ul>\n<p><strong>说明：</strong></p>\n<p>你的集群所使用的 <a href=\"https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/\">CNI</a> 插件必须支持在 NetworkPolicy 规约中使用 <code>endPort</code> 字段。 如果你的<a href=\"https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/\">网络插件</a>不支持 <code>endPort</code> 字段，而你指定了一个包含 <code>endPort</code> 字段的 NetworkPolicy， 策略只对单个 <code>port</code> 字段生效。</p>\n<h2 id=\"按标签选择多个命名空间\"><a href=\"#按标签选择多个命名空间\" class=\"headerlink\" title=\"按标签选择多个命名空间\"></a>按标签选择多个命名空间</h2><p>在这种情况下，你的 <code>Egress</code> NetworkPolicy 使用名字空间的标签名称来将多个名字空间作为其目标。 为此，你需要为目标名字空间设置标签。例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl label namespace frontend <span class=\"token assign-left variable\">namespace</span><span class=\"token operator\">=</span>frontend\nkubectl label namespace backend <span class=\"token assign-left variable\">namespace</span><span class=\"token operator\">=</span>backend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在 NetworkPolicy 文档中的 namespaceSelector 下添加标签。例如：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> egress<span class=\"token punctuation\">-</span>namespaces\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> myapp\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Egress\n  <span class=\"token key atrule\">egress</span><span class=\"token punctuation\">:</span>\n   <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">to</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">namespaceSelector</span><span class=\"token punctuation\">:</span>\n       <span class=\"token key atrule\">matchExpressions</span><span class=\"token punctuation\">:</span>\n       <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> namespace\n         <span class=\"token key atrule\">operator</span><span class=\"token punctuation\">:</span> In\n         <span class=\"token key atrule\">values</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"frontend\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"backend\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>说明：</strong></p>\n<p>你不可以在 NetworkPolicy 中直接指定命名空间的名称。 你必须使用带有 <code>matchLabels</code> 或 <code>matchExpressions</code> 的 <code>namespaceSelector</code> 来根据标签选择命名空间。</p>\n<h2 id=\"基于名字指向某名字空间\"><a href=\"#基于名字指向某名字空间\" class=\"headerlink\" title=\"基于名字指向某名字空间\"></a>基于名字指向某名字空间</h2><p><strong>特性状态：</strong> <code>Kubernetes 1.22 [stable]</code></p>\n<p>只要 <code>NamespaceDefaultLabelName</code> <a href=\"https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/feature-gates/\">特性门控</a>被启用， Kubernetes 控制面会在所有名字空间上设置一个不可变更的标签 <code>kubernetes.io/metadata.name</code>。该标签的值是名字空间的名称。</p>\n<p>如果 NetworkPolicy 无法在某些对象字段中指向某名字空间， 你可以使用标准的标签方式来指向特定名字空间。</p>\n<h2 id=\"通过网络策略（至少目前还）无法完成的工作\"><a href=\"#通过网络策略（至少目前还）无法完成的工作\" class=\"headerlink\" title=\"通过网络策略（至少目前还）无法完成的工作\"></a>通过网络策略（至少目前还）无法完成的工作</h2><p>到 Kubernetes 1.27 为止，NetworkPolicy API 还不支持以下功能， 不过你可能可以使用操作系统组件（如 SELinux、OpenVSwitch、IPTables 等等） 或者第七层技术（Ingress 控制器、服务网格实现）或准入控制器来实现一些替代方案。 如果你对 Kubernetes 中的网络安全性还不太了解，了解使用 NetworkPolicy API 还无法实现下面的用户场景是很值得的。</p>\n<ul>\n<li><p>强制集群内部流量经过某公用网关（这种场景最好通过服务网格或其他代理来实现）；</p>\n</li>\n<li><p>与 TLS 相关的场景（考虑使用服务网格或者 Ingress 控制器）；</p>\n</li>\n<li><p>特定于节点的策略（你可以使用 CIDR 来表达这一需求不过你无法使用节点在 Kubernetes 中的其他标识信息来辩识目标节点）；</p>\n</li>\n<li><p>基于名字来选择服务（不过，你可以使用 <a href=\"https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/\">标签</a> 来选择目标 Pod 或名字空间，这也通常是一种可靠的替代方案）；</p>\n</li>\n<li><p>创建或管理由第三方来实际完成的“策略请求”；</p>\n</li>\n<li><p>实现适用于所有名字空间或 Pods 的默认策略（某些第三方 Kubernetes 发行版本或项目可以做到这点）；</p>\n</li>\n<li><p>高级的策略查询或者可达性相关工具；</p>\n</li>\n<li><p>生成网络安全事件日志的能力（例如，被阻塞或接收的连接请求）；</p>\n</li>\n<li><p>显式地拒绝策略的能力（目前，NetworkPolicy 的模型默认采用拒绝操作， 其唯一的能力是添加允许策略）；</p>\n</li>\n<li><p>禁止本地回路或指向宿主的网络流量（Pod 目前无法阻塞 localhost 访问， 它们也无法禁止来自所在节点的访问请求）。</p>\n</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的博客框架"},{"name":"ButterFly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"一款 Hexo 简约美观的主题"}]}]}},"cover":"/img/default_cover/geomeric7.jpg","cover_type":"img","excerpt":"","more":"<p>如果你希望在 IP 地址或端口层面（OSI 第 3 层或第 4 层）控制网络流量， 则你可以考虑为集群中特定应用使用 Kubernetes 网络策略（NetworkPolicy）。 NetworkPolicy 是一种以应用为中心的结构，允许你设置如何允许 <a href=\"https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/\">Pod</a> 与网络上的各类网络“实体” （我们这里使用实体以避免过度使用诸如“端点”和“服务”这类常用术语， 这些术语在 Kubernetes 中有特定含义）通信。 NetworkPolicy 适用于一端或两端与 Pod 的连接，与其他连接无关。</p>\n<p>Pod 可以通信的 Pod 是通过如下三个标识符的组合来辩识的：</p>\n<ol>\n<li>其他被允许的 Pods（例外：Pod 无法阻塞对自身的访问）</li>\n<li>被允许的名字空间</li>\n<li>IP 组块（例外：与 Pod 运行所在的节点的通信总是被允许的， 无论 Pod 或节点的 IP 地址）</li>\n</ol>\n<p>在定义基于 Pod 或名字空间的 NetworkPolicy 时， 你会使用<a href=\"https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/\">选择算符</a>来设定哪些流量可以进入或离开与该算符匹配的 Pod。 另外，当创建基于 IP 的 NetworkPolicy 时，我们基于 IP 组块（CIDR 范围）来定义策略。</p>\n<h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><p>网络策略通过<a href=\"https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/\">网络插件</a>来实现。 要使用网络策略，你必须使用支持 NetworkPolicy 的网络解决方案。 创建一个 NetworkPolicy 资源对象而没有控制器来使它生效的话，是没有任何作用的。</p>\n<h2 id=\"Pod-隔离的两种类型\"><a href=\"#Pod-隔离的两种类型\" class=\"headerlink\" title=\"Pod 隔离的两种类型\"></a>Pod 隔离的两种类型</h2><p>Pod 有两种隔离: 出口的隔离和入口的隔离。它们涉及到可以建立哪些连接。 这里的“隔离”不是绝对的，而是意味着“有一些限制”。 另外的，“非隔离方向”意味着在所述方向上没有限制。这两种隔离（或不隔离）是独立声明的， 并且都与从一个 Pod 到另一个 Pod 的连接有关。</p>\n<p>默认情况下，一个 Pod 的出口是非隔离的，即所有外向连接都是被允许的。如果有任何的 NetworkPolicy 选择该 Pod 并在其 <code>policyTypes</code> 中包含 “Egress”，则该 Pod 是出口隔离的， 我们称这样的策略适用于该 Pod 的出口。当一个 Pod 的出口被隔离时， 唯一允许的来自 Pod 的连接是适用于出口的 Pod 的某个 NetworkPolicy 的 <code>egress</code> 列表所允许的连接。 这些 <code>egress</code> 列表的效果是相加的。</p>\n<p>默认情况下，一个 Pod 对入口是非隔离的，即所有入站连接都是被允许的。如果有任何的 NetworkPolicy 选择该 Pod 并在其 <code>policyTypes</code> 中包含 “Ingress”，则该 Pod 被隔离入口， 我们称这种策略适用于该 Pod 的入口。当一个 Pod 的入口被隔离时，唯一允许进入该 Pod 的连接是来自该 Pod 节点的连接和适用于入口的 Pod 的某个 NetworkPolicy 的 <code>ingress</code> 列表所允许的连接。这些 <code>ingress</code> 列表的效果是相加的。</p>\n<p>网络策略是相加的，所以不会产生冲突。如果策略适用于 Pod 某一特定方向的流量， Pod 在对应方向所允许的连接是适用的网络策略所允许的集合。 因此，评估的顺序不影响策略的结果。</p>\n<p>要允许从源 Pod 到目的 Pod 的连接，源 Pod 的出口策略和目的 Pod 的入口策略都需要允许连接。 如果任何一方不允许连接，建立连接将会失败。</p>\n<h2 id=\"NetworkPolicy-资源\"><a href=\"#NetworkPolicy-资源\" class=\"headerlink\" title=\"NetworkPolicy 资源\"></a>NetworkPolicy 资源</h2><p>参阅 <a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#networkpolicy-v1-networking-k8s-io\">NetworkPolicy</a> 来了解资源的完整定义。</p>\n<p>下面是一个 NetworkPolicy 的示例:</p>\n<p><a href=\"https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/networkpolicy.yaml\"><code>service/networking/networkpolicy.yaml</code></a></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>network<span class=\"token punctuation\">-</span>policy\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> db\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> Ingress\n    <span class=\"token punctuation\">-</span> Egress\n  <span class=\"token key atrule\">ingress</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">from</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ipBlock</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">cidr</span><span class=\"token punctuation\">:</span> 172.17.0.0/16\n            <span class=\"token key atrule\">except</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> 172.17.1.0/24\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">namespaceSelector</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">project</span><span class=\"token punctuation\">:</span> myproject\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> frontend\n      <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n          <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span>\n  <span class=\"token key atrule\">egress</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">to</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ipBlock</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">cidr</span><span class=\"token punctuation\">:</span> 10.0.0.0/24\n      <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n          <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5978</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>说明：</strong></p>\n<p>除非选择支持网络策略的网络解决方案，否则将上述示例发送到API服务器没有任何效果。</p>\n<p><strong>必需字段</strong>：与所有其他的 Kubernetes 配置一样，NetworkPolicy 需要 <code>apiVersion</code>、 <code>kind</code> 和 <code>metadata</code> 字段。关于配置文件操作的一般信息， 请参考<a href=\"https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-pod-configmap/\">配置 Pod 以使用 ConfigMap</a> 和<a href=\"https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/object-management\">对象管理</a>。</p>\n<p><strong>spec</strong>：NetworkPolicy <a href=\"https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\">规约</a> 中包含了在一个名字空间中定义特定网络策略所需的所有信息。</p>\n<p><strong>podSelector</strong>：每个 NetworkPolicy 都包括一个 <code>podSelector</code>， 它对该策略所适用的一组 Pod 进行选择。示例中的策略选择带有 “role&#x3D;db” 标签的 Pod。 空的 <code>podSelector</code> 选择名字空间下的所有 Pod。</p>\n<p><strong>policyTypes</strong>：每个 NetworkPolicy 都包含一个 <code>policyTypes</code> 列表，其中包含 <code>Ingress</code> 或 <code>Egress</code> 或两者兼具。<code>policyTypes</code> 字段表示给定的策略是应用于进入所选 Pod 的入站流量还是来自所选 Pod 的出站流量，或两者兼有。 如果 NetworkPolicy 未指定 <code>policyTypes</code> 则默认情况下始终设置 <code>Ingress</code>； 如果 NetworkPolicy 有任何出口规则的话则设置 <code>Egress</code>。</p>\n<p><strong>ingress</strong>：每个 NetworkPolicy 可包含一个 <code>ingress</code> 规则的白名单列表。 每个规则都允许同时匹配 <code>from</code> 和 <code>ports</code> 部分的流量。示例策略中包含一条简单的规则： 它匹配某个特定端口，来自三个来源中的一个，第一个通过 <code>ipBlock</code> 指定，第二个通过 <code>namespaceSelector</code> 指定，第三个通过 <code>podSelector</code> 指定。</p>\n<p><strong>egress</strong>：每个 NetworkPolicy 可包含一个 <code>egress</code> 规则的白名单列表。 每个规则都允许匹配 <code>to</code> 和 <code>port</code> 部分的流量。该示例策略包含一条规则， 该规则将指定端口上的流量匹配到 <code>10.0.0.0/24</code> 中的任何目的地。</p>\n<p>所以，该网络策略示例:</p>\n<ol>\n<li>隔离 <code>default</code> 名字空间下 <code>role=db</code> 的 Pod （如果它们不是已经被隔离的话）。</li>\n<li>（Ingress 规则）允许以下 Pod 连接到 <code>default</code> 名字空间下的带有 <code>role=db</code> 标签的所有 Pod 的 6379 TCP 端口：<ul>\n<li><code>default</code> 名字空间下带有 <code>role=frontend</code> 标签的所有 Pod</li>\n<li>带有 <code>project=myproject</code> 标签的所有名字空间中的 Pod</li>\n<li>IP 地址范围为 172.17.0.0–172.17.0.255 和 172.17.2.0–172.17.255.255 （即，除了 172.17.1.0&#x2F;24 之外的所有 172.17.0.0&#x2F;16）</li>\n</ul>\n</li>\n<li>（Egress 规则）允许 <code>default</code> 名字空间中任何带有标签 <code>role=db</code> 的 Pod 到 CIDR 10.0.0.0&#x2F;24 下 5978 TCP 端口的连接。</li>\n</ol>\n<p>参阅<a href=\"https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/declare-network-policy/\">声明网络策略</a>演练了解更多示例。</p>\n<h2 id=\"选择器-to-和-from-的行为\"><a href=\"#选择器-to-和-from-的行为\" class=\"headerlink\" title=\"选择器 to 和 from 的行为\"></a>选择器 <code>to</code> 和 <code>from</code> 的行为</h2><p>可以在 <code>ingress</code> 的 <code>from</code> 部分或 <code>egress</code> 的 <code>to</code> 部分中指定四种选择器：</p>\n<p><strong>podSelector</strong>：此选择器将在与 NetworkPolicy 相同的名字空间中选择特定的 Pod，应将其允许作为入站流量来源或出站流量目的地。</p>\n<p><strong>namespaceSelector</strong>：此选择器将选择特定的名字空间，应将所有 Pod 用作其入站流量来源或出站流量目的地。</p>\n<p><strong>namespaceSelector 和 podSelector</strong>：一个指定 <code>namespaceSelector</code> 和 <code>podSelector</code> 的 <code>to</code>&#x2F;<code>from</code> 条目选择特定名字空间中的特定 Pod。 注意使用正确的 YAML 语法；下面的策略：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">...</span>\n<span class=\"token key atrule\">ingress</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">from</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">namespaceSelector</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> alice\n    <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> client\n<span class=\"token punctuation\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此策略在 <code>from</code> 数组中仅包含一个元素，只允许来自标有 <code>role=client</code> 的 Pod 且该 Pod 所在的名字空间中标有 <code>user=alice</code> 的连接。但是<strong>这项</strong>策略：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">...</span>\n<span class=\"token key atrule\">ingress</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">from</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">namespaceSelector</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> alice\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> client\n<span class=\"token punctuation\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它在 <code>from</code> 数组中包含两个元素，允许来自本地名字空间中标有 <code>role=client</code> 的 Pod 的连接，<strong>或</strong>来自任何名字空间中标有 <code>user=alice</code> 的任何 Pod 的连接。</p>\n<p>如有疑问，请使用 <code>kubectl describe</code> 查看 Kubernetes 如何解释该策略。</p>\n<p><strong>ipBlock</strong>：此选择器将选择特定的 IP CIDR 范围以用作入站流量来源或出站流量目的地。 这些应该是集群外部 IP，因为 Pod IP 存在时间短暂的且随机产生。</p>\n<p>集群的入站和出站机制通常需要重写数据包的源 IP 或目标 IP。 在发生这种情况时，不确定在 NetworkPolicy 处理之前还是之后发生， 并且对于网络插件、云提供商、<code>Service</code> 实现等的不同组合，其行为可能会有所不同。</p>\n<p>对入站流量而言，这意味着在某些情况下，你可以根据实际的原始源 IP 过滤传入的数据包， 而在其他情况下，NetworkPolicy 所作用的 <code>源IP</code> 则可能是 <code>LoadBalancer</code> 或 Pod 的节点等。</p>\n<p>对于出站流量而言，这意味着从 Pod 到被重写为集群外部 IP 的 <code>Service</code> IP 的连接可能会或可能不会受到基于 <code>ipBlock</code> 的策略的约束。</p>\n<h2 id=\"默认策略\"><a href=\"#默认策略\" class=\"headerlink\" title=\"默认策略\"></a>默认策略</h2><p>默认情况下，如果名字空间中不存在任何策略，则所有进出该名字空间中 Pod 的流量都被允许。 以下示例使你可以更改该名字空间中的默认行为。</p>\n<h3 id=\"默认拒绝所有入站流量\"><a href=\"#默认拒绝所有入站流量\" class=\"headerlink\" title=\"默认拒绝所有入站流量\"></a>默认拒绝所有入站流量</h3><p>你可以通过创建选择所有 Pod 但不允许任何进入这些 Pod 的入站流量的 NetworkPolicy 来为名字空间创建 “default” 隔离策略。</p>\n<p><a href=\"https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-default-deny-ingress.yaml\"><code>service/networking/network-policy-default-deny-ingress.yaml</code></a> </p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>deny<span class=\"token punctuation\">-</span>ingress\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Ingress<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这确保即使没有被任何其他 NetworkPolicy 选择的 Pod 仍将被隔离以进行入口。 此策略不影响任何 Pod 的出口隔离。</p>\n<h3 id=\"允许所有入站流量\"><a href=\"#允许所有入站流量\" class=\"headerlink\" title=\"允许所有入站流量\"></a>允许所有入站流量</h3><p>如果你想允许一个名字空间中所有 Pod 的所有入站连接，你可以创建一个明确允许的策略。</p>\n<p><a href=\"https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-allow-all-ingress.yaml\"><code>service/networking/network-policy-allow-all-ingress.yaml</code></a> </p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> allow<span class=\"token punctuation\">-</span>all<span class=\"token punctuation\">-</span>ingress\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">ingress</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Ingress<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>有了这个策略，任何额外的策略都不会导致到这些 Pod 的任何入站连接被拒绝。 此策略对任何 Pod 的出口隔离没有影响。</p>\n<h3 id=\"默认拒绝所有出站流量\"><a href=\"#默认拒绝所有出站流量\" class=\"headerlink\" title=\"默认拒绝所有出站流量\"></a>默认拒绝所有出站流量</h3><p>你可以通过创建选择所有容器但不允许来自这些容器的任何出站流量的 NetworkPolicy 来为名字空间创建 “default” 隔离策略。</p>\n<p><a href=\"https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-default-deny-egress.yaml\"><code>service/networking/network-policy-default-deny-egress.yaml</code></a> </p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>deny<span class=\"token punctuation\">-</span>egress\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Egress<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此策略可以确保即使没有被其他任何 NetworkPolicy 选择的 Pod 也不会被允许流出流量。 此策略不会更改任何 Pod 的入站流量隔离行为。</p>\n<h3 id=\"允许所有出站流量\"><a href=\"#允许所有出站流量\" class=\"headerlink\" title=\"允许所有出站流量\"></a>允许所有出站流量</h3><p>如果要允许来自名字空间中所有 Pod 的所有连接， 则可以创建一个明确允许来自该名字空间中 Pod 的所有出站连接的策略。</p>\n<p><a href=\"https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-allow-all-egress.yaml\"><code>service/networking/network-policy-allow-all-egress.yaml</code></a> </p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> allow<span class=\"token punctuation\">-</span>all<span class=\"token punctuation\">-</span>egress\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">egress</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Egress<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>有了这个策略，任何额外的策略都不会导致来自这些 Pod 的任何出站连接被拒绝。 此策略对进入任何 Pod 的隔离没有影响。</p>\n<h3 id=\"默认拒绝所有入站和所有出站流量\"><a href=\"#默认拒绝所有入站和所有出站流量\" class=\"headerlink\" title=\"默认拒绝所有入站和所有出站流量\"></a>默认拒绝所有入站和所有出站流量</h3><p>你可以为名字空间创建“默认”策略，以通过在该名字空间中创建以下 NetworkPolicy 来阻止所有入站和出站流量。</p>\n<p><a href=\"https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-default-deny-all.yaml\"><code>service/networking/network-policy-default-deny-all.yaml</code></a></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>deny<span class=\"token punctuation\">-</span>all\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Ingress\n  <span class=\"token punctuation\">-</span> Egress<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此策略可以确保即使没有被其他任何 NetworkPolicy 选择的 Pod 也不会被允许入站或出站流量。</p>\n<h2 id=\"SCTP-支持\"><a href=\"#SCTP-支持\" class=\"headerlink\" title=\"SCTP 支持\"></a>SCTP 支持</h2><p><strong>特性状态：</strong> <code>Kubernetes v1.20 [stable]</code></p>\n<p>作为一个稳定特性，SCTP 支持默认是被启用的。 要在集群层面禁用 SCTP，你（或你的集群管理员）需要为 API 服务器指定 <code>--feature-gates=SCTPSupport=false,...</code> 来禁用 <code>SCTPSupport</code> <a href=\"https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/feature-gates/\">特性门控</a>。 启用该特性门控后，用户可以将 NetworkPolicy 的 <code>protocol</code> 字段设置为 <code>SCTP</code>。</p>\n<p><strong>说明：</strong></p>\n<p>你必须使用支持 SCTP 协议 NetworkPolicy 的 <a href=\"https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/\">CNI</a> 插件。</p>\n<h2 id=\"针对某个端口范围\"><a href=\"#针对某个端口范围\" class=\"headerlink\" title=\"针对某个端口范围\"></a>针对某个端口范围</h2><p><strong>特性状态：</strong> <code>Kubernetes v1.25 [stable]</code></p>\n<p>在编写 NetworkPolicy 时，你可以针对一个端口范围而不是某个固定端口。</p>\n<p>这一目的可以通过使用 <code>endPort</code> 字段来实现，如下例所示：</p>\n<p><a href=\"https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/networkpolicy-multiport-egress.yaml\"><code>service/networking/networkpolicy-multiport-egress.yaml</code></a> </p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> multi<span class=\"token punctuation\">-</span>port<span class=\"token punctuation\">-</span>egress\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> db\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> Egress\n  <span class=\"token key atrule\">egress</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">to</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">ipBlock</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">cidr</span><span class=\"token punctuation\">:</span> 10.0.0.0/24\n      <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n          <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32000</span>\n          <span class=\"token key atrule\">endPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32768</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的规则允许名字空间 <code>default</code> 中所有带有标签 <code>role=db</code> 的 Pod 使用 TCP 协议与 <code>10.0.0.0/24</code> 范围内的 IP 通信，只要目标端口介于 32000 和 32768 之间就可以。</p>\n<p>使用此字段时存在以下限制：</p>\n<ul>\n<li><code>endPort</code> 字段必须等于或者大于 <code>port</code> 字段的值。</li>\n<li>只有在定义了 <code>port</code> 时才能定义 <code>endPort</code>。</li>\n<li>两个字段的设置值都只能是数字。</li>\n</ul>\n<p><strong>说明：</strong></p>\n<p>你的集群所使用的 <a href=\"https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/\">CNI</a> 插件必须支持在 NetworkPolicy 规约中使用 <code>endPort</code> 字段。 如果你的<a href=\"https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/\">网络插件</a>不支持 <code>endPort</code> 字段，而你指定了一个包含 <code>endPort</code> 字段的 NetworkPolicy， 策略只对单个 <code>port</code> 字段生效。</p>\n<h2 id=\"按标签选择多个命名空间\"><a href=\"#按标签选择多个命名空间\" class=\"headerlink\" title=\"按标签选择多个命名空间\"></a>按标签选择多个命名空间</h2><p>在这种情况下，你的 <code>Egress</code> NetworkPolicy 使用名字空间的标签名称来将多个名字空间作为其目标。 为此，你需要为目标名字空间设置标签。例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl label namespace frontend <span class=\"token assign-left variable\">namespace</span><span class=\"token operator\">=</span>frontend\nkubectl label namespace backend <span class=\"token assign-left variable\">namespace</span><span class=\"token operator\">=</span>backend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在 NetworkPolicy 文档中的 namespaceSelector 下添加标签。例如：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> NetworkPolicy\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> egress<span class=\"token punctuation\">-</span>namespaces\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">podSelector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> myapp\n  <span class=\"token key atrule\">policyTypes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Egress\n  <span class=\"token key atrule\">egress</span><span class=\"token punctuation\">:</span>\n   <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">to</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">namespaceSelector</span><span class=\"token punctuation\">:</span>\n       <span class=\"token key atrule\">matchExpressions</span><span class=\"token punctuation\">:</span>\n       <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> namespace\n         <span class=\"token key atrule\">operator</span><span class=\"token punctuation\">:</span> In\n         <span class=\"token key atrule\">values</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"frontend\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"backend\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>说明：</strong></p>\n<p>你不可以在 NetworkPolicy 中直接指定命名空间的名称。 你必须使用带有 <code>matchLabels</code> 或 <code>matchExpressions</code> 的 <code>namespaceSelector</code> 来根据标签选择命名空间。</p>\n<h2 id=\"基于名字指向某名字空间\"><a href=\"#基于名字指向某名字空间\" class=\"headerlink\" title=\"基于名字指向某名字空间\"></a>基于名字指向某名字空间</h2><p><strong>特性状态：</strong> <code>Kubernetes 1.22 [stable]</code></p>\n<p>只要 <code>NamespaceDefaultLabelName</code> <a href=\"https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/feature-gates/\">特性门控</a>被启用， Kubernetes 控制面会在所有名字空间上设置一个不可变更的标签 <code>kubernetes.io/metadata.name</code>。该标签的值是名字空间的名称。</p>\n<p>如果 NetworkPolicy 无法在某些对象字段中指向某名字空间， 你可以使用标准的标签方式来指向特定名字空间。</p>\n<h2 id=\"通过网络策略（至少目前还）无法完成的工作\"><a href=\"#通过网络策略（至少目前还）无法完成的工作\" class=\"headerlink\" title=\"通过网络策略（至少目前还）无法完成的工作\"></a>通过网络策略（至少目前还）无法完成的工作</h2><p>到 Kubernetes 1.27 为止，NetworkPolicy API 还不支持以下功能， 不过你可能可以使用操作系统组件（如 SELinux、OpenVSwitch、IPTables 等等） 或者第七层技术（Ingress 控制器、服务网格实现）或准入控制器来实现一些替代方案。 如果你对 Kubernetes 中的网络安全性还不太了解，了解使用 NetworkPolicy API 还无法实现下面的用户场景是很值得的。</p>\n<ul>\n<li><p>强制集群内部流量经过某公用网关（这种场景最好通过服务网格或其他代理来实现）；</p>\n</li>\n<li><p>与 TLS 相关的场景（考虑使用服务网格或者 Ingress 控制器）；</p>\n</li>\n<li><p>特定于节点的策略（你可以使用 CIDR 来表达这一需求不过你无法使用节点在 Kubernetes 中的其他标识信息来辩识目标节点）；</p>\n</li>\n<li><p>基于名字来选择服务（不过，你可以使用 <a href=\"https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/\">标签</a> 来选择目标 Pod 或名字空间，这也通常是一种可靠的替代方案）；</p>\n</li>\n<li><p>创建或管理由第三方来实际完成的“策略请求”；</p>\n</li>\n<li><p>实现适用于所有名字空间或 Pods 的默认策略（某些第三方 Kubernetes 发行版本或项目可以做到这点）；</p>\n</li>\n<li><p>高级的策略查询或者可达性相关工具；</p>\n</li>\n<li><p>生成网络安全事件日志的能力（例如，被阻塞或接收的连接请求）；</p>\n</li>\n<li><p>显式地拒绝策略的能力（目前，NetworkPolicy 的模型默认采用拒绝操作， 其唯一的能力是添加允许策略）；</p>\n</li>\n<li><p>禁止本地回路或指向宿主的网络流量（Pod 目前无法阻塞 localhost 访问， 它们也无法禁止来自所在节点的访问请求）。</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmfxlor7g0001zc7hfn5u7pif","category_id":"cmfxlor7j0004zc7hcc8p7pdu","_id":"cmfxlor7p000izc7h8rwo8ark"},{"post_id":"cmfxlor7n000bzc7h2kfg8fqg","category_id":"cmfxlor7j0004zc7hcc8p7pdu","_id":"cmfxlor7p000lzc7hhc3m7mbu"},{"post_id":"cmfxlor7i0003zc7hb7ai4szs","category_id":"cmfxlor7n000czc7h2j1hd5kq","_id":"cmfxlor7q000pzc7hf8vf15es"},{"post_id":"cmfxlor7l0007zc7h2z6f5xua","category_id":"cmfxlor7p000jzc7hddkug5zt","_id":"cmfxlor7s000uzc7h5t9vcfzd"},{"post_id":"cmfxlor7m0009zc7h6akchd5q","category_id":"cmfxlor7q000qzc7hfewi03np","_id":"cmfxlor7t0011zc7h7kel40as"},{"post_id":"cmfxlor7o000fzc7h37va2e25","category_id":"cmfxlor7s000wzc7h7811407d","_id":"cmfxlor7v0017zc7h21ne3ch5"},{"post_id":"cmfxlor7o000hzc7h0obnb4ks","category_id":"cmfxlor7u0013zc7hfakg0lln","_id":"cmfxlor7v001czc7h1i0p98cv"},{"post_id":"cmfxlor7p000kzc7h9591gi9z","category_id":"cmfxlor7u0013zc7hfakg0lln","_id":"cmfxlor7w001gzc7h5iqs14av"},{"post_id":"cmfxlor7q000ozc7hf0gr2lsf","category_id":"cmfxlor7u0013zc7hfakg0lln","_id":"cmfxlor7w001izc7h154j5usf"},{"post_id":"cmfxlor7q000rzc7hg5izcd4c","category_id":"cmfxlor7w001fzc7h8t976uac","_id":"cmfxlor7x001nzc7hcvh18w0t"},{"post_id":"cmfxlor7r000szc7h1uoa2mcj","category_id":"cmfxlor7w001kzc7h23aw6tj8","_id":"cmfxlor7x001szc7h1fiqfjhb"},{"post_id":"cmfxlor7s000xzc7hge8c0cnq","category_id":"cmfxlor7w001fzc7h8t976uac","_id":"cmfxlor7y001vzc7h9hni0tfm"},{"post_id":"cmfxlor7t000yzc7hgob7b2h1","category_id":"cmfxlor7w001kzc7h23aw6tj8","_id":"cmfxlor7y001xzc7hghvxgngq"},{"post_id":"cmfxlor7t0012zc7hfock4p7k","category_id":"cmfxlor7w001kzc7h23aw6tj8","_id":"cmfxlor7y001yzc7hedokd5zz"},{"post_id":"cmfxlor7u0014zc7h5fd86b7e","category_id":"cmfxlor7y001wzc7h058ucg0h","_id":"cmfxlor7y001zzc7hdlrb4gui"},{"post_id":"cmfxlor810021zc7hdgjpc9mj","category_id":"cmfxlor7u0013zc7hfakg0lln","_id":"cmfxlor820026zc7hem37ayfo"},{"post_id":"cmfxlor810024zc7hd26j261c","category_id":"cmfxlor7y001wzc7h058ucg0h","_id":"cmfxlor82002azc7h9m9ueqlr"},{"post_id":"cmfxlor800020zc7hbe3rdb2q","category_id":"cmfxlor810022zc7hhtmd9znm","_id":"cmfxlor82002bzc7h6a6ocois"},{"post_id":"cmfxlor820025zc7h29h14cby","category_id":"cmfxlor820028zc7hbvft7z0e","_id":"cmfxlor83002gzc7hcm8lc5wi"}],"PostTag":[{"post_id":"cmfxlor7g0001zc7hfn5u7pif","tag_id":"cmfxlor7k0005zc7h4mkgdjri","_id":"cmfxlor7o000ezc7hddao2te5"},{"post_id":"cmfxlor7n000bzc7h2kfg8fqg","tag_id":"cmfxlor7k0005zc7h4mkgdjri","_id":"cmfxlor7o000gzc7hadd4cy68"},{"post_id":"cmfxlor7m0009zc7h6akchd5q","tag_id":"cmfxlor7n000dzc7hajfq2y11","_id":"cmfxlor7q000nzc7h0xqx2242"},{"post_id":"cmfxlor7o000hzc7h0obnb4ks","tag_id":"cmfxlor7q000mzc7h1bqw3a85","_id":"cmfxlor7s000vzc7h5ahb0d3z"},{"post_id":"cmfxlor7p000kzc7h9591gi9z","tag_id":"cmfxlor7q000mzc7h1bqw3a85","_id":"cmfxlor7t0010zc7h56nu2n92"},{"post_id":"cmfxlor7q000ozc7hf0gr2lsf","tag_id":"cmfxlor7q000mzc7h1bqw3a85","_id":"cmfxlor7v0016zc7h2sua8a4o"},{"post_id":"cmfxlor7q000rzc7hg5izcd4c","tag_id":"cmfxlor7u0015zc7hfutzaqc2","_id":"cmfxlor7v001azc7hdrr62utm"},{"post_id":"cmfxlor7r000szc7h1uoa2mcj","tag_id":"cmfxlor7v0019zc7hfoh9bbiv","_id":"cmfxlor7w001ezc7hgwjob2zb"},{"post_id":"cmfxlor7s000xzc7hge8c0cnq","tag_id":"cmfxlor7w001dzc7hawhc0nwj","_id":"cmfxlor7w001jzc7h3nxq2uyj"},{"post_id":"cmfxlor7t000yzc7hgob7b2h1","tag_id":"cmfxlor7v0019zc7hfoh9bbiv","_id":"cmfxlor7x001mzc7hbhxl5q6r"},{"post_id":"cmfxlor7t0012zc7hfock4p7k","tag_id":"cmfxlor7v0019zc7hfoh9bbiv","_id":"cmfxlor7x001qzc7h2s10b3ea"},{"post_id":"cmfxlor7u0014zc7h5fd86b7e","tag_id":"cmfxlor7x001pzc7h07ex3jxt","_id":"cmfxlor7y001tzc7h64mdd1u3"},{"post_id":"cmfxlor800020zc7hbe3rdb2q","tag_id":"cmfxlor810023zc7hfrzdenzn","_id":"cmfxlor820029zc7hgfgaa3mw"},{"post_id":"cmfxlor810021zc7hdgjpc9mj","tag_id":"cmfxlor7q000mzc7h1bqw3a85","_id":"cmfxlor83002dzc7h84mbc6f1"},{"post_id":"cmfxlor810021zc7hdgjpc9mj","tag_id":"cmfxlor820027zc7h1nqqe5jj","_id":"cmfxlor83002ezc7h5e6v8xc3"},{"post_id":"cmfxlor810024zc7hd26j261c","tag_id":"cmfxlor82002czc7hft4fa0ui","_id":"cmfxlor83002hzc7h5ceadh92"},{"post_id":"cmfxlor820025zc7h29h14cby","tag_id":"cmfxlor7q000mzc7h1bqw3a85","_id":"cmfxlor83002izc7hftr91ut8"},{"post_id":"cmfxlor820025zc7h29h14cby","tag_id":"cmfxlor83002fzc7h8det0hui","_id":"cmfxlor83002jzc7hd31t5w7v"}],"Tag":[{"name":"ceph","_id":"cmfxlor7k0005zc7h4mkgdjri"},{"name":"Dockerfile","_id":"cmfxlor7n000dzc7hajfq2y11"},{"name":"k8s","_id":"cmfxlor7q000mzc7h1bqw3a85"},{"name":"linux","_id":"cmfxlor7u0015zc7hfutzaqc2"},{"name":"mysql","_id":"cmfxlor7v0019zc7hfoh9bbiv"},{"name":"vi","_id":"cmfxlor7w001dzc7hawhc0nwj"},{"name":"Java 笔记","_id":"cmfxlor7x001pzc7h07ex3jxt"},{"name":"java, 遇坑记录，mysql","_id":"cmfxlor810023zc7hfrzdenzn"},{"name":"kubevirt","_id":"cmfxlor820027zc7h1nqqe5jj"},{"name":"Java 面试","_id":"cmfxlor82002czc7hft4fa0ui"},{"name":"学习","_id":"cmfxlor83002fzc7h8det0hui"}]}}