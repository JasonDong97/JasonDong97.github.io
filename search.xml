<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ceph 安装记录</title>
    <url>/2021/09/30/ceph/Ceph%20%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>ceph 安装记录</p>
<span id="more"></span>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>bash</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span>
<span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> python-is-python3 systemd chrony

chronyc sources

<span class="token number">172.31</span>.18.113 ceph-01
<span class="token number">172.31</span>.26.40 ceph-02
<span class="token number">172.31</span>.24.19 ceph-03



<span class="token comment"># 安装 docker</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> apt-transport-https  ca-certificates  <span class="token function">curl</span>  software-properties-common gnupg1 gnupg2
<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -
apt-key fingerprint 0EBFCD88
<span class="token function">sudo</span> add-apt-repository    <span class="token string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span>
<span class="token function">apt-get</span> update
<span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce


<span class="token comment"># 下载</span>
<span class="token function">curl</span> <span class="token parameter variable">--silent</span> --remote-name <span class="token parameter variable">--location</span> https://github.com/ceph/ceph/raw/quincy/src/cephadm/cephadm
<span class="token function">chmod</span> +x cephadm

./cephadm add-repo <span class="token parameter variable">--release</span> quincy

./cephadm <span class="token function">install</span>
<span class="token function">which</span> cephadm

cephadm shell
cephadm shell -- ceph <span class="token parameter variable">-s</span>

cephadm bootstrap --mon-ip *<span class="token operator">&lt;</span>mon-ip<span class="token operator">></span>*
cephadm add-repo <span class="token parameter variable">--release</span> quincy
cephadm <span class="token function">install</span> ceph-common
ceph <span class="token parameter variable">-v</span>
ceph status

ceph orch <span class="token function">host</span> label <span class="token function">add</span> *<span class="token operator">&lt;</span>host<span class="token operator">></span>* _admin

ssh-copy-id <span class="token parameter variable">-f</span> <span class="token parameter variable">-i</span> /etc/ceph/ceph.pub root@ceph-02
ssh-copy-id <span class="token parameter variable">-f</span> <span class="token parameter variable">-i</span> /etc/ceph/ceph.pub root@ceph-03

ceph orch <span class="token function">host</span> <span class="token function">add</span> ip-172-31-26-40 <span class="token number">172.31</span>.26.40 <span class="token parameter variable">--labels</span> _admin
ceph orch <span class="token function">host</span> <span class="token function">add</span> ip-172-31-24-19 <span class="token number">172.31</span>.24.19 <span class="token parameter variable">--labels</span> _admin

ceph orch apply osd --all-available-devices


ceph fs volume create fs-01 <span class="token parameter variable">--placement</span><span class="token operator">=</span><span class="token string">"ip-172-31-18-113"</span>
<span class="token function">stat</span> /sbin/mount.ceph

<span class="token function">mount</span> <span class="token parameter variable">-t</span> ceph cephuser@.fs-01<span class="token operator">=</span>/ <span class="token parameter variable">-o</span> <span class="token assign-left variable">secret</span><span class="token operator">=</span>AQCR52Rjyuu7ChAAzZs+tBmFrp3bGvYAHZHwJg<span class="token operator">==</span>

<span class="token comment"># 挂载cephfs 前提条件</span>
<span class="token function">ssh</span> <span class="token punctuation">&#123;</span>user<span class="token punctuation">&#125;</span>@<span class="token punctuation">&#123;</span>mon-host<span class="token punctuation">&#125;</span> <span class="token string">"sudo ceph config generate-minimal-conf"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/ceph/ceph.conf
<span class="token function">chmod</span> <span class="token number">644</span> /etc/ceph/ceph.conf
<span class="token function">ssh</span> <span class="token punctuation">&#123;</span>user<span class="token punctuation">&#125;</span>@<span class="token punctuation">&#123;</span>mon-host<span class="token punctuation">&#125;</span> <span class="token string">"sudo ceph fs authorize cephfs client.djx / rw"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/ceph/ceph.client.foo.keyring
<span class="token function">chmod</span> <span class="token number">600</span> /etc/ceph/ceph.client.foo.keyring

<span class="token comment"># 挂载 cephfs</span>
<span class="token function">mount</span> <span class="token parameter variable">-t</span> ceph djx@f97eeb7c-5bed-11ed-9dfb-05518952193e.fs-01<span class="token operator">=</span>/ /mnt/fs-01 <span class="token parameter variable">-o</span> <span class="token assign-left variable">mon_addr</span><span class="token operator">=</span><span class="token number">172.31</span>.18.113:6789/172.31.26.40:6789/172.31.24.19:6789,secret<span class="token operator">=</span>AQCR52Rjyuu7ChAAzZs+tBmFrp3bGvYAHZHwJg<span class="token operator">==</span>


<span class="token comment"># 操作服务</span>
ceph orch <span class="token operator">&lt;</span>start<span class="token operator">|</span>stop<span class="token operator">|</span>restart<span class="token operator">|</span>redeploy<span class="token operator">|</span>reconfig<span class="token operator">></span> <span class="token operator">&lt;</span>service_name<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Ceph 学习</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>技术文章梳理</title>
    <url>/2023/12/28/java/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<h1 id="技术文章"><a href="#技术文章" class="headerlink" title="技术文章"></a>技术文章</h1><h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><ul>
<li><a href="https://www.cnblogs.com/itdragon/p/13700939.html" target="_blank">Socket 核心原理分享</a></li>
<li><a href="https://www.cnblogs.com/jingmoxukong/p/7755643.html" target="_blank">WebSocket 详解教程</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types" target="_blank">常见 MIME 类型列表</a></li>
</ul>
<h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><ul>
<li><a href="https://blog.csdn.net/xingyegt/article/details/61548601" target="_blank">Vi 常用命令</a></li>
<li><a href="https://blog.csdn.net/u010452388/article/details/86481868" target="_blank">Linux固定IP地址</a></li>
<li><a href="https://www.cnblogs.com/liaojie970/p/6746230.html" target="_blank">linux如何复制文件夹和移动文件夹</a></li>
<li><a href="https://www.cnblogs.com/jiftle/p/9707518.html" target="_blank">linux find 命令查找文件和文件夹</a></li>
<li><a href="https://www.cnblogs.com/wmhuang/p/7516273.html" target="_blank">HTTPS静态服务搭建过程详解</a></li>
<li><a href="https://www.linuxidc.com/Linux/2017-04/143031.htm" target="_blank">Linux中查询当前用户的命令总结</a></li>
<li><a href="http://www.178linux.com/86931?utm_source=tuicool&amp;utm_medium=referral" target="_blank">OpenSSL 及创建私有CA</a></li>
</ul>
<h2 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h2><ul>
<li><a href="https://www.cnblogs.com/chris-cp/p/4835507.html" target="_blank">Amazon S3 API</a></li>
<li><a href="https://www.cnblogs.com/web424/p/6840207.html" target="_blank">Amazon S3 功能介绍</a></li>
<li><a href="https://blog.csdn.net/r_12xq/article/details/88424894" target="_blank">OOS对象存储</a></li>
</ul>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><ul>
<li><a href="https://www.cnblogs.com/bjlhx/p/10477099.html" target="_blank">idea-常用插件-nginx</a></li>
<li><a href="https://www.runoob.com/w3cnote/nginx-setup-intro.html" target="_blank">Nginx 配置详解</a></li>
<li><a href="https://www.cnblogs.com/kevingrace/p/9512287.html" target="_blank">Nginx支持WebSocket反向代理-学习小结</a></li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul>
<li><a href="https://www.cnblogs.com/takumicx/p/9998844.html" target="_blank">数据库事务的概念及其实现原理</a></li>
<li><a href="https://www.cnblogs.com/dong897812629/archive/2013/03/27/2981142.html" target="_blank">视图、索引、存储过程 、触发器、游标及事务</a></li>
</ul>
<h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><ul>
<li><a href="https://www.cnblogs.com/TM0831/p/10606624.html" target="_blank">最详细的Windows平台安装MongoDB教程</a></li>
</ul>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><ul>
<li><a href="https://www.cnblogs.com/mycapple-zgs-111411/p/7680529.html" target="_blank">mysql创建存储过程</a></li>
<li><a href="https://blog.csdn.net/wuhuagu_wuhuaguo/article/details/90522435" target="_blank">MySQL 字符串截取函数</a></li>
<li><a href="https://www.cnblogs.com/boothsun/p/7792341.html" target="_blank">MySQL的七种join</a></li>
<li><a href="https://www.cnblogs.com/chenqionghe/p/4675844.html" target="_blank">MySQL CAST与CONVERT 函数的用法</a></li>
<li><a href="https://www.cnblogs.com/ggjucheng/p/3352280.html" target="_blank"> MySQL 获得当前日期时间 函数</a></li>
<li><a href="https://www.cnblogs.com/kaiwen1/p/6869025.html" target="_blank">MySQL外键设置中的的 Cascade、NO ACTION、Restrict、SET NULL&amp;nbsp;</a></li>
<li><a href="https://blog.csdn.net/hry2015/article/details/76359281" target="_blank">mysql语法总结</a></li>
<li><a href="https://www.cnblogs.com/yang82/p/7794712.html" target="_blank">MySQL如何修改密码</a></li>
<li><a href="https://blog.csdn.net/mary19920410/article/details/76545053" target="_blank">浅析MySQL中concat以及group_concat的使用</a></li>
</ul>
<h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><ul>
<li><a href="https://www.cnblogs.com/boothsun/p/8970952.html#autoid-7-1-0" target="_blank">MySQL索引底层实现原理 </a></li>
<li><a href="https://www.cnblogs.com/boothsun/p/8480909.html" target="_blank">MySQL查询性能优化&amp;nbsp;</a></li>
<li><a href="https://www.cnblogs.com/vicenteforever/articles/1613119.html" target="_blank">InnoDB与Myisam的六大区别</a></li>
<li><a href="https://www.cnblogs.com/boothsun/p/7872669.html" target="_blank">MySQL 主从复制 </a></li>
<li><a href="https://www.cnblogs.com/boothsun/p/7774019.html" target="_blank">MySQL建立高性能索引策略 </a></li>
<li><a href="https://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html" target="_blank">理解MySQL——索引与优化</a></li>
<li><a href="https://www.cnblogs.com/zongyl/p/6021097.html" target="_blank">通过乐观锁（版本号）降低并发时的锁竞争问题</a></li>
</ul>
<h5 id="MySQL-优化"><a href="#MySQL-优化" class="headerlink" title="MySQL 优化"></a>MySQL 优化</h5><ul>
<li><a href="https://www.cnblogs.com/zhanjindong/p/3439042.html" target="_blank">MySQL优化—工欲善其事，必先利其器之EXPLAIN</a></li>
<li><a href="https://www.cnblogs.com/zhanjindong/p/3472804.html" target="_blank">MySQL优化—工欲善其事，必先利其器（2）</a></li>
</ul>
<h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3><ul>
<li><a href="https://www.jb51.net/article/187271.htm" target="_blank">Windows10安装Oracle19c数据库详细记录</a></li>
</ul>
<h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><ul>
<li><a href="http://blog.itpub.net/29500582/viewspace-1314555/" target="_blank">Oracle查看当前登陆用户的权限或者角色</a></li>
<li><a href="https://www.cnblogs.com/roger112/p/7685307.html" target="_blank">Oracle创建用户、角色、授权、建表&amp;nbsp;</a></li>
<li><a href="https://www.cnblogs.com/rosesmall/p/5767605.html" target="_blank">查看Oracle数据库的用户名和密码</a></li>
</ul>
<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul>
<li><a href="https://www.runoob.com/redis/redis-install.html" target="_blank">Redis 安装</a></li>
<li><a href="https://blog.csdn.net/yejingtao703/article/details/78484151" target="_blank">三张图秒懂Redis集群设计原理</a></li>
<li>在windows上搭建redis集群（Redis-Cluster）</a></li>
<li><a href="https://www.cnblogs.com/tommy-huang/p/6240083.html" target="_blank">Windows下搭建Redis集群</a></li>
</ul>
<h3 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h3><ul>
<li><a href="https://www.cnblogs.com/wuyifu/p/3447870.html" target="_blank">SQL Server中的锁 详解 nolock,rowlock,tablock,xlock,paglock</a></li>
<li><a href="https://www.cnblogs.com/Brambling/p/6754993.html" target="_blank">SQL Server 创建索引（index）</a></li>
<li><a href="https://www.cnblogs.com/CreateMyself/p/6512692.html" target="_blank">SQL Server-聚焦NOLOCK、UPDLOCK、HOLDLOCK、READPAST你弄懂多少？</a></li>
<li><a href="https://www.w3school.com.cn/sql/func_datediff.asp" target="_blank">SQL Server DATEDIFF() 函数</a></li>
<li><a href="https://www.cnblogs.com/xwdreamer/archive/2012/06/23/2559344.html" target="_blank">查看sqlserver的端口号</a></li>
<li><a href="https://www.cnblogs.com/JohnnyBao/p/3799054.html" target="_blank">sql server 判断是否存在数据库，表，列，视图</a></li>
<li><a href="https://www.cnblogs.com/zhangpengnike/p/6122588.html" target="_blank">SQLServer 日期函数大全</a></li>
</ul>
<h2 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h2><ul>
<li><a href="https://blog.csdn.net/uzizi/article/details/81046646" target="_blank">windows安装nvm的两种方式</a></li>
</ul>
<h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><ul>
<li><a href="https://www.cnblogs.com/jasontec/p/9698774.html" target="_blank">分布式系统理论–CAP理论、BASE理论</a></li>
<li><a href="https://www.cnblogs.com/boothsun/p/8976409.html" target="_blank">分布式事务解决办法 </a></li>
</ul>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ul>
<li>Solr和ES对比</a></li>
<li><a href="https://juejin.cn/post/6844903955722403848#heading-0" target="_blank">9月腾讯、百度、阿里高频的29道SSM框架面试题解析</a></li>
<li><a href="https://blog.csdn.net/shmnh/article/details/42833291" target="_blank">28个MongoDB经典面试题</a></li>
<li><a href="https://blog.csdn.net/cliper9768/article/details/82870163" target="_blank">Dubbo面试题</a></li>
<li><a href="https://blog.csdn.net/qq_42629110/article/details/84963815" target="_blank">SpringCloud面试题</a></li>
<li><a href="https://blog.csdn.net/suxiexingchen/article/details/82020430" target="_blank">springBoot应用启动器基本的一共有44种</a></li>
<li><a href="https://blog.csdn.net/qq_34337272/article/details/81072874" target="_blank">面试必备之乐观锁与悲观锁</a></li>
<li><a href="https://juejin.cn/post/6844903809613840398" target="_blank">比较全面的中级Java面试题</a></li>
</ul>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247484920&amp;amp;idx=1&amp;amp;sn=c7167df0b36522935896565973d02cc9&amp;source=41#wechat_redirect" target="_blank">后端必备——数据通信知识(RPC、消息队列)一站式总结</a></li>
</ul>
<h4 id="JSR330"><a href="#JSR330" class="headerlink" title="JSR330"></a>JSR330</h4><ul>
<li><a href="https://blog.csdn.net/u010278882/article/details/50773687" target="_blank">Java 依赖注入标准 JSR-330 简介</a></li>
<li><a href="https://www.chkui.com/article/java/java_jsr330" target="_blank">Java JSR330</a></li>
<li><a href="https://www.cnblogs.com/hhhshct/p/8523697.html" target="_blank">java实现HTTP请求的三种方式</a></li>
<li><a href="https://www.cnblogs.com/super-chao/p/6118739.html" target="_blank">java中cookie存取值</a></li>
<li><a href="https://baijiahao.baidu.com/s?id=1647621616629561468&amp;wfr=spider&amp;for=pc" target="_blank">详解java并发原子类AtomicInteger（基于jdk1.8源码分析）</a></li>
<li><a href="https://blog.csdn.net/weixin_38111667/article/details/81630290" target="_blank">JAVA &amp;&amp; java.lang.UnsatisfiedLinkError: The specified module could not be found.找不到指定模块</a></li>
</ul>
<h4 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h4><ul>
<li><a href="https://blog.csdn.net/weixin_40792878/article/details/82154402" target="_blank">Java虚拟机内存参数设置</a></li>
</ul>
<h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><ul>
<li><a href="https://www.cnblogs.com/XHJT/p/3897440.html" target="_blank">线程同步的7种方式</a></li>
</ul>
<h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><ul>
<li><a href="https://www.cnblogs.com/redcool/p/6426173.html" target="_blank">Spring线程池ThreadPoolTaskExecutor配置及详情</a></li>
<li><a href="https://www.cnblogs.com/pjfmeng/p/7551340.html" target="_blank">annotation之@Autowired、@Inject、@Resource三者区别</a></li>
<li><a href="https://blog.csdn.net/m0_37626813/article/details/78558010" target="_blank">Spring中@Component的作用</a></li>
</ul>
<h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><ul>
<li><a href="https://blog.csdn.net/littleskey/article/details/52841148" target="_blank">Spring Mvc @ResponseBody String返回中文字符串乱码</a></li>
<li><a href="https://www.cnblogs.com/WJ-163/p/6269409.html" target="_blank">SpringMVC文件上传与下载</a></li>
<li><a href="https://blog.csdn.net/liuxiao723846/article/details/46006275" target="_blank">jackson详解</a></li>
</ul>
<h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h3><ul>
<li><a href="https://www.cnblogs.com/itdragon/p/8686554.html" target="_blank">Spring Boot配置文件详解</a></li>
<li><a href="https://www.cnblogs.com/yuansc/p/9076604.html" target="_blank">SpringBoot配置Cors解决跨域请求问题</a></li>
</ul>
<h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h3><ul>
<li><a href="https://blog.csdn.net/loushuiyifan/article/details/82702522" target="_blank">Hystrix原理与实战</a></li>
</ul>
<h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><ul>
<li><a href="https://www.cnblogs.com/happyflyingpig/p/7739749.html" target="_blank">mybatis一级缓存二级缓存&amp;nbsp;&amp;nbsp;</a></li>
</ul>
<h3 id="ShardingSpare"><a href="#ShardingSpare" class="headerlink" title="ShardingSpare"></a>ShardingSpare</h3><ul>
<li><a href="https://shardingsphere.apache.org/document/legacy/4.x/document/cn/overview/" target="_blank">shardingsphere 官方文档</a></li>
</ul>
<h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><ul>
<li><a href="https://www.cnblogs.com/jasontec/p/9651820.html" target="_blank">Zookeeper 与 Eureka 对比</a></li>
<li><a href="https://www.cnblogs.com/boothsun/p/8976502.html" target="_blank">ZooKeeper的典型应用场景 </a></li>
<li><a href="https://www.cnblogs.com/boothsun/p/8976829.html" target="_blank">ZK分布式锁（未完 待续）&amp;nbsp;</a></li>
</ul>
<h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><ul>
<li><a href="https://www.cnblogs.com/niejunlei/p/5977895.html" target="_blank">Druid 介绍及配置</a></li>
</ul>
<h3 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h3><ul>
<li><a href="http://www.blogjava.net/zJun/archive/2006/06/28/55511.html" target="_blank">配置Log4j(很详细)</a></li>
</ul>
<h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><ul>
<li>&amp;nbsp;</li>
</ul>
]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
  </entry>
  <entry>
    <title>重塑生活的八个步骤</title>
    <url>/2023/12/18/life/%E9%87%8D%E5%A1%91%E7%94%9F%E6%B4%BB%E7%9A%84%E5%85%AB%E4%B8%AA%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<h1 id="重塑生活的八个步骤"><a href="#重塑生活的八个步骤" class="headerlink" title="重塑生活的八个步骤"></a>重塑生活的八个步骤</h1><h2 id="一、洗净你的肉身"><a href="#一、洗净你的肉身" class="headerlink" title="一、洗净你的肉身"></a>一、洗净你的肉身</h2><p>洗澡，刷牙，穿上清新的衣服，时刻让自己的肉身整洁干净，这将向你的潜意识传递【你值得呵护】的信号。</p>
<h2 id="二、整顿你的领地"><a href="#二、整顿你的领地" class="headerlink" title="二、整顿你的领地"></a>二、整顿你的领地</h2><p>打扫你的寝室，彻底清理你的房子，扔掉那些让你心烦意乱的废物。因为你的空间怎么样，你就是怎么样的人。如果你的空间乱七八糟，那你也是乱七八糟人。</p>
<h2 id="三、走出家门"><a href="#三、走出家门" class="headerlink" title="三、走出家门"></a>三、走出家门</h2><p>在我们信步行走、阳光洒脸、眼珠左右转动之时，大脑的运转状态最佳。走出去，因为我们生来就是为了与他人建立关系和与社群建立联系的。如果我们永远不离开家，我们将会悄然错失真实的生活。</p>
<h2 id="四、流汗"><a href="#四、流汗" class="headerlink" title="四、流汗"></a>四、流汗</h2><p>让血液流动起来，去出点汗，因为消耗能量也会产生能量。</p>
<h2 id="五、监控你的小金库"><a href="#五、监控你的小金库" class="headerlink" title="五、监控你的小金库"></a>五、监控你的小金库</h2><p>巨头每天都在做偷鸡摸狗的事，通过自动订阅掏空辛苦挣来的钱。请立刻打开你的订阅管理，取消所有默认的支付行为，你的小金库很重要！</p>
<h2 id="六、移除束缚，脱身引诱"><a href="#六、移除束缚，脱身引诱" class="headerlink" title="六、移除束缚，脱身引诱"></a>六、移除束缚，脱身引诱</h2><p>关闭通知，取关不必要的社交账号，戒断所有抽烟喝酒的成瘾行为。</p>
<h2 id="七、制定策略"><a href="#七、制定策略" class="headerlink" title="七、制定策略"></a>七、制定策略</h2><p>别再漫无目的地生活，天上不会掉馅饼。立即制定策略，付诸行动。</p>
<h2 id="八、臣服"><a href="#八、臣服" class="headerlink" title="八、臣服"></a>八、臣服</h2><p>臣服于你必须做的事情，你已经思考过了，关闭你的大脑，卸下过度思考的负担。学会让你的理性思考静音。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>用 Dockerfile 文件构建带 systemd 的ubuntu 22.04</title>
    <url>/2023/10/20/docker/%E7%94%A8%20Dockerfile%20%E6%96%87%E4%BB%B6%E6%9E%84%E5%BB%BA%E5%B8%A6%20systemd%20%E7%9A%84ubuntu%2022.04/</url>
    <content><![CDATA[<h1 id="用-Dockerfile-文件构建带-systemd-的ubuntu-22-04"><a href="#用-Dockerfile-文件构建带-systemd-的ubuntu-22-04" class="headerlink" title="用 Dockerfile 文件构建带 systemd 的ubuntu 22.04"></a>用 Dockerfile 文件构建带 systemd 的ubuntu 22.04</h1><h2 id="Dockerfile-文件"><a href="#Dockerfile-文件" class="headerlink" title="Dockerfile 文件"></a>Dockerfile 文件</h2><pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">FROM ubuntu:22.04
WORKDIR &#x2F;root
# noninteractive 配置时不需要输入任何信息
ENV DEBIAN_FRONTEND&#x3D;&quot;noninteractive&quot;
# 配置时区
ENV TZ&#x3D;Asia&#x2F;Shanghai
# 配置apt源
RUN sed -i &#39;s@&#x2F;&#x2F;.*archive.ubuntu.com@&#x2F;&#x2F;mirrors.ustc.edu.cn@g&#39; &#x2F;etc&#x2F;apt&#x2F;sources.list
# 安装必要的软件
RUN apt update &amp;&amp; apt install -y init locales
# 配置语言环境
RUN locale-gen en_US.UTF-8
# 配置 entrypoint 为 init, 是 init 可以作为 pid 1 运行, 并且可以启动 systemd
ENTRYPOINT [&quot;&#x2F;usr&#x2F;sbin&#x2F;init&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> ubuntu:22.04-systemd <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span> <span class="token parameter variable">--name</span> ubuntu <span class="token parameter variable">-h</span> ubuntu ubuntu:22.04-systemd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title>Ceph集群部署</title>
    <url>/2021/10/01/ceph/Ceph%20%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="一、Ceph-简介"><a href="#一、Ceph-简介" class="headerlink" title="一、Ceph 简介"></a>一、Ceph 简介</h1><blockquote>
<p>一个 Ceph 存储集群需要至少一个 Ceph 监视器、Ceph 管理器和 Ceph OSD(对象存储守护进程)。在运行 Ceph 文件系统客户端时，也需要 Ceph 元数据服务器。</p>
</blockquote>
<span id="more"></span>

<ul>
<li><p><strong>Monitors</strong>:</p>
<ul>
<li>Ceph 监视器(<code>ceph-mon</code>)维护着展示集群状态的各种图表，包括监视器图、管理器图、OSD 图、MDS 图和 CRUSH 图。这些图是 Ceph 守护进程相互协调所必需的关键集群状态。</li>
<li>监视器还负责管理守护进程和客户端之间的身份验证。为了实现冗余和高可用性，通常需要至少三个监视器。</li>
</ul>
</li>
<li><p><strong>Managers</strong>: <a href="https://docs.ceph.com/en/latest/glossary/#term-Ceph-Manager">Ceph Manager</a>守护程序(<code>ceph-mgr</code>)</p>
<ul>
<li>负责跟踪运行时指标和 Ceph 群集的当前状态，包括存储利用率、当前性能指标和系统负载。</li>
<li>Ceph Manager 守护程序还托管基于 python 的模块来管理和公开 Ceph 群集信息，包括基于 Web 的<a href="https://docs.ceph.com/en/latest/mgr/dashboard/#mgr-dashboard">Ceph 仪表板和</a> <a href="https://docs.ceph.com/en/latest/mgr/restful">REST API</a>。高可用性通常需要至少两个管理器。</li>
</ul>
</li>
<li><p><strong>OSDs</strong>: <a href="https://docs.ceph.com/en/latest/glossary/#term-Ceph-OSD">Ceph OSD</a> (object storage daemon, <code>ceph-osd</code>)存储数据，处理数据复制，恢复，重新平衡，并提供一些监视信息到 Ceph 监视器和管理器,通过检查其他 Ceph OSD 守护进程检测信号.冗余和高可用性通常需要至少 3 个 Ceph OSD。</p>
</li>
<li><p><strong>MDSs</strong>: <a href="https://docs.ceph.com/en/latest/glossary/#term-Ceph-Metadata-Server">Ceph 元数据服务器</a>（MDS, <code>ceph-mds</code>）代表<a href="https://docs.ceph.com/en/latest/glossary/#term-Ceph-File-System">Ceph 文件系统</a>存储元数据（即 Ceph 块设备和 Ceph 对象存储不使用 MDS）。Ceph 元数据服务器允许 POSIX 文件系统用户执行基本命令 (如<code>ls</code>, <code>find</code>, <code>etc</code>等)，而不会给 Ceph 存储群集带来巨大负担。</p>
</li>
</ul>
<blockquote>
<p>Ceph 将数据存储为逻辑存储池中的对象。使用<a href="https://docs.ceph.com/en/latest/glossary/#term-CRUSH">CRUSH 算法</a>，Ceph 计算哪个放置组应包含对象，并进一步计算哪个 Ceph OSD 守护程序应存储该放置组。CRUSH 算法使 Ceph 存储群集能够动态扩展、重新平衡和恢复。</p>
</blockquote>
<p>参考链接：</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s/TWXPPk7hE1D4AGsHg7CIMg">https://mp.weixin.qq.com/s/TWXPPk7hE1D4AGsHg7CIMg</a></li>
<li><a href="https://www.jianshu.com/p/cc3ece850433">https://www.jianshu.com/p/cc3ece850433</a></li>
<li><a href="https://mp.weixin.qq.com/s/QXRdyYKSKIa1aLNI8dOGcQ">https://mp.weixin.qq.com/s/QXRdyYKSKIa1aLNI8dOGcQ</a></li>
<li><a href="https://blog.csdn.net/xiaoquqi/article/details/43055031">https://blog.csdn.net/xiaoquqi/article/details/43055031</a></li>
</ul>
<h1 id="二、Cephadm-部署集群"><a href="#二、Cephadm-部署集群" class="headerlink" title="二、Cephadm 部署集群"></a>二、Cephadm 部署集群</h1><p>简单，简述，详细参考：<a href="https://docs.ceph.com/en/latest/cephadm/#cephadm">https://docs.ceph.com/en/latest/cephadm/#cephadm</a></p>
<h2 id="1-环境规划"><a href="#1-环境规划" class="headerlink" title="1.环境规划"></a>1.环境规划</h2><table>
<thead>
<tr>
<th>主机名</th>
<th>内网 IP</th>
<th>操作系统</th>
<th>角色</th>
<th>配置</th>
</tr>
</thead>
<tbody><tr>
<td>ceph1</td>
<td>192.168.200.128</td>
<td>Debian11</td>
<td>cephadm,mon,mgr,osd</td>
<td>2C,2G,20G 系统盘，20G 数据盘</td>
</tr>
<tr>
<td>ceph2</td>
<td>192.168.200.131</td>
<td>Debian11</td>
<td>cephadm,mon</td>
<td>2C,2G,20G 系统盘，20G 数据盘</td>
</tr>
<tr>
<td>ceph3</td>
<td>192.168.200.132</td>
<td>Debian11</td>
<td>cephadm,mon</td>
<td>2C,2G,20G 系统盘，20G 数据盘</td>
</tr>
</tbody></table>
<blockquote>
<p>典型的 Ceph 集群有三个或五个监视器守护程序，分布在不同的主机上。如果群集中有五个或更多节点，我们建议部署五个监视器。</p>
</blockquote>
<p>当 Ceph 知道 mon 应该使用什么 IP 子网时，它可以随着群集的增长（或收缩）自动部署和缩放 mon。默认情况下，Ceph 假定其他 mon 使用与第一个 mon 的 IP 相同的子网。</p>
<p>在单个子网的情况下，如果向集群中添加主机，默认最多只会添加 5 个 mon 如果有特定的 IP 子网给 mon 使用，可以使用 CIDR 格式配置该子网。</p>
<h2 id="2-前置-所有节点"><a href="#2-前置-所有节点" class="headerlink" title="2.前置(所有节点)"></a>2.前置(所有节点)</h2><blockquote>
<p><a href="https://docs.ceph.com/en/pacific/cephadm/install/">https://docs.ceph.com/en/pacific/cephadm/install/</a></p>
</blockquote>
<p>各节点配置 hosts</p>
<pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">10.200.10.31 ceph-pro-1-10-200-10-31
10.200.10.32 ceph-pro-2-10-200-10-32
10.200.10.33 ceph-pro-3-10-200-10-33
10.200.10.34 ceph-pro-4-10-200-10-34
10.200.10.35 ceph-pro-5-10-200-10-35<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="3-安装-CEPHADM-所有节点"><a href="#3-安装-CEPHADM-所有节点" class="headerlink" title="3.安装 CEPHADM(所有节点)"></a>3.安装 CEPHADM(所有节点)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载cephadm</span>
<span class="token function">curl</span> --remote-name <span class="token parameter variable">--location</span> https://hub.shutcm.cf/ceph/ceph/raw/pacific/src/cephadm/cephadm
<span class="token function">chmod</span> +x cephadm
<span class="token comment">#设置源</span>
./cephadm add-repo <span class="token parameter variable">--release</span> pacific
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s#https://download.ceph.com#https://mirrors.aliyun.com/ceph#g'</span> /etc/apt/sources.list.d/ceph.list
<span class="token function">apt-get</span> update
<span class="token comment">#安装cephadm命令</span>
./cephadm <span class="token function">install</span>
<span class="token comment">#确认在PATH中</span>
<span class="token function">which</span> cephadm
<span class="token function">rm</span> <span class="token parameter variable">-fr</span> cephadm
<span class="token comment">#安装ceph命令</span>
cephadm <span class="token function">install</span> ceph-common<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="4-引导新群集-第一台"><a href="#4-引导新群集-第一台" class="headerlink" title="4.引导新群集(第一台)"></a>4.引导新群集(第一台)</h2><blockquote>
<p>创建新的 Ceph 集群的第一步是在 Ceph 集群的第一台主机上运行 cephadm bootstrap 命令，运行此命令的操作将创建 Ceph 集群的第一个“监视程序守护程序”。</p>
</blockquote>
<p>而该监视程序守护程序需要一个 IP 地址，必须将 Ceph 集群的第一个主机的 IP 地址传递给 ceph bootstrap 命令。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cephadm bootstrap --mon-ip <span class="token number">10.200</span>.10.31
<span class="token comment">#设置addr</span>
<span class="token comment">#ceph orch host set-addr ceph1 192.168.200.128</span>
<span class="token comment">#检查</span>
ceph orch <span class="token function">host</span> <span class="token function">ls</span>
ceph <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此命令将会：</p>
<pre class="line-numbers language-none"><code class="language-none">1) 在本地主机上为新集群创建监视和管理器守护程序
2) 为Ceph集群生成一个新的SSH密钥，并将其添加到root用户的&#x2F;root&#x2F;.ssh&#x2F;authorized_keys文件中
3) 将最小配置文件写入&#x2F;etc&#x2F;ceph&#x2F;ceph.conf
4) 将client.admin管理特权密钥写入&#x2F;etc&#x2F;ceph&#x2F;ceph.client.admin.keyring
5) 将公钥写入&#x2F;etc&#x2F;ceph&#x2F;ceph.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="5-向群集添加主机"><a href="#5-向群集添加主机" class="headerlink" title="5.向群集添加主机"></a>5.向群集添加主机</h2><blockquote>
<p>在解析主机名等方面，cephadm 的要求非常低, 通过以下命令可以明确 IP 与主机名之间的解析：ceph orch host add</p>
</blockquote>
<p><strong>注意</strong>：添加主机时会自动创建 mon 服务，先按照 禁用监视器自动部署( 5.4 (1) ) 或 调整默认值监视器数量 (5.2 节)，再添加主机。</p>
<p>在新主机 root 用户的 authorized_keys 文件中安装集群的公共 SSH 密钥</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#ssh-copy-id -f -i /etc/ceph/ceph.pub root@*&lt;new-host>*</span>
ssh-copy-id <span class="token parameter variable">-f</span> <span class="token parameter variable">-i</span> /etc/ceph/ceph.pub root@ceph-pro-1-10-200-10-31
ssh-copy-id <span class="token parameter variable">-f</span> <span class="token parameter variable">-i</span> /etc/ceph/ceph.pub root@ceph-pro-2-10-200-10-32
ssh-copy-id <span class="token parameter variable">-f</span> <span class="token parameter variable">-i</span> /etc/ceph/ceph.pub root@ceph-pro-3-10-200-10-33
ssh-copy-id <span class="token parameter variable">-f</span> <span class="token parameter variable">-i</span> /etc/ceph/ceph.pub root@ceph-pro-4-10-200-10-34
ssh-copy-id <span class="token parameter variable">-f</span> <span class="token parameter variable">-i</span> /etc/ceph/ceph.pub root@ceph-pro-5-10-200-10-35<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>添加方式两种：</p>
<ul>
<li>命令方式添加</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#ceph orch host add *&lt;newhost>* [*&lt;ip>*] [*&lt;label1> ...*]</span>
ceph orch <span class="token function">host</span> <span class="token function">add</span> ceph-pro-2-10-200-10-32 <span class="token number">10.200</span>.10.32 <span class="token parameter variable">--labels</span> _admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>yaml 方式添加</li>
</ul>
<p><code>host.yml</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">service_type</span><span class="token punctuation">:</span> host
<span class="token key atrule">addr</span><span class="token punctuation">:</span> 192.168.200.131
<span class="token key atrule">hostname</span><span class="token punctuation">:</span> ceph2
<span class="token key atrule">labels</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> mon
<span class="token punctuation">---</span>
<span class="token key atrule">service_type</span><span class="token punctuation">:</span> host
<span class="token key atrule">addr</span><span class="token punctuation">:</span> 192.168.200.132
<span class="token key atrule">hostname</span><span class="token punctuation">:</span> ceph3
<span class="token key atrule">labels</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> mon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="3-检查状态"><a href="#3-检查状态" class="headerlink" title="3.检查状态"></a>3.检查状态</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ceph orch <span class="token function">host</span> <span class="token function">ls</span>
ceph <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="6-部署-OSD"><a href="#6-部署-OSD" class="headerlink" title="6.部署 OSD"></a>6.部署 OSD</h2><p><strong><a href="https://docs.ceph.com/en/pacific/cephadm/services/osd/#">https://docs.ceph.com/en/pacific/cephadm/services/osd/#</a></strong></p>
<blockquote>
<p>当有新的 osd 加入集群或者移除了 osd，就会把状态上报给 Monitor，Monitor 知道了 osd map 发生了变化就会触发 rebalancing，确保 pg 能够平滑的移动到各个 osd 上，以 pg 为整体进行数据重平衡，重平衡的过程中可能会影响性能，一次性加入的 osd 越多，数据 rebalancing 就越频繁。</p>
</blockquote>
<blockquote>
<p>当在做 rebalance 的时候，每个 osd 都会按照 osd_max_backfills 指定数量的线程来同步，如果该数值比较大，同步会比较快，但是会影响部分性能；为了避免 rebalance 带来的性能影响，可以对 rebalance 进行关闭；添加完 osd 后再打开。</p>
</blockquote>
<h3 id="1-rebalance-关闭"><a href="#1-rebalance-关闭" class="headerlink" title="1).rebalance 关闭"></a>1).rebalance 关闭</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置标志位</span>
ceph osd <span class="token builtin class-name">set</span> norebalance

<span class="token comment"># 关闭数据填充</span>
ceph osd <span class="token builtin class-name">set</span> nobackfill

<span class="token comment"># 查看集群状态</span>
ceph <span class="token parameter variable">-s</span>
  cluster:
    id:     87cdd3b2-987b-11eb-989e-000c29b12ae1
    health: HEALTH_WARN
            nobackfill,norebalance flag<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token builtin class-name">set</span>  <span class="token comment"># 有此信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-rebalance-开启"><a href="#2-rebalance-开启" class="headerlink" title="2).rebalance 开启"></a>2).rebalance 开启</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#开启数据填充</span>
ceph osd <span class="token builtin class-name">unset</span> nobackfill
<span class="token comment">#开启rebalance</span>
ceph osd <span class="token builtin class-name">unset</span> norebalance
<span class="token comment"># 查看集群状态</span>
ceph <span class="token parameter variable">-s</span>
  cluster:
    id:     87cdd3b2-987b-11eb-989e-000c29b12ae1
    health: HEALTH_OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-列出节点可用设备"><a href="#3-列出节点可用设备" class="headerlink" title="3).列出节点可用设备"></a>3).列出节点可用设备</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#ceph orch device ls [--wide]</span>
ceph orch device <span class="token function">ls</span> <span class="token parameter variable">--wide</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果满足以下所有条件，则认为存储设备可用</p>
<pre class="line-numbers language-none"><code class="language-none">1) 设备必须没有分区
2) 设备不得具有任何LVM状态
3) 设备不得挂载
4) 设备不得包含文件系统
5) 设备不得包含Ceph BlueStore OSD
6) 设备必须大于5 GB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-创建-osd"><a href="#4-创建-osd" class="headerlink" title="4).创建 osd"></a>4).创建 osd</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#需要至少 3 个 Ceph OSD 以实现冗余和高可用性</span>
ceph orch daemon <span class="token function">add</span> osd ceph-pro-1-10-200-10-31:/dev/sdb
ceph orch daemon <span class="token function">add</span> osd ceph-pro-2-10-200-10-32:/dev/sdb
ceph orch daemon <span class="token function">add</span> osd ceph-pro-3-10-200-10-33:/dev/sdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="7-集群高可用"><a href="#7-集群高可用" class="headerlink" title="7.集群高可用"></a>7.集群高可用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#需要至少三个监视器才能实现冗余和高可用性</span>
ceph orch apply mon <span class="token number">3</span>
<span class="token comment"># 部署mon到指定节点</span>
ceph orch <span class="token function">host</span> label <span class="token function">add</span> *<span class="token operator">&lt;</span>host<span class="token operator">></span>* mon
<span class="token comment">#至少需要两个管理器才能实现高可用性</span>
ceph orch apply mgr <span class="token number">3</span>
<span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="8-CephFS-部署"><a href="#8-CephFS-部署" class="headerlink" title="8.CephFS 部署"></a>8.CephFS 部署</h2><h2 id="9-部署-RGW"><a href="#9-部署-RGW" class="headerlink" title="9.部署 RGW"></a>9.部署 RGW</h2><p><a href="https://docs.ceph.com/en/pacific/cephadm/services/rgw/">https://docs.ceph.com/en/pacific/cephadm/services/rgw/</a></p>
<h1 id="三、运维"><a href="#三、运维" class="headerlink" title="三、运维"></a>三、运维</h1><p><a href="https://www.cnblogs.com/royaljames/p/9807532.html">https://www.cnblogs.com/royaljames/p/9807532.html</a></p>
<h2 id="1-向群集添加主机"><a href="#1-向群集添加主机" class="headerlink" title="1.向群集添加主机"></a>1.向群集添加主机</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.在新主机的根用户文件中安装群集的公共 SSH 密钥</span>
ssh-copy-id <span class="token parameter variable">-f</span> <span class="token parameter variable">-i</span> /etc/ceph/ceph.pub root@host2
<span class="token comment">#2.告诉 Ceph 新节点是群集的一部分：</span>
ceph orch <span class="token function">host</span> <span class="token function">add</span> host2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2-部署其他监视器-monitor"><a href="#2-部署其他监视器-monitor" class="headerlink" title="2.部署其他监视器(monitor)"></a>2.部署其他监视器(monitor)</h2><blockquote>
<p>典型的 Ceph 群集具有分布在不同主机的三个或五个监视器守护程序。如果群集中有五个或更多节点，我们建议部署五个监视器。</p>
</blockquote>
<p>当 Ceph 知道监视器应该使用什么 IP 子网时，它可以随着群集的增长（或收缩）自动部署和缩放监视器。默认情况下，Ceph 假定其他监视器应使用与第一个监视器的 IP 相同的子网。</p>
<p>如果您的 Ceph 监视器（或整个群集）住在单个子网中，则在向群集添加新主机时，默认情况下，cephadm 会自动添加多达 5 个监视器。无需进一步步骤。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#如果有特定的 IP 子网应该由监视器使用，您可以用CIDR格式（例如 ） 配置该子网，Cephadm 仅在配置的子网中配置了 IP 的主机上部署新的监视器守护程序。</span>
ceph config <span class="token builtin class-name">set</span> mon public_network <span class="token number">10.1</span>.2.0/24
<span class="token comment">#如果要调整 5 个监视器的默认值：</span>
ceph orch apply mon *<span class="token operator">&lt;</span>number-of-monitors<span class="token operator">></span>*
<span class="token comment">#若要在一组特定的主机上部署监视器，请确保在此列表中包括第一个（引导）主机。</span>
ceph orch apply mon *<span class="token operator">&lt;</span>host1,host2,host3,<span class="token punctuation">..</span>.<span class="token operator">></span>*
<span class="token comment">#您可以通过使用主机标签来控制监视器运行的主机。要将标签设置为相应的主机，请：mon</span>
ceph orch <span class="token function">host</span> label <span class="token function">add</span> *<span class="token operator">&lt;</span>hostname<span class="token operator">></span>* mon
<span class="token comment">#要查看当前主机和标签：</span>
ceph orch <span class="token function">host</span> <span class="token function">ls</span>
<span class="token comment">#例如：</span>
<span class="token comment"># ceph orch host label add host1 mon</span>
<span class="token comment"># ceph orch host label add host2 mon</span>
<span class="token comment"># ceph orch host label add host3 mon</span>
<span class="token comment"># ceph orch host ls</span>
HOST   ADDR   LABELS  STATUS
host1         mon
host2         mon
host3         mon
host4
host5
<span class="token comment">#告诉 cephadm 根据标签部署监视器：</span>
ceph orch apply mon label:mon
<span class="token comment">#您可以显式指定每个监视器的 IP 地址或 CIDR 网络，并控制其放置位置。要禁用自动监视器部署：</span>
ceph orch apply mon <span class="token parameter variable">--unmanaged</span>
<span class="token comment">#要部署每个附加监视器：</span>
ceph orch daemon <span class="token function">add</span> mon *<span class="token operator">&lt;</span>host1:ip-or-network<span class="token operator"><span class="token file-descriptor important">1</span>></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>host1:ip-or-network-<span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>*
<span class="token comment">#例如，要在使用 IP 地址上部署第二个监视器，在网络上部署第三个监视器</span>
<span class="token comment"># ceph orch apply mon --unmanaged</span>
<span class="token comment"># ceph orch daemon add mon newhost1:10.1.2.123</span>
<span class="token comment"># ceph orch daemon add mon newhost2:10.1.2.0/24</span>

<span class="token comment">#若要确保监视器应用于这三台主机中的每一个主机，请运行以下命令：</span>
ceph orch apply mon <span class="token string">"host1,host2,host3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="使用-YAML-规范"><a href="#使用-YAML-规范" class="headerlink" title="使用 YAML 规范"></a>使用 YAML 规范</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ceph orch apply <span class="token parameter variable">-i</span> file.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">service_type</span><span class="token punctuation">:</span> mon
<span class="token key atrule">placement</span><span class="token punctuation">:</span>
  <span class="token key atrule">hosts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> host1
    <span class="token punctuation">-</span> host2
    <span class="token punctuation">-</span> host3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="3-部署-OSD"><a href="#3-部署-OSD" class="headerlink" title="3.部署 OSD"></a>3.部署 OSD</h2><h3 id="1-所有群集主机上的存储设备清单可以显示"><a href="#1-所有群集主机上的存储设备清单可以显示" class="headerlink" title="1.所有群集主机上的存储设备清单可以显示"></a>1.所有群集主机上的存储设备清单可以显示</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ceph orch device <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>设备必须没有分区。</li>
<li>设备不得具有任何 LVM 状态。</li>
<li>不得安装设备。</li>
<li>设备不能包含文件系统。</li>
<li>设备不得包含 Ceph BlueStore OSD。</li>
<li>设备必须大于 5 GB。</li>
</ul>
<h3 id="2-创建新-OSD-的方法"><a href="#2-创建新-OSD-的方法" class="headerlink" title="2.创建新 OSD 的方法"></a>2.创建新 OSD 的方法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1.告诉 Ceph 使用任何可用和未使用的存储设备：</span>
ceph orch apply osd --all-available-devices
<span class="token comment"># 2.从特定主机上的特定设备创建 OSD：ceph orch daemon add osd *&lt;host>*:*&lt;device-path>*</span>
ceph orch daemon <span class="token function">add</span> osd host1:/dev/sdb
<span class="token comment"># 3.使用OSD 服务规范描述设备，根据设备属性、此类设备类型（SSD 或 HDD）、设备型号名称、大小或设备存在的主机使用：</span>
ceph orch apply osd <span class="token parameter variable">-i</span> spec.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="4-部署-MDS"><a href="#4-部署-MDS" class="headerlink" title="4.部署 MDS"></a>4.部署 MDS</h2><p>使用 CephFS 文件系统需要一个或多个 MDS 守护程序。如果使用较新的接口创建新文件系统，则会自动创建这些接口。有关详细信息，请参阅 FS 卷和子卷。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ceph orch apply mds *<span class="token operator">&lt;</span>fs-name<span class="token operator">></span>* <span class="token parameter variable">--placement</span><span class="token operator">=</span><span class="token string">"*&lt;num-daemons>* [*&lt;host1>* ...]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="5-部署-RGW"><a href="#5-部署-RGW" class="headerlink" title="5.部署 RGW"></a>5.部署 RGW</h2><h2 id="6-管理-Monitor-map"><a href="#6-管理-Monitor-map" class="headerlink" title="6.管理 Monitor map"></a>6.管理 Monitor map</h2><h3 id="1-多-Monitor-同步机制"><a href="#1-多-Monitor-同步机制" class="headerlink" title="1).多 Monitor 同步机制"></a>1).多 Monitor 同步机制</h3><blockquote>
<p>在生产环境建议最少三节点 monitor，以确保 cluster map 的高可用性和冗余性,monitor 节点不应该过多甚至操作 9 节点的行为,会导致数据读写时间下降，影响系统集群的性能。</p>
</blockquote>
<ul>
<li>monitor 使用 paxos 算法作为集群状态上达成一致的机制。paxos 是一种分布式一致性算法。每当 monitor 修改 map 时，它会通过 paxos 发送更新到其他 monitor。Ceph 只有在大多数 monitor 就更新达成一致时提交 map 的新版本。</li>
<li>cluster map 的更新操作需要 Paxos 确认，但是读操作不经由 Paxos，而是直接访问本地的 kv 存储。</li>
</ul>
<h3 id="2-Monitor-选举机制"><a href="#2-Monitor-选举机制" class="headerlink" title="2).Monitor 选举机制"></a>2).Monitor 选举机制</h3><ul>
<li>多个 monitor 之间需要建立仲裁并选择出一个 leader，其他节点则作为工作节点（peon）。</li>
<li>在选举完成并确定 leader 之后，leader 将从所有其他 monitor 请求最新的 map epoc，以确保 leader 具有集群的最新视图。</li>
<li>要维护 monitor 集群的正常工作，必须有超过半数的节点正常。</li>
</ul>
<h3 id="3-Monitor-租约"><a href="#3-Monitor-租约" class="headerlink" title="3).Monitor 租约"></a>3).Monitor 租约</h3><ul>
<li>在 Monitor 建立仲裁后，leader 开始分发短期的租约到所有的 monitors。让它们能够分发 cluster map 到 OSD 和 client。</li>
<li>Monitor 租约默认每 3s 续期一次。</li>
<li>当 peon monitor 没有确认它收到租约时，leader 假定该 monitor 异常，它会召集新的选举以建立仲裁。</li>
<li>如果 peon monitor 的租约到期后没有收到 leader 的续期，它会假定 leader 异常，并会召集新的选举。</li>
<li>所以如果生产环境中存在多个 monitor 时候某个节点的超时会猝发节点的重新选举导致 client 无法第一时间拿到最新的 crushmap 图像也就无法去对应的 osd 上的 pv 写入数据了。</li>
</ul>
<h3 id="4-常用的-monitor-管理"><a href="#4-常用的-monitor-管理" class="headerlink" title="4).常用的 monitor 管理"></a>4).常用的 monitor 管理</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#打印monitor map信息</span>
ceph mon dump

<span class="token comment">#将monitor map导出为一个二进制文件</span>
ceph mon getmap <span class="token parameter variable">-o</span> ./monmap

<span class="token comment">#打印导出的二进制文件的内容</span>
monmaptool <span class="token parameter variable">--print</span> ./monmap

<span class="token comment">#修改二进制文件，从monmap删除某个monitor</span>
monmaptool ./monmap <span class="token parameter variable">--rm</span> <span class="token operator">&lt;</span>id<span class="token operator">></span>

<span class="token comment">#修改二进制文件，往monmap中添加一个monitor</span>
monmaptool ./monmap <span class="token parameter variable">--add</span> <span class="token operator">&lt;</span>id<span class="token operator">></span> <span class="token operator">&lt;</span>ip:port<span class="token operator">></span>

<span class="token comment">#导入一个二进制文件，在导入之前，需要先停止monitor</span>
ceph-mon <span class="token parameter variable">-i</span> <span class="token operator">&lt;</span>id<span class="token operator">></span> --inject-monmap ./monmap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="7-管理-OSD-Map"><a href="#7-管理-OSD-Map" class="headerlink" title="7.管理 OSD Map"></a>7.管理 OSD Map</h2><ul>
<li>每当 OSD 加入或离开集群时，Ceph 都会更新 OSD map。</li>
<li>OSD 不使用 leader 来管理 OSD map，它们会在自身之间传播同步 map。OSD 会利用 OSD map epoch 标记它们交换的每一条信息，当 OSD 检测到自己已落后时，它会使用其对等 OSD 执行 map 更新。</li>
<li>在大型集群中 OSD map 更新会非常频繁，节点会执行递增 map 更新。</li>
<li>Ceph 也会利用 epoch 来标记 OSD 和 client 之间的消息。当 client 连接到 OSD 时 OSD 会检查 epoch。如果发现 epoch 不匹配，则 OSD 会以正确的 epoch 响应，以便客户端可以更新其 OSD map。</li>
<li>OSD 定期向 monitor 报告自己的状态，OSD 之间会交换心跳，以便检测对等点的故障，并报告给 monitor。</li>
<li>leader monitor 发现 OSD 故障时，它会更新 map，递增 epoch，并使用 Paxos 更新协议来通知其他 monitor，同时撤销租约，并发布新的租约，以使 monitor 以分发最新的 OSD map。</li>
</ul>
<h3 id="1-OSD-状态解读"><a href="#1-OSD-状态解读" class="headerlink" title="1).OSD 状态解读"></a>1).OSD 状态解读</h3><ul>
<li>1.正常状态的 OSD 为 up 且 in</li>
<li>2.当 OSD 故障时，守护进程 offline，在 5 分钟内，集群仍会将其标记为 up 和 in，这是为了防止网络抖动</li>
<li>3.如果 5 分钟内仍未恢复，则会标记为 down 和 out。此时该 OSD 上的 PG 开始迁移。这个 5 分钟的时间间隔可以通过 mon_osd_down_out_interval 配置项修改</li>
<li>4.当故障的 OSD 重新上线以后，会触发新的数据再平衡</li>
<li>5.当集群有 noout 标志位时，则 osd 下线不会导致数据恢复</li>
<li>6.OSD 每隔 6s 会互相验证状态。并每隔 120s 向 mon 报告一次状态。</li>
</ul>
<h3 id="2-OSD-map-命令"><a href="#2-OSD-map-命令" class="headerlink" title="2).OSD map 命令"></a>2).OSD map 命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ceph osd dump
ceph osd getmap <span class="token parameter variable">-o</span> binfile
osdmaptool <span class="token parameter variable">--print</span> binfile
osdmaptool --export-crush crushbinfile binfile
osdmaptool --import-crush crushbinfile binfile
osdmaptool --test-map-pg pgid binfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-OSD-的状态"><a href="#3-OSD-的状态" class="headerlink" title="3.)OSD 的状态"></a>3.)OSD 的状态</h3><ul>
<li><p>OSD 运行状态</p>
<ul>
<li>up</li>
<li>down</li>
<li>out</li>
<li>in</li>
</ul>
</li>
<li><p>OSD 容量状态</p>
<ul>
<li>nearfull</li>
<li>full</li>
</ul>
</li>
</ul>
<p>常用指令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#显示OSD状态</span>
ceph osd <span class="token function">stat</span>

<span class="token comment">#报告osd使用量</span>
ceph osd <span class="token function">df</span>

<span class="token comment">#查找指定osd位置</span>
ceph osd <span class="token function">find</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-OSD-容量"><a href="#4-OSD-容量" class="headerlink" title="4.)OSD 容量"></a>4.)OSD 容量</h3><ul>
<li>当集群容量达到 mon_osd_nearfull_ratio 的值时，集群会进入 HEALTH_WARN 状态。这是为了在达到 full_ratio 之前，提醒添加 OSD。默认设置为 0.85，即 85%</li>
<li>当集群容量达到 mon_osd_full_ratio 的值时，集群将停止写入，但允许读取。集群会进入到 HEALTH_ERR 状态。默认为 0.95，即 95%。这是为了防止当一个或多个 OSD 故障时仍留有余地能重平衡数据</li>
</ul>
<p>设置方法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ceph osd set-full-ratio <span class="token number">0.95</span>
ceph osd set-nearfull-ratio <span class="token number">0.85</span>
ceph osd dump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="5-OSD-状态参数"><a href="#5-OSD-状态参数" class="headerlink" title="5).OSD 状态参数"></a>5).OSD 状态参数</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># osd之间传递心跳的间隔时间</span>
osd_heartbeat_interval

<span class="token comment"># 一个osd多久没心跳，就会被集群认为它down了</span>
osd_heartbeat_grace

<span class="token comment"># 确定一个osd状态为down的最少报告来源osd数</span>
mon_osd_min_down_reporters

<span class="token comment"># 一个OSD必须重复报告一个osd状态为down的次数</span>
mon_osd_min_down_reports

<span class="token comment"># 当osd停止响应多长时间，将其标记为down和out</span>
mon_osd_down_out_interval

<span class="token comment"># monitor宣布失败osd为down前的等待时间</span>
mon_osd_report_timeout

<span class="token comment"># 一个新的osd加入集群时，等待多长时间，开始向monitor报告</span>
osd_mon_report_interval_min

<span class="token comment"># monitor允许osd报告的最大间隔，超时就认为它down了</span>
osd_mon_report_interval_max

<span class="token comment"># osd向monitor报告心跳的时间</span>
osd_mon_heartbeat_interval<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="8-管理-PG"><a href="#8-管理-PG" class="headerlink" title="8.管理 PG"></a>8.管理 PG</h2><h3 id="1-管理文件到-PG-映射"><a href="#1-管理文件到-PG-映射" class="headerlink" title="1).管理文件到 PG 映射"></a>1).管理文件到 PG 映射</h3><p>test 对象所在 pg id 为 10.35，存储在三个 osd 上，分别为 osd.2、osd.1 和 osd.8，其中 osd.2 为 primary osd</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rados <span class="token parameter variable">-p</span> <span class="token builtin class-name">test</span> put <span class="token builtin class-name">test</span> /etc/ceph/ceph.conf
ceph osd map <span class="token builtin class-name">test</span> <span class="token builtin class-name">test</span>
    osdmap e201 pool <span class="token string">'test'</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> object <span class="token string">'test'</span> -<span class="token operator">></span> pg <span class="token number">10</span>.40e8aab5 <span class="token punctuation">(</span><span class="token number">10.35</span><span class="token punctuation">)</span> -<span class="token operator">></span> up <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2,1</span>,8<span class="token punctuation">]</span>, p2<span class="token punctuation">)</span> acting <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2,1</span>,8<span class="token punctuation">]</span>, p2<span class="token punctuation">)</span>

<span class="token comment">#处于up状态的osd会一直留在PG的up set和acting set中，一旦主osd down，它首先会从up set中移除</span>
<span class="token comment">#然后从acting set中移除，之后从OSD将被升级为主。Ceph会将故障OSD上的PG恢复到一个新OSD上</span>
<span class="token comment">#然后再将这个新OSD加入到up和acting set中来维持集群的高可用性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-管理-struck-状态的-PG"><a href="#2-管理-struck-状态的-PG" class="headerlink" title="2).管理 struck 状态的 PG"></a>2).管理 struck 状态的 PG</h3><ul>
<li><p>如果 PG 长时间（mon_pg_stuck_threshold，默认为 300s）出现如下状态时，MON 会将该 PG 标记为 stuck：</p>
<ul>
<li>inactive：pg 有 peering 问题</li>
<li>unclean：pg 在故障恢复时遇到问题</li>
<li>stale：pg 没有任何 OSD 报告，可能其所有的 OSD 都是 down 和 out</li>
<li>undersized：pg 没有充足的 osd 来存储它应具有的副本数</li>
</ul>
</li>
<li><p>默认情况下，Ceph 会自动执行恢复，但如果未能自动恢复，则集群状态会一直处于 HEALTH_WARN 或者 HEALTH_ERR</p>
</li>
<li><p>如果特定 PG 的所有 osd 都是 down 和 out 状态，则 PG 会被标记为 stale。要解决这一情况，其中一个 OSD 必须要重生，且具有可用的 PG 副本，否则 PG 不可用</p>
</li>
<li><p>Ceph 可以声明 osd 或 PG 已丢失，这也就意味着数据丢失。需要说明的是，osd 的运行离不开 journal，如果 journal 丢失，则 osd 停止</p>
</li>
</ul>
<h3 id="3-struck-状态操作"><a href="#3-struck-状态操作" class="headerlink" title="3).struck 状态操作"></a>3).struck 状态操作</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查处于stuck状态的pg</span>
ceph pg dump_stuck
<span class="token comment"># 检查导致pg一致阻塞在peering状态的osd</span>
ceph osd blocked-by
<span class="token comment"># 检查某个pg的状态</span>
ceph pg dump all<span class="token operator">|</span><span class="token function">grep</span> pgid
<span class="token comment"># 声明pg丢失</span>
ceph pg pgid mark_unfound_lost revert<span class="token operator">|</span>delete
<span class="token comment"># 声明osd丢失（需要osd状态为down且out）</span>
ceph osd lost osdid --yes-i-really-mean-it<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-手动控制-PG-的-Primary-OSD"><a href="#4-手动控制-PG-的-Primary-OSD" class="headerlink" title="4).手动控制 PG 的 Primary OSD"></a>4).手动控制 PG 的 Primary OSD</h3><p>可以通过手动修改 osd 的权重以提升 特定 OSD 被选为 PG Primary OSD 的概率，避免将速度慢的磁盘用作 primary osd。</p>
<p>需要先在配置文件中配置如下参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mon_osd_allow_primary_affinity <span class="token operator">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-调整权重示例"><a href="#5-调整权重示例" class="headerlink" title="5).调整权重示例"></a>5).调整权重示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 查看现在有多少PG的主OSD是osd.0
ceph pg dump <span class="token operator">|</span><span class="token function">grep</span> active+clean <span class="token operator">|</span><span class="token function">egrep</span> <span class="token string">"\[0,"</span> <span class="token operator">|</span><span class="token function">wc</span> <span class="token parameter variable">-l</span>

<span class="token number">2</span>. 修改osd.0的权重
ceph osd primary-affinity osd.0 <span class="token number">0</span>  <span class="token comment"># 权重范围从0.0到1.0</span>

<span class="token number">3</span>. 再次查看现在有多少PG的主OSD是osd.0
ceph pg dump <span class="token operator">|</span><span class="token function">grep</span> active+clean <span class="token operator">|</span><span class="token function">egrep</span> <span class="token string">"\[0,"</span> <span class="token operator">|</span><span class="token function">wc</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="9-Pool-存储池-管理"><a href="#9-Pool-存储池-管理" class="headerlink" title="9.Pool(存储池)管理"></a>9.Pool(存储池)管理</h2><p><a href="https://blog.csdn.net/weixin_42440345/article/details/81118964">https://blog.csdn.net/weixin_42440345&#x2F;article&#x2F;details&#x2F;81118964</a></p>
<h3 id="PG-和-PGP-的区别"><a href="#PG-和-PGP-的区别" class="headerlink" title="PG 和 PGP 的区别"></a>PG 和 PGP 的区别</h3><p><a href="https://www.cnblogs.com/zphj1987/p/13575377.html">https://www.cnblogs.com/zphj1987/p/13575377.html</a></p>
<p>PG 是指定存储池存储对象的目录有多少个，PGP 是存储池 PG 的 OSD 分布组合个数</p>
<p>PG 的增加会引起 PG 内的数据进行分裂，分裂到相同的 OSD 上新生成的 PG 当中</p>
<p>PGP 的增加会引起部分 PG 的分布进行变化，但是不会引起 PG 内对象的变动</p>
<h3 id="4-限制-pool-配置更改"><a href="#4-限制-pool-配置更改" class="headerlink" title="4.)限制 pool 配置更改"></a>4.)限制 pool 配置更改</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#禁止池被删除</span>
osd_pool_default_flag_nodelete

<span class="token comment">#禁止池的pg_num和pgp_num被修改</span>
osd_pool_default_flag_nopgchange

<span class="token comment">#禁止修改池的size和min_size</span>
osd_pool_default_flag_nosizechange<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-查看-pool"><a href="#1-查看-pool" class="headerlink" title="1.查看 pool"></a>1.查看 pool</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看所有pool</span>
ceph osd lspools
<span class="token comment">#获取集群内所有POOL的概况信息,集群内POOL的个数、对应的POOL id、POOL名称、副本数、最小副本数，ruleset及POOL snap等信息</span>
ceph osd pool <span class="token function">ls</span> detail
<span class="token comment">#查看POOL的统计信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-创建-pool"><a href="#2-创建-pool" class="headerlink" title="2.创建 pool"></a>2.创建 pool</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建一个副本类型的POOL</span>
ceph osd pool create <span class="token punctuation">&#123;</span>pool-name<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>pg-num<span class="token punctuation">&#125;</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>pgp-num<span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>pgp-num<span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>replicated<span class="token punctuation">]</span> <span class="token punctuation">[</span>ruleset<span class="token punctuation">]</span>
<span class="token comment">#举例：</span>
ceph osd pool create rbd  <span class="token number">32</span> <span class="token number">32</span>
<span class="token comment">#创建一个纠删码类型的POOL</span>
ceph osd pool create <span class="token punctuation">&#123;</span>pool-name<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>pg-num<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>pgp-num<span class="token punctuation">&#125;</span> erasure <span class="token punctuation">[</span>erasure-code-profile<span class="token punctuation">]</span> <span class="token punctuation">[</span>ruleset<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在<code>&#123;&#125;</code>内的参数为必选项,<code>[]</code>内的参数均设有默认值,如果没有更改设计,可以不添加。</p>
<p>参数的含义如下:</p>
<ul>
<li><strong>pool-name</strong>: POOL 的名字；必须添加。</li>
<li><strong>pg-num</strong>: POOL 拥有的 PG 总数；必须添加。</li>
<li><strong>pgp-num</strong>: POOL 拥有的 PGP 总数；非必须添加。默认与 pg-num 相同。</li>
<li><strong>replicated|erasure</strong>: POOL 类型；非必须添加。如不指定为 erasure,则默认为 replicated 类型。</li>
<li><strong>ruleset</strong>: POOL 所用的 CRUSH 规则 ID。非必须添加。默认为 0,若需指定其他 ruleset,需确保 ruleset 必须存在。</li>
<li><strong>erasure-code-profile</strong>: 仅用于纠删码类型的 POOL。指定纠删码配置框架,此配置必须已由 osd erasure-code-profile set 定义</li>
</ul>
<p>这里强制选择 pg_num 和 pgp_num，因为 ceph 集群不能自动计算 pg 数量。下面有一些官方建议的 pg 使用数量：</p>
<ul>
<li>小于 5 个 osd 设置 pg_num 为 128</li>
<li>5 到 10 个 osd 设置 pg_num 为 512</li>
<li>10 到 50 个 osd 设置 pg_num 为 1024</li>
<li>如果超过 50 个 osd 你需要自己明白权衡点，并且能自行计算 pg_num 的数量</li>
</ul>
<p>pg_num 通用计算方法:</p>
<p>(OSDs * 100)</p>
<p>Total PGs &#x3D;  ————</p>
<p>pool size</p>
<h3 id="3-修改-pool"><a href="#3-修改-pool" class="headerlink" title="3.修改 pool"></a>3.修改 pool</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ceph osd pool <span class="token builtin class-name">set</span> <span class="token punctuation">&#123;</span>pool-name<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>key<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span>
size：设置存储池中的对象副本数，详情参见设置对象副本数。仅适用于副本存储池。
min_size：设置 I/O 需要的最小副本数，详情参见设置对象副本数。仅适用于副本存储池。
pg_num：计算数据分布时的有效 PG 数。只能大于当前 PG 数。
pgp_num：计算数据分布时使用的有效 PGP 数量。小于等于存储池的 PG 数。
hashpspool：给指定存储池设置/取消 HASHPSPOOL 标志。
target_max_bytes：达到 max_bytes 阀值时会触发 Ceph 冲洗或驱逐对象。
target_max_objects：达到 max_objects 阀值时会触发 Ceph 冲洗或驱逐对象。
scrub_min_interval：在负载低时，洗刷存储池的最小间隔秒数。如果是 <span class="token number">0</span> ，就按照配置文件里的 osd_scrub_min_interval 。
scrub_max_interval：不管集群负载如何，都要洗刷存储池的最大间隔秒数。如果是 <span class="token number">0</span> ，就按照配置文件里的 osd_scrub_max_interval 。
deep_scrub_interval：“深度”洗刷存储池的间隔秒数。如果是 <span class="token number">0</span> ，就按照配置文件里的 osd_deep_scrub_interval 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-删除存储池"><a href="#4-删除存储池" class="headerlink" title="4.删除存储池"></a>4.删除存储池</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ceph osd pool delete <span class="token punctuation">&#123;</span>pool-name<span class="token punctuation">&#125;</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>pool-name<span class="token punctuation">&#125;</span> --yes-i-really-really-mean-it<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-重命名存储池"><a href="#5-重命名存储池" class="headerlink" title="5.重命名存储池"></a>5.重命名存储池</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ceph osd pool <span class="token function">rename</span> <span class="token punctuation">&#123;</span>current-pool-name<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>new-pool-name<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="6-查看存储池统计信息"><a href="#6-查看存储池统计信息" class="headerlink" title="6.查看存储池统计信息"></a>6.查看存储池统计信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rados <span class="token function">df</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="7-给存储池做快照"><a href="#7-给存储池做快照" class="headerlink" title="7.给存储池做快照"></a>7.给存储池做快照</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ceph osd pool mksnap <span class="token punctuation">&#123;</span>pool-name<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>snap-name<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="8-删除存储池的快照"><a href="#8-删除存储池的快照" class="headerlink" title="8.删除存储池的快照"></a>8.删除存储池的快照</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ceph osd pool rmsnap <span class="token punctuation">&#123;</span>pool-name<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>snap-name<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="9-获取存储池选项值"><a href="#9-获取存储池选项值" class="headerlink" title="9.获取存储池选项值"></a>9.获取存储池选项值</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ceph osd pool get <span class="token punctuation">&#123;</span>pool-name<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>key<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="10-获取对象副本数"><a href="#10-获取对象副本数" class="headerlink" title="10.获取对象副本数"></a>10.获取对象副本数</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ceph osd dump <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'replicated size'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="11-设置存储池配额"><a href="#11-设置存储池配额" class="headerlink" title="11.设置存储池配额"></a>11.设置存储池配额</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令格式：
<span class="token comment"># ceph osd pool set-quota &#123;pool-name&#125; [max_objects &#123;obj-count&#125;] [max_bytes &#123;bytes&#125;]</span>
命令举例：
<span class="token comment"># ceph osd pool set-quota rbd max_objects 10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="10-自定义-Crush-Map"><a href="#10-自定义-Crush-Map" class="headerlink" title="10.自定义 Crush Map"></a>10.自定义 Crush Map</h2><blockquote>
<p>crush map 决定了客户端数据最终写入的 osd 的位置，在某些情况下存在 hdd 和 ssd 两种盘想让某些数据写入到指定的 osd 中这个时候就是需要去人为的手动编译 crush-map，编辑要修改的部分，再导入集群中达到我们特定的目的</p>
</blockquote>
<h3 id="1-Crush-的放置策略"><a href="#1-Crush-的放置策略" class="headerlink" title="1).Crush 的放置策略"></a>1).Crush 的放置策略</h3><ul>
<li>Ceph 使用 CRUSH 算法（Controlled Replication Under Scalable Hashing 可扩展哈希下的受控复制）来计算哪些 OSD 存放哪些对象</li>
<li>对象分配到 PG 中，CRUSH 决定这些 PG 使用哪些 OSD 来存储对象。理想情况下，CRUSH 会将数据均匀的分布到存储中</li>
<li>当添加新 OSD 或者现有的 OSD 出现故障时，Ceph 使用 CRUSH 在活跃的 OSD 上重平衡数据 CRUSH map 是 CRUSH 算法的中央配置机制，可通过调整 CRUSHmap 来优化数据存放位置默认情况下，CRUSH 将一个对象的多个副本放置到不同主机上的 0SD 中。可以配置 CRUSH map 和 CRUSH rules，使一个对象的多个副本放置到不同房间或者不同机柜的主机上的 0SD 中。</li>
<li>也可以将 SSD 磁盘分配给需要高速存储的池</li>
</ul>
<h3 id="2-编译与翻译和更新"><a href="#2-编译与翻译和更新" class="headerlink" title="2).编译与翻译和更新"></a>2).编译与翻译和更新</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#导出CRUSH map</span>
ceph osd getcrushmap <span class="token parameter variable">-o</span> ./crushmap.bin
<span class="token comment">#解译CRUSH map</span>
crushtool <span class="token parameter variable">-d</span> ./crushmap.bin ./crushmap.txt
<span class="token comment">#修改后的CRUSH map重新编译</span>
crushtool <span class="token parameter variable">-c</span> ./crushmap.txt-o ./crushmap-new.bin
<span class="token comment">#更新CRUSH map</span>
ceph osd setcrushmap-i./crushmap-new.bin
<span class="token comment">#查询crush map的内容（返回json）</span>
ceph osd crush dump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>例子</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root default <span class="token punctuation">&#123;</span>
    id-1           <span class="token comment"># do not change unnecessarily</span>
    id-2 class hdd <span class="token comment">#do not change unnecessarily</span>
    <span class="token comment">#weiqht 0.166</span>
    alg straw2
    <span class="token builtin class-name">hash</span> <span class="token number">0</span><span class="token comment">#rjenkins1</span>
    item rackl weight <span class="token number">0.055</span>
    item rack2 weiqht <span class="token number">0.055</span>
    item rack3 weight <span class="token number">0.055</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">#rules</span>
rule replicated rule<span class="token punctuation">&#123;</span>
    <span class="token function">id</span> <span class="token number">0</span>
    <span class="token builtin class-name">type</span> replicated
    min size <span class="token number">1</span>
    max size <span class="token number">10</span>
    step take default  <span class="token comment">#只要是应用这个rule的都把数据写入到defaults下</span>
    step chooseleaf firstn <span class="token number">0</span> <span class="token builtin class-name">type</span> <span class="token function">host</span>  <span class="token comment">#定义故障的故障域为物理集机器级别（rack为机柜级别）</span>
    step emit <span class="token comment">#结尾符号</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="11-admin-sockets-管理守护进程"><a href="#11-admin-sockets-管理守护进程" class="headerlink" title="11.admin sockets 管理守护进程"></a>11.admin sockets 管理守护进程</h2><ul>
<li>通过 admin sockets，管理员可以直接与守护进程交互。如查看和修改守护进程的配置参数。</li>
<li>守护进程的 socket 文件一般是&#x2F;var&#x2F;run&#x2F;ceph&#x2F;cluster-cluster−type.$id.asok</li>
<li>基于 admin sockets 的操作：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ceph daemon <span class="token variable">$type</span><span class="token builtin class-name">.</span><span class="token variable">$id</span> <span class="token builtin class-name">command</span>
<span class="token comment">#或者</span>
ceph --admin-daemon /var/run/ceph/<span class="token variable">$cluster</span>-<span class="token variable">$type</span><span class="token builtin class-name">.</span><span class="token variable">$id</span>.asok <span class="token builtin class-name">command</span>
<span class="token comment">#常用command如下：</span>
<span class="token builtin class-name">help</span>
config get parameter
config <span class="token builtin class-name">set</span> parameter
config show
perf dump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="12-用户管理"><a href="#12-用户管理" class="headerlink" title="12.用户管理"></a>12.用户管理</h2><blockquote>
<p>Ceph 把数据以对象的形式存于各存储池中。Ceph 用户必须具有访问存储池的权限才能够读写数据。另外，Ceph 用户必须具有执行权限才能够使用 Ceph 的管理命令。</p>
</blockquote>
<h3 id="1、查看用户信息"><a href="#1、查看用户信息" class="headerlink" title="1、查看用户信息"></a>1、查看用户信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查看所有用户信息
<span class="token comment"># ceph auth list</span>
获取所有用户的key与权限相关信息
<span class="token comment"># ceph auth get client.admin</span>
如果只需要某个用户的key信息，可以使用pring-key子命令
<span class="token comment"># ceph auth print-key client.admin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2、添加用户"><a href="#2、添加用户" class="headerlink" title="2、添加用户"></a>2、添加用户</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ceph auth add client.john mon 'allow r' osd 'allow rw pool=liverpool'</span>
<span class="token comment"># ceph auth get-or-create client.paul mon 'allow r' osd 'allow rw pool=liverpool'</span>
<span class="token comment"># ceph auth get-or-create client.george mon 'allow r' osd 'allow rw pool=liverpool' -o george.keyring</span>
<span class="token comment"># ceph auth get-or-create-key client.ringo mon 'allow r' osd 'allow rw pool=liverpool' -o ringo.key</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3、修改用户权限"><a href="#3、修改用户权限" class="headerlink" title="3、修改用户权限"></a>3、修改用户权限</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ceph auth caps client.john mon 'allow r' osd 'allow rw pool=liverpool'</span>
<span class="token comment"># ceph auth caps client.paul mon 'allow rw' osd 'allow rwx pool=liverpool'</span>
<span class="token comment"># ceph auth caps client.brian-manager mon 'allow *' osd 'allow *'</span>
<span class="token comment"># ceph auth caps client.ringo mon ' ' osd ' '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4、删除用户"><a href="#4、删除用户" class="headerlink" title="4、删除用户"></a>4、删除用户</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ceph auth del &#123;TYPE&#125;.&#123;ID&#125;</span>
其中， <span class="token punctuation">&#123;</span>TYPE<span class="token punctuation">&#125;</span> 是 client，osd，mon 或 mds 的其中一种。<span class="token punctuation">&#123;</span>ID<span class="token punctuation">&#125;</span> 是用户的名字或守护进程的 ID 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="13-增加和删除-Monitor"><a href="#13-增加和删除-Monitor" class="headerlink" title="13.增加和删除 Monitor"></a>13.增加和删除 Monitor</h2><blockquote>
<p>一个集群可以只有一个 monitor，推荐生产环境至少部署 3 个。 Ceph 使用 Paxos 算法的一个变种对各种 map 、以及其它对集群来说至关重要的信息达成共识。建议（但不是强制）部署奇数个 monitor 。Ceph 需要 mon 中的大多数在运行并能够互相通信，比如单个 mon，或 2 个中的 2 个，3 个中的 2 个，4 个中的 3 个等。初始部署时，建议部署 3 个 monitor。后续如果要增加，请一次增加 2 个.</p>
</blockquote>
<h3 id="1、新增一个-monitor"><a href="#1、新增一个-monitor" class="headerlink" title="1、新增一个 monitor"></a>1、新增一个 monitor</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ceph-deploy mon create $hostname</span>
注意：执行ceph-deploy之前要进入之前安装时候配置的目录。/my-cluster<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2、删除-Monitor"><a href="#2、删除-Monitor" class="headerlink" title="2、删除 Monitor"></a>2、删除 Monitor</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ceph-deploy mon destroy $hostname</span>
注意： 确保你删除某个 Mon 后，其余 Mon 仍能达成一致。如果不可能，删除它之前可能需要先增加一个。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h1 id="四、集群监控管理"><a href="#四、集群监控管理" class="headerlink" title="四、集群监控管理"></a>四、集群监控管理</h1><h2 id="1-集群整体运行状态"><a href="#1-集群整体运行状态" class="headerlink" title="1.集群整体运行状态"></a>1.集群整体运行状态</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@cephnode01 ~<span class="token punctuation">]</span><span class="token comment"># ceph -s</span>
cluster:
    id:     8230a918-a0de-4784-9ab8-cd2a2b8671d0
    health: HEALTH_WARN
            application not enabled on <span class="token number">1</span> pool<span class="token punctuation">(</span>s<span class="token punctuation">)</span>

  services:
    mon: <span class="token number">3</span> daemons, quorum cephnode01,cephnode02,cephnode03 <span class="token punctuation">(</span>age 27h<span class="token punctuation">)</span>
    mgr: cephnode01<span class="token punctuation">(</span>active, since 53m<span class="token punctuation">)</span>, standbys: cephnode03, cephnode02
    osd: <span class="token number">4</span> osds: <span class="token number">4</span> up <span class="token punctuation">(</span>since 27h<span class="token punctuation">)</span>, <span class="token number">4</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>since 19h<span class="token punctuation">)</span>
    rgw: <span class="token number">1</span> daemon active <span class="token punctuation">(</span>cephnode01<span class="token punctuation">)</span>

  data:
    pools:   <span class="token number">6</span> pools, <span class="token number">96</span> pgs
    objects: <span class="token number">235</span> objects, <span class="token number">3.6</span> KiB
    usage:   <span class="token number">4.0</span> GiB used, <span class="token number">56</span> GiB / <span class="token number">60</span> GiB avail
    pgs:     <span class="token number">96</span> active+clean

    id：集群ID
    health：集群运行状态，这里有一个警告，说明是有问题，意思是pg数大于pgp数，通常此数值相等。
    mon：Monitors运行状态。
    osd：OSDs运行状态。
    mgr：Managers运行状态。
    mds：Metadatas运行状态。
    pools：存储池与PGs的数量。
    objects：存储对象的数量。
    usage：存储的理论用量。
    pgs：PGs的运行状态

~<span class="token punctuation">]</span>$ ceph <span class="token parameter variable">-w</span>
~<span class="token punctuation">]</span>$ ceph health detail<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2-PG-状态"><a href="#2-PG-状态" class="headerlink" title="2.PG 状态"></a>2.PG 状态</h2><blockquote>
<p>查看 pg 状态查看通常使用下面两个命令即可，dump 可以查看更详细信息</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ ceph pg dump
~<span class="token punctuation">]</span>$ ceph pg <span class="token function">stat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="3-Pool-状态"><a href="#3-Pool-状态" class="headerlink" title="3.Pool 状态"></a>3.Pool 状态</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ ceph osd pool stats
~<span class="token punctuation">]</span>$ ceph osd pool stats<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="4-OSD-状态"><a href="#4-OSD-状态" class="headerlink" title="4.OSD 状态"></a>4.OSD 状态</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ ceph osd <span class="token function">stat</span>
~<span class="token punctuation">]</span>$ ceph osd dump
~<span class="token punctuation">]</span>$ ceph osd tree
~<span class="token punctuation">]</span>$ ceph osd <span class="token function">df</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="5-Monitor-状态和查看仲裁状态"><a href="#5-Monitor-状态和查看仲裁状态" class="headerlink" title="5.Monitor 状态和查看仲裁状态"></a>5.Monitor 状态和查看仲裁状态</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ ceph mon <span class="token function">stat</span>
~<span class="token punctuation">]</span>$ ceph mon dump
~<span class="token punctuation">]</span>$ ceph quorum_status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="6-集群空间用量"><a href="#6-集群空间用量" class="headerlink" title="6.集群空间用量"></a>6.集群空间用量</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~<span class="token punctuation">]</span>$ ceph <span class="token function">df</span>
~<span class="token punctuation">]</span>$ ceph <span class="token function">df</span> detail<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h1 id="五、集群配置管理-临时和全局，服务平滑重启"><a href="#五、集群配置管理-临时和全局，服务平滑重启" class="headerlink" title="五、集群配置管理(临时和全局，服务平滑重启)"></a>五、集群配置管理(临时和全局，服务平滑重启)</h1><blockquote>
<p>有时候需要更改服务的配置，但不想重启服务，或者是临时修改。这时候就可以使用 tell 和 daemon 子命令来完成此需求。</p>
</blockquote>
<h2 id="1-查看运行配置"><a href="#1-查看运行配置" class="headerlink" title="1.查看运行配置"></a>1.查看运行配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令格式：
<span class="token comment"># ceph daemon &#123;daemon-type&#125;.&#123;id&#125; config show</span>

命令举例：
<span class="token comment"># ceph daemon osd.0 config show</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2-tell-子命令格式"><a href="#2-tell-子命令格式" class="headerlink" title="2.tell 子命令格式"></a>2.tell 子命令格式</h2><blockquote>
<p>使用 tell 的方式适合对整个集群进行设置，使用 * 号进行匹配，就可以对整个集群的角色进行设置。而出现节点异常无法设置时候，只会在命令行当中进行报错，不太便于查找。</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令格式：
<span class="token comment"># ceph tell &#123;daemon-type&#125;.&#123;daemon id or *&#125; injectargs --&#123;name&#125;=&#123;value&#125; [--&#123;name&#125;=&#123;value&#125;]</span>
命令举例：
<span class="token comment"># ceph tell osd.0 injectargs --debug-osd 20 --debug-ms 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>daemon-type：为要操作的对象类型如 osd、mon、mds 等。</li>
<li>daemon id：该对象的名称，osd 通常为 0、1 等，mon 为 ceph -s 显示的名称，这里可以输入*表示全部。</li>
<li>injectargs：表示参数注入，后面必须跟一个参数，也可以跟多个</li>
</ul>
<h2 id="3-daemon-子命令"><a href="#3-daemon-子命令" class="headerlink" title="3.daemon 子命令"></a>3.daemon 子命令</h2><ul>
<li>使用 daemon 进行设置的方式就是一个个的去设置，这样可以比较好的反馈，此方法是需要在设置的角色所在的主机上进行设置。</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令格式：
<span class="token comment"># ceph daemon &#123;daemon-type&#125;.&#123;id&#125; config set &#123;name&#125;=&#123;value&#125;</span>
命令举例：
<span class="token comment"># ceph daemon mon.ceph-monitor-1 config set mon_allow_pool_delete false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="4-集群操作"><a href="#4-集群操作" class="headerlink" title="4.集群操作"></a>4.集群操作</h2><ul>
<li>命令包含 start、restart、status</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.启动所有守护进程</span>
systemctl start ceph.target

<span class="token comment">#2.按类型启动守护进程</span>
systemctl start ceph-mgr.target
systemctl start ceph-osd@id
systemctl start ceph-mon.target
systemctl start ceph-mds.target
systemctl start ceph-radosgw.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="5-添加和删除-OSD"><a href="#5-添加和删除-OSD" class="headerlink" title="5.添加和删除 OSD"></a>5.添加和删除 OSD</h2><h3 id="1-添加-OSD"><a href="#1-添加-OSD" class="headerlink" title="1).添加 OSD"></a>1).添加 OSD</h3><ul>
<li><p>纵向扩容(会导致数据的重分布)</p>
</li>
<li><p>生产环境下最好的做法就是不要一次性添加大量的 osd，最好逐步添加等待数据同步后再进行添加操作</p>
<ul>
<li>当影响生产数据时候临时可以停止同步：ceph osd set [nobackfill|norebalance],unset 取消对应的参数</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.格式化磁盘</span>
ceph-volume lvm zap /dev/sd<span class="token operator">&lt;</span>id<span class="token operator">></span>

<span class="token comment">#2.进入到ceph-deploy执行目录/my-cluster，添加OSD</span>
ceph-deploy osd create <span class="token parameter variable">--data</span> /dev/sd<span class="token operator">&lt;</span>id<span class="token operator">></span> <span class="token variable">$hostname</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-删除-OSD"><a href="#2-删除-OSD" class="headerlink" title="2).删除 OSD"></a>2).删除 OSD</h3><ul>
<li><p>如果机器有盘坏了可以使用 dmdsg 查看坏盘</p>
</li>
<li><p>存在一种情况就是某 osd 的写入延迟大盘有坏道很大可能会拖垮 ceph 集群：</p>
<ul>
<li>ceph osd tree: 查看当前集群的 osd 状态</li>
<li>ceph osd perf: 查看当前的 OSD 的延迟</li>
</ul>
</li>
<li><p>当某一快 osd 踢出集群时候立即做数据重分布(默认 10 分钟)</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、调整osd的crush weight为 <span class="token number">0</span>
ceph osd crush reweight osd.<span class="token operator">&lt;</span>ID<span class="token operator">></span> <span class="token number">0.0</span>

<span class="token number">2</span>、将osd进程stop
systemctl stop ceph-osd@<span class="token operator">&lt;</span>ID<span class="token operator">></span>

<span class="token number">3</span>、将osd设置out<span class="token punctuation">(</span>将会出发数据重分布<span class="token punctuation">)</span>
ceph osd out <span class="token operator">&lt;</span>ID<span class="token operator">></span>

<span class="token number">4</span>、从crushmap中踢出osd
<span class="token comment"># 查看运行视图的osd状态</span>
ceph osd crush dump<span class="token operator">|</span><span class="token function">less</span>
ceph osd crush <span class="token function">rm</span> <span class="token operator">&lt;</span>osd<span class="token operator">></span>.id

<span class="token number">5</span>、从tree树中删除osd
ceph osd <span class="token function">rm</span> <span class="token operator">&lt;</span>osd<span class="token operator">></span>.id

<span class="token number">6</span>、<span class="token punctuation">(</span>选用<span class="token punctuation">)</span>立即执行删除OSD中数据
ceph osd purge osd.<span class="token operator">&lt;</span>ID<span class="token operator">></span> --yes-i-really-mean-it

<span class="token number">7</span>、卸载磁盘
<span class="token function">umount</span> /var/lib/ceph/osd/ceph-？

<span class="token number">8</span>.从认证中删除磁盘对应的key
<span class="token comment"># 查看认证的列表</span>
ceph auth list
ceph auth <span class="token function">rm</span> <span class="token operator">&lt;</span>osd<span class="token operator">></span>.id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="6-扩容-PG"><a href="#6-扩容-PG" class="headerlink" title="6.扩容 PG"></a>6.扩容 PG</h2><ul>
<li>扩容大小取跟它接近的 2 的 N 次方</li>
<li>在更改 pool 的 PG 数量时，需同时更改 PGP 的数量。PGP 是为了管理 placement 而存在的专门的 PG，它和 PG 的数量应该保持一致。如果你增加 pool 的 pg_num，就需要同时增加 pgp_num，保持它们大小一致，这样集群才能正常 rebalancing。</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ceph osd pool <span class="token builtin class-name">set</span> <span class="token punctuation">&#123;</span>pool-name<span class="token punctuation">&#125;</span> pg_num <span class="token number">128</span>
ceph osd pool <span class="token builtin class-name">set</span> <span class="token punctuation">&#123;</span>pool-name<span class="token punctuation">&#125;</span> pgp_num <span class="token number">128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h1 id="六、调优"><a href="#六、调优" class="headerlink" title="六、调优"></a>六、调优</h1><h2 id="1-系统层面调优"><a href="#1-系统层面调优" class="headerlink" title="1.系统层面调优"></a>1.系统层面调优</h2><ul>
<li><p>选择正确的 CPU 和内存。OSD、MON 和 MDS 节点具有不同的 CPU 和内存需求</p>
<ul>
<li>mon 的需求和 osd 的总个数有关需要的是计算力</li>
<li>mds 对 CPU 和内存要求很高，会将大量的元数据缓存到自己的内存中，存储元数据的尽量的使用 ssd</li>
<li>osd 最低要求 1H2G 的配置例如：24 块硬盘最少是 24H36G,磁盘方面必须高 I&#x2F;O 有多好上多好</li>
</ul>
</li>
<li><p>尽可能关闭 NUMA</p>
</li>
<li><p>规划好存储节点的数据以及各节点的磁盘要求（不考虑钱忽略）</p>
</li>
<li><p>磁盘的选择尽可能在成本、吞吐量和延迟之间找到良好的平衡</p>
</li>
<li><p>journal 日志应该使用 SSD</p>
</li>
<li><p>如果交换机支持（MTU 9000），则启用巨型帧(减少数据的分片)，前提是 ceph 在一个单独的网络环境中切有独立交换机。</p>
</li>
<li><p>启用 ntp。Ceph 对时间敏感,集群网络至少 10GB 带宽</p>
</li>
</ul>
<h3 id="1-系统调优工具"><a href="#1-系统调优工具" class="headerlink" title="1).系统调优工具"></a>1).系统调优工具</h3><ul>
<li>使用 tuned-admin 工具，它可帮助系统管理员针对不同的工作负载进行系统调优</li>
<li>tuned-admin 使用的 profile 默认存放在&#x2F;usr&#x2F;lib&#x2F;tuned&#x2F;目录中，可以参考其模板来自定义 profile</li>
<li>对于 ceph 而言，network-latency 可以改进全局系统延迟，network-throughput 可以改进全局系统吞吐量,如果两个都开启可以使用 Custom 自定义模式</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出现有可用的profile</span>
tuned-adm list

<span class="token comment"># 查看当前生效的profile</span>
tuned-adm active

<span class="token comment"># 使用指定的profile</span>
tuned-admin profile profile-name

<span class="token comment"># 禁用所有的profile</span>
tuned-admin off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-I-x2F-O-调度算法"><a href="#2-I-x2F-O-调度算法" class="headerlink" title="2).I&#x2F;O 调度算法"></a>2).I&#x2F;O 调度算法</h3><ul>
<li>noop：电梯算法，实现了一个简单的 FIFO 队列。基于 SSD 的磁盘，推荐使用这种调度方式</li>
<li>Deadline：截止时间调度算法，尽力为请求提供有保障的延迟。对于 Ceph，基于 sata 或者 sas 的驱动器，应该首选这种调度方式</li>
<li>cfq：完全公平队列，适合有许多进程同时读取和写入大小不等的请求的磁盘，也是默认的通用调度算法</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看当前系统支持的调度算法：</span>
    <span class="token function">dmesg</span><span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-I</span> scheduler

<span class="token comment">#查看指定磁盘使用的调度算法：</span>
    <span class="token function">cat</span> /sys/block/磁盘设备号/queue/scheduler

<span class="token comment">#修改调度算法</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"deadline"</span> <span class="token operator">></span> /sys/block/vdb/queue/scheduler
    <span class="token function">vim</span> /etc/default/grub
        <span class="token assign-left variable">GRUB_CMDLINE_LINUX</span><span class="token operator">=</span><span class="token string">"elevator=deadline numa=off"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-网络-IO-子系统调优"><a href="#3-网络-IO-子系统调优" class="headerlink" title="3).网络 IO 子系统调优"></a>3).网络 IO 子系统调优</h3><ul>
<li>用于集群的网络建议尽可能使用 10Gb 网络</li>
</ul>
<p>以下参数用于缓冲区内存管理</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#设置OS接收缓冲区的内存大小，第一个值告知内核一个TCP socket的最小缓冲区空间，第二值为默认缓冲区空间，第三个值是最大缓冲区空间</span>
net.ipv4.tcp_wmem

<span class="token comment">#设置Os发送缓冲区的内存大小</span>
net.ipv4.tcp_rmem

<span class="token comment">#定义TCP stack如何反应内存使用情况</span>
net.ipv4.tcp_mem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>交换机启用大型帧</li>
</ul>
<blockquote>
<p>默认情况下，以太网最大传输数据包大小为 1500 字节。为提高吞吐量并减少处理开销，一种策略是将以太网网络配置为允许设备发送和接收更大的巨型帧。</p>
</blockquote>
<ul>
<li>在使用巨型帧的要谨慎，因为需要硬件支持，且全部以太网口配置为相同的巨型帧 MTU 大小。</li>
</ul>
<h3 id="4-虚拟内存调优"><a href="#4-虚拟内存调优" class="headerlink" title="4).虚拟内存调优"></a>4).虚拟内存调优</h3><p>设置较低的比率会导致高频但用时短的写操作，这适合 Ceph 等 I&#x2F;O 密集型应用。设置较高的比率会导致低频但用时长的写操作，这会产生较小的系统开销，但可能会造成应用响应时间变长</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#脏内存占总系统总内存的百分比，达到此比率时内核会开始在后台写出数据</span>
vm.dirty_background_ratio

<span class="token comment">#脏内存占总系统总内存的百分比，达到此比率时写入进程停滞，而系统会将内存页清空到后端存储</span>
vm.dirty_ratio

<span class="token comment">#控制交换分区的使用,生产中建议完全关闭，会拖慢系统运行速度</span>
vm.swappiness

<span class="token comment">#系统尽力保持可用状态的RAM大小。在一个RAM大于48G的系统上，建议设置为4G</span>
vm.min_free_kbytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2-Ceph-本身调优"><a href="#2-Ceph-本身调优" class="headerlink" title="2.Ceph 本身调优"></a>2.Ceph 本身调优</h2><h3 id="1-最佳实践"><a href="#1-最佳实践" class="headerlink" title="1).最佳实践"></a>1).最佳实践</h3><ul>
<li>MON 的性能对集群总体性能至关重要，应用部署于专用节点，为确保正确仲裁，数量应为奇数个</li>
<li>在 OSD 节点上，操作系统、OSD 数据、OSD 日志应当位于独立的磁盘上，以确保满意的吞吐量</li>
<li>在集群安装后，需要监控集群、排除故障并维护，尽管 Ceph 具有自愈功能。如果发生性能问题，首先在磁盘、网络和硬件层面上调查。然后逐步转向 RADOS 块设备和 Ceph 对象网关</li>
</ul>
<h3 id="2-影响-I-x2F-O-的-6-大操作"><a href="#2-影响-I-x2F-O-的-6-大操作" class="headerlink" title="2).影响 I&#x2F;O 的 6 大操作"></a>2).影响 I&#x2F;O 的 6 大操作</h3><ul>
<li>业务数据写入</li>
<li>数据恢复</li>
<li>数据回填</li>
<li>数据重平衡</li>
<li>数据一致性校验</li>
<li>快照清理</li>
</ul>
<h3 id="3-OSD-生产建议"><a href="#3-OSD-生产建议" class="headerlink" title="3).OSD 生产建议"></a>3).OSD 生产建议</h3><ul>
<li>更快的日志性能可以改进响应时间，建议将单独的低延迟 SSD 或者 NVMe 设备用于 OSD 日志。</li>
<li>多个日志可以共享同一 SSD，以降低存储基础架构的成本。但是不能将过多 OSD 日志放在同一设备上。</li>
<li>建议每个 SATA OSD 设备不超过 6 个 OSD 日志，每个 NVMe 设备不超过 12 个 OSD 日志。</li>
<li>需要说明的是，当用于托管日志的 SSD 或者 NVMe 设备故障时，使用它托管其日志的所有 OSD 也都变得不可用</li>
</ul>
<h3 id="4-硬件建议"><a href="#4-硬件建议" class="headerlink" title="4).硬件建议"></a>4).硬件建议</h3><ul>
<li>将一个 raid1 磁盘用于 ceph 操作系统</li>
<li>每个 OSD 一块硬盘，尽量将 SSD 或者 NVMe 用于日志</li>
<li>使用多个 10Gb 网卡，每个网络一个双链路绑定（建议生产环境 2 个网卡 4 个光模块，2 个万兆口做为数据的交换，2 个万兆口做业务流量）</li>
<li>每个 OSD 预留 1 个 CPU,每个逻辑核心 1GHz，分配 16GB 内存，外加每个 OSD 2G 内存</li>
</ul>
<h3 id="5-RBD-生产建议"><a href="#5-RBD-生产建议" class="headerlink" title="5).RBD 生产建议"></a>5).RBD 生产建议</h3><ul>
<li>块设备上的工作负载通常是 I&#x2F;O 密集型负载，例如在 OpenStack 中虚拟机上运行数据库。</li>
<li>对于 RBD,OSD 日志应当位于 SSD 或者 NVMe 设备上</li>
<li>对后端存储，可以使用不同的存储设备以提供不同级别的服务</li>
</ul>
<h3 id="6-对象网关生产建议"><a href="#6-对象网关生产建议" class="headerlink" title="6).对象网关生产建议"></a>6).对象网关生产建议</h3><ul>
<li>Ceph 对象网关工作负载通常是吞吐密集型负载。但是其 bucket 索引池为 I&#x2F;O 密集型工作负载模式。应当将这个池存储在 SSD 设备上</li>
<li>Ceph 对象网关为每个存储桶维护一个索引。Ceph 将这一索引存储在 RADOS 对象中。当存储桶存储数量巨大的对象时（超过 100000 个），索引性能会降低，因为只有一个 RADOS 对象参与所有索引操作。</li>
<li>Ceph 可以在多个 RADOS 对象或分片中保存大型索引。可以在 ceph.conf 中设置 rgw_override_bucket_index_max_shards 配置参数来启用该功能。此参数的建议值是存储桶中预计对象数量除以 10000</li>
<li>当索引变大，Ceph 通常需要重新划分存储桶。rgw_dynamic_resharding 配置控制该功能，默认为 true</li>
</ul>
<h3 id="7-CephFS-生产建议"><a href="#7-CephFS-生产建议" class="headerlink" title="7).CephFS 生产建议"></a>7).CephFS 生产建议</h3><ul>
<li>存放目录结构和其他索引的元数据池可能会成为 CephFS 的瓶颈。因此，应该将 SSD 设备用于这个池</li>
<li>每个 MDS 维护一个内存中缓存 ，用于索引节点等不同类型的项目。Ceph 使用 mds_cache_memory_limit 配置参数限制这一缓存的大小。其默认值为 1GB，可以在需要时调整，得不得超过系统总内存数</li>
</ul>
<h3 id="8-Monitor-生产建议"><a href="#8-Monitor-生产建议" class="headerlink" title="8).Monitor 生产建议"></a>8).Monitor 生产建议</h3><ul>
<li>最好为每个 MON 一个独立的服务器&#x2F;虚拟机</li>
<li>小型和中型集群，使用 10000RPM 的磁盘，大型集群使用 SSD</li>
<li>CPU 使用方面：使用一个多核 CPU，最少 16G 内存，最好不要和 osd 存放在同一个服务器上</li>
</ul>
<h3 id="9-将-OSD-日志迁移到-SSD"><a href="#9-将-OSD-日志迁移到-SSD" class="headerlink" title="9).将 OSD 日志迁移到 SSD"></a>9).将 OSD 日志迁移到 SSD</h3><p>强烈建议生产中千万不要这么干，一定在集群初始化的时候就定制好</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#集群中设置标志位停止指定的osd使用</span>
ceph osd <span class="token builtin class-name">set</span> noout

<span class="token comment">#停止osd的进程</span>
systemctl stop ceph-osd@3

<span class="token comment">#将所有的日志做刷盘处理，刷盘到osd中</span>
ceph-osd <span class="token parameter variable">-i</span> <span class="token number">3</span> --flush-journal

<span class="token comment">#删除该osd现有的日志</span>
<span class="token function">rm</span> <span class="token parameter variable">-f</span> /var/lib/ceph/osd/ceph-3/journal

<span class="token comment">#/dev/sdc1为SSD盘创建一个软连接</span>
<span class="token function">ln</span> <span class="token parameter variable">-s</span> /dev/sdc1 /var/lib/ceph/osd/ceph-3/journal

<span class="token comment">#刷出日志</span>
ceph-osd <span class="token parameter variable">-i</span> <span class="token number">3</span> <span class="token parameter variable">--mkjournal</span>

<span class="token comment">#启动osd</span>
systemctl start ceph-osd@3

<span class="token comment">#移除标志位</span>
ceph osd <span class="token builtin class-name">unset</span> noout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="10-存储池中-PG-的计算方法"><a href="#10-存储池中-PG-的计算方法" class="headerlink" title="10).存储池中 PG 的计算方法"></a>10).存储池中 PG 的计算方法</h3><ul>
<li><p>通常，计算一个池中应该有多少个归置组的计算方法 &#x3D; 100 * OSDs(个数) &#x2F; size(副本数)</p>
</li>
<li><p>一种比较通用的取值规则：</p>
<ul>
<li>少于 5 个 OSD 时可把 pg_num 设置为 128</li>
<li>OSD 数量在 5 到 10 个时，可把 pg_num 设置为 512</li>
<li>OSD 数量在 10 到 50 个时，可把 pg_num 设置为 4096</li>
<li>OSD 数量大于 50 时，建议自行计算</li>
</ul>
</li>
<li><p>自行计算 pg_num 聚会时的工具</p>
<ul>
<li>pgcalc：<a href="https://ceph.com/pgcalc/">https://ceph.com/pgcalc/</a></li>
<li>cephpgc：<a href="https://access.redhat.com/labs/cephpgc/">https://access.redhat.com/labs/cephpgc/</a></li>
</ul>
</li>
<li><p>注意：在实际的生产环境中我们很难去预估需要多少个 pool，每个 pool 所占用的数据大小的百分百。所以正常情况下需要在特定的情况选择动态扩缩容 pg 的大小</p>
</li>
</ul>
<h3 id="11-PG-与-PGP"><a href="#11-PG-与-PGP" class="headerlink" title="11).PG 与 PGP"></a>11).PG 与 PGP</h3><blockquote>
<p>通常而言，PG 与 PGP 是相同的当我们为一个池增加 PG 时，PG 会开始分裂，这个时候，OSD 上的数据开始移动到新的 PG，但总体而言，此时，数据还是在一个 OSD 的不同 PG 中迁移而我们一旦同时增加了 PGP，则 PG 开始在多个 OSD 上重平衡，这时会出现跨 OSD 的数据迁移</p>
</blockquote>
<ul>
<li>ceph osd pool create poolName PgNum PgpNum</li>
<li>当变动 pg 数量只是针对当前的特定池中的 osd 发生变动影响范围只是一个池的 pg 平衡</li>
<li>正常情况下一个 osd 最多承载 100 个 pg</li>
<li>当 pgp 发生大变动的时候会导致原本这个池中的 pg 变动导致池中 osd，过载或者有很大剩余性能，ceph 集群会将过大的性能均衡到各个性能使用小的 osd 上，这个时候就会发生数据的大规模迁移，大量的 i&#x2F;O 写入会占有网络带宽会严重影响使用中的 pg 性能导致阻塞发生。</li>
<li>建议的做法是将 pg_num 直接设置为希望作为最终值的 PG 数量，而 PGP 的数量应当慢慢增加，以确保集群不会因为一段时间内的大量数据重平衡而导致的性能下降</li>
</ul>
<h3 id="12-Ceph-生产网络建议"><a href="#12-Ceph-生产网络建议" class="headerlink" title="12).Ceph 生产网络建议"></a>12).Ceph 生产网络建议</h3><ul>
<li>尽可能使用 10Gb 网络带宽以上的万兆带宽(内网)</li>
<li>尽可能使用不同的 cluster 网络和 public 网络</li>
<li>做好必要的网络设备监控防止网络过载</li>
</ul>
<h3 id="13-OSD-和数据一致性校验"><a href="#13-OSD-和数据一致性校验" class="headerlink" title="13).OSD 和数据一致性校验"></a>13).OSD 和数据一致性校验</h3><blockquote>
<p>清理会影响 ceph 集群性能，但建议不要禁用此功能，因为它能提供完数据的完整性</p>
</blockquote>
<ul>
<li>清理：检查对象的存在性、校验和以及大小</li>
<li>深度清理：检查对象的存在性和大小，重新计算并验证对象的校验和。(最好不开严重影响性能)</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#清理调优参数</span>
osd_scrub_begin_hour <span class="token operator">=</span>                    <span class="token comment">#取值范围0-24</span>
osd_scrub_end_hour <span class="token operator">=</span> end_hbegin_hour our  <span class="token comment">#取值范围0-24</span>
osd_scrub_load_threshold                  <span class="token comment">#当系统负载低于多少的时候可以清理，默认为0.5</span>
osd_scrub_min_interval                    <span class="token comment">#多久清理一次，默认是一天一次（前提是系统负载低于上一个参数的设定）</span>
osd_scrub_interval_randomize_ratio        <span class="token comment">#在清理的时候，随机延迟的值，默认是0.5</span>
osd_scrub_max_interval                    <span class="token comment">#清理的最大间隔时间，默认是一周（如果一周内没清理过，这次就必须清理，不管负载是多少）</span>
osd_scrub_priority                        <span class="token comment">#清理的优先级，默认是5</span>
osd_deep_scrub_interal                    <span class="token comment">#深度清理的时间间隔，默认是一周</span>
osd_scrub_sleep                           <span class="token comment">#当有磁盘读取时，则暂停清理，增加此值可减缓清理的速度以降低对客户端的影响，默认为0,范围0-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#显示最近发生的清理和深度清理</span>
ceph pg dump all  <span class="token comment"># 查看LAST_SCRUB和LAST_DEEP_SCRUB</span>
<span class="token comment">#-将清理调度到特定的pg</span>
ceph pg scrub pg-id
<span class="token comment">#将深度清理调度到特定的pg</span>
ceph pg deep-scrub pg-id
<span class="token comment">#为设定的池设定清理参数</span>
ceph osd pool <span class="token builtin class-name">set</span> <span class="token operator">&lt;</span>pool-name<span class="token operator">></span> <span class="token operator">&lt;</span>parameter<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span>
    noscrub <span class="token comment"># 不清理，默认为false</span>
    nodeep-scrub <span class="token comment"># 不深度清理，默认为false</span>
    scrub_min_interval <span class="token comment"># 如果设置为0，则应用全局配置osd_scrub_min_interval</span>
    scrub_max_interval <span class="token comment"># 如果设置为0，则应用全局配置osd_scrub_max_interval</span>
    deep_scrub_interval <span class="token comment"># 如果设置为0，则应用全局配置osd_scrub_interval</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="14-快照的生产建议"><a href="#14-快照的生产建议" class="headerlink" title="14).快照的生产建议"></a>14).快照的生产建议</h3><ul>
<li>快照在池级别和 RBD 级别上提供。当快照被移除时，ceph 会以异步操作的形式删除快照数据，称为快照修剪进程</li>
<li>为减轻快照修剪进程会影响集群总体性能。可以通过配置<code>osd_snap_trim_sleep</code>来在有客户端读写操作的时候暂停修剪，参数的值范围是<code>0</code>到<code>1</code></li>
<li>快照修剪的优先级通过使用<code>osd_snap_trim_priority</code>参数控制，默认为<code>5</code></li>
</ul>
<h3 id="15-保护数据和-osd"><a href="#15-保护数据和-osd" class="headerlink" title="15).保护数据和 osd"></a>15).保护数据和 osd</h3><ul>
<li><p>需要控制回填和恢复操作，以限制这些操作的影响</p>
</li>
<li><p>回填发生于新的 osd 加入集群时，或者 osd 死机并且 ceph 将其 pg 分配到其他 osd 时。在这种场景中，ceph 必须要在可用的 osd 之间复制对象副本</p>
</li>
<li><p>恢复发生于新的 osd 已有数据时，如出现短暂停机。在这种情形下，ceph 会简单的重放 pg 日志</p>
<ul>
<li>管理回填和恢复操作的配置项</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用于限制每个osd上用于回填的并发操作数，默认为1</span>
osd_max_backfills

<span class="token comment">#用于限制每个osd上用于恢复的并发操作数，默认为3</span>
osd_recovery_max_active

<span class="token comment">#恢复操作的优先级，默认为3</span>
osd_recovery_op_priority<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="16-OSD-数据存储后端"><a href="#16-OSD-数据存储后端" class="headerlink" title="16).OSD 数据存储后端"></a>16).OSD 数据存储后端</h3><blockquote>
<p>BlueStore 管理一个，两个或（在某些情况下）三个存储设备。在最简单的情况下，BlueStore 使用单个（主）存储设备。存储设备通常作为一个整体使用，BlueStore 直接占用完整设备。该主设备通常由数据目录中的块符号链接标识。数据目录挂载成一个 tmpfs，它将填充（在启动时或 ceph-volume 激活它时）所有常用的 OSD 文件，其中包含有关 OSD 的信息，例如：其标识符，它所属的集群，以及它的私钥。还可以使用两个额外的设备部署 BlueStore</p>
</blockquote>
<ul>
<li>WAL 设备（在数据目录中标识为 block.wal）可用于 BlueStore 的内部日志或预写日志。只有设备比主设备快（例如，当它在 SSD 上并且主设备是 HDD 时），使用 WAL 设备是有用的。</li>
<li>数据库设备（在数据目录中标识为 block.db）可用于存储 BlueStore 的内部元数据。 BlueStore（或者更确切地说，嵌入式 RocksDB）将在数据库设备上放置尽可能多的元数据以提高性能。如果数据库设备填满，元数据将写到主设备。同样，数据库设备要比主设备更快，则提供数据库设备是有帮助的。</li>
<li>如果只有少量快速存储可用（例如，小于 1GB），我们建议将其用作 WAL 设备。如果还有更多，配置数据库设备会更有意义。 BlueStore 日志将始终放在可用的最快设备上，因此使用数据库设备将提供与 WAL 设备相同的优势，同时还允许在其中存储其他元数据。</li>
<li>正常 L 版本推荐使用 filestore，M 版本可以考虑使用 bluestore</li>
<li>推荐优化文章：<a href="https://www.cnblogs.com/luxiaodai/p/10006036.html#_lab2_1_9">https://www.cnblogs.com/luxiaodai/p/10006036.html#_lab2_1_9</a></li>
</ul>
<h3 id="17-关于性能测试"><a href="#17-关于性能测试" class="headerlink" title="17).关于性能测试"></a>17).关于性能测试</h3><ul>
<li>推荐使用 fio 参考阿里云文档：<a href="https://help.aliyun.com/document_detail/95501.html?spm=a2c4g.11174283.6.659.38b44da2KZr2Sn">https://help.aliyun.com/document_detail&#x2F;95501.html?spm&#x3D;a2c4g.11174283.6.659.38b44da2KZr2Sn</a></li>
<li>dd</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token number">3</span> <span class="token operator">></span> /proc/sys/vm/drop_caches
<span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>/var/lib/ceph/osd/ceph-0/test.img <span class="token assign-left variable">bs</span><span class="token operator">=</span>4M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">1024</span> <span class="token assign-left variable">oflag</span><span class="token operator">=</span>direct
<span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/var/lib/ceph/osd/ceph-0/test.img <span class="token assign-left variable">of</span><span class="token operator">=</span>/dev/null <span class="token assign-left variable">bs</span><span class="token operator">=</span>4M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">1024</span> <span class="token assign-left variable">oflag</span><span class="token operator">=</span>direct<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>rados bench 性能测试</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rados bench <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>pool_name<span class="token operator">></span> <span class="token operator">&lt;</span>seconds<span class="token operator">></span> <span class="token operator">&lt;</span>write<span class="token operator">|</span><span class="token function">seq</span><span class="token operator">|</span>rand<span class="token operator">></span> <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>block size<span class="token operator">></span> <span class="token parameter variable">-t</span> --no-cleanup
    pool_name 测试所针对的池
    seconds 测试所持续的时间，以秒为单位
    <span class="token operator">&lt;</span>write<span class="token operator">|</span><span class="token function">seq</span><span class="token operator">|</span>rand<span class="token operator">></span> 操作模式，分别是写、顺序读、随机读
    <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>block_size<span class="token operator">></span> 块大小，默认是4M
    <span class="token parameter variable">-t</span> 读/写的并行数，默认为16
    --no-cleanup 表示测试完成后不删除测试用的数据。在做读测试之前，需要使用该参数来运行一遍写测试来产生测试数据，在全部测试完成以后，可以行rados <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>pool_name<span class="token operator">></span> cleanup来清理所有测试数据

<span class="token comment">#示例：</span>
rados bench <span class="token parameter variable">-p</span> rbd <span class="token number">10</span> <span class="token function">write</span> --no-cleanup
rados bench <span class="token parameter variable">-p</span> rbd <span class="token number">10</span> <span class="token function">seq</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>rbd bench 性能测试</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rbd bench <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>pool_name<span class="token operator">></span> <span class="token operator">&lt;</span>image_name<span class="token operator">></span> --io-type <span class="token operator">&lt;</span>write<span class="token operator">|</span>read<span class="token operator">></span> --io-size <span class="token operator">&lt;</span>size<span class="token operator">></span> --io-threads <span class="token operator">&lt;</span>num<span class="token operator">></span> --io-total <span class="token operator">&lt;</span>size<span class="token operator">></span> --io-pattern <span class="token operator">&lt;</span>seq<span class="token operator">|</span>rand<span class="token operator">></span>
    --io-type 测试类型，读/写
    --io-size 字节数，默认4096
    --io-threads 线程数，默认16
    --io-total  读/写的总大小，默认1GB
    --io-pattern  读/写的方式，顺序还是随机

<span class="token comment">#示例：</span>
https://edenmal.moe/post/2017/Ceph-rbd-bench-Commands/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="3-设置集群的标志"><a href="#3-设置集群的标志" class="headerlink" title="3.设置集群的标志"></a>3.设置集群的标志</h2><p><strong>flag 操作</strong></p>
<ul>
<li><p>只能对整个集群操作，不能针对单个 osd</p>
<ul>
<li>ceph osd set</li>
<li>ceph osd unset</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#示例：</span>
ceph osd <span class="token builtin class-name">set</span> nodown
ceph osd <span class="token builtin class-name">unset</span> nodown
ceph <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<table>
<thead>
<tr>
<th align="left">标志名称</th>
<th align="left">含义用法详解</th>
</tr>
</thead>
<tbody><tr>
<td align="left">noup</td>
<td align="left">OSD 启动时，会将自己在 MON 上标识为 UP 状态，设置该标志位，则 OSD 不会被自动标识为 up 状态</td>
</tr>
<tr>
<td align="left">nodown</td>
<td align="left">OSD 停止时，MON 会将 OSD 标识为 down 状态，设置该标志位，则 MON 不会将停止的 OSD 标识为 down 状态，设置 noup 和 nodown 可以防止网络抖动</td>
</tr>
<tr>
<td align="left">noout</td>
<td align="left">设置该标志位，则 mon 不会从 crush 映射中删除任何 OSD。对 OSD 作维护时，可设置该标志位，以防止 CRUSH 在 OSD 停止时自动重平衡数据。OSD 重新启动时，需要清除该 flag</td>
</tr>
<tr>
<td align="left">noin</td>
<td align="left">设置该标志位，可以防止数据被自动分配到 OSD 上</td>
</tr>
<tr>
<td align="left">norecover</td>
<td align="left">设置该 flag，禁止任何集群恢复操作。在执行维护和停机时，可设置该 flag</td>
</tr>
<tr>
<td align="left">nobackfill</td>
<td align="left">禁止数据回填</td>
</tr>
<tr>
<td align="left">noscrub</td>
<td align="left">禁止清理操作。清理 PG 会在短期内影响 OSD 的操作。在低带宽集群中，清理期间如果 OSD 的速度过慢，则会被标记为 down。可以该标记来防止这种情况发生</td>
</tr>
<tr>
<td align="left">nodeep-scrub</td>
<td align="left">禁止深度清理</td>
</tr>
<tr>
<td align="left">norebalance</td>
<td align="left">禁止重平衡数据。在执行集群维护或者停机时，可以使用该 flag</td>
</tr>
<tr>
<td align="left">pause</td>
<td align="left">设置该标志位，则集群停止读写，但不影响 osd 自检</td>
</tr>
<tr>
<td align="left">full</td>
<td align="left">标记集群已满，将拒绝任何数据写入，但可读</td>
</tr>
</tbody></table>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://poph163.com/category/%e5%88%86%e5%b8%83%e5%bc%8f%e5%ad%98%e5%82%a8/">https://poph163.com/category/分布式存储/</a></p>
]]></content>
      <categories>
        <category>Ceph 学习</category>
      </categories>
      <tags>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>MetalLB 安装</title>
    <url>/2023/12/28/k8s/MetaLib%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="MetalLB-安装"><a href="#MetalLB-安装" class="headerlink" title="MetalLB 安装"></a>MetalLB 安装</h2><h3 id="下载-release-版本"><a href="#下载-release-版本" class="headerlink" title="下载 release 版本"></a>下载 release 版本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/metallb/metallb/archive/refs/tags/v0.12.1.tar.gz
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> v0.12.1.tar.gz
<span class="token builtin class-name">cd</span> metallb-0.12.1/manifests

kubectl apply <span class="token parameter variable">-f</span> namespace.yaml
kubectl apply <span class="token parameter variable">-f</span> metallb.yaml
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="查看-pod-状态"><a href="#查看-pod-状态" class="headerlink" title="查看 pod 状态"></a>查看 pod 状态</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl <span class="token parameter variable">-n</span> metallb-system get pods <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="查看-Deploy-状态"><a href="#查看-Deploy-状态" class="headerlink" title="查看 Deploy 状态"></a>查看 Deploy 状态</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl <span class="token parameter variable">-n</span> metallb-system get deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>目前还没有宣布任何内容，因为我们没有提供ConfigMap，也没有提供负载均衡地址的服务。接下来要生成一个 Configmap 文件，为 Metallb 设置网址范围以及协议相关的选择和配置，这里以一个简单的二层配置为例。</p>
<p>修改ip地址池，从集群IP地址段中为MetalLB分配部分IP地址：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> example-layer2-config.yaml 
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: <span class="token operator">|</span>
    address-pools:
    - name: default
      protocol: layer2
      addresses:
      - <span class="token number">192.168</span>.72.200-192.168.72.250
---
kubectl apply <span class="token parameter variable">-f</span> example-layer2-config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="创建后端应用和服务测试"><a href="#创建后端应用和服务测试" class="headerlink" title="创建后端应用和服务测试"></a>创建后端应用和服务测试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> tutorial-2.yaml <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看yaml文件配置，包含了一个deployment和一个LoadBalancer类型的service，默认即可。</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx
        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http
          <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>

<span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx
  <span class="token key atrule">type</span><span class="token punctuation">:</span> LoadBalancer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="查看service分配的EXTERNAL-IP"><a href="#查看service分配的EXTERNAL-IP" class="headerlink" title="查看service分配的EXTERNAL-IP"></a>查看service分配的EXTERNAL-IP</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl get <span class="token function">service</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>k8s 创建单节点 mysql 并持久化存储</title>
    <url>/2023/10/10/k8s/k8s%20%E5%88%9B%E5%BB%BA%E5%8D%95%E8%8A%82%E7%82%B9%20mysql%20%E5%B9%B6%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h1 id="k8s-创建单节点-mysql-并持久化存储"><a href="#k8s-创建单节点-mysql-并持久化存储" class="headerlink" title="k8s 创建单节点 mysql 并持久化存储"></a>k8s 创建单节点 mysql 并持久化存储</h1><h2 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h2><ol>
<li>创建 pvc</li>
</ol>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>data
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> ReadWriteMany
  <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> csi<span class="token punctuation">-</span>cephfs<span class="token punctuation">-</span>sc<span class="token punctuation">-</span>retain
  <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token key atrule">requests</span><span class="token punctuation">:</span>
      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 50Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>mysql 的一些资源配置</li>
</ol>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>config
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev
<span class="token key atrule">data</span><span class="token punctuation">:</span>
  <span class="token key atrule">rootPwd</span><span class="token punctuation">:</span> <span class="token string">"d72a3dpe"</span>
  <span class="token key atrule">config.cnf</span><span class="token punctuation">:</span> <span class="token string">""</span>

<span class="token punctuation">---</span>
<span class="token comment"># deployment.yaml</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql
          <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>8.1.0
          <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent
          <span class="token key atrule">args</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>character<span class="token punctuation">-</span>set<span class="token punctuation">-</span>server=utf8mb4
            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>collation<span class="token punctuation">-</span>server=utf8mb4_unicode_ci
          <span class="token key atrule">ports</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">3306</span>
            <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">33060</span>
          <span class="token key atrule">env</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_ROOT_PASSWORD
              <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>
                <span class="token key atrule">configMapKeyRef</span><span class="token punctuation">:</span>
                  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>config
                  <span class="token key atrule">key</span><span class="token punctuation">:</span> rootPwd
          <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>dir
              <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/mysql/conf.d
              <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> data<span class="token punctuation">-</span>dir
              <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/lib/mysql
      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>dir
          <span class="token key atrule">configMap</span><span class="token punctuation">:</span>
            <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>config
            <span class="token key atrule">items</span><span class="token punctuation">:</span>
              <span class="token comment"># name 是对应 secret 中的 key, path 是挂载 secret 后的子文件路径</span>
              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> config.cnf
                <span class="token key atrule">path</span><span class="token punctuation">:</span> config.cnf
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> data<span class="token punctuation">-</span>dir
          <span class="token key atrule">persistentVolumeClaim</span><span class="token punctuation">:</span>
            <span class="token key atrule">claimName</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>data
<span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql
      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span>
      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">3306</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>容器/虚拟化</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s 创建 ubuntu22.04 并暴露22端口</title>
    <url>/2023/06/12/k8s/k8s%E5%88%9B%E5%BB%BAubuntu22.04%E5%B9%B6%E6%9A%B4%E9%9C%B222%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<p>要在Kubernetes中创建一个Ubuntu 20.04容器暴露22端口并在后台永久运行，可以按照以下步骤进行操作：</p>
<h2 id="创建一个名为ubuntu-ssh的Deployment："><a href="#创建一个名为ubuntu-ssh的Deployment：" class="headerlink" title="创建一个名为ubuntu-ssh的Deployment："></a>创建一个名为<code>ubuntu-ssh</code>的Deployment：</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>ssh
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>ssh
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>ssh
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>ssh
        <span class="token key atrule">image</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">:</span><span class="token number">20.04</span>
        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/bash"</span><span class="token punctuation">]</span>
        <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"while true; do sleep 30; done"</span><span class="token punctuation">]</span>
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这将创建一个名为<code>ubuntu-ssh</code>的Deployment，该Deployment将在单个Pod中运行一个名为<code>ubuntu-ssh</code>的容器。容器将使用<code>ubuntu:20.04</code>作为基本镜像，运行一个无限循环的<code>sleep</code>命令来保持容器运行，并暴露22端口。</p>
<h2 id="创建一个名为ubuntu-ssh的Service："><a href="#创建一个名为ubuntu-ssh的Service：" class="headerlink" title="创建一个名为ubuntu-ssh的Service："></a>创建一个名为<code>ubuntu-ssh</code>的Service：</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>ssh
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>ssh
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ssh
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">22</span>
    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">22</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>这将创建一个名为<code>ubuntu-ssh</code>的Service，并将其连接到Deployment。Service将使用<code>ClusterIP</code>类型，并在22端口上公开SSH服务。</p>
<h2 id="在容器中安装SSH服务器："><a href="#在容器中安装SSH服务器：" class="headerlink" title="在容器中安装SSH服务器："></a>在容器中安装SSH服务器：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>ubuntu-ssh-pod<span class="token operator">></span> -- /bin/bash
<span class="token function">apt-get</span> update
<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这将在运行<code>ubuntu-ssh</code>容器的Pod中打开一个shell，并安装SSH服务器。</p>
<h2 id="在容器中配置SSH服务器："><a href="#在容器中配置SSH服务器：" class="headerlink" title="在容器中配置SSH服务器："></a>在容器中配置SSH服务器：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'root:password'</span> <span class="token operator">|</span> chpasswd
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/#PermitRootLogin prohibit-password/PermitRootLogin yes/'</span> /etc/ssh/sshd_config
    <span class="token function">service</span> <span class="token function">ssh</span> restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这将设置root用户的密码为<code>password</code>，启用root用户的SSH登录，并重新启动SSH服务器。</p>
<p>现在，您已经在Kubernetes中创建了一个Ubuntu 20.04容器，该容器暴露22端口并在后台永久运行。您可以使用SSH客户端连接到该容器，例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> root@<span class="token operator">&lt;</span>service-ip<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>其中，<code>&lt;service-ip&gt;</code>是在步骤2中创建的Service的IP地址。</p>
]]></content>
      <categories>
        <category>容器/虚拟化</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 longhorn 出现的坑</title>
    <url>/2023/11/03/k8s/%E5%AE%89%E8%A3%85%20longhorn%20%E5%87%BA%E7%8E%B0%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h1 id="安装-longhorn-出现的坑"><a href="#安装-longhorn-出现的坑" class="headerlink" title="安装 longhorn 出现的坑"></a>安装 longhorn 出现的坑</h1><h2 id="安装-longhorn"><a href="#安装-longhorn" class="headerlink" title="安装 longhorn"></a>安装 longhorn</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> https://raw.githubusercontent.com/longhorn/longhorn/v1.5.1/deploy/longhorn.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>观察安装情况</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl get pods <span class="token punctuation">\</span>
<span class="token parameter variable">--namespace</span> longhorn-system <span class="token punctuation">\</span>
<span class="token parameter variable">--watch</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="出现的坑"><a href="#出现的坑" class="headerlink" title="出现的坑"></a>出现的坑</h2><p><img src="/img/image.png" alt="Alt text"><br>longhorn-manager 一直处于 CrashLoopBackOff 状态，查看日志</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl logs longhorn-manager-6f8c6f4f5f-8q9q8 <span class="token parameter variable">-n</span> longhorn-system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>发现是因为缺少 iscsiadm&#x2F;open-iscsi</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@dev:~/k8s/kubevirt<span class="token comment"># kubectl logs -f longhorn-manager-4xgcq -n longhorn-system </span>
<span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token string">"2023-11-03T05:41:17Z"</span> <span class="token assign-left variable">level</span><span class="token operator">=</span>fatal <span class="token assign-left variable">msg</span><span class="token operator">=</span><span class="token string">"Error starting manager: Failed environment check, please make sure you have iscsiadm/open-iscsi installed on the host: failed to execute: nsenter [--mount=/host/proc/53233/ns/mnt --net=/host/proc/53233/ns/net iscsiadm --version], output , stderr nsenter: failed to execute iscsiadm: No such file or directory<span class="token entity" title="\n">\n</span>: exit status 127"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> open-iscsi <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>解决后，longhorn-manager 会自动重启，然后就可以正常使用了<br>再次查看状态</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@dev:~/k8s/kubevirt<span class="token comment"># kubectl get po -n longhorn-system -o wide</span>
NAME                                                READY   STATUS    RESTARTS        AGE     IP              NODE   NOMINATED NODE   READINESS GATES
csi-attacher-759f487c5-46wrf                        <span class="token number">1</span>/1     Running   <span class="token number">0</span>               3m19s   <span class="token number">10.233</span>.113.63   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
csi-attacher-759f487c5-bpdvw                        <span class="token number">1</span>/1     Running   <span class="token number">0</span>               3m19s   <span class="token number">10.233</span>.113.64   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
csi-attacher-759f487c5-zmdhw                        <span class="token number">1</span>/1     Running   <span class="token number">0</span>               3m19s   <span class="token number">10.233</span>.113.62   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
csi-provisioner-6df8547696-gxp2d                    <span class="token number">1</span>/1     Running   <span class="token number">0</span>               3m19s   <span class="token number">10.233</span>.113.66   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
csi-provisioner-6df8547696-mljmk                    <span class="token number">1</span>/1     Running   <span class="token number">0</span>               3m19s   <span class="token number">10.233</span>.113.67   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
csi-provisioner-6df8547696-x2ght                    <span class="token number">1</span>/1     Running   <span class="token number">0</span>               3m19s   <span class="token number">10.233</span>.113.65   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
csi-resizer-6bf6dbcb4-6t6wt                         <span class="token number">1</span>/1     Running   <span class="token number">0</span>               3m19s   <span class="token number">10.233</span>.113.69   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
csi-resizer-6bf6dbcb4-hcwvg                         <span class="token number">1</span>/1     Running   <span class="token number">0</span>               3m19s   <span class="token number">10.233</span>.113.70   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
csi-resizer-6bf6dbcb4-shqnc                         <span class="token number">1</span>/1     Running   <span class="token number">0</span>               3m19s   <span class="token number">10.233</span>.113.68   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
csi-snapshotter-69d7b7b84-5hspz                     <span class="token number">1</span>/1     Running   <span class="token number">0</span>               3m18s   <span class="token number">10.233</span>.113.72   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
csi-snapshotter-69d7b7b84-892jt                     <span class="token number">1</span>/1     Running   <span class="token number">0</span>               3m18s   <span class="token number">10.233</span>.113.73   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
csi-snapshotter-69d7b7b84-nv6rx                     <span class="token number">1</span>/1     Running   <span class="token number">0</span>               3m18s   <span class="token number">10.233</span>.113.71   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
engine-image-ei-74783864-5b96k                      <span class="token number">1</span>/1     Running   <span class="token number">0</span>               3m27s   <span class="token number">10.233</span>.113.59   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
instance-manager-9ef5cfc110a5361efb832fc0c716ace1   <span class="token number">1</span>/1     Running   <span class="token number">0</span>               3m27s   <span class="token number">10.233</span>.113.60   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
longhorn-csi-plugin-xfmsg                           <span class="token number">3</span>/3     Running   <span class="token number">0</span>               3m18s   <span class="token number">10.233</span>.113.74   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
longhorn-driver-deployer-794f4fb6bb-nwdgt           <span class="token number">1</span>/1     Running   <span class="token number">0</span>               15m     <span class="token number">10.233</span>.113.55   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
longhorn-manager-4xgcq                              <span class="token number">1</span>/1     Running   <span class="token number">7</span> <span class="token punctuation">(</span>8m46s ago<span class="token punctuation">)</span>   15m     <span class="token number">10.233</span>.113.56   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
longhorn-ui-79fbb99d7d-hh9ml                        <span class="token number">1</span>/1     Running   <span class="token number">0</span>               15m     <span class="token number">10.233</span>.113.58   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>
longhorn-ui-79fbb99d7d-kd7mk                        <span class="token number">1</span>/1     Running   <span class="token number">0</span>               15m     <span class="token number">10.233</span>.113.57   dev    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>正常了</p>
]]></content>
      <categories>
        <category>容器/虚拟化</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 根目录扩容操作</title>
    <url>/2023/12/29/linux/Linux%20%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%89%A9%E5%AE%B9%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Linux-根目录扩容操作"><a href="#Linux-根目录扩容操作" class="headerlink" title="Linux 根目录扩容操作"></a>Linux 根目录扩容操作</h1><h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><p>由于测试环境需要，虚拟机根目录需要扩容至120G。</p>
<h2 id="查看本机磁盘环境"><a href="#查看本机磁盘环境" class="headerlink" title="查看本机磁盘环境"></a>查看本机磁盘环境</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># df -h</span>
文件系统                 容量  已用  可用 已用% 挂载点
/dev/mapper/centos-root   35G  <span class="token number">5</span>.5G   30G   <span class="token number">16</span>% /
devtmpfs                 <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G    <span class="token number">0</span>% /dev
tmpfs                    <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G    <span class="token number">0</span>% /dev/shm
tmpfs                    <span class="token number">3</span>.9G   11M  <span class="token number">3</span>.9G    <span class="token number">1</span>% /run
tmpfs                    <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G    <span class="token number">0</span>% /sys/fs/cgroup
/dev/sda1               1014M  275M  740M   <span class="token number">28</span>% /boot
tmpfs                    783M   52K  783M    <span class="token number">1</span>% /run/user/0
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk</span>
NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
fd0               <span class="token number">2</span>:0    <span class="token number">1</span>    4K  <span class="token number">0</span> disk
sda               <span class="token number">8</span>:0    <span class="token number">0</span>  500G  <span class="token number">0</span> disk
├─sda1            <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
└─sda2            <span class="token number">8</span>:2    <span class="token number">0</span>   39G  <span class="token number">0</span> part
  ├─centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   35G  <span class="token number">0</span> lvm  /
  └─centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    4G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到根目录总容量为35G, 设备sda 的总容量为500G。</p>
<h2 id="添加磁盘分区"><a href="#添加磁盘分区" class="headerlink" title="添加磁盘分区"></a>添加磁盘分区</h2><p>需要120G 容量，已有35G, 还需添加85G 容量。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># fdisk /dev/sda</span>
欢迎使用 <span class="token function">fdisk</span> <span class="token punctuation">(</span>util-linux <span class="token number">2.23</span>.2<span class="token punctuation">)</span>。

更改将停留在内存中，直到您决定将更改写入磁盘。
使用写入命令前请三思。

命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：n
Partition type:
   p   primary <span class="token punctuation">(</span><span class="token number">2</span> primary, <span class="token number">0</span> extended, <span class="token number">2</span> <span class="token function">free</span><span class="token punctuation">)</span>
   e   extended
Select <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>:
Using default response p
分区号 <span class="token punctuation">(</span><span class="token number">3,4</span>，默认 <span class="token number">3</span><span class="token punctuation">)</span>：
起始 扇区 <span class="token punctuation">(</span><span class="token number">83886080</span>-1048575999，默认为 <span class="token number">83886080</span><span class="token punctuation">)</span>：
将使用默认值 <span class="token number">83886080</span>
Last 扇区, +扇区 or +size<span class="token punctuation">&#123;</span>K,M,G<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span><span class="token number">83886080</span>-1048575999，默认为 <span class="token number">1048575999</span><span class="token punctuation">)</span>：+85G
分区 <span class="token number">3</span> 已设置为 Linux 类型，大小设为 <span class="token number">85</span> GiB

命令<span class="token punctuation">(</span>输入 m 获取帮助<span class="token punctuation">)</span>：w
The partition table has been altered<span class="token operator">!</span>

Calling ioctl<span class="token punctuation">(</span><span class="token punctuation">)</span> to re-read partition table.

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># partprobe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后查看分区是否创建：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lsblk</span>
NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
fd0               <span class="token number">2</span>:0    <span class="token number">1</span>    4K  <span class="token number">0</span> disk
sda               <span class="token number">8</span>:0    <span class="token number">0</span>  500G  <span class="token number">0</span> disk
├─sda1            <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
├─sda2            <span class="token number">8</span>:2    <span class="token number">0</span>   39G  <span class="token number">0</span> part
│ ├─centos-root <span class="token number">253</span>:0    <span class="token number">0</span>   35G  <span class="token number">0</span> lvm  /
│ └─centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>    4G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
└─sda3            <span class="token number">8</span>:3    <span class="token number">0</span>   85G  <span class="token number">0</span> part
sr0              <span class="token number">11</span>:0    <span class="token number">1</span> 1024M  <span class="token number">0</span> rom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到sda2 分区已创建。</p>
<h2 id="开始扩容"><a href="#开始扩容" class="headerlink" title="开始扩容"></a>开始扩容</h2><h3 id="创建物理卷"><a href="#创建物理卷" class="headerlink" title="创建物理卷"></a>创建物理卷</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lvm</span>
lvm<span class="token operator">></span> pvcreate /dev/sda3
  Physical volume <span class="token string">"/dev/sda3"</span> successfully created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="查看物理卷和卷组"><a href="#查看物理卷和卷组" class="headerlink" title="查看物理卷和卷组"></a>查看物理卷和卷组</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lvm<span class="token operator">></span> pvdisplay
  --- Physical volume ---
  PV Name               /dev/sda2
  VG Name               centos
  PV Size               <span class="token operator">&lt;</span><span class="token number">39.00</span> GiB / not usable <span class="token number">3.00</span> MiB
  Allocatable           <span class="token function">yes</span> <span class="token punctuation">(</span>but full<span class="token punctuation">)</span>
  PE Size               <span class="token number">4.00</span> MiB
  Total PE              <span class="token number">9983</span>
  Free PE               <span class="token number">0</span>
  Allocated PE          <span class="token number">9983</span>
  PV UUID               twmUZh-Vnqq-W5Pd-v3ms-6OkH-sSTs-nv8aA8

  <span class="token string">"/dev/sda3"</span> is a new physical volume of <span class="token string">"85.00 GiB"</span>
  --- NEW Physical volume ---
  PV Name               /dev/sda3
  VG Name
  PV Size               <span class="token number">85.00</span> GiB
  Allocatable           NO
  PE Size               <span class="token number">0</span>
  Total PE              <span class="token number">0</span>
  Free PE               <span class="token number">0</span>
  Allocated PE          <span class="token number">0</span>
  PV UUID               vTD91f-b28E-GgL0-XsqI-ipQ5-rscT-GcQbT6

lvm<span class="token operator">></span> vgdisplay
  --- Volume group ---
  VG Name               centos
  System ID
  Format                lvm2
  Metadata Areas        <span class="token number">1</span>
  Metadata Sequence No  <span class="token number">3</span>
  VG Access             read/write
  VG Status             resizable
  MAX LV                <span class="token number">0</span>
  Cur LV                <span class="token number">2</span>
  Open LV               <span class="token number">2</span>
  Max PV                <span class="token number">0</span>
  Cur PV                <span class="token number">1</span>
  Act PV                <span class="token number">1</span>
  VG Size               <span class="token operator">&lt;</span><span class="token number">39.00</span> GiB
  PE Size               <span class="token number">4.00</span> MiB
  Total PE              <span class="token number">9983</span>
  Alloc PE / Size       <span class="token number">9983</span> / <span class="token operator">&lt;</span><span class="token number">39.00</span> GiB
  Free  PE / Size       <span class="token number">0</span> / <span class="token number">0</span>
  VG UUID               238Yz8-MEQa-NT6a-3aHC-J3TZ-mGux-e9vqPf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="将物理卷加入到卷组"><a href="#将物理卷加入到卷组" class="headerlink" title="将物理卷加入到卷组"></a>将物理卷加入到卷组</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lvm<span class="token operator">></span> vgextend centos /dev/sda3
  Volume group <span class="token string">"centos"</span> successfully extended
lvm<span class="token operator">></span> vgdisplay
  --- Volume group ---
  VG Name               centos
  System ID
  Format                lvm2
  Metadata Areas        <span class="token number">2</span>
  Metadata Sequence No  <span class="token number">4</span>
  VG Access             read/write
  VG Status             resizable
  MAX LV                <span class="token number">0</span>
  Cur LV                <span class="token number">2</span>
  Open LV               <span class="token number">2</span>
  Max PV                <span class="token number">0</span>
  Cur PV                <span class="token number">2</span>
  Act PV                <span class="token number">2</span>
  VG Size               <span class="token number">123.99</span> GiB
  PE Size               <span class="token number">4.00</span> MiB
  Total PE              <span class="token number">31742</span>
  Alloc PE / Size       <span class="token number">9983</span> / <span class="token operator">&lt;</span><span class="token number">39.00</span> GiB
  Free  PE / Size       <span class="token number">21759</span> / <span class="token operator">&lt;</span><span class="token number">85.00</span> GiB
  VG UUID               238Yz8-MEQa-NT6a-3aHC-J3TZ-mGux-e9vqPf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到卷组的Free size 增加了<br>将卷组剩余空间(刚添加的85G)添加到逻辑卷&#x2F;dev&#x2F;centos&#x2F;root :</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lvm<span class="token operator">></span> lvextend <span class="token parameter variable">-l</span> +100%FREE /dev/centos/root
  Size of logical volume centos/root changed from <span class="token operator">&lt;</span><span class="token number">35.00</span> GiB <span class="token punctuation">(</span><span class="token number">8959</span> extents<span class="token punctuation">)</span> to <span class="token number">119.99</span> GiB <span class="token punctuation">(</span><span class="token number">30718</span> extents<span class="token punctuation">)</span>.
  Logical volume centos/root successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="同步到文件系统"><a href="#同步到文件系统" class="headerlink" title="同步到文件系统"></a>同步到文件系统</h3><p>之前只是对逻辑卷扩容，还要同步到文件系统，实现对根目录的扩容。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># xfs_growfs /dev/centos/root</span>
meta-data<span class="token operator">=</span>/dev/mapper/centos-root <span class="token assign-left variable">isize</span><span class="token operator">=</span><span class="token number">512</span>    <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">agsize</span><span class="token operator">=</span><span class="token number">2293504</span> blks
         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">attr</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">projid32bit</span><span class="token operator">=</span><span class="token number">1</span>
         <span class="token operator">=</span>                       <span class="token assign-left variable">crc</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token assign-left variable">finobt</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">spinodes</span><span class="token operator">=</span><span class="token number">0</span>
data     <span class="token operator">=</span>                       <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">9174016</span>, <span class="token assign-left variable">imaxpct</span><span class="token operator">=</span><span class="token number">25</span>
         <span class="token operator">=</span>                       <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span>      <span class="token assign-left variable">swidth</span><span class="token operator">=</span><span class="token number">0</span> blks
naming   <span class="token operator">=</span>version <span class="token number">2</span>              <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   ascii-ci<span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span>
log      <span class="token operator">=</span>internal               <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">4479</span>, <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">2</span>
         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span> blks, lazy-count<span class="token operator">=</span><span class="token number">1</span>
realtime <span class="token operator">=</span>none                   <span class="token assign-left variable">extsz</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">rtextents</span><span class="token operator">=</span><span class="token number">0</span>
data blocks changed from <span class="token number">9174016</span> to <span class="token number">31455232</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>debian&#x2F;ubuntu 系统则使用以下命令对根目录扩容</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">resize2fs /dev/debian-vg/root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后再查看挂载情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># df -h</span>
文件系统                 容量  已用  可用 已用% 挂载点
/dev/mapper/centos-root  120G  <span class="token number">5</span>.5G  115G    <span class="token number">5</span>% /
devtmpfs                 <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G    <span class="token number">0</span>% /dev
tmpfs                    <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G    <span class="token number">0</span>% /dev/shm
tmpfs                    <span class="token number">3</span>.9G   11M  <span class="token number">3</span>.9G    <span class="token number">1</span>% /run
tmpfs                    <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G    <span class="token number">0</span>% /sys/fs/cgroup
/dev/sda1               1014M  275M  740M   <span class="token number">28</span>% /boot
tmpfs                    783M   52K  783M    <span class="token number">1</span>% /run/user/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以发现有120G的空间挂载在根目录上。<br>over !!!<br>参考内容<br><a href="https://blog.csdn.net/harryxxxxx/article/details/81114613">https://blog.csdn.net/harryxxxxx/article/details/81114613</a><br><a href="https://blog.csdn.net/nimasike/article/details/53729499">https://blog.csdn.net/nimasike/article/details/53729499</a><br><a href="https://blog.csdn.net/qq_24871519/article/details/86243571">
</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 创建用户并赋予管理员权限</title>
    <url>/2023/12/29/mysql/mysql%20%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%B9%B6%E8%B5%8B%E4%BA%88%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<h1 id="mysql-创建用户并赋予管理员权限"><a href="#mysql-创建用户并赋予管理员权限" class="headerlink" title="mysql 创建用户并赋予管理员权限"></a>mysql 创建用户并赋予管理员权限</h1><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建新用户，将new_username替换为你想要创建的新用户名，将password替换为用户的密码。</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'new_username'</span><span class="token variable">@'localhost'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'password'</span><span class="token punctuation">;</span>

<span class="token comment">-- 授予new_username用户在所有数据库和所有表上的所有权限，并且WITH GRANT OPTION选项允许该用户授予其他用户权限</span>
<span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'new_username'</span><span class="token variable">@'localhost'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span>

<span class="token comment">-- 刷新权限以使更改生效</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>vi 常用命令</title>
    <url>/2021/07/31/linux/vi%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="Vi-常用命令"><a href="#Vi-常用命令" class="headerlink" title="Vi 常用命令"></a>Vi 常用命令</h2><h3 id="进入-vi-的命令"><a href="#进入-vi-的命令" class="headerlink" title="进入 vi 的命令"></a>进入 vi 的命令</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">vi filename</td>
<td>打开或新建文件，并将光标置于第一行首</td>
</tr>
<tr>
<td align="center">vi +n filename</td>
<td>打开文件，并将光标置于第 n 行首</td>
</tr>
<tr>
<td align="center">vi + filename</td>
<td>打开文件，并将光标置于最后一行首</td>
</tr>
<tr>
<td align="center">vi +&#x2F;pattern filename</td>
<td>打开文件，并将光标置于第一个与 pattern 匹配的串处</td>
</tr>
<tr>
<td align="center">vi -r filename</td>
<td>在上次正用 vi 编辑时发生系统崩溃，恢复 filename</td>
</tr>
<tr>
<td align="center">vi filename….filename</td>
<td>打开多个文件，依次进行编辑</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="移动光标类命令"><a href="#移动光标类命令" class="headerlink" title="移动光标类命令"></a>移动光标类命令</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">h</td>
<td>光标左移一个字符</td>
</tr>
<tr>
<td align="center">l</td>
<td>光标右移一个字符</td>
</tr>
<tr>
<td align="center">space</td>
<td>光标右移一个字符</td>
</tr>
<tr>
<td align="center">Backspace</td>
<td>光标左移一个字符</td>
</tr>
<tr>
<td align="center">k 或 Ctrl+p</td>
<td>光标上移一行</td>
</tr>
<tr>
<td align="center">j 或 Ctrl+n</td>
<td>光标下移一行</td>
</tr>
<tr>
<td align="center">Enter</td>
<td>光标下移一行</td>
</tr>
<tr>
<td align="center">w 或 W</td>
<td>光标右移一个字至字首</td>
</tr>
<tr>
<td align="center">b 或 B</td>
<td>光标左移一个字至字首</td>
</tr>
<tr>
<td align="center">e 或 E</td>
<td>光标右移一个字至字尾</td>
</tr>
<tr>
<td align="center">(</td>
<td>光标移至句首</td>
</tr>
<tr>
<td align="center">)</td>
<td>光标移至句尾</td>
</tr>
<tr>
<td align="center">{</td>
<td>光标移至段落开头</td>
</tr>
<tr>
<td align="center">}</td>
<td>光标移至段落结尾</td>
</tr>
<tr>
<td align="center">nG</td>
<td>光标移至第 n 行首</td>
</tr>
<tr>
<td align="center">G</td>
<td>到最后一行</td>
</tr>
<tr>
<td align="center">n+</td>
<td>光标下移 n 行</td>
</tr>
<tr>
<td align="center">n-</td>
<td>光标上移 n 行</td>
</tr>
<tr>
<td align="center">n$</td>
<td>光标移至第 n 行尾</td>
</tr>
<tr>
<td align="center">H</td>
<td>光标移至屏幕顶行</td>
</tr>
<tr>
<td align="center">M</td>
<td>光标移至屏幕中间行</td>
</tr>
<tr>
<td align="center">L</td>
<td>光标移至屏幕最后行</td>
</tr>
<tr>
<td align="center">0</td>
<td>（注意是数字零）光标移至当前行首</td>
</tr>
<tr>
<td align="center">$</td>
<td>光标移至当前行尾</td>
</tr>
</tbody></table>
<h3 id="屏幕翻滚类命令"><a href="#屏幕翻滚类命令" class="headerlink" title="屏幕翻滚类命令"></a>屏幕翻滚类命令</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Ctrl+u</td>
<td>向文件首翻半屏</td>
</tr>
<tr>
<td align="center">Ctrl ＋ b</td>
<td>向文件首翻一屏</td>
</tr>
<tr>
<td align="center">Ctrl+d</td>
<td>向文件尾翻半屏</td>
</tr>
<tr>
<td align="center">Ctrl+f</td>
<td>向文件尾翻一屏</td>
</tr>
<tr>
<td align="center">nz</td>
<td>将第 n 行滚至屏幕顶部，不指定 n 时将当前行滚至屏幕顶部</td>
</tr>
</tbody></table>
<h3 id="插入文本类命令"><a href="#插入文本类命令" class="headerlink" title="插入文本类命令"></a>插入文本类命令</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i</td>
<td>在光标前</td>
</tr>
<tr>
<td align="center">I</td>
<td>在当前行首</td>
</tr>
<tr>
<td align="center">a</td>
<td>光标后</td>
</tr>
<tr>
<td align="center">A</td>
<td>在当前行尾</td>
</tr>
<tr>
<td align="center">o</td>
<td>在当前行之下新开一行</td>
</tr>
<tr>
<td align="center">O</td>
<td>在当前行之上新开一行</td>
</tr>
<tr>
<td align="center">r</td>
<td>替换当前字符</td>
</tr>
<tr>
<td align="center">R</td>
<td>替换当前字符及其后的字符，直至按 ESC 键</td>
</tr>
<tr>
<td align="center">s</td>
<td>从当前光标位置处开始，以输入的文本替代指定数目的字符</td>
</tr>
<tr>
<td align="center">S</td>
<td>删除指定数目的行，并以所输入文本代替之</td>
</tr>
<tr>
<td align="center">ncw 或 nCW</td>
<td>修改指定数目的字</td>
</tr>
<tr>
<td align="center">nCC</td>
<td>修改指定数目的行</td>
</tr>
</tbody></table>
<h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ndw 或 ndW</td>
<td>删除光标处开始及其后的 n-1 个字</td>
</tr>
<tr>
<td align="center">do</td>
<td>删至行首</td>
</tr>
<tr>
<td align="center">d$</td>
<td>删至行尾</td>
</tr>
<tr>
<td align="center">ndd</td>
<td>删除当前行及其后 n-1 行</td>
</tr>
<tr>
<td align="center">x 或 X</td>
<td>删除一个字符，x 删除光标后的，而 X 删除光标前的</td>
</tr>
<tr>
<td align="center">Ctrl+u</td>
<td>删除输入方式下所输入的文本</td>
</tr>
</tbody></table>
<h3 id="搜索及替换命令"><a href="#搜索及替换命令" class="headerlink" title="搜索及替换命令"></a>搜索及替换命令</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x2F;pattern</td>
<td>从光标开始处向文件尾搜索 pattern</td>
</tr>
<tr>
<td align="center">?pattern</td>
<td>从光标开始处向文件首搜索 pattern</td>
</tr>
<tr>
<td align="center">n</td>
<td>在同一方向重复上一次搜索命令</td>
</tr>
<tr>
<td align="center">N</td>
<td>在反方向上重复上一次搜索命令</td>
</tr>
<tr>
<td align="center">：s&#x2F;p1&#x2F;p2&#x2F;g</td>
<td>将当前行中所有 p1 均用 p2 替代</td>
</tr>
<tr>
<td align="center">：n1,n2s&#x2F;p1&#x2F;p2&#x2F;g</td>
<td>将第 n1 至 n2 行中所有 p1 均用 p2 替代</td>
</tr>
<tr>
<td align="center">：g&#x2F;p1&#x2F;s&#x2F;&#x2F;p2&#x2F;g</td>
<td>将文件中所有 p1 均用 p2 替换</td>
</tr>
</tbody></table>
<h3 id="选项设置"><a href="#选项设置" class="headerlink" title="选项设置"></a>选项设置</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">all</td>
<td>列出所有选项设置情况</td>
</tr>
<tr>
<td align="center">term</td>
<td>设置终端类型</td>
</tr>
<tr>
<td align="center">ignorance</td>
<td>在搜索中忽略大小写</td>
</tr>
<tr>
<td align="center">list</td>
<td>显示制表位(Ctrl+I)和行尾标志（$)</td>
</tr>
<tr>
<td align="center">number</td>
<td>显示行号</td>
</tr>
<tr>
<td align="center">report</td>
<td>显示由面向行的命令修改过的数目</td>
</tr>
<tr>
<td align="center">terse</td>
<td>显示简短的警告信息</td>
</tr>
<tr>
<td align="center">warn</td>
<td>在转到别的文件时若没保存当前文件则显示 NO write 信息</td>
</tr>
<tr>
<td align="center">nomagic</td>
<td>允许在搜索模式中，使用前面不带“\”的特殊字符</td>
</tr>
<tr>
<td align="center">nowrapscan</td>
<td>禁止 vi 在搜索到达文件两端时，又从另一端开始</td>
</tr>
<tr>
<td align="center">mesg</td>
<td>允许 vi 显示其他用户用 write 写到自己终端上的信息</td>
</tr>
</tbody></table>
<h3 id="最后行方式命令"><a href="#最后行方式命令" class="headerlink" title="最后行方式命令"></a>最后行方式命令</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">：n1,n2 co n3</td>
<td>将 n1 行到 n2 行之间的内容拷贝到第 n3 行下</td>
</tr>
<tr>
<td align="center">：n1,n2 m n3</td>
<td>将 n1 行到 n2 行之间的内容移至到第 n3 行下</td>
</tr>
<tr>
<td align="center">：n1,n2 d</td>
<td>将 n1 行到 n2 行之间的内容删除</td>
</tr>
<tr>
<td align="center">：w</td>
<td>保存当前文件</td>
</tr>
<tr>
<td align="center">：e filename</td>
<td>打开文件 filename 进行编辑</td>
</tr>
<tr>
<td align="center">：x</td>
<td>保存当前文件并退出</td>
</tr>
<tr>
<td align="center">：q</td>
<td>退出 vi</td>
</tr>
<tr>
<td align="center">：q!</td>
<td>不保存文件并退出 vi</td>
</tr>
<tr>
<td align="center">：!command</td>
<td>执行 shell 命令 command</td>
</tr>
<tr>
<td align="center">：n1,n2 w!command</td>
<td>将文件中 n1 行至 n2 行的内容作为 command 的输入并执行之，若不指定 n1，n2，则表示将整个文件内容作为 command 的输入</td>
</tr>
<tr>
<td align="center">：r!command</td>
<td>将命令 command 的输出结果放到当前行</td>
</tr>
</tbody></table>
<h3 id="寄存器操作"><a href="#寄存器操作" class="headerlink" title="寄存器操作"></a>寄存器操作</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">“?nyy</td>
<td>将当前行及其下 n 行的内容保存到寄存器？中，其中?为一个字母，n 为一个数字</td>
</tr>
<tr>
<td align="center">“?nyw</td>
<td>将当前行及其下 n 个字保存到寄存器？中，其中?为一个字母，n 为一个数字</td>
</tr>
<tr>
<td align="center">“?nyl</td>
<td>将当前行及其下 n 个字符保存到寄存器？中，其中?为一个字母，n 为一个数字</td>
</tr>
<tr>
<td align="center">“?p</td>
<td>取出寄存器？中的内容并将其放到光标位置处。这里？可以是一个字母，也可以是一个数字</td>
</tr>
<tr>
<td align="center">ndd</td>
<td>将当前行及其下共 n 行文本删除，并将所删内容放到 1 号删除寄存器中</td>
</tr>
</tbody></table>
<h3 id="保存退出"><a href="#保存退出" class="headerlink" title="保存退出"></a>保存退出</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">zz</td>
<td>保存并退出</td>
</tr>
<tr>
<td align="center">:w filename</td>
<td>写入文件</td>
</tr>
<tr>
<td align="center">:W</td>
<td>写入文件</td>
</tr>
<tr>
<td align="center">:x</td>
<td>保存(如果当前文件修改过)并退出</td>
</tr>
<tr>
<td align="center">:q!</td>
<td>不保存文件，直接退出</td>
</tr>
<tr>
<td align="center">:q</td>
<td>退出 vi</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vi</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL ORDER BY 有索引却不用？揭秘 `EXPLAIN` 中的“索引失效”真相</title>
    <url>/2025/09/24/mysql/20250924/</url>
    <content><![CDATA[<h1 id="MySQL-ORDER-BY-有索引却不用？揭秘-EXPLAIN-中的“索引失效”真相"><a href="#MySQL-ORDER-BY-有索引却不用？揭秘-EXPLAIN-中的“索引失效”真相" class="headerlink" title="MySQL ORDER BY 有索引却不用？揭秘 EXPLAIN 中的“索引失效”真相"></a>MySQL ORDER BY 有索引却不用？揭秘 <code>EXPLAIN</code> 中的“索引失效”真相</h1><p>在日常的 MySQL 性能优化中，我们常常会遇到一个令人困惑的现象：<strong>明明为 <code>ORDER BY</code> 的字段创建了索引，但使用 <code>EXPLAIN</code> 查看执行计划时，却发现 <code>key</code> 为 <code>NULL</code>，<code>Extra</code> 中出现了 <code>Using filesort</code>，索引似乎“失效”了。</strong></p>
<p>这究竟是怎么回事？是索引没建好？还是 MySQL 优化器“抽风”了？今天，我们就来深入剖析这一现象背后的真正原因，并提供切实可行的解决方案。</p>
<h3 id="一、问题重现"><a href="#一、问题重现" class="headerlink" title="一、问题重现"></a>一、问题重现</h3><p>假设我们有一个用户表 <code>users</code>，并为 <code>created_at</code> 字段创建了索引：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_created_at <span class="token keyword">ON</span> users<span class="token punctuation">(</span>created_at<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>执行查询：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> created_at<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<p>你可能会惊讶地发现，执行计划中并未使用 <code>idx_created_at</code> 索引，而是进行了全表扫描和 <code>filesort</code>。</p>
<p>这到底是为什么？</p>
<h3 id="二、核心原因：回表成本过高"><a href="#二、核心原因：回表成本过高" class="headerlink" title="二、核心原因：回表成本过高"></a>二、核心原因：回表成本过高</h3><p>要理解这个问题，我们必须先了解 MySQL 索引的底层机制。</p>
<ol>
<li><p><strong>二级索引的结构</strong>：在 InnoDB 存储引擎中，除了主键索引（聚簇索引）外，其他索引都是<strong>二级索引</strong>。二级索引的叶子节点存储的是<strong>索引字段的值 + 主键值</strong>，而不是完整的数据行。</p>
</li>
<li><p><strong><code>SELECT *</code> 带来的“回表”问题</strong>：</p>
<ul>
<li>当执行 <code>SELECT * FROM users ORDER BY created_at</code> 时，MySQL 可以利用 <code>idx_created_at</code> 索引快速获取按 <code>created_at</code> 排序的主键列表。</li>
<li>但为了获取 <code>*</code> 所代表的所有字段数据，MySQL 必须拿着这些主键，<strong>逐个回到主键索引中查找完整的数据行</strong>。这个过程称为“<strong>回表</strong>”（Bookmark Lookup）。</li>
</ul>
</li>
<li><p><strong>优化器的权衡</strong>：</p>
<ul>
<li>如果表中有成千上万条数据，<code>ORDER BY</code> 又需要返回大部分或全部数据，那么这个“回表”过程就会产生<strong>大量的随机 I&#x2F;O 操作</strong>。</li>
<li>随机 I&#x2F;O 的成本远高于顺序 I&#x2F;O。</li>
<li>因此，MySQL 优化器会进行成本估算：与其进行上万次随机 I&#x2F;O（回表），不如直接进行一次<strong>全表扫描</strong>（顺序 I&#x2F;O），然后在内存中对结果集进行排序（<code>filesort</code>）。</li>
<li>在大多数情况下，<strong>全表扫描 + 内存排序</strong>的总成本低于<strong>遍历二级索引 + 大量回表</strong>的成本。</li>
</ul>
</li>
</ol>
<p>这就是为什么 <code>EXPLAIN</code> 显示未使用索引的根本原因——<strong>优化器认为全表扫描更高效</strong>。</p>
<h3 id="三、常见场景与解决方案"><a href="#三、常见场景与解决方案" class="headerlink" title="三、常见场景与解决方案"></a>三、常见场景与解决方案</h3><p>除了上述核心原因，还有其他几种常见情况会导致 <code>ORDER BY</code> 索引未被使用：</p>
<h4 id="1-WHERE-条件优先级更高"><a href="#1-WHERE-条件优先级更高" class="headerlink" title="1. WHERE 条件优先级更高"></a>1. <code>WHERE</code> 条件优先级更高</h4><ul>
<li><strong>场景</strong>：<code>SELECT * FROM users WHERE status = &#39;active&#39; ORDER BY created_at;</code></li>
<li><strong>原因</strong>：如果 <code>status</code> 字段的过滤性很强（如只有少量用户是 ‘active’），优化器可能优先选择 <code>status</code> 上的索引，然后对少量结果进行 <code>filesort</code>。</li>
<li><strong>方案</strong>：创建<strong>复合索引</strong> <code>idx_status_created(status, created_at)</code>，让查询既能高效过滤，又能避免排序。</li>
</ul>
<h4 id="2-范围查询阻断索引排序"><a href="#2-范围查询阻断索引排序" class="headerlink" title="2. 范围查询阻断索引排序"></a>2. 范围查询阻断索引排序</h4><ul>
<li><strong>场景</strong>：<code>WHERE age &gt; 18 ORDER BY created_at</code>，索引为 <code>(age, created_at)</code>。</li>
<li><strong>原因</strong>：“最左前缀原则”下，<code>age &gt; 18</code> 是范围查询，其后的 <code>created_at</code> 无法再利用索引排序。</li>
<li><strong>方案</strong>：调整查询逻辑，或接受 <code>filesort</code> 的存在。</li>
</ul>
<h4 id="3-数据量过大或分布不均"><a href="#3-数据量过大或分布不均" class="headerlink" title="3. 数据量过大或分布不均"></a>3. 数据量过大或分布不均</h4><ul>
<li><strong>场景</strong>：表数据量极大，或 <code>ORDER BY</code> 字段值重复率高。</li>
<li><strong>原因</strong>：索引优势减弱，优化器可能选择全表扫描。</li>
<li><strong>方案</strong>：优化查询条件，减少结果集。</li>
</ul>
<h3 id="四、终极解决方案：覆盖索引"><a href="#四、终极解决方案：覆盖索引" class="headerlink" title="四、终极解决方案：覆盖索引"></a>四、终极解决方案：覆盖索引</h3><p>要让 <code>ORDER BY</code> 索引真正发挥作用，最有效的方法是避免“回表”。</p>
<h4 id="✅-方案一：避免-SELECT"><a href="#✅-方案一：避免-SELECT" class="headerlink" title="✅ 方案一：避免 SELECT *"></a>✅ 方案一：避免 <code>SELECT *</code></h4><p>永远不要在生产环境使用 <code>SELECT *</code>！只查询必要的字段：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 好的做法</span>
<span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> created_at <span class="token keyword">FROM</span> users <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> created_at<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>code<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果查询的字段恰好都在索引中，就可能实现“覆盖索引”。</p>
<h4 id="✅-方案二：创建覆盖索引（Covering-Index）"><a href="#✅-方案二：创建覆盖索引（Covering-Index）" class="headerlink" title="✅ 方案二：创建覆盖索引（Covering Index）"></a>✅ 方案二：创建覆盖索引（Covering Index）</h4><p>将查询中用到的所有字段都包含在索引中，使索引“覆盖”查询需求。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建覆盖索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_cover <span class="token keyword">ON</span> users<span class="token punctuation">(</span>created_at<span class="token punctuation">,</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>此时，<code>EXPLAIN</code> 的 <code>Extra</code> 列会显示 <code>Using index</code>，表示索引覆盖，无需回表，性能极佳。</p>
<blockquote>
<p><strong>注意</strong>：覆盖索引会增加索引大小和写入开销，需根据读写比和业务场景权衡。</p>
</blockquote>
<h3 id="五、如何验证？"><a href="#五、如何验证？" class="headerlink" title="五、如何验证？"></a>五、如何验证？</h3><p>使用 <code>EXPLAIN</code> 或 <code>EXPLAIN FORMAT=JSON</code> 观察执行计划：</p>
<ul>
<li><code>key</code>：实际使用的索引。</li>
<li><code>Extra</code>：<ul>
<li><code>Using index</code>：覆盖索引，最佳。</li>
<li><code>Using filesort</code>：进行了排序，可能未用索引。</li>
<li><code>Using index condition</code>：索引条件下推，部分优化。</li>
</ul>
</li>
</ul>
<h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><table>
<thead>
<tr>
<th>原因</th>
<th>解决方案</th>
</tr>
</thead>
<tbody><tr>
<td><code>SELECT *</code> 导致回表成本高</td>
<td>避免 <code>SELECT *</code>，只查必要字段</td>
</tr>
<tr>
<td>未使用复合索引</td>
<td>创建 <code>(where_col, order_by_col)</code> 复合索引</td>
</tr>
<tr>
<td>无法避免回表</td>
<td>创建覆盖索引，包含所有查询字段</td>
</tr>
<tr>
<td>优化器误判</td>
<td>使用 <code>ANALYZE TABLE</code> 更新统计信息，或 <code>FORCE INDEX</code>（慎用）</td>
</tr>
</tbody></table>
<p><strong>核心思想</strong>：MySQL 优化器的目标是<strong>总成本最低</strong>，而不是“必须用索引”。理解索引结构（尤其是回表机制）和优化器的决策逻辑，才能写出真正高效的 SQL。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 查看表字段注释</title>
    <url>/2023/12/27/mysql/mysql%20%E6%9F%A5%E7%9C%8B%E8%A1%A8%E5%AD%97%E6%AE%B5%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<ol>
<li><p><strong>查看列注释</strong>：</p>
<ul>
<li><p>您可以通过两种方式查看 MySQL 列的注释：</p>
<ul>
<li><p>使用<code>SHOW FULL COLUMNS</code>查询：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">FULL</span> <span class="token keyword">COLUMNS</span> <span class="token keyword">FROM</span> employee_designation<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>使用 MySQL Workbench：</p>
<ul>
<li>在 SCHEMAS 部分选择表，然后点击信息图标。</li>
<li>切换到 COLUMNS 标签，即可查看列的注释。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap 与 TreeMap</title>
    <url>/2020/01/01/java/note/HashMap%20%E4%B8%8E%20TreeMap/</url>
    <content><![CDATA[<h2 id="HashMap-和-TreeMap-的实现"><a href="#HashMap-和-TreeMap-的实现" class="headerlink" title="HashMap 和 TreeMap 的实现"></a>HashMap 和 TreeMap 的实现</h2><p><strong>HashMap</strong>：基于<strong>哈希表</strong>实现。使用 <code>HashMap</code> 要求添加的键类明确定义了 <code>hashCode()</code>和 <code>equals()</code> <em>[可以重写 hashCode()和 equals()]</em> ，为了优化 <code>HashMap</code> 空间的使用，您可以调优<strong>初始容量</strong>和<strong>负载因子</strong>。</p>
<ul>
<li><code>HashMap()</code>: 构建一个空的哈希映像</li>
<li><code>HashMap(Map m)</code>: 构建一个哈希映像，并且添加映像 m 的所有映射</li>
<li><code>HashMap(int initialCapacity)</code>: 构建一个拥有特定容量的空的哈希映像</li>
<li><code>HashMap(int initialCapacity, float loadFactor)</code>: 构建一个拥有特定容量和加载因子的空的哈希映像</li>
</ul>
<p><strong>TreeMap</strong>：基于红黑树实现。<code>TreeMap</code> 没有调优选项，因为该树总处于平衡状态。</p>
<ul>
<li><code>TreeMap()</code>：构建一个空的映像树</li>
<li><code>TreeMap(Map m)</code>: 构建一个映像树，并且添加映像 m 中所有元素</li>
<li><code>TreeMap(Comparator c)</code>: 构建一个映像树，并且使用特定的比较器对关键字进行排序</li>
<li><code>TreeMap(SortedMap s)</code>: 构建一个映像树，添加映像树 s 中所有映射，并且使用与有序映像 s 相同的比较器排序</li>
</ul>
<h2 id="HashMap-和-TreeMap-都是非线程安全"><a href="#HashMap-和-TreeMap-都是非线程安全" class="headerlink" title="HashMap 和 TreeMap 都是非线程安全"></a>HashMap 和 TreeMap 都是非线程安全</h2><p><code>HashMap</code> 继承 <code>AbstractMap</code> 抽象类，<code>TreeMap</code> 继承自 <code>SortedMap</code> 接口。</p>
<p><code>AbstractMap</code> 抽象类：覆盖了 <code>equals()</code>和 <code>hashCode()</code>方法以确保两个相等映射返回相同的哈希码。<strong>如果两个映射大小相等、包含同样的键且每个键在这两个映射中对应的值都相同，则这两个映射相等</strong>。映射的哈希码是映射元素哈希码的总和，其中每个元素是 <code>Map.Entry</code> 接口的一个实现。因此，不论映射内部顺序如何，两个相等映射会报告相同的哈希码。</p>
<p><code>SortedMap</code> 接口：它用来保持键的<strong>有序顺序</strong>。<code>SortedMap</code> 接口为映像的视图(子集)，包括两个端点提供了访问方法。除了排序是作用于映射的键以外，处理 <code>SortedMap</code> 和处理 <code>SortedSet</code> 一样。添加到 <code>SortedMap</code> 实现类的元素必须实现 <code>Comparable</code> 接口，否则您必须给它的构造函数提供一个 <code>Comparator</code> 接口的实现。<code>TreeMap</code> 类是它的唯一一个实现。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java 笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 8.0 Public Key Retrieval is not allowed 错误的解决方法</title>
    <url>/2023/06/12/java/debug/MySQL%208.0%20Public%20Key%20Retrieval%20is%20not%20allowed%20%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在使用 MySQL 8.0 时重启应用后提示 com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Public Key Retrieval is not allowed</p>
<p>最简单的解决方法是在连接后面添加 <code>allowPublicKeyRetrieval=true</code></p>
<p>文档中(<a href="https://mysql-net.github.io/MySqlConnector/connection-options/)%E7%BB%99%E5%87%BA%E7%9A%84%E8%A7%A3%E9%87%8A%E6%98%AF%EF%BC%9A">https://mysql-net.github.io/MySqlConnector/connection-options/)给出的解释是：</a></p>
<p>如果用户使用了 sha256_password 认证，密码在传输过程中必须使用 TLS 协议保护，但是如果 RSA 公钥不可用，可以使用服务器提供的公钥；可以在连接中通过 ServerRSAPublicKeyFile 指定服务器的 RSA 公钥，或者AllowPublicKeyRetrieval&#x3D;True参数以允许客户端从服务器获取公钥；但是需要注意的是 AllowPublicKeyRetrieval&#x3D;True可能会导致恶意的代理通过中间人攻击(MITM)获取到明文密码，所以默认是关闭的，必须显式开启</p>
<p><img src="https://raw.githubusercontent.com/JasonDong97/blog_pics/master/img/20190406221957566.png" alt="img"></p>
]]></content>
      <categories>
        <category>遇坑记录</category>
      </categories>
      <tags>
        <tag>java, 遇坑记录，mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>cloud-init 无法调整分区大小：当 LANG 不是 en_US 时，growpart 不起作用</title>
    <url>/2023/06/14/k8s/kubevirt/cloud-init%20%E6%97%A0%E6%B3%95%E8%B0%83%E6%95%B4%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F%EF%BC%9A%E5%BD%93%20LANG%20%E4%B8%8D%E6%98%AF%20en_US%20%E6%97%B6%EF%BC%8Cgrowpart%20%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>起初是想验证一下 kubevirt 动态扩展磁盘功能，发现在 kubevirt 资源定义上已经配置了 <code>ExpandDisks</code> 功能门，<br>且 cephfs 的动态存储的 pvc 也已经配置了 <code>allowVolumeExpansion: true</code>，但是在 kubevirt 虚拟机中的 cloud-init 执行 <code>growpart</code> 报错，发现并没有生效。<br>kubevirt 的版本是 0.56.0<br>cr 资源定义如下：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubevirt.io/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> KubeVirt
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> kubevirt
    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kubevirt
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token punctuation">...</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token key atrule">developerConfiguration</span><span class="token punctuation">:</span>
      <span class="token key atrule">featureGates</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> LiveMigration
      <span class="token punctuation">-</span> DataVolumes
      <span class="token punctuation">-</span> ExpandDisks
      <span class="token punctuation">-</span> GPU
    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent
    <span class="token key atrule">permittedHostDevices</span><span class="token punctuation">:</span>
      <span class="token key atrule">pciHostDevices</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">externalResourceProvider</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">pciVendorSelector</span><span class="token punctuation">:</span> 10DE<span class="token punctuation">:</span>1DB4
        <span class="token key atrule">resourceName</span><span class="token punctuation">:</span> nvidia.com/GV100GL_TESLA_V100_PCIE_16GB
      <span class="token punctuation">-</span> <span class="token key atrule">externalResourceProvider</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">pciVendorSelector</span><span class="token punctuation">:</span> 10DE<span class="token punctuation">:</span>20F1
        <span class="token key atrule">resourceName</span><span class="token punctuation">:</span> nvidia.com/GA100_A100_PCIE_40GB
      <span class="token punctuation">-</span> <span class="token key atrule">externalResourceProvider</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">pciVendorSelector</span><span class="token punctuation">:</span> 10DE<span class="token punctuation">:</span>1EB8
        <span class="token key atrule">resourceName</span><span class="token punctuation">:</span> nvidia.com/TU104GL_TESLA_T4
  <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent
    <span class="token punctuation">...</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>cephfs 的动态存储的 pvc 的定义如下：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> drug
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> ReadWriteMany
  <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token key atrule">requests</span><span class="token punctuation">:</span>
      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 120Gi
  <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> csi<span class="token punctuation">-</span>cephfs<span class="token punctuation">-</span>sc<span class="token punctuation">-</span>delete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>经过排查，发现kubevirt 虚拟机中的 cloud-init 服务有个日志报错：</p>
<p><img src="https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614205248005.png" alt="image-20230614205248005"></p>
<p>于是 google 了一下，在 Red Hat 官网中找到了答案：</p>
<p><img src="https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614205357544.png" alt="image-20230614205357544"></p>
<p>链接地址为：<a href="https://access.redhat.com/solutions/5775351">https://access.redhat.com/solutions/5775351</a></p>
<p>也就是说, 当虚拟机中的 <code>/etc/default/locale</code> 中的LANG 不为 <code>en_US</code>， 则 cloud-init 无法修改磁盘分区大小。。。。</p>
<p>发现果然 <code>/etc/default/locale</code> 的 LANG 属性值不是 <code>en_US</code>, 而是：</p>
<p><img src="https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614210156279.png" alt="image-20230614210156279"></p>
<p>于是我把 <code>LANG</code> 属性改为 <code>en_US.UTF-8</code></p>
<p><img src="https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614210257832.png" alt="image-20230614210257832"></p>
<p>最后重启虚拟机，看了下 <code>cloud-init</code> 服务，发现已经正常了。 kubevirt 虚拟机磁盘也可以正常扩容了</p>
<p><img src="https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/image-20230614210503666.png" alt="image-20230614210503666"></p>
]]></content>
      <categories>
        <category>容器/虚拟化</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>kubevirt</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 精选面试题 (持续更新)</title>
    <url>/2020/01/01/java/interview/index/</url>
    <content><![CDATA[<h2 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h2><h3 id="为什么-HashMap-是线程不安全的？"><a href="#为什么-HashMap-是线程不安全的？" class="headerlink" title="为什么 HashMap 是线程不安全的？"></a>为什么 HashMap 是线程不安全的？</h3><p>在 jdk1.8 中，在多线程环境下，会发生数据覆盖的情况。</p>
<h4 id="jdk1-8-中-HashMap"><a href="#jdk1-8-中-HashMap" class="headerlink" title="jdk1.8 中 HashMap"></a>jdk1.8 中 HashMap</h4><p>在 jdk1.8 中对 HashMap 进行了优化，在发生 hash 碰撞，不再采用头插法方式，而是直接插入链表尾部，因此不会出现环形链表的情况，但是在多线程的情况下仍然不安全，这里我们看 jdk1.8 中 HashMap 的 put 操作源码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>
                   <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 如果没有hash碰撞则直接插入元素</span>
            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                e <span class="token operator">=</span> p<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>
                            <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// existing mapping for key</span>
                <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
                <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>
            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这是 jdk1.8 中 HashMap 中 put 操作的主函数， 注意第 6 行代码，如果没有 hash 碰撞则会直接插入元素。如果线程 A 和线程 B 同时进行 put 操作，刚好这两条不同的数据 hash 值一样，并且该位置数据为 null，所以这线程 A、B 都会进入第 6 行代码中。</p>
<p>假设一种情况，线程 A 进入后还未进行数据插入时挂起，而线程 B 正常执行，从而正常插入数据，然后线程 A 获取 CPU 时间片，此时线程 A 不用再进行 hash 判断了，问题出现：线程 A 会把线程 B 插入的数据给覆盖，发生线程不安全。</p>
<h3 id="单例模式一共有几种写法？"><a href="#单例模式一共有几种写法？" class="headerlink" title="单例模式一共有几种写法？"></a>单例模式一共有几种写法？</h3><p>大体可分为 4 类，下面分别介绍他们的基本形式、变种及特点。</p>
<h4 id="饱汉模式"><a href="#饱汉模式" class="headerlink" title="饱汉模式"></a>饱汉模式</h4><p>饱汉是变种最多的单例模式。我们从饱汉出发，通过其变种逐渐了解实现单例模式时需要关注的问题。</p>
<h5 id="基础的饱汉"><a href="#基础的饱汉" class="headerlink" title="基础的饱汉"></a>基础的饱汉</h5><p>饱汉，即已经吃饱，不着急再吃，饿的时候再吃。所以他就先不初始化单例，等第一次使用的时候再初始化，即“懒加载”。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 饱汉</span>
<span class="token comment">// UnThreadSafe</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton1</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton1</span> singleton <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Singleton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton1</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>饱汉模式的核心就是懒加载。好处是更启动速度快、节省资源，一直到实例被第一次访问，才需要初始化单例；小坏处是写起来麻烦，大坏处是线程不安全，if 语句存在竞态条件。</p>
<p>写起来麻烦不是大问题，可读性好啊。因此，单线程环境下，基础饱汉是笔者最喜欢的写法。但多线程环境下，基础饱汉就彻底不可用了。下面的几种变种都在试图解决基础饱汉线程不安全的问题。</p>
<h5 id="饱汉-变种-1"><a href="#饱汉-变种-1" class="headerlink" title="饱汉 - 变种 1"></a>饱汉 - 变种 1</h5><p>最粗暴的犯法是用 synchronized 关键字修饰 getInstance()方法，这样能达到绝对的线程安全。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 饱汉</span>
<span class="token comment">// ThreadSafe</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton1_1</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton1_1</span> singleton <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Singleton1_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token class-name">Singleton1_1</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton1_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>变种 1 的好处是写起来简单，且绝对线程安全；坏处是并发性能极差，事实上完全退化到了串行。单例只需要初始化一次，但就算初始化以后，synchronized 的锁也无法避开，从而 getInstance()完全变成了串行操作。性能不敏感的场景建议使用。</p>
<h5 id="饱汉-变种-2"><a href="#饱汉-变种-2" class="headerlink" title="饱汉 - 变种 2"></a>饱汉 - 变种 2</h5><p>变种 2 是“臭名昭著”的 DCL 1.0。</p>
<p>针对变种 1 中单例初始化后锁仍然无法避开的问题，变种 2 在变种 1 的外层又套了一层 check，加上 synchronized 内层的 check，即所谓“双重检查锁”（Double Check Lock，简称 DCL）。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 饱汉</span>
<span class="token comment">// UnThreadSafe</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton1_2</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton1_2</span> singleton <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">int</span> f1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 触发部分初始化问题</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> f2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Singleton1_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton1_2</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// may get half object</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton1_2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton1_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>变种 2 的核心是 DCL，看起来变种 2 似乎已经达到了理想的效果：懒加载+线程安全。可惜的是，正如注释中所说，DCL 仍然是线程不安全的，由于指令重排序，你可能会得到“半个对象”，即”部分初始化“问题。详细在看完变种 3 后，可参考下面这篇文章，这里不再赘述。</p>
<blockquote>
<p><a href="https://monkeysayhi.github.io/2016/11/29/volatile%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8%E3%80%81%E5%8E%9F%E7%90%86/">https://monkeysayhi.github.io/2016/11/29/volatile关键字的作用、原理/</a></p>
</blockquote>
<h5 id="饱汉-变种-3"><a href="#饱汉-变种-3" class="headerlink" title="饱汉 - 变种 3"></a>饱汉 - 变种 3</h5><p>变种 3 专门针对变种 2，可谓 DCL 2.0。</p>
<p>针对变种 3 的“半个对象”问题，变种 3 在 instance 上增加了 volatile 关键字，原理见上述参考。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 饱汉</span>
<span class="token comment">// ThreadSafe</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton1_3</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton1_3</span> singleton <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">int</span> f1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 触发部分初始化问题</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> f2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Singleton1_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton1_3</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton1_3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// must be a complete instance</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton1_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>多线程环境下，变种 3 更适用于性能敏感的场景。但后面我们将了解到，就算是线程安全的，还有一些办法能破坏单例。</p>
<p>当然，还有很多方式，能通过与 volatile 类似的方式防止部分初始化。读者可自行阅读内存屏障相关内容，但面试时不建议主动装逼。</p>
<h4 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h4><p>与饱汉相对，饿汉很饿，只想着尽早吃到。所以他就在最早的时机，即类加载时初始化单例，以后访问时直接返回即可。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 饿汉</span>
<span class="token comment">// ThreadSafe</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton2</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton2</span> singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton2</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>饿汉的好处是天生的线程安全（得益于类加载机制），写起来超级简单，使用时没有延迟；坏处是有可能造成资源浪费（如果类加载后就一直不使用单例的话）。</p>
<blockquote>
<p>值得注意的时，单线程环境下，饿汉与饱汉在性能上没什么差别；但多线程环境下，由于饱汉需要加锁，饿汉的性能反而更优。</p>
</blockquote>
<h4 id="Holder-模式"><a href="#Holder-模式" class="headerlink" title="Holder 模式"></a>Holder 模式</h4><p>我们既希望利用饿汉模式中静态变量的方便和线程安全；又希望通过懒加载规避资源浪费。Holder 模式满足了这两点要求：核心仍然是静态变量，足够方便和线程安全；通过静态的 Holder 类持有真正实例，间接实现了懒加载。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Holder模式</span>
<span class="token comment">// ThreadSafe</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton3</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton3</span> singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">private</span> <span class="token class-name">Singleton3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/**
  * 勘误：多写了个synchronized。。
  public synchronized static Singleton3 getInstance() &#123;
    return SingletonHolder.singleton;
  &#125;
  */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton3</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span>singleton<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>相对于饿汉模式，Holder 模式仅增加了一个静态内部类的成本，与饱汉的变种 3 效果相当（略优），都是比较受欢迎的实现方式。同样建议考虑。</p>
<h4 id="枚举模式"><a href="#枚举模式" class="headerlink" title="枚举模式"></a>枚举模式</h4><p>用枚举实现单例模式，相当好用，但可读性是不存在的。</p>
<h5 id="基础的枚举"><a href="#基础的枚举" class="headerlink" title="基础的枚举"></a>基础的枚举</h5><p>将枚举的静态成员变量作为单例的实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 枚举</span>
<span class="token comment">// ThreadSafe</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton4</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">SINGLETON</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>代码量比饿汉模式更少。但用户只能直接访问实例 Singleton4.SINGLETON——事实上，这样的访问方式作为单例使用也是恰当的，只是牺牲了静态工厂方法的优点，如无法实现懒加载。</p>
<h5 id="丑陋但好用的语法糖"><a href="#丑陋但好用的语法糖" class="headerlink" title="丑陋但好用的语法糖"></a>丑陋但好用的语法糖</h5><p>Java 的枚举是一个“丑陋但好用的语法糖”。</p>
<h5 id="枚举型单例模式的本质"><a href="#枚举型单例模式的本质" class="headerlink" title="枚举型单例模式的本质"></a>枚举型单例模式的本质</h5><p>通过反编译打开语法糖，就看到了枚举类型的本质，简化如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 枚举</span>
<span class="token comment">// ThreadSafe</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton4</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Singleton4</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton4</span> <span class="token constant">SINGLETON</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>本质上和饿汉模式相同，区别仅在于公有的静态成员变量。</p>
<h5 id="用枚举实现一些-trick"><a href="#用枚举实现一些-trick" class="headerlink" title="用枚举实现一些 trick"></a>用枚举实现一些 trick</h5><blockquote>
<p>这一部分与单例没什么关系，可以跳过。如果选择阅读也请认清这样的事实：虽然枚举相当灵活，但如何恰当的使用枚举有一定难度。一个足够简单的典型例子是 TimeUnit 类，建议有时间耐心阅读。</p>
</blockquote>
<p>上面已经看到，枚举型单例的本质仍然是一个普通的类。实际上，我们可以在枚举型型单例上增加任何普通类可以完成的功能。要点在于枚举实例的初始化，可以理解为实例化了一个匿名内部类。为了更明显，我们在 Singleton4_1 中定义一个普通的私有成员变量，一个普通的公有成员方法，和一个公有的抽象成员方法，如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 枚举</span>
<span class="token comment">// ThreadSafe</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton4_1</span> <span class="token punctuation">&#123;</span>
  <span class="token function">SINGLETON</span><span class="token punctuation">(</span><span class="token string">"enum is the easiest singleton pattern, but not the most readable"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAbsMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"enum is ugly, but so flexible to make lots of trick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> comment <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token class-name">Singleton4_1</span><span class="token punctuation">(</span><span class="token class-name">String</span> comment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>comment <span class="token operator">=</span> comment<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"comment="</span> <span class="token operator">+</span> comment<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAbsMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton4_1</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token constant">SINGLETON</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样，枚举类 Singleton4_1 中的每一个枚举实例不仅继承了父类 Singleton4_1 的成员方法 print()，还必须实现父类 Singleton4_1 的抽象成员方法 testAbsMethod()。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>上面的分析都忽略了反射和序列化的问题。通过反射或序列化，我们仍然能够访问到私有构造器，创建新的实例破坏单例模式。此时，只有枚举模式能天然防范这一问题。反射和序列化笔者还不太了解，但基本原理并不难，可以在其他模式上手动实现。</p>
<p>下面继续忽略反射和序列化的问题，做个总结回味一下：</p>
<p><img src="/img/posts/java/interview/5.png" alt="图片"></p>
<h3 id="你能说说进程与线程的区别吗"><a href="#你能说说进程与线程的区别吗" class="headerlink" title="你能说说进程与线程的区别吗"></a>你能说说进程与线程的区别吗</h3><h4 id="两者的定义"><a href="#两者的定义" class="headerlink" title="两者的定义"></a>两者的定义</h4><p>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。</p>
<p>线程是进程的一个实体，是 CPU 调度和分派的基本单位，它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈)，但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p>
<h4 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h4><ol>
<li>进程是资源分配最小单位，线程是程序执行的最小单位；</li>
<li>进程有自己独立的地址空间，每启动一个进程，系统都会为其分配地址空间，建立数据表来维护代码段、堆栈段和数据段，线程没有独立的地址空间，它使用相同的地址空间共享数据；</li>
<li>CPU 切换一个线程比切换进程花费小；</li>
<li>创建一个线程比进程开销小；</li>
<li>线程占用的资源要⽐进程少很多。</li>
<li>线程之间通信更方便，同一个进程下，线程共享全局变量，静态变量等数据，进程之间的通信需要以通信的方式（IPC）进行；（但多线程程序处理好同步与互斥是个难点）</li>
<li>多进程程序更安全，生命力更强，一个进程死掉不会对另一个进程造成影响（源于有独立的地址空间），多线程程序更不易维护，一个线程死掉，整个进程就死掉了（因为共享地址空间）；</li>
<li>进程对资源保护要求高，开销大，效率相对较低，线程资源保护要求不高，但开销小，效率高，可频繁切换；</li>
</ol>
<h3 id="创建线程有几种不同的方式？你喜欢哪一种？为什么？"><a href="#创建线程有几种不同的方式？你喜欢哪一种？为什么？" class="headerlink" title="创建线程有几种不同的方式？你喜欢哪一种？为什么？"></a>创建线程有几种不同的方式？你喜欢哪一种？为什么？</h3><p>有三种方式可以用来创建线程：</p>
<ul>
<li>继承 Thread 类</li>
<li>实现 Runnable 接口</li>
<li>应用程序可以使用 Executor 框架来创建线程池</li>
</ul>
<p>实现 Runnable 接口这种方式更受欢迎，因为这不需要继承 Thread 类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而 Java 不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。</p>
<h3 id="概括的解释下线程的几种可用状态。"><a href="#概括的解释下线程的几种可用状态。" class="headerlink" title="概括的解释下线程的几种可用状态。"></a>概括的解释下线程的几种可用状态。</h3><p><strong>新建( new )：</strong>新创建了一个线程对象；</p>
<p><strong>可运行( runnable )：</strong>线程对象创建后，其他线程(比如 main 线程）调用了该对象的 start ()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取 CPU 的使用权；</p>
<p><strong>运行( running )：</strong>可运行状态( runnable )的线程获得了 CPU 时间片（ timeslice ） ，执行程序代码；</p>
<p><strong>阻塞( block )：</strong>阻塞状态是指线程因为某种原因放弃了 CPU 使用权，也即让出了 CPU timeslice ，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 cpu timeslice 转到运行( running )状态。</p>
<p>阻塞的情况分三种：</p>
<ol>
<li>等待阻塞：运行( running )的线程执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中。</li>
<li>同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中。</li>
<li>其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I &#x2F; O 请求时， JVM 会把该线程置为阻塞状态。当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I &#x2F; O 处理完毕时，线程重新转入可运行( runnable )状态。</li>
</ol>
<p><strong>死亡( dead )：</strong>线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生。</p>
<h3 id="同步方法和同步代码块的区别是什么？"><a href="#同步方法和同步代码块的区别是什么？" class="headerlink" title="同步方法和同步代码块的区别是什么？"></a>同步方法和同步代码块的区别是什么？</h3><p><strong>区别：</strong></p>
<ul>
<li>同步方法默认用 this 或者当前类 class 对象作为锁；</li>
<li>同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法；</li>
</ul>
<h3 id="在监视器-Monitor-内部，是如何做线程同步的？程序应该做哪种级别的同步？"><a href="#在监视器-Monitor-内部，是如何做线程同步的？程序应该做哪种级别的同步？" class="headerlink" title="在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？"></a>在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？</h3><p>监视器和锁在 Java 虚拟机中是一块使用的。监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块。每一个监视器都和一个对象引用相关联。线程在获取锁之前不允许执行同步代码。</p>
<p>java 还提供了显式监视器( Lock )和隐式监视器( synchronized )两种锁方案。</p>
<h3 id="什么是死锁-deadlock-？"><a href="#什么是死锁-deadlock-？" class="headerlink" title="什么是死锁(deadlock)？"></a>什么是死锁(deadlock)？</h3><p>两个线程或两个以上线程都在等待对方执行完毕才能继续往下执行的时候就发生了死锁。结果就是这些线程都陷入了无限的等待中。</p>
<h3 id="如何确保-N-个线程可以访问-N-个资源同时又不导致死锁？"><a href="#如何确保-N-个线程可以访问-N-个资源同时又不导致死锁？" class="headerlink" title="如何确保 N 个线程可以访问 N 个资源同时又不导致死锁？"></a>如何确保 N 个线程可以访问 N 个资源同时又不导致死锁？</h3><p>多线程产生死锁的四个必要条件：</p>
<ul>
<li><strong>互斥条件：</strong>一个资源每次只能被一个进程使用。</li>
<li><strong>保持和请求条件：</strong>一个进程因请求资源而阻塞时，对已获得资源保持不放。</li>
<li><strong>不可剥夺性：</strong>进程已获得资源，在未使用完成前，不能被剥夺。</li>
<li><strong>循环等待条件（闭环）：</strong>若干进程之间形成一种头尾相接的循环等待资源关系。</li>
</ul>
<p>只要破坏其中任意一个条件，就可以避免死锁</p>
<p>一种非常简单的避免死锁的方式就是：<strong>指定获取锁的顺序，并强制线程按照指定的顺序获取锁。</strong>因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。</p>
<h3 id="Java-序列化与反序列化三连问：是什么？为什么要？如何做？"><a href="#Java-序列化与反序列化三连问：是什么？为什么要？如何做？" class="headerlink" title="Java 序列化与反序列化三连问：是什么？为什么要？如何做？"></a>Java 序列化与反序列化三连问：是什么？为什么要？如何做？</h3><h4 id="Java-序列化与反序列化是什么？"><a href="#Java-序列化与反序列化是什么？" class="headerlink" title="Java 序列化与反序列化是什么？"></a>Java 序列化与反序列化是什么？</h4><p>Java 序列化是指把 Java 对象转换为字节序列的过程，而 Java 反序列化是指把字节序列恢复为 Java 对象的过程：</p>
<ul>
<li><strong>序列化</strong>：对象序列化的最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性。序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。核心作用是对象状态的保存与重建。</li>
<li><strong>反序列化</strong>：客户端从文件中或网络上获得序列化后的对象字节流，根据字节流中所保存的对象状态及描述信息，通过反序列化重建对象。</li>
</ul>
<h4 id="为什么需要序列化与反序列化？"><a href="#为什么需要序列化与反序列化？" class="headerlink" title="为什么需要序列化与反序列化？"></a>为什么需要序列化与反序列化？</h4><p>为什么要序列化，那就是说一下序列化的好处喽，序列化有什么什么优点，所以我们要序列化。</p>
<p><strong>一：对象序列化可以实现分布式对象。</strong></p>
<p>主要应用例如：RMI(即远程调用 Remote Method Invocation)要利用对象序列化运行远程主机上的服务，就像在本地机上运行对象时一样。</p>
<p><strong>二：java 对象序列化不仅保留一个对象的数据，而且递归保存对象引用的每个对象的数据。</strong></p>
<p>可以将整个对象层次写入字节流中，可以保存在文件中或在网络连接上传递。利用对象序列化可以进行对象的”深复制”，即复制对象本身及引用的对象本身。序列化一个对象可能得到整个对象序列。</p>
<p><strong>三：序列化可以将内存中的类写入文件或数据库中。</strong></p>
<p>比如：将某个类序列化后存为文件，下次读取时只需将文件中的数据反序列化就可以将原先的类还原到内存中。也可以将类序列化为流数据进行传输。</p>
<p>总的来说就是将一个已经实例化的类转成文件存储，下次需要实例化的时候只要反序列化即可将类实例化到内存中并保留序列化时类中的所有变量和状态。</p>
<p><strong>四：对象、文件、数据，有许多不同的格式，很难统一传输和保存。</strong></p>
<p>序列化以后就都是字节流了，无论原来是什么东西，都能变成一样的东西，就可以进行通用的格式传输或保存，传输结束以后，要再次使用，就进行反序列化还原，这样对象还是对象，文件还是文件。</p>
<h4 id="如何实现-Java-序列化与反序列化"><a href="#如何实现-Java-序列化与反序列化" class="headerlink" title="如何实现 Java 序列化与反序列化?"></a>如何实现 Java 序列化与反序列化?</h4><p>首先我们要把准备要序列化类，实现 Serializabel 接口</p>
<p>例如：我们要 Person 类里的 name 和 age 都序列化</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span> <span class="token comment">//本类可以序列化</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"姓名："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"，年龄"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后：我们将 name 和 age 序列化（也就是把这 2 个对象转为二进制，理解为“打碎”）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>lxh<span class="token punctuation">.</span></span><span class="token class-name">SerDemo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectOutputStreamDemo</span> <span class="token punctuation">&#123;</span> <span class="token comment">//序列化</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//序列化后生成指定文件路径</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:"</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"person.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//装饰流（流）</span>
        oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//实例化类</span>
        <span class="token class-name">Person</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把类对象序列化</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>《Java 对象的序列化（Serialization）和反序列化详解》<br><a href="https://blog.csdn.net/yaomingyang/article/details/79321939">https://blog.csdn.net/yaomingyang/article/details/79321939</a></p>
</blockquote>
<blockquote>
<p>《Java 序列化的高级认识》<br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-serial/">https://www.ibm.com/developerworks/cn/java/j-lo-serial/</a></p>
</blockquote>
<h3 id="什么情况用ArrayList-or-LinkedList呢"><a href="#什么情况用ArrayList-or-LinkedList呢" class="headerlink" title="什么情况用ArrayList or LinkedList呢?"></a>什么情况用ArrayList or LinkedList呢?</h3><p>列表（list）是元素的有序集合，也称为序列。它提供了基于元素位置的操作，有助于快速访问、添加和删除列表中特定索引位置的元素。List 接口实现了 <code>Collection </code>和 <code>Iterable </code>作为父接口。它允许存储重复值和空值，支持通过索引访问元素。</p>
<h4 id="ArrayList-和-LinkedList-的不同之处"><a href="#ArrayList-和-LinkedList-的不同之处" class="headerlink" title="ArrayList 和 LinkedList 的不同之处"></a>ArrayList 和 LinkedList 的不同之处</h4><h5 id="增加元素到列表尾端"><a href="#增加元素到列表尾端" class="headerlink" title="增加元素到列表尾端"></a>增加元素到列表尾端</h5><p>在 <code>ArrayList</code> 中增加元素到队列尾端的代码如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token function">ensureCapacity</span><span class="token punctuation">(</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//确保内部数组有足够的空间</span>
   elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span><span class="token comment">//将元素加入到数组的末尾，完成添加</span>
   <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>ArrayList</code>中 <code>add()</code> 方法的性能决定于<code>ensureCapacity()</code>方法。<code>ensureCapacity()</code>的实现如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> vod <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  modCount<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> oldCapacity<span class="token operator">=</span>elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>minCapacity<span class="token operator">></span>oldCapacity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//如果数组容量不足，进行扩容</span>
      <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldData<span class="token operator">=</span>elementData<span class="token punctuation">;</span>
      <span class="token keyword">int</span> newCapacity<span class="token operator">=</span><span class="token punctuation">(</span>oldCapacity<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//扩容到原始容量的1.5倍</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>newCapacitty<span class="token operator">&lt;</span>minCapacity<span class="token punctuation">)</span>   <span class="token comment">//如果新容量小于最小需要的容量，则使用最小</span>
                                                    <span class="token comment">//需要的容量大小</span>
         newCapacity<span class="token operator">=</span>minCapacity <span class="token punctuation">;</span>  <span class="token comment">//进行扩容的数组复制</span>
         elementData<span class="token operator">=</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyof</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span>newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，只要<code>ArrayList</code>的当前容量足够大，<code>a  dd()</code>操作的效率非常高的。只有当<code>ArrayList</code>对容量的需求超出当前数组大小时，才需要进行扩容。扩容的过程中，会进行大量的数组复制操作。而数组复制时，最终将调用<code>System.arraycopy()</code>方法，因此<code>add()</code>操作的效率还是相当高的。</p>
<p><code>LinkedList</code> 的<code>add()</code>操作实现如下，它也将任意元素增加到队列的尾端：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token function">addBefore</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将元素增加到header的前面</span>
   <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中<code>addBefore()</code>的方法实现如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">addBefore</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> entry<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
     <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> newEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>entry<span class="token punctuation">,</span>entry<span class="token punctuation">.</span>previous<span class="token punctuation">)</span><span class="token punctuation">;</span>
     newEntry<span class="token punctuation">.</span>provious<span class="token punctuation">.</span>next<span class="token operator">=</span>newEntry<span class="token punctuation">;</span>
     newEntry<span class="token punctuation">.</span>next<span class="token punctuation">.</span>previous<span class="token operator">=</span>newEntry<span class="token punctuation">;</span>
     size<span class="token operator">++</span><span class="token punctuation">;</span>
     modCount<span class="token operator">++</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> newEntry<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可见，<strong>LinkeList由于使用了链表的结构，因此不需要维护容量的大小。从这点上说，它比ArrayList有一定的性能优势，然而，每次的元素增加都需要新建一个Entry对象，并进行更多的赋值操作。在频繁的系统调用中，对性能会产生一定的影响。</strong></p>
<h5 id="增加元素到列表任意位置"><a href="#增加元素到列表任意位置" class="headerlink" title="增加元素到列表任意位置"></a>增加元素到列表任意位置</h5><p>除了提供元素到List的尾端，List接口还提供了在任意位置插入元素的方法：<code>void add(int index,E element);</code></p>
<p><strong>由于实现的不同，ArrayList和LinkedList在这个方法上存在一定的性能差异，由于ArrayList是基于数组实现的，而数组是一块连续的内存空间，如果在数组的任意位置插入元素，必然导致在该位置后的所有元素需要重新排列，因此，其效率相对会比较低。</strong></p>
<p>以下代码是ArrayList中的实现：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">></span>size<span class="token operator">||</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span>
        <span class="token string">"Index:"</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token string">",size: "</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token function">ensureCapacity</span><span class="token punctuation">(</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span>index<span class="token punctuation">,</span>elementData<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>size<span class="token operator">-</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
         elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>
         size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到每次插入操作，都会进行一次数组复制。而这个操作在增加元素到List尾端的时候是不存在的，大量的数组重组操作会导致系统性能低下。并且插入元素在List中的位置越是靠前，数组重组的开销也越大。</p>
<p>而LinkedList此时显示了优势：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token function">addBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span><span class="token punctuation">(</span>index<span class="token operator">==</span>size<span class="token operator">?</span>header<span class="token operator">:</span><span class="token function">entry</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>可见，<strong>对LinkedList来说，在List的尾端插入数据与在任意位置插入数据是一样的，不会因为插入的位置靠前而导致插入的方法性能降低。</strong></p>
<h5 id="删除任意位置元素"><a href="#删除任意位置元素" class="headerlink" title="删除任意位置元素"></a>删除任意位置元素</h5><p>对于元素的删除，List接口提供了在任意位置删除元素的方法：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>对ArrayList来说，remove()方法和add()方法是雷同的。在任意位置移除元素后，都要进行数组的重组。ArrayList的实现如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token class-name">RangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
   modCount<span class="token operator">++</span><span class="token punctuation">;</span>
   <span class="token class-name">E</span> oldValue<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> numMoved<span class="token operator">=</span>size<span class="token operator">-</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>numMoved<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>elementData<span class="token punctuation">,</span>index<span class="token punctuation">,</span>numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>
     elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，<strong>在ArrayList的每一次有效的元素删除操作后，都要进行数组的重组。并且删除的位置越靠前，数组重组时的开销越大。</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token function">entry</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         
<span class="token punctuation">&#125;</span>
<span class="token keyword">private</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> index<span class="token operator">>=</span>size<span class="token punctuation">)</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutBoundsException</span><span class="token punctuation">(</span><span class="token string">"Index:"</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token string">",size:"</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> e<span class="token operator">=</span> header<span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token punctuation">(</span>size<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//要删除的元素位于前半段</span>
         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
             e<span class="token operator">=</span>e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>size<span class="token punctuation">;</span>i<span class="token operator">></span>index<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>
             e<span class="token operator">=</span>e<span class="token punctuation">.</span>previous<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
         <span class="token keyword">return</span> e<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在LinkedList的实现中，首先要通过循环找到要删除的元素。如果要删除的位置处于List的前半段，则从前往后找；若其位置处于后半段，则从后往前找。因此无论要删除较为靠前或者靠后的元素都是非常高效的；但要移除List中间的元素却几乎要遍历完半个List，在List拥有大量元素的情况下，效率很低。</p>
<h5 id="容量参数"><a href="#容量参数" class="headerlink" title="容量参数"></a>容量参数</h5><p>容量参数是ArrayList和Vector等基于数组的List的特有性能参数。它表示初始化的数组大小。当ArrayList所存储的元素数量超过其已有大小时。它便会进行扩容，数组的扩容会导致整个数组进行一次内存复制。因此合理的数组大小有助于减少数组扩容的次数，从而提高系统性能。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token class-name">ArrayList</span> <span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>initialCapacity<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity:"</span><span class="token operator">+</span>initialCapacity<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>ArrayList提供了一个可以制定初始数组大小的构造函数：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>现以构造一个拥有100万元素的List为例，当使用默认初始化大小时，其消耗的相对时间为125ms左右，当直接制定数组大小为100万时，构造相同的ArrayList仅相对耗时16ms。</p>
<h5 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h5><p>遍历列表操作是最常用的列表操作之一，在JDK1.5之后，至少有3中常用的列表遍历方式：</p>
<blockquote>
<ul>
<li>forEach操作</li>
<li>迭代器</li>
<li>for循环。</li>
</ul>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> tmp<span class="token punctuation">;</span>
<span class="token keyword">long</span> start<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//ForEach </span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    tmp<span class="token operator">=</span>s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"foreach spend:"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> it<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    
   tmp<span class="token operator">=</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Iterator spend;"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
start<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> size<span class="token operator">=</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                     
    tmp<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"for spend;"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>构造一个拥有100万数据的ArrayList和等价的LinkedList，使用以上代码进行测试，测试结果：</p>
<p><img src="https://jason-dong-blog-1259058668.cos.ap-nanjing.myqcloud.com/img/11.png" alt="图片"></p>
<p>可以看到，<strong>最简便的ForEach循环并没有很好的性能表现，综合性能不如普通的迭代器，而是用for循环通过随机访问遍历列表时，ArrayList表项很好，但是LinkedList的表现却无法让人接受，甚至没有办法等待程序的结束。这是因为对LinkedList进行随机访问时，总会进行一次列表的遍历操作。性能非常差，应避免使用。</strong></p>
<h2 id="Java-进阶"><a href="#Java-进阶" class="headerlink" title="Java 进阶"></a>Java 进阶</h2><h3 id="你能说说-Spring-框架中-Bean-的生命周期吗？"><a href="#你能说说-Spring-框架中-Bean-的生命周期吗？" class="headerlink" title="你能说说 Spring 框架中 Bean 的生命周期吗？"></a>你能说说 Spring 框架中 Bean 的生命周期吗？</h3><ol>
<li><p>实例化一个 <code>Bean</code> , 也就是我们常说的 <code>new</code>；</p>
</li>
<li><p>按照 <code>Spring</code> 上下文对实例化的 <code>Bean</code> 进行配置－－也就是 <code>IOC</code> 注入；</p>
</li>
<li><p>如果这个 <code>Bean</code> 已经实现了 <code>BeanNameAware</code> 接口，会调用它实现的 <code>setBeanName(String)</code>方法，此处传递的就是 <code>Spring</code> 配置文件中 <code>Bean</code> 的 <code>id</code> 值</p>
</li>
<li><p>如果这个 <code>Bean</code> 已经实现了 <code>BeanFactoryAware</code> 接口，会调用它实现的 <code>setBeanFactory(setBeanFactory(BeanFactory)</code>传递的是 Spring 工厂自身（可以用这个方式来获取其它 Bean，只需在 Spring 配置文件中配置一个普通的 Bean 就可以）；</p>
</li>
<li><p>如果这个 <code>Bean</code> 已经实现了 <code>ApplicationContextAware</code> 接口，会调用 <code>setApplicationContext(ApplicationContext)</code>方法，传入 Spring 上下文（同样这个方式也可以实现步骤 4 的内容，但比 4 更好，因为 <code>ApplicationContext</code> 是 <code>BeanFactory</code> 的子接口，有更多的实现方法）；</p>
</li>
<li><p>如果这个 <code>Bean</code> 关联了 <code>BeanPostProcessor</code> 接口，将会调用 <code>postProcessBeforeInitialization(Object obj, String s)</code>方法，<code>BeanPostProcessor</code> 经常被用作是 <code>Bean</code> 内容的更改，并且由于这个是在 <code>Bean</code> 初始化结束时调用那个的方法，也可以被应用于内存或缓存技术；</p>
</li>
<li><p>如果 <code>Bean</code> 在 <code>Spring</code> 配置文件中配置了 <code>init-method</code> 属性会自动调用其配置的初始化方法。</p>
</li>
<li><p>如果这个 <code>Bean</code> 关联了 <code>BeanPostProcessor</code> 接口，将会调用 <code>postProcessAfterInitialization(Object obj, String s)</code>方法、；</p>
<blockquote>
<p>注：以上工作完成以后就可以应用这个 <code>Bean</code> 了，那这个 <code>Bean</code> 是一个 <code>Singleton</code> 的，所以一般情况下我们调用同一个 <code>id</code> 的 <code>Bean</code> 会是在内容地址相同的实例，当然在 <code>Spring</code> 配置文件中也可以配置非 <code>Singleton</code>，这里我们不做赘述。</p>
</blockquote>
</li>
<li><p>当 <code>Bean</code> 不再需要时，会经过清理阶段，如果 <code>Bean</code> 实现了 <code>DisposableBean</code> 这个接口，会调用那个其实现的 <code>destroy()</code>方法；</p>
</li>
<li><p>最后，如果这个 <code>Bean</code> 的 <code>Spring</code> 配置中配置了 <code>destroy-method</code> 属性，会自动调用其配置的销毁方法。</p>
</li>
</ol>
<h3 id="Spring，SpringMVC，SpringBoot，SpringCloud-有什么区别和联系？"><a href="#Spring，SpringMVC，SpringBoot，SpringCloud-有什么区别和联系？" class="headerlink" title="Spring，SpringMVC，SpringBoot，SpringCloud 有什么区别和联系？"></a>Spring，SpringMVC，SpringBoot，SpringCloud 有什么区别和联系？</h3><h4 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h4><ul>
<li><code>Spring</code> 是一个轻量级的控制反转(<code>IoC</code>)和面向切面(<code>AOP</code>)的容器框架。Spring 使你能够编写更干净、更可管理、并且更易于测试的代码。</li>
<li><code>Spring MVC</code> 是 Spring 的一个模块，一个 web 框架。通过 <code>Dispatcher Servlet</code>, <code>ModelAndView</code> 和 <code>View Resolver</code>，开发 web 应用变得很容易。主要针对的是网站应用程序或者服务开发——<code>URL 路由</code>、<code>Session</code>、<code>模板引擎</code>、<code>静态 Web 资源</code>等等。</li>
<li><code>Spring</code> 配置复杂，繁琐，所以推出了 <code>Spring boot</code>，约定优于配置，简化了 spring 的配置流程。</li>
<li><code>Spring Cloud</code> 构建于 <code>Spring Boot</code> 之上，是一个关注全局的服务治理框架。</li>
</ul>
<h4 id="Spring-VS-SpringMVC"><a href="#Spring-VS-SpringMVC" class="headerlink" title="Spring VS SpringMVC"></a>Spring VS SpringMVC</h4><ul>
<li><code>Spring</code> 是一个一站式的轻量级的 java 开发框架，核心是<code>控制反转（IOC）</code>和<code>面向切面（AOP）</code>，针对于开发的 WEB 层 (<code>springMvc</code>)、业务层(<code>Ioc</code>)、持久层(<code>jdbcTemplate</code>)等都提供了多种配置解决方案；</li>
<li><code>SpringMVC</code> 是 <code>Spring</code> 基础之上的一个 <code>MVC</code> 框架，主要处理 <code>web</code> 开发的路径映射和视图渲染，属于 <code>Spring</code> 框架中 <code>WEB</code> 层开发的一部分；</li>
</ul>
<h4 id="SpringMVC-VS-SpringBoot"><a href="#SpringMVC-VS-SpringBoot" class="headerlink" title="SpringMVC VS SpringBoot"></a>SpringMVC VS SpringBoot</h4><ul>
<li><code>SpringMVC</code>属于一个企业 WEB 开发的 MVC 框架，涵盖面包括前端<strong>视图开发</strong>、<strong>文件配置</strong>、<strong>后台接口逻辑开发</strong>等，XML、config 等配置相对比较繁琐复杂；</li>
<li><code>SpringBoot</code>框架相对于 SpringMVC 框架来说，更<strong>专注于开发微服务后台接口</strong>，不开发前端视图；</li>
</ul>
<h4 id="SpringBoot-VS-SpringCloud"><a href="#SpringBoot-VS-SpringCloud" class="headerlink" title="SpringBoot VS SpringCloud"></a>SpringBoot VS SpringCloud</h4><ul>
<li><code>SpringBoot</code> 使用了<strong>默认大于配置</strong>的理念，集成了快速开发的 <code>Spring</code> 多个插件，同时<strong>自动过滤不需要配置的多余的插件</strong>，<strong>简化了项目的开发配置流程</strong>，一定程度上<strong>取消 xml 配置</strong>，是一套<strong>快速配置开发的脚手架</strong>，能快速开发<strong>单个微服务</strong>；</li>
<li><code>SpringCloud</code> 大部分的功能插件都是基于 <code>SpringBoot</code> 去实现的，<code>SpringCloud</code> 关注于<strong>全局的微服务整合和管理</strong>，将多个 <code>SpringBoot</code> 单体微服务进行整合以及管理；<code>SpringCloud</code> 依赖于 <code>SpringBoot</code> 开发，而 - <code>SpringBoot</code> 可以独立开发；</li>
</ul>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul>
<li>Spring 是核心，提供了基础功能；</li>
<li>Spring MVC 是基于 Spring 的一个 MVC 框架 ；</li>
<li>Spring Boot 是为简化 Spring 配置的快速开发整合包；</li>
<li>Spring Cloud 是构建在 Spring Boot 之上的服务治理框架。</li>
</ul>
<h3 id="如何保证消息的顺序性？"><a href="#如何保证消息的顺序性？" class="headerlink" title="如何保证消息的顺序性？"></a>如何保证消息的顺序性？</h3><h4 id="面试官心理分析"><a href="#面试官心理分析" class="headerlink" title="面试官心理分析"></a>面试官心理分析</h4><p>其实这个也是用 MQ 的时候必问的话题，第一看看你了不了解顺序这个事儿？第二看看你有没有办法保证消息是有顺序的？这是生产系统中常见的问题。</p>
<h4 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h4><p>我举个例子，我们以前做过一个 mysql <code>binlog</code> 同步的系统，压力还是非常大的，日同步数据要达到上亿，就是说数据从一个 mysql 库原封不动地同步到另一个 mysql 库里面去（mysql -&gt; mysql）。常见的一点在于说比如大数据 team，就需要同步一个 mysql 库过来，对公司的业务系统的数据做各种复杂的操作。</p>
<p>你在 mysql 里增删改一条数据，对应出来了增删改 3 条 <code>binlog</code> 日志，接着这三条 <code>binlog</code> 发送到 MQ 里面，再消费出来依次执行，起码得保证人家是按照顺序来的吧？不然本来是：增加、修改、删除；你楞是换了顺序给执行成删除、修改、增加，不全错了么。</p>
<p>本来这个数据同步过来，应该最后这个数据被删除了；结果你搞错了这个顺序，最后这个数据保留下来了，数据同步就出错了。</p>
<p>先看看顺序会错乱的俩场景：</p>
<ul>
<li><strong>RabbitMQ</strong>：一个 queue，多个 consumer。比如，生产者向 RabbitMQ 里发送了三条数据，顺序依次是 data1&#x2F;data2&#x2F;data3，压入的是 RabbitMQ 的一个内存队列。有三个消费者分别从 MQ 中消费这三条数据中的一条，结果消费者 2 先执行完操作，把 data2 存入数据库，然后是 data1&#x2F;data3。这不明显乱了。</li>
</ul>
<p><img src="/img/posts/java/interview/1.png" alt="图片"></p>
<ul>
<li><p><strong>Kafka</strong>：比如说我们建了一个 topic，有三个 partition。生产者在写的时候，其实可以指定一个 key，比如说我们指定了某个订单 id 作为 key，那么这个订单相关的数据，一定会被分发到同一个 partition 中去，而且这个 partition 中的数据一定是有顺序的。</p>
<p>消费者从 partition 中取出来数据的时候，也一定是有顺序的。到这里，顺序还是 ok 的，没有错乱。接着，我们在消费者里可能会搞<strong>多个线程来并发处理消息</strong>。因为如果消费者是单线程消费处理，而处理比较耗时的话，比如处理一条消息耗时几十 ms，那么 1 秒钟只能处理几十条消息，这吞吐量太低了。而多个线程并发跑的话，顺序可能就乱掉了。</p>
</li>
</ul>
<p><img src="/img/posts/java/interview/2.png" alt="图片"></p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点；或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。</p>
<p><img src="/img/posts/java/interview/3.png" alt="图片"></p>
<h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4><ul>
<li>一个 topic，一个 partition，一个 consumer，内部单线程消费，单线程吞吐量太低，一般不会用这个。</li>
<li>写 N 个内存 queue，具有相同 key 的数据都到同一个内存 queue；然后对于 N 个线程，每个线程分别消费一个内存 queue 即可，这样就能保证顺序性。</li>
</ul>
<p><img src="/img/posts/java/interview/4.png" alt="图片"></p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="Redis-是如何实现分布式锁的？"><a href="#Redis-是如何实现分布式锁的？" class="headerlink" title="Redis 是如何实现分布式锁的？"></a>Redis 是如何实现分布式锁的？</h3><p>分布式锁常见的三种实现方式：</p>
<ol>
<li>数据库乐观锁；</li>
<li>基于 Redis 的分布式锁；</li>
<li>基于 ZooKeeper 的分布式锁。</li>
</ol>
<p>本面试考点是，你对 Redis 使用熟悉吗？Redis 中是如何实现分布式锁的。</p>
<h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><p>Redis 要实现分布式锁，以下条件应该得到满足</p>
<h4 id="互斥性"><a href="#互斥性" class="headerlink" title="互斥性"></a>互斥性</h4><ul>
<li>在任意时刻，只有一个客户端能持有锁。</li>
</ul>
<h4 id="不能死锁"><a href="#不能死锁" class="headerlink" title="不能死锁"></a>不能死锁</h4><ul>
<li>客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li>
</ul>
<h4 id="容错性"><a href="#容错性" class="headerlink" title="容错性"></a>容错性</h4><ul>
<li>只要大部分的 Redis 节点正常运行，客户端就可以加锁和解锁。</li>
</ul>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>可以直接通过 <code>set key value px milliseconds nx</code> 命令实现加锁， 通过 Lua 脚本实现解锁。</p>
<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token operator">//</span>获取锁（unique_value可以是UUID等）
SET resource_name unique_value NX PX  <span class="token number">30000</span>

<span class="token operator">//</span>释放锁（lua脚本中，一定要比较value，防止误解锁）
<span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">then</span>
    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">else</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h4><ul>
<li>set 命令要用 <code>set key value px milliseconds nx</code>，替代 <code>setnx + expire</code> 需要分两次执行命令的方式，保证了原子性，</li>
<li>value 要具有唯一性，可以使用<code>UUID.randomUUID().toString()</code>方法生成，用来标识这把锁是属于哪个请求加的，在解锁的时候就可以有依据；</li>
<li>释放锁时要验证 value 值，防止误解锁；</li>
<li>通过 Lua 脚本来避免 Check And Set 模型的并发问题，因为在释放锁的时候因为涉及到多个 Redis 操作 （利用了 eval 命令执行 Lua 脚本的原子性）；</li>
</ul>
<h4 id="加锁代码分析"><a href="#加锁代码分析" class="headerlink" title="加锁代码分析"></a>加锁代码分析</h4><p>首先，set()加入了 NX 参数，可以保证如果已有 key 存在，则函数不会调用成功，也就是只有一个客户端能持有锁，满足互斥性。其次，由于我们对锁设置了过期时间，即使锁的持有者后续发生崩溃而没有解锁，锁也会因为到了过期时间而自动解锁（即 key 被删除），不会发生死锁。最后，因为我们将 value 赋值为 requestId，用来标识这把锁是属于哪个请求加的，那么在客户端在解锁的时候就可以进行校验是否是同一个客户端。</p>
<h4 id="解锁代码分析"><a href="#解锁代码分析" class="headerlink" title="解锁代码分析"></a>解锁代码分析</h4><p>将 Lua 代码传到 jedis.eval()方法里，并使参数 KEYS[1]赋值为 lockKey，ARGV[1]赋值为 requestId。在执行的时候，首先会获取锁对应的 value 值，检查是否与 requestId 相等，如果相等则解锁（删除 key）。</p>
<h4 id="存在的风险"><a href="#存在的风险" class="headerlink" title="存在的风险"></a>存在的风险</h4><p>如果存储锁对应 key 的那个节点挂了的话，就可能存在丢失锁的风险，导致出现多个客户端持有锁的情况，这样就不能实现资源的独享了。</p>
<ol>
<li>客户端 A 从 master 获取到锁</li>
<li>在 master 将锁同步到 slave 之前，master 宕掉了（Redis 的主从同步通常是异步的）。<br>主从切换，slave 节点被晋级为 master 节点</li>
<li>客户端 B 取得了同一个资源被客户端 A 已经获取到的另外一个锁。导致存在同一时刻存不止一个线程获取到锁的情况。</li>
</ol>
<h4 id="redlock-算法出现"><a href="#redlock-算法出现" class="headerlink" title="redlock 算法出现"></a>redlock 算法出现</h4><p>这个场景是假设有一个 redis cluster，有 5 个 redis master 实例。然后执行如下步骤获取一把锁：</p>
<ol>
<li>获取当前时间戳，单位是毫秒；</li>
<li>跟上面类似，轮流尝试在每个 master 节点上创建锁，过期时间较短，一般就几十毫秒；</li>
<li>尝试在大多数节点上建立一个锁，比如 5 个节点就要求是 3 个节点 n &#x2F; 2 + 1；</li>
<li>客户端计算建立好锁的时间，如果建立锁的时间小于超时时间，就算建立成功了；</li>
<li>要是锁建立失败了，那么就依次之前建立过的锁删除；</li>
<li>只要别人建立了一把分布式锁，你就得不断轮询去尝试获取锁。</li>
</ol>
<p><img src="/img/posts/java/interview/6.png" alt="图片"></p>
<p>Redis 官方给出了以上两种基于 Redis 实现分布式锁的方法，详细说明可以查看：</p>
<blockquote>
<p><a href="https://redis.io/topics/distlock">https://redis.io/topics/distlock</a> 。</p>
</blockquote>
<h4 id="Redisson-实现"><a href="#Redisson-实现" class="headerlink" title="Redisson 实现"></a>Redisson 实现</h4><p>Redisson 是一个在 Redis 的基础上实现的 Java 驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的 Java 常用对象，还实现了可重入锁（Reentrant Lock）、公平锁（Fair Lock、联锁（MultiLock）、 红锁（RedLock）、 读写锁（ReadWriteLock）等，还提供了许多分布式服务。</p>
<p>Redisson 提供了使用 Redis 的最简单和最便捷的方法。Redisson 的宗旨是促进使用者对 Redis 的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。</p>
<p><strong>Redisson 分布式重入锁用法</strong></p>
<p>Redisson 支持单点模式、主从模式、哨兵模式、集群模式，这里以单点模式为例：</p>
<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token operator">//</span> <span class="token number">1.</span>构造redisson实现分布式锁必要的Config
Config config <span class="token operator">=</span> new <span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"redis://127.0.0.1:5379"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">//</span> <span class="token number">2.</span>构造RedissonClient
RedissonClient redissonClient <span class="token operator">=</span> Redisson<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">//</span> <span class="token number">3.</span>获取锁对象实例（无法保证是按线程的顺序获取到）
RLock rLock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">try</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>
     <span class="token operator">*</span> <span class="token number">4.</span>尝试获取锁
     <span class="token operator">*</span> waitTimeout 尝试获取锁的最大等待时间，超过这个值，则认为获取锁失败
     <span class="token operator">*</span> leaseTime   锁的持有时间<span class="token punctuation">,</span>超过这个时间锁会自动失效（值应设置为大于业务处理的时间，确保在锁有效期内业务能处理完）
     <span class="token operator">*</span><span class="token operator">/</span>
    boolean res <span class="token operator">=</span> rLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">(</span>long<span class="token punctuation">)</span>waitTimeout<span class="token punctuation">,</span> <span class="token punctuation">(</span>long<span class="token punctuation">)</span>leaseTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">//</span>成功获得锁，在这里处理业务
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span class="token function">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    throw new <span class="token function">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"aquire lock fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token function">finally</span><span class="token punctuation">&#123;</span>
    <span class="token operator">//</span>无论如何<span class="token punctuation">,</span> 最后都要解锁
    rLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>加锁流程图</p>
<p><img src="/img/posts/java/interview/7.png" alt="图片"></p>
<p>解锁流程图</p>
<p><img src="/img/posts/java/interview/8.png" alt="图片"></p>
<p>我们可以看到，RedissonLock 是可重入的，并且考虑了失败重试，可以设置锁的最大等待时间， 在实现上也做了一些优化，减少了无效的锁申请，提升了资源的利用率。</p>
<p>需要特别注意的是，RedissonLock 同样没有解决 节点挂掉的时候，存在丢失锁的风险的问题。而现实情况是有一些场景无法容忍的，所以 Redisson 提供了实现了 redlock 算法的 RedissonRedLock，RedissonRedLock 真正解决了单点失败的问题，代价是需要额外的为 RedissonRedLock 搭建 Redis 环境。</p>
<p>所以，如果业务场景可以容忍这种小概率的错误，则推荐使用 RedissonLock， 如果无法容忍，则推荐使用 RedissonRedLock。</p>
<h3 id="Redis-面试常见问答"><a href="#Redis-面试常见问答" class="headerlink" title="Redis 面试常见问答"></a>Redis 面试常见问答</h3><h4 id="什么是缓存雪崩？怎么解决？"><a href="#什么是缓存雪崩？怎么解决？" class="headerlink" title="什么是缓存雪崩？怎么解决？"></a>什么是缓存雪崩？怎么解决？</h4><p><img src="/img/posts/java/interview/9.png" alt="图片"></p>
<p>通常，我们会使用缓存用于缓冲对 DB 的冲击，如果缓存宕机，所有请求将直接打在 DB，造成 DB 宕机——从而导致整个系统宕机。</p>
<p><strong>如何解决呢？</strong></p>
<p><img src="/img/posts/java/interview/10.png" alt="图片"></p>
<p><strong>2 种策略（同时使用）：</strong></p>
<ul>
<li>对缓存做高可用，防止缓存宕机</li>
<li>使用断路器，如果缓存宕机，为了防止系统全部宕机，限制部分流量进入 DB，保证部分可用，其余的请求返回断路器的默认值。</li>
</ul>
<h4 id="什么是缓存穿透？怎么解决？"><a href="#什么是缓存穿透？怎么解决？" class="headerlink" title="什么是缓存穿透？怎么解决？"></a>什么是缓存穿透？怎么解决？</h4><p><strong>解释 1：</strong>缓存查询一个没有的 key，同时数据库也没有，如果黑客大量的使用这种方式，那么就会导致 DB 宕机。</p>
<p><strong>解决方案：</strong>我们可以使用一个默认值来防止，例如，当访问一个不存在的 key，然后再去访问数据库，还是没有，那么就在缓存里放一个占位符，下次来的时候，检查这个占位符，如果发生时占位符，就不去数据库查询了，防止 DB 宕机。</p>
<p><strong>解释 2：</strong>大量请求查询一个刚刚失效的 key，导致 DB 压力倍增，可能导致宕机，但实际上，查询的都是相同的数据。</p>
<p><strong>解决方案：</strong>可以在这些请求代码加上双重检查锁。但是那个阶段的请求会变慢。不过总比 DB 宕机好。</p>
<h4 id="什么是缓存并发竞争？怎么解决？"><a href="#什么是缓存并发竞争？怎么解决？" class="headerlink" title="什么是缓存并发竞争？怎么解决？"></a>什么是缓存并发竞争？怎么解决？</h4><p><strong>解释：</strong>多个客户端写一个 key，如果顺序错了，数据就不对了。但是顺序我们无法控制。</p>
<p><strong>解决方案：</strong>使用分布式锁，例如 zk，同时加入数据的时间戳。同一时刻，只有抢到锁的客户端才能写入，同时，写入时，比较当前数据的时间戳和缓存中数据的时间戳。</p>
<p>####什么是缓存和数据库双写不一致？怎么解决？</p>
<p>解释：连续写数据库和缓存，但是操作期间，出现并发了，数据不一致了。</p>
<p>通常，更新缓存和数据库有以下几种顺序：</p>
<ul>
<li>先更新数据库，再更新缓存。</li>
<li>先删缓存，再更新数据库。</li>
<li>先更新数据库，再删除缓存。</li>
</ul>
<p><em>三种方式的优劣来看一下：</em></p>
<h4 id="先更新数据库，再更新缓存"><a href="#先更新数据库，再更新缓存" class="headerlink" title="先更新数据库，再更新缓存"></a>先更新数据库，再更新缓存</h4><p>这么做的问题是：当有 2 个请求同时更新数据，那么如果不使用分布式锁，将无法控制最后缓存的值到底是多少。也就是并发写的时候有问题。</p>
<h4 id="先删缓存，Redis-面试常见问答再更新数据库"><a href="#先删缓存，Redis-面试常见问答再更新数据库" class="headerlink" title="先删缓存，Redis 面试常见问答再更新数据库"></a>先删缓存，Redis 面试常见问答再更新数据库</h4><p>这么做的问题：如果在删除缓存后，有客户端读数据，将可能读到旧数据，并有可能设置到缓存中，导致缓存中的数据一直是老数据。</p>
<p>有 2 种解决方案：</p>
<ul>
<li>使用“双删”，即删更删，最后一步的删除作为异步操作，就是防止有客户端读取的时候设置了旧值。</li>
<li>使用队列，当这个 key 不存在时，将其放入队列，串行执行，必须等到更新数据库完毕才能读取数据。</li>
</ul>
<p>总的来讲，比较麻烦。</p>
<h4 id="先更新数据库，再删除缓存"><a href="#先更新数据库，再删除缓存" class="headerlink" title="先更新数据库，再删除缓存"></a>先更新数据库，再删除缓存</h4><p>这个实际是常用的方案，但是有很多人不知道，这里介绍一下，这个叫 Cache Aside Pattern，老外发明的。如果先更新数据库，再删除缓存，那么就会出现更新数据库之前有瞬间数据不是很及时。</p>
<p>同时，如果在更新之前，缓存刚好失效了，读客户端有可能读到旧值，然后在写客户端删除结束后再次设置了旧值，非常巧合的情况。</p>
<p>有 2 个前提条件：</p>
<ul>
<li>缓存在写之前的时候失效，同时，在写客户度删除操作结束后，放置旧数据 —— 也就是读比写慢。</li>
<li>设置有的写操作还会锁表</li>
</ul>
<p>所以，这个很难出现，但是如果出现了怎么办？使用双删！！！记录更新期间有没有客户端读数据库，如果有，在更新完数据库之后，执行延迟删除。<br>还有一种可能，如果执行更新数据库，准备执行删除缓存时，服务挂了，执行删除失败怎么办？？？<br>这就坑了！！！不过可以通过订阅数据库的 binlog 来删除。</p>
<h3 id="谈谈-Redis-的过期策略"><a href="#谈谈-Redis-的过期策略" class="headerlink" title="谈谈 Redis 的过期策略"></a>谈谈 Redis 的过期策略</h3><p>在日常开发中，我们使用 Redis 存储 key 时通常会设置一个过期时间，但是 Redis 是怎么删除过期的 key，而且 Redis 是单线程的，删除 key 会不会造成阻塞。要搞清楚这些，就要了解 Redis 的过期策略和内存淘汰机制。</p>
<p><strong>Redis 采用的是定期删除 + 懒惰删除策略。</strong></p>
<h4 id="定期删除策略"><a href="#定期删除策略" class="headerlink" title="定期删除策略"></a>定期删除策略</h4><p>Redis 会将每个设置了过期时间的 key 放入到一个独立的字典中，默认每 100ms 进行一次过期扫描：</p>
<ol>
<li>随机抽取 20 个 key</li>
<li>删除这 20 个 key 中过期的 key</li>
<li>如果过期的 key 比例超过 1&#x2F;4，就重复步骤 1，继续删除。</li>
</ol>
<p><strong>为什不扫描所有的 key？</strong></p>
<p>Redis 是单线程，全部扫描岂不是卡死了。而且为了防止每次扫描过期的 key 比例都超过 1&#x2F;4，导致不停循环卡死线程，Redis 为每次扫描添加了上限时间，默认是 25ms。</p>
<p>如果客户端将超时时间设置的比较短，比如 10ms，那么就会出现大量的链接因为超时而关闭，业务端就会出现很多异常。而且这时你还无法从 Redis 的 slowlog 中看到慢查询记录，因为慢查询指的是逻辑处理过程慢，不包含等待时间。</p>
<p>如果在同一时间出现大面积 key 过期，Redis 循环多次扫描过期词典，直到过期的 key 比例小于 1&#x2F;4。这会导致卡顿，而且在高并发的情况下，可能会导致缓存雪崩。</p>
<p><strong>为什么 Redis 为每次扫描添的上限时间是 25ms，还会出现上面的情况？</strong></p>
<p>因为 Redis 是单线程，每个请求处理都需要排队，而且由于 Redis 每次扫描都是 25ms，也就是每个请求最多 25ms，100 个请求就是 2500ms。</p>
<p>如果有大批量的 key 过期，要给过期时间设置一个随机范围，而不宜全部在同一时间过期，分散过期处理的压力。</p>
<h4 id="从库的过期策略"><a href="#从库的过期策略" class="headerlink" title="从库的过期策略"></a>从库的过期策略</h4><p>从库不会进行过期扫描，从库对过期的处理是被动的。主库在 key 到期时，会在 AOF 文件里增加一条 del 指令，同步到所有的从库，从库通过执行这条 del 指令来删除过期的 key。</p>
<p>因为指令同步是异步进行的，所以主库过期的 key 的 del 指令没有及时同步到从库的话，会出现主从数据的不一致，主库没有的数据在从库里还存在。</p>
<h4 id="懒惰删除策略"><a href="#懒惰删除策略" class="headerlink" title="懒惰删除策略"></a>懒惰删除策略</h4><p><strong>Redis 为什么要懒惰删除(lazy free)？</strong></p>
<p>删除指令 del 会直接释放对象的内存，大部分情况下，这个指令非常快，没有明显延迟。不过如果删除的 key 是一个非常大的对象，比如一个包含了千万元素的 hash，又或者在使用 FLUSHDB 和 FLUSHALL 删除包含大量键的数据库时，那么删除操作就会导致单线程卡顿。</p>
<p>redis 4.0 引入了 lazyfree 的机制，它可以将删除键或数据库的操作放在后台线程里执行， 从而尽可能地避免服务器阻塞。</p>
<h4 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h4><p>unlink 指令，它能对删除操作进行懒处理，丢给后台线程来异步回收内存。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> unlink key
OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="flush"><a href="#flush" class="headerlink" title="flush"></a>flush</h4><p>flushdb 和 flushall 指令，用来清空数据库，这也是极其缓慢的操作。Redis 4.0 同样给这两个指令也带来了异步化，在指令后面增加 async 参数就可以将整棵大树连根拔起，扔给后台线程慢慢焚烧。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> flushall async
OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="异步队列"><a href="#异步队列" class="headerlink" title="异步队列"></a>异步队列</h4><p>主线程将对象的引用从「大树」中摘除后，会将这个 key 的内存回收操作包装成一个任务，塞进异步任务队列，后台线程会从这个异步队列中取任务。任务队列被主线程和异步线程同时操作，所以必须是一个线程安全的队列。</p>
<p>不是所有的 unlink 操作都会延后处理，如果对应 key 所占用的内存很小，延后处理就没有必要了，这时候 Redis 会将对应的 key 内存立即回收，跟 del 指令一样。</p>
<h4 id="更多异步删除点"><a href="#更多异步删除点" class="headerlink" title="更多异步删除点"></a>更多异步删除点</h4><p>Redis 回收内存除了 del 指令和 flush 之外，还会存在于在 key 的过期、LRU 淘汰、rename 指令以及从库全量同步时接受完 rdb 文件后会立即进行的 flush 操作。</p>
<p>Redis4.0 为这些删除点也带来了异步删除机制，打开这些点需要额外的配置选项。</p>
<ul>
<li>slave-lazy-flush 从库接受完 rdb 文件后的 flush 操作</li>
<li>lazyfree-lazy-eviction 内存达到 maxmemory 时进行淘汰</li>
<li>lazyfree-lazy-expire key 过期删除</li>
<li>lazyfree-lazy-server-del rename 指令删除 destKey</li>
</ul>
<h4 id="内存淘汰机制"><a href="#内存淘汰机制" class="headerlink" title="内存淘汰机制"></a>内存淘汰机制</h4><p>Redis 的内存占用会越来越高。Redis 为了限制最大使用内存，提供了 redis.conf 中的<br>配置参数 maxmemory。当内存超出 maxmemory，<strong>Redis 提供了几种内存淘汰机制让用户选择，配置 maxmemory-policy：</strong></p>
<ul>
<li><strong>noeviction：</strong>当内存超出 maxmemory，写入请求会报错，但是删除和读请求可以继续。（使用这个策略，疯了吧）</li>
<li><strong>allkeys-lru：</strong>当内存超出 maxmemory，在所有的 key 中，移除最少使用的 key。只把 Redis 既当缓存是使用这种策略。（推荐）。</li>
<li><strong>allkeys-random：</strong>当内存超出 maxmemory，在所有的 key 中，随机移除某个 key。（应该没人用吧）</li>
<li><strong>volatile-lru：</strong>当内存超出 maxmemory，在设置了过期时间 key 的字典中，移除最少使用的 key。把 Redis 既当缓存，又做持久化的时候使用这种策略。</li>
<li><strong>volatile-random：</strong>当内存超出 maxmemory，在设置了过期时间 key 的字典中，随机移除某个 key。</li>
<li><strong>volatile-ttl：</strong>当内存超出 maxmemory，在设置了过期时间 key 的字典中，优先移除 ttl 小的。</li>
</ul>
<h4 id="LRU-算法"><a href="#LRU-算法" class="headerlink" title="LRU 算法"></a>LRU 算法</h4><p>实现 LRU 算法除了需要 key&#x2F;value 字典外，还需要附加一个链表，链表中的元素按照一定的顺序进行排列。当空间满的时候，会踢掉链表尾部的元素。当字典的某个元素被访问时，它在链表中的位置会被移动到表头。所以链表的元素排列顺序就是元素最近被访问的时间顺序。</p>
<p>使用 Python 的 OrderedDict(双向链表 + 字典) 来实现一个简单的 LRU 算法：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict

<span class="token keyword">class</span> <span class="token class-name">LRUDict</span><span class="token punctuation">(</span>OrderedDict<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity
        self<span class="token punctuation">.</span>items <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        old_value <span class="token operator">=</span> self<span class="token punctuation">.</span>items<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        <span class="token keyword">if</span> old_value <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>items<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>items<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>capacity<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>items<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>items<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span>last<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>items<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value

    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>
        value <span class="token operator">=</span> self<span class="token punctuation">.</span>items<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        <span class="token keyword">if</span> value <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>items<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>items<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token keyword">return</span> value

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>items<span class="token punctuation">)</span>


d <span class="token operator">=</span> LRUDict<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i
<span class="token keyword">print</span> d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="近似-LRU-算法"><a href="#近似-LRU-算法" class="headerlink" title="近似 LRU 算法"></a>近似 LRU 算法</h4><p>Redis 使用的并不是完全 LRU 算法。不使用 LRU 算法，是为了节省内存，Redis 采用的是随机 LRU 算法，Redis 为每一个 key 增加了一个 24 bit 的字段，用来记录这个 key 最后一次被访问的时间戳。</p>
<p>注意 Redis 的 LRU 淘汰策略是懒惰处理，也就是不会主动执行淘汰策略，当 Redis 执行写操作时，发现内存超出 maxmemory，就会执行 LRU 淘汰算法。这个算法就是随机采样出 5(默认值)个 key，然后移除最旧的 key，如果移除后内存还是超出 maxmemory，那就继续随机采样淘汰，直到内存低于 maxmemory 为止。</p>
<p>如何采样就是看 maxmemory-policy 的配置，如果是 allkeys 就是从所有的 key 字典中随机，如果是 volatile 就从带过期时间的 key 字典中随机。每次采样多少个 key 看的是 maxmemory_samples 的配置，默认为 5。</p>
<h4 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h4><p>Redis 4.0 里引入了一个新的淘汰策略 —— LFU（Least Frequently Used） 模式，作者认为它比 LRU 更加优秀。</p>
<p>LFU 表示按最近的访问频率进行淘汰，它比 LRU 更加精准地表示了一个 key 被访问的热度。</p>
<p>如果一个 key 长时间不被访问，只是刚刚偶然被用户访问了一下，那么在使用 LRU 算法下它是不容易被淘汰的，因为 LRU 算法认为当前这个 key 是很热的。而 LFU 是需要追踪最近一段时间的访问频率，如果某个 key 只是偶然被访问一次是不足以变得很热的，它需要在近期一段时间内被访问很多次才有机会被认为很热。</p>
<p><strong>Redis 对象的热度</strong></p>
<p>Redis 的所有对象结构头中都有一个 24bit 的字段，这个字段用来记录对象的热度。</p>
<pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token operator">//</span> redis 的对象头
typedef struct <span class="token function">redisObject</span> <span class="token punctuation">&#123;</span>
    unsigned type<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">//</span> 对象类型如 zset<span class="token operator">/</span>set<span class="token operator">/</span>hash 等等
    unsigned encoding<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">//</span> 对象编码如 ziplist<span class="token operator">/</span>intset<span class="token operator">/</span>skiplist 等等
    unsigned lru<span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">;</span> <span class="token operator">//</span> 对象的「热度」
    int refcount<span class="token punctuation">;</span> <span class="token operator">//</span> 引用计数
    void <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token operator">//</span> 对象的 body
<span class="token punctuation">&#125;</span> robj<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>LRU 模式</strong></p>
<p>在 LRU 模式下，lru 字段存储的是 Redis 时钟 server.lruclock，Redis 时钟是一个 24bit 的整数，默认是 Unix 时间戳对 2^24 取模的结果，大约 97 天清零一次。当某个 key 被访问一次，它的对象头的 lru 字段值就会被更新为 server.lruclock。</p>
<p><strong>LFU 模式</strong></p>
<p>在 LFU 模式下，lru 字段 24 个 bit 用来存储两个值，分别是 ldt(last decrement time) 和 logc(logistic counter)。</p>
<p>logc 是 8 个 bit，用来存储访问频次，因为 8 个 bit 能表示的最大整数值为 255，存储频次肯定远远不够，所以这 8 个 bit 存储的是频次的对数值，并且这个值还会随时间衰减。如果它的值比较小，那么就很容易被回收。为了确保新创建的对象不被回收，新对象的这 8 个 bit 会初始化为一个大于零的值，默认是 LFU_INIT_VAL&#x3D;5。</p>
<p>ldt 是 16 个位，用来存储上一次 logc 的更新时间，因为只有 16 位，所以精度不可能很高。它取的是分钟时间戳对 2^16 进行取模，大约每隔 45 天就会折返。</p>
<p>同 LRU 模式一样，我们也可以使用这个逻辑计算出对象的空闲时间，只不过精度是分钟级别的。图中的 server.unixtime 是当前 redis 记录的系统时间戳，和 server.lruclock 一样，它也是每毫秒更新一次。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java 面试</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s 网络策略</title>
    <url>/2023/06/12/k8s/study/k8s%20%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<p>如果你希望在 IP 地址或端口层面（OSI 第 3 层或第 4 层）控制网络流量， 则你可以考虑为集群中特定应用使用 Kubernetes 网络策略（NetworkPolicy）。 NetworkPolicy 是一种以应用为中心的结构，允许你设置如何允许 <a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/">Pod</a> 与网络上的各类网络“实体” （我们这里使用实体以避免过度使用诸如“端点”和“服务”这类常用术语， 这些术语在 Kubernetes 中有特定含义）通信。 NetworkPolicy 适用于一端或两端与 Pod 的连接，与其他连接无关。</p>
<p>Pod 可以通信的 Pod 是通过如下三个标识符的组合来辩识的：</p>
<ol>
<li>其他被允许的 Pods（例外：Pod 无法阻塞对自身的访问）</li>
<li>被允许的名字空间</li>
<li>IP 组块（例外：与 Pod 运行所在的节点的通信总是被允许的， 无论 Pod 或节点的 IP 地址）</li>
</ol>
<p>在定义基于 Pod 或名字空间的 NetworkPolicy 时， 你会使用<a href="https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/">选择算符</a>来设定哪些流量可以进入或离开与该算符匹配的 Pod。 另外，当创建基于 IP 的 NetworkPolicy 时，我们基于 IP 组块（CIDR 范围）来定义策略。</p>
<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>网络策略通过<a href="https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/">网络插件</a>来实现。 要使用网络策略，你必须使用支持 NetworkPolicy 的网络解决方案。 创建一个 NetworkPolicy 资源对象而没有控制器来使它生效的话，是没有任何作用的。</p>
<h2 id="Pod-隔离的两种类型"><a href="#Pod-隔离的两种类型" class="headerlink" title="Pod 隔离的两种类型"></a>Pod 隔离的两种类型</h2><p>Pod 有两种隔离: 出口的隔离和入口的隔离。它们涉及到可以建立哪些连接。 这里的“隔离”不是绝对的，而是意味着“有一些限制”。 另外的，“非隔离方向”意味着在所述方向上没有限制。这两种隔离（或不隔离）是独立声明的， 并且都与从一个 Pod 到另一个 Pod 的连接有关。</p>
<p>默认情况下，一个 Pod 的出口是非隔离的，即所有外向连接都是被允许的。如果有任何的 NetworkPolicy 选择该 Pod 并在其 <code>policyTypes</code> 中包含 “Egress”，则该 Pod 是出口隔离的， 我们称这样的策略适用于该 Pod 的出口。当一个 Pod 的出口被隔离时， 唯一允许的来自 Pod 的连接是适用于出口的 Pod 的某个 NetworkPolicy 的 <code>egress</code> 列表所允许的连接。 这些 <code>egress</code> 列表的效果是相加的。</p>
<p>默认情况下，一个 Pod 对入口是非隔离的，即所有入站连接都是被允许的。如果有任何的 NetworkPolicy 选择该 Pod 并在其 <code>policyTypes</code> 中包含 “Ingress”，则该 Pod 被隔离入口， 我们称这种策略适用于该 Pod 的入口。当一个 Pod 的入口被隔离时，唯一允许进入该 Pod 的连接是来自该 Pod 节点的连接和适用于入口的 Pod 的某个 NetworkPolicy 的 <code>ingress</code> 列表所允许的连接。这些 <code>ingress</code> 列表的效果是相加的。</p>
<p>网络策略是相加的，所以不会产生冲突。如果策略适用于 Pod 某一特定方向的流量， Pod 在对应方向所允许的连接是适用的网络策略所允许的集合。 因此，评估的顺序不影响策略的结果。</p>
<p>要允许从源 Pod 到目的 Pod 的连接，源 Pod 的出口策略和目的 Pod 的入口策略都需要允许连接。 如果任何一方不允许连接，建立连接将会失败。</p>
<h2 id="NetworkPolicy-资源"><a href="#NetworkPolicy-资源" class="headerlink" title="NetworkPolicy 资源"></a>NetworkPolicy 资源</h2><p>参阅 <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#networkpolicy-v1-networking-k8s-io">NetworkPolicy</a> 来了解资源的完整定义。</p>
<p>下面是一个 NetworkPolicy 的示例:</p>
<p><a href="https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/networkpolicy.yaml"><code>service/networking/networkpolicy.yaml</code></a></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> NetworkPolicy
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>network<span class="token punctuation">-</span>policy
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">podSelector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">role</span><span class="token punctuation">:</span> db
  <span class="token key atrule">policyTypes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> Ingress
    <span class="token punctuation">-</span> Egress
  <span class="token key atrule">ingress</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">from</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">ipBlock</span><span class="token punctuation">:</span>
            <span class="token key atrule">cidr</span><span class="token punctuation">:</span> 172.17.0.0/16
            <span class="token key atrule">except</span><span class="token punctuation">:</span>
              <span class="token punctuation">-</span> 172.17.1.0/24
        <span class="token punctuation">-</span> <span class="token key atrule">namespaceSelector</span><span class="token punctuation">:</span>
            <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
              <span class="token key atrule">project</span><span class="token punctuation">:</span> myproject
        <span class="token punctuation">-</span> <span class="token key atrule">podSelector</span><span class="token punctuation">:</span>
            <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
              <span class="token key atrule">role</span><span class="token punctuation">:</span> frontend
      <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
          <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
  <span class="token key atrule">egress</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">ipBlock</span><span class="token punctuation">:</span>
            <span class="token key atrule">cidr</span><span class="token punctuation">:</span> 10.0.0.0/24
      <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
          <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5978</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>说明：</strong></p>
<p>除非选择支持网络策略的网络解决方案，否则将上述示例发送到API服务器没有任何效果。</p>
<p><strong>必需字段</strong>：与所有其他的 Kubernetes 配置一样，NetworkPolicy 需要 <code>apiVersion</code>、 <code>kind</code> 和 <code>metadata</code> 字段。关于配置文件操作的一般信息， 请参考<a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-pod-configmap/">配置 Pod 以使用 ConfigMap</a> 和<a href="https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/object-management">对象管理</a>。</p>
<p><strong>spec</strong>：NetworkPolicy <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status">规约</a> 中包含了在一个名字空间中定义特定网络策略所需的所有信息。</p>
<p><strong>podSelector</strong>：每个 NetworkPolicy 都包括一个 <code>podSelector</code>， 它对该策略所适用的一组 Pod 进行选择。示例中的策略选择带有 “role&#x3D;db” 标签的 Pod。 空的 <code>podSelector</code> 选择名字空间下的所有 Pod。</p>
<p><strong>policyTypes</strong>：每个 NetworkPolicy 都包含一个 <code>policyTypes</code> 列表，其中包含 <code>Ingress</code> 或 <code>Egress</code> 或两者兼具。<code>policyTypes</code> 字段表示给定的策略是应用于进入所选 Pod 的入站流量还是来自所选 Pod 的出站流量，或两者兼有。 如果 NetworkPolicy 未指定 <code>policyTypes</code> 则默认情况下始终设置 <code>Ingress</code>； 如果 NetworkPolicy 有任何出口规则的话则设置 <code>Egress</code>。</p>
<p><strong>ingress</strong>：每个 NetworkPolicy 可包含一个 <code>ingress</code> 规则的白名单列表。 每个规则都允许同时匹配 <code>from</code> 和 <code>ports</code> 部分的流量。示例策略中包含一条简单的规则： 它匹配某个特定端口，来自三个来源中的一个，第一个通过 <code>ipBlock</code> 指定，第二个通过 <code>namespaceSelector</code> 指定，第三个通过 <code>podSelector</code> 指定。</p>
<p><strong>egress</strong>：每个 NetworkPolicy 可包含一个 <code>egress</code> 规则的白名单列表。 每个规则都允许匹配 <code>to</code> 和 <code>port</code> 部分的流量。该示例策略包含一条规则， 该规则将指定端口上的流量匹配到 <code>10.0.0.0/24</code> 中的任何目的地。</p>
<p>所以，该网络策略示例:</p>
<ol>
<li>隔离 <code>default</code> 名字空间下 <code>role=db</code> 的 Pod （如果它们不是已经被隔离的话）。</li>
<li>（Ingress 规则）允许以下 Pod 连接到 <code>default</code> 名字空间下的带有 <code>role=db</code> 标签的所有 Pod 的 6379 TCP 端口：<ul>
<li><code>default</code> 名字空间下带有 <code>role=frontend</code> 标签的所有 Pod</li>
<li>带有 <code>project=myproject</code> 标签的所有名字空间中的 Pod</li>
<li>IP 地址范围为 172.17.0.0–172.17.0.255 和 172.17.2.0–172.17.255.255 （即，除了 172.17.1.0&#x2F;24 之外的所有 172.17.0.0&#x2F;16）</li>
</ul>
</li>
<li>（Egress 规则）允许 <code>default</code> 名字空间中任何带有标签 <code>role=db</code> 的 Pod 到 CIDR 10.0.0.0&#x2F;24 下 5978 TCP 端口的连接。</li>
</ol>
<p>参阅<a href="https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/declare-network-policy/">声明网络策略</a>演练了解更多示例。</p>
<h2 id="选择器-to-和-from-的行为"><a href="#选择器-to-和-from-的行为" class="headerlink" title="选择器 to 和 from 的行为"></a>选择器 <code>to</code> 和 <code>from</code> 的行为</h2><p>可以在 <code>ingress</code> 的 <code>from</code> 部分或 <code>egress</code> 的 <code>to</code> 部分中指定四种选择器：</p>
<p><strong>podSelector</strong>：此选择器将在与 NetworkPolicy 相同的名字空间中选择特定的 Pod，应将其允许作为入站流量来源或出站流量目的地。</p>
<p><strong>namespaceSelector</strong>：此选择器将选择特定的名字空间，应将所有 Pod 用作其入站流量来源或出站流量目的地。</p>
<p><strong>namespaceSelector 和 podSelector</strong>：一个指定 <code>namespaceSelector</code> 和 <code>podSelector</code> 的 <code>to</code>&#x2F;<code>from</code> 条目选择特定名字空间中的特定 Pod。 注意使用正确的 YAML 语法；下面的策略：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">...</span>
<span class="token key atrule">ingress</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">from</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">namespaceSelector</span><span class="token punctuation">:</span>
      <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
        <span class="token key atrule">user</span><span class="token punctuation">:</span> alice
    <span class="token key atrule">podSelector</span><span class="token punctuation">:</span>
      <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
        <span class="token key atrule">role</span><span class="token punctuation">:</span> client
<span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此策略在 <code>from</code> 数组中仅包含一个元素，只允许来自标有 <code>role=client</code> 的 Pod 且该 Pod 所在的名字空间中标有 <code>user=alice</code> 的连接。但是<strong>这项</strong>策略：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">...</span>
<span class="token key atrule">ingress</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">from</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">namespaceSelector</span><span class="token punctuation">:</span>
      <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
        <span class="token key atrule">user</span><span class="token punctuation">:</span> alice
  <span class="token punctuation">-</span> <span class="token key atrule">podSelector</span><span class="token punctuation">:</span>
      <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
        <span class="token key atrule">role</span><span class="token punctuation">:</span> client
<span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>它在 <code>from</code> 数组中包含两个元素，允许来自本地名字空间中标有 <code>role=client</code> 的 Pod 的连接，<strong>或</strong>来自任何名字空间中标有 <code>user=alice</code> 的任何 Pod 的连接。</p>
<p>如有疑问，请使用 <code>kubectl describe</code> 查看 Kubernetes 如何解释该策略。</p>
<p><strong>ipBlock</strong>：此选择器将选择特定的 IP CIDR 范围以用作入站流量来源或出站流量目的地。 这些应该是集群外部 IP，因为 Pod IP 存在时间短暂的且随机产生。</p>
<p>集群的入站和出站机制通常需要重写数据包的源 IP 或目标 IP。 在发生这种情况时，不确定在 NetworkPolicy 处理之前还是之后发生， 并且对于网络插件、云提供商、<code>Service</code> 实现等的不同组合，其行为可能会有所不同。</p>
<p>对入站流量而言，这意味着在某些情况下，你可以根据实际的原始源 IP 过滤传入的数据包， 而在其他情况下，NetworkPolicy 所作用的 <code>源IP</code> 则可能是 <code>LoadBalancer</code> 或 Pod 的节点等。</p>
<p>对于出站流量而言，这意味着从 Pod 到被重写为集群外部 IP 的 <code>Service</code> IP 的连接可能会或可能不会受到基于 <code>ipBlock</code> 的策略的约束。</p>
<h2 id="默认策略"><a href="#默认策略" class="headerlink" title="默认策略"></a>默认策略</h2><p>默认情况下，如果名字空间中不存在任何策略，则所有进出该名字空间中 Pod 的流量都被允许。 以下示例使你可以更改该名字空间中的默认行为。</p>
<h3 id="默认拒绝所有入站流量"><a href="#默认拒绝所有入站流量" class="headerlink" title="默认拒绝所有入站流量"></a>默认拒绝所有入站流量</h3><p>你可以通过创建选择所有 Pod 但不允许任何进入这些 Pod 的入站流量的 NetworkPolicy 来为名字空间创建 “default” 隔离策略。</p>
<p><a href="https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-default-deny-ingress.yaml"><code>service/networking/network-policy-default-deny-ingress.yaml</code></a> </p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> NetworkPolicy
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>deny<span class="token punctuation">-</span>ingress
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">podSelector</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token key atrule">policyTypes</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> Ingress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这确保即使没有被任何其他 NetworkPolicy 选择的 Pod 仍将被隔离以进行入口。 此策略不影响任何 Pod 的出口隔离。</p>
<h3 id="允许所有入站流量"><a href="#允许所有入站流量" class="headerlink" title="允许所有入站流量"></a>允许所有入站流量</h3><p>如果你想允许一个名字空间中所有 Pod 的所有入站连接，你可以创建一个明确允许的策略。</p>
<p><a href="https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-allow-all-ingress.yaml"><code>service/networking/network-policy-allow-all-ingress.yaml</code></a> </p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> NetworkPolicy
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> allow<span class="token punctuation">-</span>all<span class="token punctuation">-</span>ingress
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">podSelector</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token key atrule">ingress</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token key atrule">policyTypes</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> Ingress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有了这个策略，任何额外的策略都不会导致到这些 Pod 的任何入站连接被拒绝。 此策略对任何 Pod 的出口隔离没有影响。</p>
<h3 id="默认拒绝所有出站流量"><a href="#默认拒绝所有出站流量" class="headerlink" title="默认拒绝所有出站流量"></a>默认拒绝所有出站流量</h3><p>你可以通过创建选择所有容器但不允许来自这些容器的任何出站流量的 NetworkPolicy 来为名字空间创建 “default” 隔离策略。</p>
<p><a href="https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-default-deny-egress.yaml"><code>service/networking/network-policy-default-deny-egress.yaml</code></a> </p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> NetworkPolicy
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>deny<span class="token punctuation">-</span>egress
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">podSelector</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token key atrule">policyTypes</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> Egress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此策略可以确保即使没有被其他任何 NetworkPolicy 选择的 Pod 也不会被允许流出流量。 此策略不会更改任何 Pod 的入站流量隔离行为。</p>
<h3 id="允许所有出站流量"><a href="#允许所有出站流量" class="headerlink" title="允许所有出站流量"></a>允许所有出站流量</h3><p>如果要允许来自名字空间中所有 Pod 的所有连接， 则可以创建一个明确允许来自该名字空间中 Pod 的所有出站连接的策略。</p>
<p><a href="https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-allow-all-egress.yaml"><code>service/networking/network-policy-allow-all-egress.yaml</code></a> </p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> NetworkPolicy
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> allow<span class="token punctuation">-</span>all<span class="token punctuation">-</span>egress
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">podSelector</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token key atrule">egress</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token key atrule">policyTypes</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> Egress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有了这个策略，任何额外的策略都不会导致来自这些 Pod 的任何出站连接被拒绝。 此策略对进入任何 Pod 的隔离没有影响。</p>
<h3 id="默认拒绝所有入站和所有出站流量"><a href="#默认拒绝所有入站和所有出站流量" class="headerlink" title="默认拒绝所有入站和所有出站流量"></a>默认拒绝所有入站和所有出站流量</h3><p>你可以为名字空间创建“默认”策略，以通过在该名字空间中创建以下 NetworkPolicy 来阻止所有入站和出站流量。</p>
<p><a href="https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/network-policy-default-deny-all.yaml"><code>service/networking/network-policy-default-deny-all.yaml</code></a></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> NetworkPolicy
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>deny<span class="token punctuation">-</span>all
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">podSelector</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token key atrule">policyTypes</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> Ingress
  <span class="token punctuation">-</span> Egress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此策略可以确保即使没有被其他任何 NetworkPolicy 选择的 Pod 也不会被允许入站或出站流量。</p>
<h2 id="SCTP-支持"><a href="#SCTP-支持" class="headerlink" title="SCTP 支持"></a>SCTP 支持</h2><p><strong>特性状态：</strong> <code>Kubernetes v1.20 [stable]</code></p>
<p>作为一个稳定特性，SCTP 支持默认是被启用的。 要在集群层面禁用 SCTP，你（或你的集群管理员）需要为 API 服务器指定 <code>--feature-gates=SCTPSupport=false,...</code> 来禁用 <code>SCTPSupport</code> <a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/feature-gates/">特性门控</a>。 启用该特性门控后，用户可以将 NetworkPolicy 的 <code>protocol</code> 字段设置为 <code>SCTP</code>。</p>
<p><strong>说明：</strong></p>
<p>你必须使用支持 SCTP 协议 NetworkPolicy 的 <a href="https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/">CNI</a> 插件。</p>
<h2 id="针对某个端口范围"><a href="#针对某个端口范围" class="headerlink" title="针对某个端口范围"></a>针对某个端口范围</h2><p><strong>特性状态：</strong> <code>Kubernetes v1.25 [stable]</code></p>
<p>在编写 NetworkPolicy 时，你可以针对一个端口范围而不是某个固定端口。</p>
<p>这一目的可以通过使用 <code>endPort</code> 字段来实现，如下例所示：</p>
<p><a href="https://raw.githubusercontent.com/kubernetes/website/main/content/zh-cn/examples/service/networking/networkpolicy-multiport-egress.yaml"><code>service/networking/networkpolicy-multiport-egress.yaml</code></a> </p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> NetworkPolicy
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> multi<span class="token punctuation">-</span>port<span class="token punctuation">-</span>egress
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">podSelector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">role</span><span class="token punctuation">:</span> db
  <span class="token key atrule">policyTypes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> Egress
  <span class="token key atrule">egress</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">ipBlock</span><span class="token punctuation">:</span>
            <span class="token key atrule">cidr</span><span class="token punctuation">:</span> 10.0.0.0/24
      <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
          <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">32000</span>
          <span class="token key atrule">endPort</span><span class="token punctuation">:</span> <span class="token number">32768</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的规则允许名字空间 <code>default</code> 中所有带有标签 <code>role=db</code> 的 Pod 使用 TCP 协议与 <code>10.0.0.0/24</code> 范围内的 IP 通信，只要目标端口介于 32000 和 32768 之间就可以。</p>
<p>使用此字段时存在以下限制：</p>
<ul>
<li><code>endPort</code> 字段必须等于或者大于 <code>port</code> 字段的值。</li>
<li>只有在定义了 <code>port</code> 时才能定义 <code>endPort</code>。</li>
<li>两个字段的设置值都只能是数字。</li>
</ul>
<p><strong>说明：</strong></p>
<p>你的集群所使用的 <a href="https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/">CNI</a> 插件必须支持在 NetworkPolicy 规约中使用 <code>endPort</code> 字段。 如果你的<a href="https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/">网络插件</a>不支持 <code>endPort</code> 字段，而你指定了一个包含 <code>endPort</code> 字段的 NetworkPolicy， 策略只对单个 <code>port</code> 字段生效。</p>
<h2 id="按标签选择多个命名空间"><a href="#按标签选择多个命名空间" class="headerlink" title="按标签选择多个命名空间"></a>按标签选择多个命名空间</h2><p>在这种情况下，你的 <code>Egress</code> NetworkPolicy 使用名字空间的标签名称来将多个名字空间作为其目标。 为此，你需要为目标名字空间设置标签。例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl label namespace frontend <span class="token assign-left variable">namespace</span><span class="token operator">=</span>frontend
kubectl label namespace backend <span class="token assign-left variable">namespace</span><span class="token operator">=</span>backend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在 NetworkPolicy 文档中的 namespaceSelector 下添加标签。例如：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> NetworkPolicy
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> egress<span class="token punctuation">-</span>namespaces
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">podSelector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp
  <span class="token key atrule">policyTypes</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> Egress
  <span class="token key atrule">egress</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> <span class="token key atrule">to</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> <span class="token key atrule">namespaceSelector</span><span class="token punctuation">:</span>
       <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>
       <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> namespace
         <span class="token key atrule">operator</span><span class="token punctuation">:</span> In
         <span class="token key atrule">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"frontend"</span><span class="token punctuation">,</span> <span class="token string">"backend"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>说明：</strong></p>
<p>你不可以在 NetworkPolicy 中直接指定命名空间的名称。 你必须使用带有 <code>matchLabels</code> 或 <code>matchExpressions</code> 的 <code>namespaceSelector</code> 来根据标签选择命名空间。</p>
<h2 id="基于名字指向某名字空间"><a href="#基于名字指向某名字空间" class="headerlink" title="基于名字指向某名字空间"></a>基于名字指向某名字空间</h2><p><strong>特性状态：</strong> <code>Kubernetes 1.22 [stable]</code></p>
<p>只要 <code>NamespaceDefaultLabelName</code> <a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/feature-gates/">特性门控</a>被启用， Kubernetes 控制面会在所有名字空间上设置一个不可变更的标签 <code>kubernetes.io/metadata.name</code>。该标签的值是名字空间的名称。</p>
<p>如果 NetworkPolicy 无法在某些对象字段中指向某名字空间， 你可以使用标准的标签方式来指向特定名字空间。</p>
<h2 id="通过网络策略（至少目前还）无法完成的工作"><a href="#通过网络策略（至少目前还）无法完成的工作" class="headerlink" title="通过网络策略（至少目前还）无法完成的工作"></a>通过网络策略（至少目前还）无法完成的工作</h2><p>到 Kubernetes 1.27 为止，NetworkPolicy API 还不支持以下功能， 不过你可能可以使用操作系统组件（如 SELinux、OpenVSwitch、IPTables 等等） 或者第七层技术（Ingress 控制器、服务网格实现）或准入控制器来实现一些替代方案。 如果你对 Kubernetes 中的网络安全性还不太了解，了解使用 NetworkPolicy API 还无法实现下面的用户场景是很值得的。</p>
<ul>
<li><p>强制集群内部流量经过某公用网关（这种场景最好通过服务网格或其他代理来实现）；</p>
</li>
<li><p>与 TLS 相关的场景（考虑使用服务网格或者 Ingress 控制器）；</p>
</li>
<li><p>特定于节点的策略（你可以使用 CIDR 来表达这一需求不过你无法使用节点在 Kubernetes 中的其他标识信息来辩识目标节点）；</p>
</li>
<li><p>基于名字来选择服务（不过，你可以使用 <a href="https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/">标签</a> 来选择目标 Pod 或名字空间，这也通常是一种可靠的替代方案）；</p>
</li>
<li><p>创建或管理由第三方来实际完成的“策略请求”；</p>
</li>
<li><p>实现适用于所有名字空间或 Pods 的默认策略（某些第三方 Kubernetes 发行版本或项目可以做到这点）；</p>
</li>
<li><p>高级的策略查询或者可达性相关工具；</p>
</li>
<li><p>生成网络安全事件日志的能力（例如，被阻塞或接收的连接请求）；</p>
</li>
<li><p>显式地拒绝策略的能力（目前，NetworkPolicy 的模型默认采用拒绝操作， 其唯一的能力是添加允许策略）；</p>
</li>
<li><p>禁止本地回路或指向宿主的网络流量（Pod 目前无法阻塞 localhost 访问， 它们也无法禁止来自所在节点的访问请求）。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
